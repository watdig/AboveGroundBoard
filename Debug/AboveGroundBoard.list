
AboveGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac7c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800ad3c  0800ad3c  0000bd3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b02c  0800b02c  0000d030  2**0
                  CONTENTS
  4 .ARM          00000000  0800b02c  0800b02c  0000d030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b02c  0800b02c  0000d030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b02c  0800b02c  0000c02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b030  0800b030  0000c030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  0800b034  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  20000030  0800b064  0000d030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  0800b064  0000d6a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d11  00000000  00000000  0000d058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002970  00000000  00000000  0001fd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  000226e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c00  00000000  00000000  00023638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b71  00000000  00000000  00024238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014174  00000000  00000000  0003ada9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eeb3  00000000  00000000  0004ef1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dddd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a20  00000000  00000000  000dde14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e1834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ad24 	.word	0x0800ad24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	0800ad24 	.word	0x0800ad24

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 fd05 	bl	8000e14 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fc45 	bl	8000ca4 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fcf7 	bl	8000e14 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fced 	bl	8000e14 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fc6f 	bl	8000d2c <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			@ (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fc65 	bl	8000d2c <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	0008      	movs	r0, r1
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 f8c3 	bl	8000604 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 f843 	bl	8000514 <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 f8b5 	bl	8000604 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 f8ab 	bl	8000604 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f851 	bl	8000564 <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f847 	bl	8000564 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_f2uiz>:
 80004e4:	219e      	movs	r1, #158	@ 0x9e
 80004e6:	b510      	push	{r4, lr}
 80004e8:	05c9      	lsls	r1, r1, #23
 80004ea:	1c04      	adds	r4, r0, #0
 80004ec:	f7ff fff0 	bl	80004d0 <__aeabi_fcmpge>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d103      	bne.n	80004fc <__aeabi_f2uiz+0x18>
 80004f4:	1c20      	adds	r0, r4, #0
 80004f6:	f000 fbb5 	bl	8000c64 <__aeabi_f2iz>
 80004fa:	bd10      	pop	{r4, pc}
 80004fc:	219e      	movs	r1, #158	@ 0x9e
 80004fe:	1c20      	adds	r0, r4, #0
 8000500:	05c9      	lsls	r1, r1, #23
 8000502:	f000 fa0b 	bl	800091c <__aeabi_fsub>
 8000506:	f000 fbad 	bl	8000c64 <__aeabi_f2iz>
 800050a:	2380      	movs	r3, #128	@ 0x80
 800050c:	061b      	lsls	r3, r3, #24
 800050e:	469c      	mov	ip, r3
 8000510:	4460      	add	r0, ip
 8000512:	e7f2      	b.n	80004fa <__aeabi_f2uiz+0x16>

08000514 <__eqsf2>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	0042      	lsls	r2, r0, #1
 8000518:	024e      	lsls	r6, r1, #9
 800051a:	004c      	lsls	r4, r1, #1
 800051c:	0245      	lsls	r5, r0, #9
 800051e:	0a6d      	lsrs	r5, r5, #9
 8000520:	0e12      	lsrs	r2, r2, #24
 8000522:	0fc3      	lsrs	r3, r0, #31
 8000524:	0a76      	lsrs	r6, r6, #9
 8000526:	0e24      	lsrs	r4, r4, #24
 8000528:	0fc9      	lsrs	r1, r1, #31
 800052a:	2aff      	cmp	r2, #255	@ 0xff
 800052c:	d010      	beq.n	8000550 <__eqsf2+0x3c>
 800052e:	2cff      	cmp	r4, #255	@ 0xff
 8000530:	d00c      	beq.n	800054c <__eqsf2+0x38>
 8000532:	2001      	movs	r0, #1
 8000534:	42a2      	cmp	r2, r4
 8000536:	d10a      	bne.n	800054e <__eqsf2+0x3a>
 8000538:	42b5      	cmp	r5, r6
 800053a:	d108      	bne.n	800054e <__eqsf2+0x3a>
 800053c:	428b      	cmp	r3, r1
 800053e:	d00f      	beq.n	8000560 <__eqsf2+0x4c>
 8000540:	2a00      	cmp	r2, #0
 8000542:	d104      	bne.n	800054e <__eqsf2+0x3a>
 8000544:	0028      	movs	r0, r5
 8000546:	1e43      	subs	r3, r0, #1
 8000548:	4198      	sbcs	r0, r3
 800054a:	e000      	b.n	800054e <__eqsf2+0x3a>
 800054c:	2001      	movs	r0, #1
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	2001      	movs	r0, #1
 8000552:	2cff      	cmp	r4, #255	@ 0xff
 8000554:	d1fb      	bne.n	800054e <__eqsf2+0x3a>
 8000556:	4335      	orrs	r5, r6
 8000558:	d1f9      	bne.n	800054e <__eqsf2+0x3a>
 800055a:	404b      	eors	r3, r1
 800055c:	0018      	movs	r0, r3
 800055e:	e7f6      	b.n	800054e <__eqsf2+0x3a>
 8000560:	2000      	movs	r0, #0
 8000562:	e7f4      	b.n	800054e <__eqsf2+0x3a>

08000564 <__gesf2>:
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	0042      	lsls	r2, r0, #1
 8000568:	0244      	lsls	r4, r0, #9
 800056a:	024d      	lsls	r5, r1, #9
 800056c:	0fc3      	lsrs	r3, r0, #31
 800056e:	0048      	lsls	r0, r1, #1
 8000570:	0a64      	lsrs	r4, r4, #9
 8000572:	0e12      	lsrs	r2, r2, #24
 8000574:	0a6d      	lsrs	r5, r5, #9
 8000576:	0e00      	lsrs	r0, r0, #24
 8000578:	0fc9      	lsrs	r1, r1, #31
 800057a:	2aff      	cmp	r2, #255	@ 0xff
 800057c:	d019      	beq.n	80005b2 <__gesf2+0x4e>
 800057e:	28ff      	cmp	r0, #255	@ 0xff
 8000580:	d00b      	beq.n	800059a <__gesf2+0x36>
 8000582:	2a00      	cmp	r2, #0
 8000584:	d11e      	bne.n	80005c4 <__gesf2+0x60>
 8000586:	2800      	cmp	r0, #0
 8000588:	d10b      	bne.n	80005a2 <__gesf2+0x3e>
 800058a:	2d00      	cmp	r5, #0
 800058c:	d027      	beq.n	80005de <__gesf2+0x7a>
 800058e:	2c00      	cmp	r4, #0
 8000590:	d134      	bne.n	80005fc <__gesf2+0x98>
 8000592:	2900      	cmp	r1, #0
 8000594:	d02f      	beq.n	80005f6 <__gesf2+0x92>
 8000596:	0008      	movs	r0, r1
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	2d00      	cmp	r5, #0
 800059c:	d128      	bne.n	80005f0 <__gesf2+0x8c>
 800059e:	2a00      	cmp	r2, #0
 80005a0:	d101      	bne.n	80005a6 <__gesf2+0x42>
 80005a2:	2c00      	cmp	r4, #0
 80005a4:	d0f5      	beq.n	8000592 <__gesf2+0x2e>
 80005a6:	428b      	cmp	r3, r1
 80005a8:	d107      	bne.n	80005ba <__gesf2+0x56>
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d023      	beq.n	80005f6 <__gesf2+0x92>
 80005ae:	0018      	movs	r0, r3
 80005b0:	e7f2      	b.n	8000598 <__gesf2+0x34>
 80005b2:	2c00      	cmp	r4, #0
 80005b4:	d11c      	bne.n	80005f0 <__gesf2+0x8c>
 80005b6:	28ff      	cmp	r0, #255	@ 0xff
 80005b8:	d014      	beq.n	80005e4 <__gesf2+0x80>
 80005ba:	1e58      	subs	r0, r3, #1
 80005bc:	2302      	movs	r3, #2
 80005be:	4018      	ands	r0, r3
 80005c0:	3801      	subs	r0, #1
 80005c2:	e7e9      	b.n	8000598 <__gesf2+0x34>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d0f8      	beq.n	80005ba <__gesf2+0x56>
 80005c8:	428b      	cmp	r3, r1
 80005ca:	d1f6      	bne.n	80005ba <__gesf2+0x56>
 80005cc:	4282      	cmp	r2, r0
 80005ce:	dcf4      	bgt.n	80005ba <__gesf2+0x56>
 80005d0:	dbeb      	blt.n	80005aa <__gesf2+0x46>
 80005d2:	42ac      	cmp	r4, r5
 80005d4:	d8f1      	bhi.n	80005ba <__gesf2+0x56>
 80005d6:	2000      	movs	r0, #0
 80005d8:	42ac      	cmp	r4, r5
 80005da:	d2dd      	bcs.n	8000598 <__gesf2+0x34>
 80005dc:	e7e5      	b.n	80005aa <__gesf2+0x46>
 80005de:	2c00      	cmp	r4, #0
 80005e0:	d0da      	beq.n	8000598 <__gesf2+0x34>
 80005e2:	e7ea      	b.n	80005ba <__gesf2+0x56>
 80005e4:	2d00      	cmp	r5, #0
 80005e6:	d103      	bne.n	80005f0 <__gesf2+0x8c>
 80005e8:	428b      	cmp	r3, r1
 80005ea:	d1e6      	bne.n	80005ba <__gesf2+0x56>
 80005ec:	2000      	movs	r0, #0
 80005ee:	e7d3      	b.n	8000598 <__gesf2+0x34>
 80005f0:	2002      	movs	r0, #2
 80005f2:	4240      	negs	r0, r0
 80005f4:	e7d0      	b.n	8000598 <__gesf2+0x34>
 80005f6:	2001      	movs	r0, #1
 80005f8:	4240      	negs	r0, r0
 80005fa:	e7cd      	b.n	8000598 <__gesf2+0x34>
 80005fc:	428b      	cmp	r3, r1
 80005fe:	d0e8      	beq.n	80005d2 <__gesf2+0x6e>
 8000600:	e7db      	b.n	80005ba <__gesf2+0x56>
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__lesf2>:
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	0042      	lsls	r2, r0, #1
 8000608:	0244      	lsls	r4, r0, #9
 800060a:	024d      	lsls	r5, r1, #9
 800060c:	0fc3      	lsrs	r3, r0, #31
 800060e:	0048      	lsls	r0, r1, #1
 8000610:	0a64      	lsrs	r4, r4, #9
 8000612:	0e12      	lsrs	r2, r2, #24
 8000614:	0a6d      	lsrs	r5, r5, #9
 8000616:	0e00      	lsrs	r0, r0, #24
 8000618:	0fc9      	lsrs	r1, r1, #31
 800061a:	2aff      	cmp	r2, #255	@ 0xff
 800061c:	d01a      	beq.n	8000654 <__lesf2+0x50>
 800061e:	28ff      	cmp	r0, #255	@ 0xff
 8000620:	d00e      	beq.n	8000640 <__lesf2+0x3c>
 8000622:	2a00      	cmp	r2, #0
 8000624:	d11e      	bne.n	8000664 <__lesf2+0x60>
 8000626:	2800      	cmp	r0, #0
 8000628:	d10e      	bne.n	8000648 <__lesf2+0x44>
 800062a:	2d00      	cmp	r5, #0
 800062c:	d02a      	beq.n	8000684 <__lesf2+0x80>
 800062e:	2c00      	cmp	r4, #0
 8000630:	d00c      	beq.n	800064c <__lesf2+0x48>
 8000632:	428b      	cmp	r3, r1
 8000634:	d01d      	beq.n	8000672 <__lesf2+0x6e>
 8000636:	1e58      	subs	r0, r3, #1
 8000638:	2302      	movs	r3, #2
 800063a:	4018      	ands	r0, r3
 800063c:	3801      	subs	r0, #1
 800063e:	e010      	b.n	8000662 <__lesf2+0x5e>
 8000640:	2d00      	cmp	r5, #0
 8000642:	d10d      	bne.n	8000660 <__lesf2+0x5c>
 8000644:	2a00      	cmp	r2, #0
 8000646:	d120      	bne.n	800068a <__lesf2+0x86>
 8000648:	2c00      	cmp	r4, #0
 800064a:	d11e      	bne.n	800068a <__lesf2+0x86>
 800064c:	2900      	cmp	r1, #0
 800064e:	d023      	beq.n	8000698 <__lesf2+0x94>
 8000650:	0008      	movs	r0, r1
 8000652:	e006      	b.n	8000662 <__lesf2+0x5e>
 8000654:	2c00      	cmp	r4, #0
 8000656:	d103      	bne.n	8000660 <__lesf2+0x5c>
 8000658:	28ff      	cmp	r0, #255	@ 0xff
 800065a:	d1ec      	bne.n	8000636 <__lesf2+0x32>
 800065c:	2d00      	cmp	r5, #0
 800065e:	d017      	beq.n	8000690 <__lesf2+0x8c>
 8000660:	2002      	movs	r0, #2
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	2800      	cmp	r0, #0
 8000666:	d0e6      	beq.n	8000636 <__lesf2+0x32>
 8000668:	428b      	cmp	r3, r1
 800066a:	d1e4      	bne.n	8000636 <__lesf2+0x32>
 800066c:	4282      	cmp	r2, r0
 800066e:	dce2      	bgt.n	8000636 <__lesf2+0x32>
 8000670:	db04      	blt.n	800067c <__lesf2+0x78>
 8000672:	42ac      	cmp	r4, r5
 8000674:	d8df      	bhi.n	8000636 <__lesf2+0x32>
 8000676:	2000      	movs	r0, #0
 8000678:	42ac      	cmp	r4, r5
 800067a:	d2f2      	bcs.n	8000662 <__lesf2+0x5e>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00b      	beq.n	8000698 <__lesf2+0x94>
 8000680:	0018      	movs	r0, r3
 8000682:	e7ee      	b.n	8000662 <__lesf2+0x5e>
 8000684:	2c00      	cmp	r4, #0
 8000686:	d0ec      	beq.n	8000662 <__lesf2+0x5e>
 8000688:	e7d5      	b.n	8000636 <__lesf2+0x32>
 800068a:	428b      	cmp	r3, r1
 800068c:	d1d3      	bne.n	8000636 <__lesf2+0x32>
 800068e:	e7f5      	b.n	800067c <__lesf2+0x78>
 8000690:	2000      	movs	r0, #0
 8000692:	428b      	cmp	r3, r1
 8000694:	d0e5      	beq.n	8000662 <__lesf2+0x5e>
 8000696:	e7ce      	b.n	8000636 <__lesf2+0x32>
 8000698:	2001      	movs	r0, #1
 800069a:	4240      	negs	r0, r0
 800069c:	e7e1      	b.n	8000662 <__lesf2+0x5e>
 800069e:	46c0      	nop			@ (mov r8, r8)

080006a0 <__aeabi_fmul>:
 80006a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006a2:	464f      	mov	r7, r9
 80006a4:	4646      	mov	r6, r8
 80006a6:	46d6      	mov	lr, sl
 80006a8:	0243      	lsls	r3, r0, #9
 80006aa:	0a5b      	lsrs	r3, r3, #9
 80006ac:	0045      	lsls	r5, r0, #1
 80006ae:	b5c0      	push	{r6, r7, lr}
 80006b0:	4699      	mov	r9, r3
 80006b2:	1c0f      	adds	r7, r1, #0
 80006b4:	0e2d      	lsrs	r5, r5, #24
 80006b6:	0fc6      	lsrs	r6, r0, #31
 80006b8:	2d00      	cmp	r5, #0
 80006ba:	d100      	bne.n	80006be <__aeabi_fmul+0x1e>
 80006bc:	e088      	b.n	80007d0 <__aeabi_fmul+0x130>
 80006be:	2dff      	cmp	r5, #255	@ 0xff
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fmul+0x24>
 80006c2:	e08d      	b.n	80007e0 <__aeabi_fmul+0x140>
 80006c4:	2280      	movs	r2, #128	@ 0x80
 80006c6:	00db      	lsls	r3, r3, #3
 80006c8:	04d2      	lsls	r2, r2, #19
 80006ca:	431a      	orrs	r2, r3
 80006cc:	2300      	movs	r3, #0
 80006ce:	4691      	mov	r9, r2
 80006d0:	4698      	mov	r8, r3
 80006d2:	469a      	mov	sl, r3
 80006d4:	3d7f      	subs	r5, #127	@ 0x7f
 80006d6:	027c      	lsls	r4, r7, #9
 80006d8:	007b      	lsls	r3, r7, #1
 80006da:	0a64      	lsrs	r4, r4, #9
 80006dc:	0e1b      	lsrs	r3, r3, #24
 80006de:	0fff      	lsrs	r7, r7, #31
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d068      	beq.n	80007b6 <__aeabi_fmul+0x116>
 80006e4:	2bff      	cmp	r3, #255	@ 0xff
 80006e6:	d021      	beq.n	800072c <__aeabi_fmul+0x8c>
 80006e8:	2280      	movs	r2, #128	@ 0x80
 80006ea:	00e4      	lsls	r4, r4, #3
 80006ec:	04d2      	lsls	r2, r2, #19
 80006ee:	4314      	orrs	r4, r2
 80006f0:	4642      	mov	r2, r8
 80006f2:	3b7f      	subs	r3, #127	@ 0x7f
 80006f4:	195b      	adds	r3, r3, r5
 80006f6:	2100      	movs	r1, #0
 80006f8:	1c5d      	adds	r5, r3, #1
 80006fa:	2a0a      	cmp	r2, #10
 80006fc:	dc2e      	bgt.n	800075c <__aeabi_fmul+0xbc>
 80006fe:	407e      	eors	r6, r7
 8000700:	4642      	mov	r2, r8
 8000702:	2a02      	cmp	r2, #2
 8000704:	dc23      	bgt.n	800074e <__aeabi_fmul+0xae>
 8000706:	3a01      	subs	r2, #1
 8000708:	2a01      	cmp	r2, #1
 800070a:	d900      	bls.n	800070e <__aeabi_fmul+0x6e>
 800070c:	e0bd      	b.n	800088a <__aeabi_fmul+0x1ea>
 800070e:	2902      	cmp	r1, #2
 8000710:	d06e      	beq.n	80007f0 <__aeabi_fmul+0x150>
 8000712:	2901      	cmp	r1, #1
 8000714:	d12c      	bne.n	8000770 <__aeabi_fmul+0xd0>
 8000716:	2000      	movs	r0, #0
 8000718:	2200      	movs	r2, #0
 800071a:	05c0      	lsls	r0, r0, #23
 800071c:	07f6      	lsls	r6, r6, #31
 800071e:	4310      	orrs	r0, r2
 8000720:	4330      	orrs	r0, r6
 8000722:	bce0      	pop	{r5, r6, r7}
 8000724:	46ba      	mov	sl, r7
 8000726:	46b1      	mov	r9, r6
 8000728:	46a8      	mov	r8, r5
 800072a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800072c:	002b      	movs	r3, r5
 800072e:	33ff      	adds	r3, #255	@ 0xff
 8000730:	2c00      	cmp	r4, #0
 8000732:	d065      	beq.n	8000800 <__aeabi_fmul+0x160>
 8000734:	2203      	movs	r2, #3
 8000736:	4641      	mov	r1, r8
 8000738:	4311      	orrs	r1, r2
 800073a:	0032      	movs	r2, r6
 800073c:	3501      	adds	r5, #1
 800073e:	4688      	mov	r8, r1
 8000740:	407a      	eors	r2, r7
 8000742:	35ff      	adds	r5, #255	@ 0xff
 8000744:	290a      	cmp	r1, #10
 8000746:	dd00      	ble.n	800074a <__aeabi_fmul+0xaa>
 8000748:	e0d8      	b.n	80008fc <__aeabi_fmul+0x25c>
 800074a:	0016      	movs	r6, r2
 800074c:	2103      	movs	r1, #3
 800074e:	4640      	mov	r0, r8
 8000750:	2201      	movs	r2, #1
 8000752:	4082      	lsls	r2, r0
 8000754:	20a6      	movs	r0, #166	@ 0xa6
 8000756:	00c0      	lsls	r0, r0, #3
 8000758:	4202      	tst	r2, r0
 800075a:	d020      	beq.n	800079e <__aeabi_fmul+0xfe>
 800075c:	4653      	mov	r3, sl
 800075e:	2b02      	cmp	r3, #2
 8000760:	d046      	beq.n	80007f0 <__aeabi_fmul+0x150>
 8000762:	2b03      	cmp	r3, #3
 8000764:	d100      	bne.n	8000768 <__aeabi_fmul+0xc8>
 8000766:	e0bb      	b.n	80008e0 <__aeabi_fmul+0x240>
 8000768:	4651      	mov	r1, sl
 800076a:	464c      	mov	r4, r9
 800076c:	2901      	cmp	r1, #1
 800076e:	d0d2      	beq.n	8000716 <__aeabi_fmul+0x76>
 8000770:	002b      	movs	r3, r5
 8000772:	337f      	adds	r3, #127	@ 0x7f
 8000774:	2b00      	cmp	r3, #0
 8000776:	dd70      	ble.n	800085a <__aeabi_fmul+0x1ba>
 8000778:	0762      	lsls	r2, r4, #29
 800077a:	d004      	beq.n	8000786 <__aeabi_fmul+0xe6>
 800077c:	220f      	movs	r2, #15
 800077e:	4022      	ands	r2, r4
 8000780:	2a04      	cmp	r2, #4
 8000782:	d000      	beq.n	8000786 <__aeabi_fmul+0xe6>
 8000784:	3404      	adds	r4, #4
 8000786:	0122      	lsls	r2, r4, #4
 8000788:	d503      	bpl.n	8000792 <__aeabi_fmul+0xf2>
 800078a:	4b63      	ldr	r3, [pc, #396]	@ (8000918 <__aeabi_fmul+0x278>)
 800078c:	401c      	ands	r4, r3
 800078e:	002b      	movs	r3, r5
 8000790:	3380      	adds	r3, #128	@ 0x80
 8000792:	2bfe      	cmp	r3, #254	@ 0xfe
 8000794:	dc2c      	bgt.n	80007f0 <__aeabi_fmul+0x150>
 8000796:	01a2      	lsls	r2, r4, #6
 8000798:	0a52      	lsrs	r2, r2, #9
 800079a:	b2d8      	uxtb	r0, r3
 800079c:	e7bd      	b.n	800071a <__aeabi_fmul+0x7a>
 800079e:	2090      	movs	r0, #144	@ 0x90
 80007a0:	0080      	lsls	r0, r0, #2
 80007a2:	4202      	tst	r2, r0
 80007a4:	d127      	bne.n	80007f6 <__aeabi_fmul+0x156>
 80007a6:	38b9      	subs	r0, #185	@ 0xb9
 80007a8:	38ff      	subs	r0, #255	@ 0xff
 80007aa:	4210      	tst	r0, r2
 80007ac:	d06d      	beq.n	800088a <__aeabi_fmul+0x1ea>
 80007ae:	003e      	movs	r6, r7
 80007b0:	46a1      	mov	r9, r4
 80007b2:	468a      	mov	sl, r1
 80007b4:	e7d2      	b.n	800075c <__aeabi_fmul+0xbc>
 80007b6:	2c00      	cmp	r4, #0
 80007b8:	d141      	bne.n	800083e <__aeabi_fmul+0x19e>
 80007ba:	2301      	movs	r3, #1
 80007bc:	4642      	mov	r2, r8
 80007be:	431a      	orrs	r2, r3
 80007c0:	4690      	mov	r8, r2
 80007c2:	002b      	movs	r3, r5
 80007c4:	4642      	mov	r2, r8
 80007c6:	2101      	movs	r1, #1
 80007c8:	1c5d      	adds	r5, r3, #1
 80007ca:	2a0a      	cmp	r2, #10
 80007cc:	dd97      	ble.n	80006fe <__aeabi_fmul+0x5e>
 80007ce:	e7c5      	b.n	800075c <__aeabi_fmul+0xbc>
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d126      	bne.n	8000822 <__aeabi_fmul+0x182>
 80007d4:	2304      	movs	r3, #4
 80007d6:	4698      	mov	r8, r3
 80007d8:	3b03      	subs	r3, #3
 80007da:	2500      	movs	r5, #0
 80007dc:	469a      	mov	sl, r3
 80007de:	e77a      	b.n	80006d6 <__aeabi_fmul+0x36>
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d118      	bne.n	8000816 <__aeabi_fmul+0x176>
 80007e4:	2308      	movs	r3, #8
 80007e6:	4698      	mov	r8, r3
 80007e8:	3b06      	subs	r3, #6
 80007ea:	25ff      	movs	r5, #255	@ 0xff
 80007ec:	469a      	mov	sl, r3
 80007ee:	e772      	b.n	80006d6 <__aeabi_fmul+0x36>
 80007f0:	20ff      	movs	r0, #255	@ 0xff
 80007f2:	2200      	movs	r2, #0
 80007f4:	e791      	b.n	800071a <__aeabi_fmul+0x7a>
 80007f6:	2280      	movs	r2, #128	@ 0x80
 80007f8:	2600      	movs	r6, #0
 80007fa:	20ff      	movs	r0, #255	@ 0xff
 80007fc:	03d2      	lsls	r2, r2, #15
 80007fe:	e78c      	b.n	800071a <__aeabi_fmul+0x7a>
 8000800:	4641      	mov	r1, r8
 8000802:	2202      	movs	r2, #2
 8000804:	3501      	adds	r5, #1
 8000806:	4311      	orrs	r1, r2
 8000808:	4688      	mov	r8, r1
 800080a:	35ff      	adds	r5, #255	@ 0xff
 800080c:	290a      	cmp	r1, #10
 800080e:	dca5      	bgt.n	800075c <__aeabi_fmul+0xbc>
 8000810:	2102      	movs	r1, #2
 8000812:	407e      	eors	r6, r7
 8000814:	e774      	b.n	8000700 <__aeabi_fmul+0x60>
 8000816:	230c      	movs	r3, #12
 8000818:	4698      	mov	r8, r3
 800081a:	3b09      	subs	r3, #9
 800081c:	25ff      	movs	r5, #255	@ 0xff
 800081e:	469a      	mov	sl, r3
 8000820:	e759      	b.n	80006d6 <__aeabi_fmul+0x36>
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fbb0 	bl	8000f88 <__clzsi2>
 8000828:	464a      	mov	r2, r9
 800082a:	1f43      	subs	r3, r0, #5
 800082c:	2576      	movs	r5, #118	@ 0x76
 800082e:	409a      	lsls	r2, r3
 8000830:	2300      	movs	r3, #0
 8000832:	426d      	negs	r5, r5
 8000834:	4691      	mov	r9, r2
 8000836:	4698      	mov	r8, r3
 8000838:	469a      	mov	sl, r3
 800083a:	1a2d      	subs	r5, r5, r0
 800083c:	e74b      	b.n	80006d6 <__aeabi_fmul+0x36>
 800083e:	0020      	movs	r0, r4
 8000840:	f000 fba2 	bl	8000f88 <__clzsi2>
 8000844:	4642      	mov	r2, r8
 8000846:	1f43      	subs	r3, r0, #5
 8000848:	409c      	lsls	r4, r3
 800084a:	1a2b      	subs	r3, r5, r0
 800084c:	3b76      	subs	r3, #118	@ 0x76
 800084e:	2100      	movs	r1, #0
 8000850:	1c5d      	adds	r5, r3, #1
 8000852:	2a0a      	cmp	r2, #10
 8000854:	dc00      	bgt.n	8000858 <__aeabi_fmul+0x1b8>
 8000856:	e752      	b.n	80006fe <__aeabi_fmul+0x5e>
 8000858:	e780      	b.n	800075c <__aeabi_fmul+0xbc>
 800085a:	2201      	movs	r2, #1
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	2b1b      	cmp	r3, #27
 8000860:	dd00      	ble.n	8000864 <__aeabi_fmul+0x1c4>
 8000862:	e758      	b.n	8000716 <__aeabi_fmul+0x76>
 8000864:	359e      	adds	r5, #158	@ 0x9e
 8000866:	0022      	movs	r2, r4
 8000868:	40ac      	lsls	r4, r5
 800086a:	40da      	lsrs	r2, r3
 800086c:	1e63      	subs	r3, r4, #1
 800086e:	419c      	sbcs	r4, r3
 8000870:	4322      	orrs	r2, r4
 8000872:	0753      	lsls	r3, r2, #29
 8000874:	d004      	beq.n	8000880 <__aeabi_fmul+0x1e0>
 8000876:	230f      	movs	r3, #15
 8000878:	4013      	ands	r3, r2
 800087a:	2b04      	cmp	r3, #4
 800087c:	d000      	beq.n	8000880 <__aeabi_fmul+0x1e0>
 800087e:	3204      	adds	r2, #4
 8000880:	0153      	lsls	r3, r2, #5
 8000882:	d537      	bpl.n	80008f4 <__aeabi_fmul+0x254>
 8000884:	2001      	movs	r0, #1
 8000886:	2200      	movs	r2, #0
 8000888:	e747      	b.n	800071a <__aeabi_fmul+0x7a>
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	464a      	mov	r2, r9
 800088e:	0424      	lsls	r4, r4, #16
 8000890:	0c24      	lsrs	r4, r4, #16
 8000892:	0027      	movs	r7, r4
 8000894:	0c10      	lsrs	r0, r2, #16
 8000896:	0412      	lsls	r2, r2, #16
 8000898:	0c12      	lsrs	r2, r2, #16
 800089a:	4344      	muls	r4, r0
 800089c:	4357      	muls	r7, r2
 800089e:	4348      	muls	r0, r1
 80008a0:	4351      	muls	r1, r2
 80008a2:	0c3a      	lsrs	r2, r7, #16
 80008a4:	1909      	adds	r1, r1, r4
 80008a6:	1852      	adds	r2, r2, r1
 80008a8:	4294      	cmp	r4, r2
 80008aa:	d903      	bls.n	80008b4 <__aeabi_fmul+0x214>
 80008ac:	2180      	movs	r1, #128	@ 0x80
 80008ae:	0249      	lsls	r1, r1, #9
 80008b0:	468c      	mov	ip, r1
 80008b2:	4460      	add	r0, ip
 80008b4:	043f      	lsls	r7, r7, #16
 80008b6:	0411      	lsls	r1, r2, #16
 80008b8:	0c3f      	lsrs	r7, r7, #16
 80008ba:	19c9      	adds	r1, r1, r7
 80008bc:	018c      	lsls	r4, r1, #6
 80008be:	1e67      	subs	r7, r4, #1
 80008c0:	41bc      	sbcs	r4, r7
 80008c2:	0c12      	lsrs	r2, r2, #16
 80008c4:	0e89      	lsrs	r1, r1, #26
 80008c6:	1812      	adds	r2, r2, r0
 80008c8:	430c      	orrs	r4, r1
 80008ca:	0192      	lsls	r2, r2, #6
 80008cc:	4314      	orrs	r4, r2
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	d50e      	bpl.n	80008f0 <__aeabi_fmul+0x250>
 80008d2:	2301      	movs	r3, #1
 80008d4:	0862      	lsrs	r2, r4, #1
 80008d6:	401c      	ands	r4, r3
 80008d8:	4314      	orrs	r4, r2
 80008da:	e749      	b.n	8000770 <__aeabi_fmul+0xd0>
 80008dc:	003e      	movs	r6, r7
 80008de:	46a1      	mov	r9, r4
 80008e0:	2280      	movs	r2, #128	@ 0x80
 80008e2:	464b      	mov	r3, r9
 80008e4:	03d2      	lsls	r2, r2, #15
 80008e6:	431a      	orrs	r2, r3
 80008e8:	0252      	lsls	r2, r2, #9
 80008ea:	20ff      	movs	r0, #255	@ 0xff
 80008ec:	0a52      	lsrs	r2, r2, #9
 80008ee:	e714      	b.n	800071a <__aeabi_fmul+0x7a>
 80008f0:	001d      	movs	r5, r3
 80008f2:	e73d      	b.n	8000770 <__aeabi_fmul+0xd0>
 80008f4:	0192      	lsls	r2, r2, #6
 80008f6:	2000      	movs	r0, #0
 80008f8:	0a52      	lsrs	r2, r2, #9
 80008fa:	e70e      	b.n	800071a <__aeabi_fmul+0x7a>
 80008fc:	290f      	cmp	r1, #15
 80008fe:	d1ed      	bne.n	80008dc <__aeabi_fmul+0x23c>
 8000900:	2280      	movs	r2, #128	@ 0x80
 8000902:	464b      	mov	r3, r9
 8000904:	03d2      	lsls	r2, r2, #15
 8000906:	4213      	tst	r3, r2
 8000908:	d0ea      	beq.n	80008e0 <__aeabi_fmul+0x240>
 800090a:	4214      	tst	r4, r2
 800090c:	d1e8      	bne.n	80008e0 <__aeabi_fmul+0x240>
 800090e:	003e      	movs	r6, r7
 8000910:	20ff      	movs	r0, #255	@ 0xff
 8000912:	4322      	orrs	r2, r4
 8000914:	e701      	b.n	800071a <__aeabi_fmul+0x7a>
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	f7ffffff 	.word	0xf7ffffff

0800091c <__aeabi_fsub>:
 800091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091e:	4647      	mov	r7, r8
 8000920:	46ce      	mov	lr, r9
 8000922:	024e      	lsls	r6, r1, #9
 8000924:	0243      	lsls	r3, r0, #9
 8000926:	0045      	lsls	r5, r0, #1
 8000928:	0a72      	lsrs	r2, r6, #9
 800092a:	0fc4      	lsrs	r4, r0, #31
 800092c:	0048      	lsls	r0, r1, #1
 800092e:	b580      	push	{r7, lr}
 8000930:	4694      	mov	ip, r2
 8000932:	0a5f      	lsrs	r7, r3, #9
 8000934:	0e2d      	lsrs	r5, r5, #24
 8000936:	099b      	lsrs	r3, r3, #6
 8000938:	0e00      	lsrs	r0, r0, #24
 800093a:	0fc9      	lsrs	r1, r1, #31
 800093c:	09b6      	lsrs	r6, r6, #6
 800093e:	28ff      	cmp	r0, #255	@ 0xff
 8000940:	d024      	beq.n	800098c <__aeabi_fsub+0x70>
 8000942:	2201      	movs	r2, #1
 8000944:	4051      	eors	r1, r2
 8000946:	1a2a      	subs	r2, r5, r0
 8000948:	428c      	cmp	r4, r1
 800094a:	d00f      	beq.n	800096c <__aeabi_fsub+0x50>
 800094c:	2a00      	cmp	r2, #0
 800094e:	dc00      	bgt.n	8000952 <__aeabi_fsub+0x36>
 8000950:	e16a      	b.n	8000c28 <__aeabi_fsub+0x30c>
 8000952:	2800      	cmp	r0, #0
 8000954:	d135      	bne.n	80009c2 <__aeabi_fsub+0xa6>
 8000956:	2e00      	cmp	r6, #0
 8000958:	d100      	bne.n	800095c <__aeabi_fsub+0x40>
 800095a:	e0a2      	b.n	8000aa2 <__aeabi_fsub+0x186>
 800095c:	1e51      	subs	r1, r2, #1
 800095e:	2a01      	cmp	r2, #1
 8000960:	d100      	bne.n	8000964 <__aeabi_fsub+0x48>
 8000962:	e124      	b.n	8000bae <__aeabi_fsub+0x292>
 8000964:	2aff      	cmp	r2, #255	@ 0xff
 8000966:	d021      	beq.n	80009ac <__aeabi_fsub+0x90>
 8000968:	000a      	movs	r2, r1
 800096a:	e02f      	b.n	80009cc <__aeabi_fsub+0xb0>
 800096c:	2a00      	cmp	r2, #0
 800096e:	dc00      	bgt.n	8000972 <__aeabi_fsub+0x56>
 8000970:	e167      	b.n	8000c42 <__aeabi_fsub+0x326>
 8000972:	2800      	cmp	r0, #0
 8000974:	d05e      	beq.n	8000a34 <__aeabi_fsub+0x118>
 8000976:	2dff      	cmp	r5, #255	@ 0xff
 8000978:	d018      	beq.n	80009ac <__aeabi_fsub+0x90>
 800097a:	2180      	movs	r1, #128	@ 0x80
 800097c:	04c9      	lsls	r1, r1, #19
 800097e:	430e      	orrs	r6, r1
 8000980:	2a1b      	cmp	r2, #27
 8000982:	dc00      	bgt.n	8000986 <__aeabi_fsub+0x6a>
 8000984:	e076      	b.n	8000a74 <__aeabi_fsub+0x158>
 8000986:	002a      	movs	r2, r5
 8000988:	3301      	adds	r3, #1
 800098a:	e032      	b.n	80009f2 <__aeabi_fsub+0xd6>
 800098c:	002a      	movs	r2, r5
 800098e:	3aff      	subs	r2, #255	@ 0xff
 8000990:	4691      	mov	r9, r2
 8000992:	2e00      	cmp	r6, #0
 8000994:	d042      	beq.n	8000a1c <__aeabi_fsub+0x100>
 8000996:	428c      	cmp	r4, r1
 8000998:	d055      	beq.n	8000a46 <__aeabi_fsub+0x12a>
 800099a:	464a      	mov	r2, r9
 800099c:	2a00      	cmp	r2, #0
 800099e:	d100      	bne.n	80009a2 <__aeabi_fsub+0x86>
 80009a0:	e09c      	b.n	8000adc <__aeabi_fsub+0x1c0>
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d100      	bne.n	80009a8 <__aeabi_fsub+0x8c>
 80009a6:	e077      	b.n	8000a98 <__aeabi_fsub+0x17c>
 80009a8:	000c      	movs	r4, r1
 80009aa:	0033      	movs	r3, r6
 80009ac:	08db      	lsrs	r3, r3, #3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d100      	bne.n	80009b4 <__aeabi_fsub+0x98>
 80009b2:	e06e      	b.n	8000a92 <__aeabi_fsub+0x176>
 80009b4:	2280      	movs	r2, #128	@ 0x80
 80009b6:	03d2      	lsls	r2, r2, #15
 80009b8:	4313      	orrs	r3, r2
 80009ba:	025b      	lsls	r3, r3, #9
 80009bc:	20ff      	movs	r0, #255	@ 0xff
 80009be:	0a5b      	lsrs	r3, r3, #9
 80009c0:	e024      	b.n	8000a0c <__aeabi_fsub+0xf0>
 80009c2:	2dff      	cmp	r5, #255	@ 0xff
 80009c4:	d0f2      	beq.n	80009ac <__aeabi_fsub+0x90>
 80009c6:	2180      	movs	r1, #128	@ 0x80
 80009c8:	04c9      	lsls	r1, r1, #19
 80009ca:	430e      	orrs	r6, r1
 80009cc:	2101      	movs	r1, #1
 80009ce:	2a1b      	cmp	r2, #27
 80009d0:	dc08      	bgt.n	80009e4 <__aeabi_fsub+0xc8>
 80009d2:	0031      	movs	r1, r6
 80009d4:	2020      	movs	r0, #32
 80009d6:	40d1      	lsrs	r1, r2
 80009d8:	1a82      	subs	r2, r0, r2
 80009da:	4096      	lsls	r6, r2
 80009dc:	0032      	movs	r2, r6
 80009de:	1e50      	subs	r0, r2, #1
 80009e0:	4182      	sbcs	r2, r0
 80009e2:	4311      	orrs	r1, r2
 80009e4:	1a5b      	subs	r3, r3, r1
 80009e6:	015a      	lsls	r2, r3, #5
 80009e8:	d460      	bmi.n	8000aac <__aeabi_fsub+0x190>
 80009ea:	2107      	movs	r1, #7
 80009ec:	002a      	movs	r2, r5
 80009ee:	4019      	ands	r1, r3
 80009f0:	d057      	beq.n	8000aa2 <__aeabi_fsub+0x186>
 80009f2:	210f      	movs	r1, #15
 80009f4:	4019      	ands	r1, r3
 80009f6:	2904      	cmp	r1, #4
 80009f8:	d000      	beq.n	80009fc <__aeabi_fsub+0xe0>
 80009fa:	3304      	adds	r3, #4
 80009fc:	0159      	lsls	r1, r3, #5
 80009fe:	d550      	bpl.n	8000aa2 <__aeabi_fsub+0x186>
 8000a00:	1c50      	adds	r0, r2, #1
 8000a02:	2afe      	cmp	r2, #254	@ 0xfe
 8000a04:	d045      	beq.n	8000a92 <__aeabi_fsub+0x176>
 8000a06:	019b      	lsls	r3, r3, #6
 8000a08:	b2c0      	uxtb	r0, r0
 8000a0a:	0a5b      	lsrs	r3, r3, #9
 8000a0c:	05c0      	lsls	r0, r0, #23
 8000a0e:	4318      	orrs	r0, r3
 8000a10:	07e4      	lsls	r4, r4, #31
 8000a12:	4320      	orrs	r0, r4
 8000a14:	bcc0      	pop	{r6, r7}
 8000a16:	46b9      	mov	r9, r7
 8000a18:	46b0      	mov	r8, r6
 8000a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4051      	eors	r1, r2
 8000a20:	428c      	cmp	r4, r1
 8000a22:	d1ba      	bne.n	800099a <__aeabi_fsub+0x7e>
 8000a24:	464a      	mov	r2, r9
 8000a26:	2a00      	cmp	r2, #0
 8000a28:	d010      	beq.n	8000a4c <__aeabi_fsub+0x130>
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fsub+0x114>
 8000a2e:	e098      	b.n	8000b62 <__aeabi_fsub+0x246>
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7bb      	b.n	80009ac <__aeabi_fsub+0x90>
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	d034      	beq.n	8000aa2 <__aeabi_fsub+0x186>
 8000a38:	1e51      	subs	r1, r2, #1
 8000a3a:	2a01      	cmp	r2, #1
 8000a3c:	d06e      	beq.n	8000b1c <__aeabi_fsub+0x200>
 8000a3e:	2aff      	cmp	r2, #255	@ 0xff
 8000a40:	d0b4      	beq.n	80009ac <__aeabi_fsub+0x90>
 8000a42:	000a      	movs	r2, r1
 8000a44:	e79c      	b.n	8000980 <__aeabi_fsub+0x64>
 8000a46:	2a00      	cmp	r2, #0
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fsub+0x130>
 8000a4a:	e088      	b.n	8000b5e <__aeabi_fsub+0x242>
 8000a4c:	20fe      	movs	r0, #254	@ 0xfe
 8000a4e:	1c6a      	adds	r2, r5, #1
 8000a50:	4210      	tst	r0, r2
 8000a52:	d000      	beq.n	8000a56 <__aeabi_fsub+0x13a>
 8000a54:	e092      	b.n	8000b7c <__aeabi_fsub+0x260>
 8000a56:	2d00      	cmp	r5, #0
 8000a58:	d000      	beq.n	8000a5c <__aeabi_fsub+0x140>
 8000a5a:	e0a4      	b.n	8000ba6 <__aeabi_fsub+0x28a>
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_fsub+0x146>
 8000a60:	e0cb      	b.n	8000bfa <__aeabi_fsub+0x2de>
 8000a62:	2e00      	cmp	r6, #0
 8000a64:	d000      	beq.n	8000a68 <__aeabi_fsub+0x14c>
 8000a66:	e0ca      	b.n	8000bfe <__aeabi_fsub+0x2e2>
 8000a68:	2200      	movs	r2, #0
 8000a6a:	08db      	lsrs	r3, r3, #3
 8000a6c:	025b      	lsls	r3, r3, #9
 8000a6e:	0a5b      	lsrs	r3, r3, #9
 8000a70:	b2d0      	uxtb	r0, r2
 8000a72:	e7cb      	b.n	8000a0c <__aeabi_fsub+0xf0>
 8000a74:	0031      	movs	r1, r6
 8000a76:	2020      	movs	r0, #32
 8000a78:	40d1      	lsrs	r1, r2
 8000a7a:	1a82      	subs	r2, r0, r2
 8000a7c:	4096      	lsls	r6, r2
 8000a7e:	0032      	movs	r2, r6
 8000a80:	1e50      	subs	r0, r2, #1
 8000a82:	4182      	sbcs	r2, r0
 8000a84:	430a      	orrs	r2, r1
 8000a86:	189b      	adds	r3, r3, r2
 8000a88:	015a      	lsls	r2, r3, #5
 8000a8a:	d5ae      	bpl.n	80009ea <__aeabi_fsub+0xce>
 8000a8c:	1c6a      	adds	r2, r5, #1
 8000a8e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a90:	d14a      	bne.n	8000b28 <__aeabi_fsub+0x20c>
 8000a92:	20ff      	movs	r0, #255	@ 0xff
 8000a94:	2300      	movs	r3, #0
 8000a96:	e7b9      	b.n	8000a0c <__aeabi_fsub+0xf0>
 8000a98:	22ff      	movs	r2, #255	@ 0xff
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d14b      	bne.n	8000b36 <__aeabi_fsub+0x21a>
 8000a9e:	000c      	movs	r4, r1
 8000aa0:	0033      	movs	r3, r6
 8000aa2:	08db      	lsrs	r3, r3, #3
 8000aa4:	2aff      	cmp	r2, #255	@ 0xff
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_fsub+0x18e>
 8000aa8:	e781      	b.n	80009ae <__aeabi_fsub+0x92>
 8000aaa:	e7df      	b.n	8000a6c <__aeabi_fsub+0x150>
 8000aac:	019f      	lsls	r7, r3, #6
 8000aae:	09bf      	lsrs	r7, r7, #6
 8000ab0:	0038      	movs	r0, r7
 8000ab2:	f000 fa69 	bl	8000f88 <__clzsi2>
 8000ab6:	3805      	subs	r0, #5
 8000ab8:	4087      	lsls	r7, r0
 8000aba:	4285      	cmp	r5, r0
 8000abc:	dc21      	bgt.n	8000b02 <__aeabi_fsub+0x1e6>
 8000abe:	003b      	movs	r3, r7
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	1b42      	subs	r2, r0, r5
 8000ac4:	3201      	adds	r2, #1
 8000ac6:	40d3      	lsrs	r3, r2
 8000ac8:	1a8a      	subs	r2, r1, r2
 8000aca:	4097      	lsls	r7, r2
 8000acc:	1e7a      	subs	r2, r7, #1
 8000ace:	4197      	sbcs	r7, r2
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	433b      	orrs	r3, r7
 8000ad4:	0759      	lsls	r1, r3, #29
 8000ad6:	d000      	beq.n	8000ada <__aeabi_fsub+0x1be>
 8000ad8:	e78b      	b.n	80009f2 <__aeabi_fsub+0xd6>
 8000ada:	e78f      	b.n	80009fc <__aeabi_fsub+0xe0>
 8000adc:	20fe      	movs	r0, #254	@ 0xfe
 8000ade:	1c6a      	adds	r2, r5, #1
 8000ae0:	4210      	tst	r0, r2
 8000ae2:	d112      	bne.n	8000b0a <__aeabi_fsub+0x1ee>
 8000ae4:	2d00      	cmp	r5, #0
 8000ae6:	d152      	bne.n	8000b8e <__aeabi_fsub+0x272>
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d07c      	beq.n	8000be6 <__aeabi_fsub+0x2ca>
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d0bb      	beq.n	8000a68 <__aeabi_fsub+0x14c>
 8000af0:	1b9a      	subs	r2, r3, r6
 8000af2:	0150      	lsls	r0, r2, #5
 8000af4:	d400      	bmi.n	8000af8 <__aeabi_fsub+0x1dc>
 8000af6:	e08b      	b.n	8000c10 <__aeabi_fsub+0x2f4>
 8000af8:	2401      	movs	r4, #1
 8000afa:	2200      	movs	r2, #0
 8000afc:	1af3      	subs	r3, r6, r3
 8000afe:	400c      	ands	r4, r1
 8000b00:	e7e8      	b.n	8000ad4 <__aeabi_fsub+0x1b8>
 8000b02:	4b56      	ldr	r3, [pc, #344]	@ (8000c5c <__aeabi_fsub+0x340>)
 8000b04:	1a2a      	subs	r2, r5, r0
 8000b06:	403b      	ands	r3, r7
 8000b08:	e7e4      	b.n	8000ad4 <__aeabi_fsub+0x1b8>
 8000b0a:	1b9f      	subs	r7, r3, r6
 8000b0c:	017a      	lsls	r2, r7, #5
 8000b0e:	d446      	bmi.n	8000b9e <__aeabi_fsub+0x282>
 8000b10:	2f00      	cmp	r7, #0
 8000b12:	d1cd      	bne.n	8000ab0 <__aeabi_fsub+0x194>
 8000b14:	2400      	movs	r4, #0
 8000b16:	2000      	movs	r0, #0
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e777      	b.n	8000a0c <__aeabi_fsub+0xf0>
 8000b1c:	199b      	adds	r3, r3, r6
 8000b1e:	2501      	movs	r5, #1
 8000b20:	3201      	adds	r2, #1
 8000b22:	0159      	lsls	r1, r3, #5
 8000b24:	d400      	bmi.n	8000b28 <__aeabi_fsub+0x20c>
 8000b26:	e760      	b.n	80009ea <__aeabi_fsub+0xce>
 8000b28:	2101      	movs	r1, #1
 8000b2a:	484d      	ldr	r0, [pc, #308]	@ (8000c60 <__aeabi_fsub+0x344>)
 8000b2c:	4019      	ands	r1, r3
 8000b2e:	085b      	lsrs	r3, r3, #1
 8000b30:	4003      	ands	r3, r0
 8000b32:	430b      	orrs	r3, r1
 8000b34:	e7ce      	b.n	8000ad4 <__aeabi_fsub+0x1b8>
 8000b36:	1e57      	subs	r7, r2, #1
 8000b38:	2a01      	cmp	r2, #1
 8000b3a:	d05a      	beq.n	8000bf2 <__aeabi_fsub+0x2d6>
 8000b3c:	000c      	movs	r4, r1
 8000b3e:	2aff      	cmp	r2, #255	@ 0xff
 8000b40:	d033      	beq.n	8000baa <__aeabi_fsub+0x28e>
 8000b42:	2201      	movs	r2, #1
 8000b44:	2f1b      	cmp	r7, #27
 8000b46:	dc07      	bgt.n	8000b58 <__aeabi_fsub+0x23c>
 8000b48:	2120      	movs	r1, #32
 8000b4a:	1bc9      	subs	r1, r1, r7
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	408b      	lsls	r3, r1
 8000b50:	40fa      	lsrs	r2, r7
 8000b52:	1e59      	subs	r1, r3, #1
 8000b54:	418b      	sbcs	r3, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	0005      	movs	r5, r0
 8000b5a:	1ab3      	subs	r3, r6, r2
 8000b5c:	e743      	b.n	80009e6 <__aeabi_fsub+0xca>
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d123      	bne.n	8000baa <__aeabi_fsub+0x28e>
 8000b62:	22ff      	movs	r2, #255	@ 0xff
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d09b      	beq.n	8000aa0 <__aeabi_fsub+0x184>
 8000b68:	1e51      	subs	r1, r2, #1
 8000b6a:	2a01      	cmp	r2, #1
 8000b6c:	d0d6      	beq.n	8000b1c <__aeabi_fsub+0x200>
 8000b6e:	2aff      	cmp	r2, #255	@ 0xff
 8000b70:	d01b      	beq.n	8000baa <__aeabi_fsub+0x28e>
 8000b72:	291b      	cmp	r1, #27
 8000b74:	dd2c      	ble.n	8000bd0 <__aeabi_fsub+0x2b4>
 8000b76:	0002      	movs	r2, r0
 8000b78:	1c73      	adds	r3, r6, #1
 8000b7a:	e73a      	b.n	80009f2 <__aeabi_fsub+0xd6>
 8000b7c:	2aff      	cmp	r2, #255	@ 0xff
 8000b7e:	d088      	beq.n	8000a92 <__aeabi_fsub+0x176>
 8000b80:	199b      	adds	r3, r3, r6
 8000b82:	085b      	lsrs	r3, r3, #1
 8000b84:	0759      	lsls	r1, r3, #29
 8000b86:	d000      	beq.n	8000b8a <__aeabi_fsub+0x26e>
 8000b88:	e733      	b.n	80009f2 <__aeabi_fsub+0xd6>
 8000b8a:	08db      	lsrs	r3, r3, #3
 8000b8c:	e76e      	b.n	8000a6c <__aeabi_fsub+0x150>
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d110      	bne.n	8000bb4 <__aeabi_fsub+0x298>
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d043      	beq.n	8000c1e <__aeabi_fsub+0x302>
 8000b96:	2401      	movs	r4, #1
 8000b98:	0033      	movs	r3, r6
 8000b9a:	400c      	ands	r4, r1
 8000b9c:	e706      	b.n	80009ac <__aeabi_fsub+0x90>
 8000b9e:	2401      	movs	r4, #1
 8000ba0:	1af7      	subs	r7, r6, r3
 8000ba2:	400c      	ands	r4, r1
 8000ba4:	e784      	b.n	8000ab0 <__aeabi_fsub+0x194>
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d104      	bne.n	8000bb4 <__aeabi_fsub+0x298>
 8000baa:	0033      	movs	r3, r6
 8000bac:	e6fe      	b.n	80009ac <__aeabi_fsub+0x90>
 8000bae:	2501      	movs	r5, #1
 8000bb0:	1b9b      	subs	r3, r3, r6
 8000bb2:	e718      	b.n	80009e6 <__aeabi_fsub+0xca>
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d100      	bne.n	8000bba <__aeabi_fsub+0x29e>
 8000bb8:	e6f8      	b.n	80009ac <__aeabi_fsub+0x90>
 8000bba:	2280      	movs	r2, #128	@ 0x80
 8000bbc:	03d2      	lsls	r2, r2, #15
 8000bbe:	4297      	cmp	r7, r2
 8000bc0:	d304      	bcc.n	8000bcc <__aeabi_fsub+0x2b0>
 8000bc2:	4594      	cmp	ip, r2
 8000bc4:	d202      	bcs.n	8000bcc <__aeabi_fsub+0x2b0>
 8000bc6:	2401      	movs	r4, #1
 8000bc8:	0033      	movs	r3, r6
 8000bca:	400c      	ands	r4, r1
 8000bcc:	08db      	lsrs	r3, r3, #3
 8000bce:	e6f1      	b.n	80009b4 <__aeabi_fsub+0x98>
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2520      	movs	r5, #32
 8000bd4:	40ca      	lsrs	r2, r1
 8000bd6:	1a69      	subs	r1, r5, r1
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	1e59      	subs	r1, r3, #1
 8000bdc:	418b      	sbcs	r3, r1
 8000bde:	4313      	orrs	r3, r2
 8000be0:	0005      	movs	r5, r0
 8000be2:	199b      	adds	r3, r3, r6
 8000be4:	e750      	b.n	8000a88 <__aeabi_fsub+0x16c>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d094      	beq.n	8000b14 <__aeabi_fsub+0x1f8>
 8000bea:	2401      	movs	r4, #1
 8000bec:	0033      	movs	r3, r6
 8000bee:	400c      	ands	r4, r1
 8000bf0:	e73a      	b.n	8000a68 <__aeabi_fsub+0x14c>
 8000bf2:	000c      	movs	r4, r1
 8000bf4:	2501      	movs	r5, #1
 8000bf6:	1af3      	subs	r3, r6, r3
 8000bf8:	e6f5      	b.n	80009e6 <__aeabi_fsub+0xca>
 8000bfa:	0033      	movs	r3, r6
 8000bfc:	e734      	b.n	8000a68 <__aeabi_fsub+0x14c>
 8000bfe:	199b      	adds	r3, r3, r6
 8000c00:	2200      	movs	r2, #0
 8000c02:	0159      	lsls	r1, r3, #5
 8000c04:	d5c1      	bpl.n	8000b8a <__aeabi_fsub+0x26e>
 8000c06:	4a15      	ldr	r2, [pc, #84]	@ (8000c5c <__aeabi_fsub+0x340>)
 8000c08:	4013      	ands	r3, r2
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	e72d      	b.n	8000a6c <__aeabi_fsub+0x150>
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	d100      	bne.n	8000c16 <__aeabi_fsub+0x2fa>
 8000c14:	e77e      	b.n	8000b14 <__aeabi_fsub+0x1f8>
 8000c16:	0013      	movs	r3, r2
 8000c18:	2200      	movs	r2, #0
 8000c1a:	08db      	lsrs	r3, r3, #3
 8000c1c:	e726      	b.n	8000a6c <__aeabi_fsub+0x150>
 8000c1e:	2380      	movs	r3, #128	@ 0x80
 8000c20:	2400      	movs	r4, #0
 8000c22:	20ff      	movs	r0, #255	@ 0xff
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	e6f1      	b.n	8000a0c <__aeabi_fsub+0xf0>
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_fsub+0x312>
 8000c2c:	e756      	b.n	8000adc <__aeabi_fsub+0x1c0>
 8000c2e:	1b47      	subs	r7, r0, r5
 8000c30:	003a      	movs	r2, r7
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	d100      	bne.n	8000c38 <__aeabi_fsub+0x31c>
 8000c36:	e730      	b.n	8000a9a <__aeabi_fsub+0x17e>
 8000c38:	2280      	movs	r2, #128	@ 0x80
 8000c3a:	04d2      	lsls	r2, r2, #19
 8000c3c:	000c      	movs	r4, r1
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	e77f      	b.n	8000b42 <__aeabi_fsub+0x226>
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d100      	bne.n	8000c48 <__aeabi_fsub+0x32c>
 8000c46:	e701      	b.n	8000a4c <__aeabi_fsub+0x130>
 8000c48:	1b41      	subs	r1, r0, r5
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	d101      	bne.n	8000c52 <__aeabi_fsub+0x336>
 8000c4e:	000a      	movs	r2, r1
 8000c50:	e788      	b.n	8000b64 <__aeabi_fsub+0x248>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	04d2      	lsls	r2, r2, #19
 8000c56:	4313      	orrs	r3, r2
 8000c58:	e78b      	b.n	8000b72 <__aeabi_fsub+0x256>
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	fbffffff 	.word	0xfbffffff
 8000c60:	7dffffff 	.word	0x7dffffff

08000c64 <__aeabi_f2iz>:
 8000c64:	0241      	lsls	r1, r0, #9
 8000c66:	0042      	lsls	r2, r0, #1
 8000c68:	0fc3      	lsrs	r3, r0, #31
 8000c6a:	0a49      	lsrs	r1, r1, #9
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	0e12      	lsrs	r2, r2, #24
 8000c70:	2a7e      	cmp	r2, #126	@ 0x7e
 8000c72:	dd03      	ble.n	8000c7c <__aeabi_f2iz+0x18>
 8000c74:	2a9d      	cmp	r2, #157	@ 0x9d
 8000c76:	dd02      	ble.n	8000c7e <__aeabi_f2iz+0x1a>
 8000c78:	4a09      	ldr	r2, [pc, #36]	@ (8000ca0 <__aeabi_f2iz+0x3c>)
 8000c7a:	1898      	adds	r0, r3, r2
 8000c7c:	4770      	bx	lr
 8000c7e:	2080      	movs	r0, #128	@ 0x80
 8000c80:	0400      	lsls	r0, r0, #16
 8000c82:	4301      	orrs	r1, r0
 8000c84:	2a95      	cmp	r2, #149	@ 0x95
 8000c86:	dc07      	bgt.n	8000c98 <__aeabi_f2iz+0x34>
 8000c88:	2096      	movs	r0, #150	@ 0x96
 8000c8a:	1a82      	subs	r2, r0, r2
 8000c8c:	40d1      	lsrs	r1, r2
 8000c8e:	4248      	negs	r0, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f3      	bne.n	8000c7c <__aeabi_f2iz+0x18>
 8000c94:	0008      	movs	r0, r1
 8000c96:	e7f1      	b.n	8000c7c <__aeabi_f2iz+0x18>
 8000c98:	3a96      	subs	r2, #150	@ 0x96
 8000c9a:	4091      	lsls	r1, r2
 8000c9c:	e7f7      	b.n	8000c8e <__aeabi_f2iz+0x2a>
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	7fffffff 	.word	0x7fffffff

08000ca4 <__eqdf2>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4657      	mov	r7, sl
 8000ca8:	46de      	mov	lr, fp
 8000caa:	464e      	mov	r6, r9
 8000cac:	4645      	mov	r5, r8
 8000cae:	b5e0      	push	{r5, r6, r7, lr}
 8000cb0:	000d      	movs	r5, r1
 8000cb2:	0004      	movs	r4, r0
 8000cb4:	0fe8      	lsrs	r0, r5, #31
 8000cb6:	4683      	mov	fp, r0
 8000cb8:	0309      	lsls	r1, r1, #12
 8000cba:	0fd8      	lsrs	r0, r3, #31
 8000cbc:	0b09      	lsrs	r1, r1, #12
 8000cbe:	4682      	mov	sl, r0
 8000cc0:	4819      	ldr	r0, [pc, #100]	@ (8000d28 <__eqdf2+0x84>)
 8000cc2:	468c      	mov	ip, r1
 8000cc4:	031f      	lsls	r7, r3, #12
 8000cc6:	0069      	lsls	r1, r5, #1
 8000cc8:	005e      	lsls	r6, r3, #1
 8000cca:	0d49      	lsrs	r1, r1, #21
 8000ccc:	0b3f      	lsrs	r7, r7, #12
 8000cce:	0d76      	lsrs	r6, r6, #21
 8000cd0:	4281      	cmp	r1, r0
 8000cd2:	d018      	beq.n	8000d06 <__eqdf2+0x62>
 8000cd4:	4286      	cmp	r6, r0
 8000cd6:	d00f      	beq.n	8000cf8 <__eqdf2+0x54>
 8000cd8:	2001      	movs	r0, #1
 8000cda:	42b1      	cmp	r1, r6
 8000cdc:	d10d      	bne.n	8000cfa <__eqdf2+0x56>
 8000cde:	45bc      	cmp	ip, r7
 8000ce0:	d10b      	bne.n	8000cfa <__eqdf2+0x56>
 8000ce2:	4294      	cmp	r4, r2
 8000ce4:	d109      	bne.n	8000cfa <__eqdf2+0x56>
 8000ce6:	45d3      	cmp	fp, sl
 8000ce8:	d01c      	beq.n	8000d24 <__eqdf2+0x80>
 8000cea:	2900      	cmp	r1, #0
 8000cec:	d105      	bne.n	8000cfa <__eqdf2+0x56>
 8000cee:	4660      	mov	r0, ip
 8000cf0:	4320      	orrs	r0, r4
 8000cf2:	1e43      	subs	r3, r0, #1
 8000cf4:	4198      	sbcs	r0, r3
 8000cf6:	e000      	b.n	8000cfa <__eqdf2+0x56>
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	bcf0      	pop	{r4, r5, r6, r7}
 8000cfc:	46bb      	mov	fp, r7
 8000cfe:	46b2      	mov	sl, r6
 8000d00:	46a9      	mov	r9, r5
 8000d02:	46a0      	mov	r8, r4
 8000d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d06:	2001      	movs	r0, #1
 8000d08:	428e      	cmp	r6, r1
 8000d0a:	d1f6      	bne.n	8000cfa <__eqdf2+0x56>
 8000d0c:	4661      	mov	r1, ip
 8000d0e:	4339      	orrs	r1, r7
 8000d10:	000f      	movs	r7, r1
 8000d12:	4317      	orrs	r7, r2
 8000d14:	4327      	orrs	r7, r4
 8000d16:	d1f0      	bne.n	8000cfa <__eqdf2+0x56>
 8000d18:	465b      	mov	r3, fp
 8000d1a:	4652      	mov	r2, sl
 8000d1c:	1a98      	subs	r0, r3, r2
 8000d1e:	1e43      	subs	r3, r0, #1
 8000d20:	4198      	sbcs	r0, r3
 8000d22:	e7ea      	b.n	8000cfa <__eqdf2+0x56>
 8000d24:	2000      	movs	r0, #0
 8000d26:	e7e8      	b.n	8000cfa <__eqdf2+0x56>
 8000d28:	000007ff 	.word	0x000007ff

08000d2c <__gedf2>:
 8000d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2e:	4657      	mov	r7, sl
 8000d30:	464e      	mov	r6, r9
 8000d32:	4645      	mov	r5, r8
 8000d34:	46de      	mov	lr, fp
 8000d36:	b5e0      	push	{r5, r6, r7, lr}
 8000d38:	000d      	movs	r5, r1
 8000d3a:	030f      	lsls	r7, r1, #12
 8000d3c:	0b39      	lsrs	r1, r7, #12
 8000d3e:	b083      	sub	sp, #12
 8000d40:	0004      	movs	r4, r0
 8000d42:	4680      	mov	r8, r0
 8000d44:	9101      	str	r1, [sp, #4]
 8000d46:	0058      	lsls	r0, r3, #1
 8000d48:	0fe9      	lsrs	r1, r5, #31
 8000d4a:	4f31      	ldr	r7, [pc, #196]	@ (8000e10 <__gedf2+0xe4>)
 8000d4c:	0d40      	lsrs	r0, r0, #21
 8000d4e:	468c      	mov	ip, r1
 8000d50:	006e      	lsls	r6, r5, #1
 8000d52:	0319      	lsls	r1, r3, #12
 8000d54:	4682      	mov	sl, r0
 8000d56:	4691      	mov	r9, r2
 8000d58:	0d76      	lsrs	r6, r6, #21
 8000d5a:	0b09      	lsrs	r1, r1, #12
 8000d5c:	0fd8      	lsrs	r0, r3, #31
 8000d5e:	42be      	cmp	r6, r7
 8000d60:	d01f      	beq.n	8000da2 <__gedf2+0x76>
 8000d62:	45ba      	cmp	sl, r7
 8000d64:	d00f      	beq.n	8000d86 <__gedf2+0x5a>
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d12f      	bne.n	8000dca <__gedf2+0x9e>
 8000d6a:	4655      	mov	r5, sl
 8000d6c:	9e01      	ldr	r6, [sp, #4]
 8000d6e:	4334      	orrs	r4, r6
 8000d70:	2d00      	cmp	r5, #0
 8000d72:	d127      	bne.n	8000dc4 <__gedf2+0x98>
 8000d74:	430a      	orrs	r2, r1
 8000d76:	d03a      	beq.n	8000dee <__gedf2+0xc2>
 8000d78:	2c00      	cmp	r4, #0
 8000d7a:	d145      	bne.n	8000e08 <__gedf2+0xdc>
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	d11a      	bne.n	8000db6 <__gedf2+0x8a>
 8000d80:	2001      	movs	r0, #1
 8000d82:	4240      	negs	r0, r0
 8000d84:	e017      	b.n	8000db6 <__gedf2+0x8a>
 8000d86:	4311      	orrs	r1, r2
 8000d88:	d13b      	bne.n	8000e02 <__gedf2+0xd6>
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d102      	bne.n	8000d94 <__gedf2+0x68>
 8000d8e:	9f01      	ldr	r7, [sp, #4]
 8000d90:	4327      	orrs	r7, r4
 8000d92:	d0f3      	beq.n	8000d7c <__gedf2+0x50>
 8000d94:	4584      	cmp	ip, r0
 8000d96:	d109      	bne.n	8000dac <__gedf2+0x80>
 8000d98:	4663      	mov	r3, ip
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f0      	beq.n	8000d80 <__gedf2+0x54>
 8000d9e:	4660      	mov	r0, ip
 8000da0:	e009      	b.n	8000db6 <__gedf2+0x8a>
 8000da2:	9f01      	ldr	r7, [sp, #4]
 8000da4:	4327      	orrs	r7, r4
 8000da6:	d12c      	bne.n	8000e02 <__gedf2+0xd6>
 8000da8:	45b2      	cmp	sl, r6
 8000daa:	d024      	beq.n	8000df6 <__gedf2+0xca>
 8000dac:	4663      	mov	r3, ip
 8000dae:	2002      	movs	r0, #2
 8000db0:	3b01      	subs	r3, #1
 8000db2:	4018      	ands	r0, r3
 8000db4:	3801      	subs	r0, #1
 8000db6:	b003      	add	sp, #12
 8000db8:	bcf0      	pop	{r4, r5, r6, r7}
 8000dba:	46bb      	mov	fp, r7
 8000dbc:	46b2      	mov	sl, r6
 8000dbe:	46a9      	mov	r9, r5
 8000dc0:	46a0      	mov	r8, r4
 8000dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d0d9      	beq.n	8000d7c <__gedf2+0x50>
 8000dc8:	e7e4      	b.n	8000d94 <__gedf2+0x68>
 8000dca:	4654      	mov	r4, sl
 8000dcc:	2c00      	cmp	r4, #0
 8000dce:	d0ed      	beq.n	8000dac <__gedf2+0x80>
 8000dd0:	4584      	cmp	ip, r0
 8000dd2:	d1eb      	bne.n	8000dac <__gedf2+0x80>
 8000dd4:	4556      	cmp	r6, sl
 8000dd6:	dce9      	bgt.n	8000dac <__gedf2+0x80>
 8000dd8:	dbde      	blt.n	8000d98 <__gedf2+0x6c>
 8000dda:	9b01      	ldr	r3, [sp, #4]
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	d8e5      	bhi.n	8000dac <__gedf2+0x80>
 8000de0:	d1da      	bne.n	8000d98 <__gedf2+0x6c>
 8000de2:	45c8      	cmp	r8, r9
 8000de4:	d8e2      	bhi.n	8000dac <__gedf2+0x80>
 8000de6:	2000      	movs	r0, #0
 8000de8:	45c8      	cmp	r8, r9
 8000dea:	d2e4      	bcs.n	8000db6 <__gedf2+0x8a>
 8000dec:	e7d4      	b.n	8000d98 <__gedf2+0x6c>
 8000dee:	2000      	movs	r0, #0
 8000df0:	2c00      	cmp	r4, #0
 8000df2:	d0e0      	beq.n	8000db6 <__gedf2+0x8a>
 8000df4:	e7da      	b.n	8000dac <__gedf2+0x80>
 8000df6:	4311      	orrs	r1, r2
 8000df8:	d103      	bne.n	8000e02 <__gedf2+0xd6>
 8000dfa:	4584      	cmp	ip, r0
 8000dfc:	d1d6      	bne.n	8000dac <__gedf2+0x80>
 8000dfe:	2000      	movs	r0, #0
 8000e00:	e7d9      	b.n	8000db6 <__gedf2+0x8a>
 8000e02:	2002      	movs	r0, #2
 8000e04:	4240      	negs	r0, r0
 8000e06:	e7d6      	b.n	8000db6 <__gedf2+0x8a>
 8000e08:	4584      	cmp	ip, r0
 8000e0a:	d0e6      	beq.n	8000dda <__gedf2+0xae>
 8000e0c:	e7ce      	b.n	8000dac <__gedf2+0x80>
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	000007ff 	.word	0x000007ff

08000e14 <__ledf2>:
 8000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e16:	4657      	mov	r7, sl
 8000e18:	464e      	mov	r6, r9
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	46de      	mov	lr, fp
 8000e1e:	b5e0      	push	{r5, r6, r7, lr}
 8000e20:	000d      	movs	r5, r1
 8000e22:	030f      	lsls	r7, r1, #12
 8000e24:	0004      	movs	r4, r0
 8000e26:	4680      	mov	r8, r0
 8000e28:	0fe8      	lsrs	r0, r5, #31
 8000e2a:	0b39      	lsrs	r1, r7, #12
 8000e2c:	4684      	mov	ip, r0
 8000e2e:	b083      	sub	sp, #12
 8000e30:	0058      	lsls	r0, r3, #1
 8000e32:	4f30      	ldr	r7, [pc, #192]	@ (8000ef4 <__ledf2+0xe0>)
 8000e34:	0d40      	lsrs	r0, r0, #21
 8000e36:	9101      	str	r1, [sp, #4]
 8000e38:	031e      	lsls	r6, r3, #12
 8000e3a:	0069      	lsls	r1, r5, #1
 8000e3c:	4682      	mov	sl, r0
 8000e3e:	4691      	mov	r9, r2
 8000e40:	0d49      	lsrs	r1, r1, #21
 8000e42:	0b36      	lsrs	r6, r6, #12
 8000e44:	0fd8      	lsrs	r0, r3, #31
 8000e46:	42b9      	cmp	r1, r7
 8000e48:	d020      	beq.n	8000e8c <__ledf2+0x78>
 8000e4a:	45ba      	cmp	sl, r7
 8000e4c:	d00f      	beq.n	8000e6e <__ledf2+0x5a>
 8000e4e:	2900      	cmp	r1, #0
 8000e50:	d12b      	bne.n	8000eaa <__ledf2+0x96>
 8000e52:	9901      	ldr	r1, [sp, #4]
 8000e54:	430c      	orrs	r4, r1
 8000e56:	4651      	mov	r1, sl
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d137      	bne.n	8000ecc <__ledf2+0xb8>
 8000e5c:	4332      	orrs	r2, r6
 8000e5e:	d038      	beq.n	8000ed2 <__ledf2+0xbe>
 8000e60:	2c00      	cmp	r4, #0
 8000e62:	d144      	bne.n	8000eee <__ledf2+0xda>
 8000e64:	2800      	cmp	r0, #0
 8000e66:	d119      	bne.n	8000e9c <__ledf2+0x88>
 8000e68:	2001      	movs	r0, #1
 8000e6a:	4240      	negs	r0, r0
 8000e6c:	e016      	b.n	8000e9c <__ledf2+0x88>
 8000e6e:	4316      	orrs	r6, r2
 8000e70:	d113      	bne.n	8000e9a <__ledf2+0x86>
 8000e72:	2900      	cmp	r1, #0
 8000e74:	d102      	bne.n	8000e7c <__ledf2+0x68>
 8000e76:	9f01      	ldr	r7, [sp, #4]
 8000e78:	4327      	orrs	r7, r4
 8000e7a:	d0f3      	beq.n	8000e64 <__ledf2+0x50>
 8000e7c:	4584      	cmp	ip, r0
 8000e7e:	d020      	beq.n	8000ec2 <__ledf2+0xae>
 8000e80:	4663      	mov	r3, ip
 8000e82:	2002      	movs	r0, #2
 8000e84:	3b01      	subs	r3, #1
 8000e86:	4018      	ands	r0, r3
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e007      	b.n	8000e9c <__ledf2+0x88>
 8000e8c:	9f01      	ldr	r7, [sp, #4]
 8000e8e:	4327      	orrs	r7, r4
 8000e90:	d103      	bne.n	8000e9a <__ledf2+0x86>
 8000e92:	458a      	cmp	sl, r1
 8000e94:	d1f4      	bne.n	8000e80 <__ledf2+0x6c>
 8000e96:	4316      	orrs	r6, r2
 8000e98:	d01f      	beq.n	8000eda <__ledf2+0xc6>
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	b003      	add	sp, #12
 8000e9e:	bcf0      	pop	{r4, r5, r6, r7}
 8000ea0:	46bb      	mov	fp, r7
 8000ea2:	46b2      	mov	sl, r6
 8000ea4:	46a9      	mov	r9, r5
 8000ea6:	46a0      	mov	r8, r4
 8000ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eaa:	4654      	mov	r4, sl
 8000eac:	2c00      	cmp	r4, #0
 8000eae:	d0e7      	beq.n	8000e80 <__ledf2+0x6c>
 8000eb0:	4584      	cmp	ip, r0
 8000eb2:	d1e5      	bne.n	8000e80 <__ledf2+0x6c>
 8000eb4:	4551      	cmp	r1, sl
 8000eb6:	dce3      	bgt.n	8000e80 <__ledf2+0x6c>
 8000eb8:	db03      	blt.n	8000ec2 <__ledf2+0xae>
 8000eba:	9b01      	ldr	r3, [sp, #4]
 8000ebc:	42b3      	cmp	r3, r6
 8000ebe:	d8df      	bhi.n	8000e80 <__ledf2+0x6c>
 8000ec0:	d00f      	beq.n	8000ee2 <__ledf2+0xce>
 8000ec2:	4663      	mov	r3, ip
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0cf      	beq.n	8000e68 <__ledf2+0x54>
 8000ec8:	4660      	mov	r0, ip
 8000eca:	e7e7      	b.n	8000e9c <__ledf2+0x88>
 8000ecc:	2c00      	cmp	r4, #0
 8000ece:	d0c9      	beq.n	8000e64 <__ledf2+0x50>
 8000ed0:	e7d4      	b.n	8000e7c <__ledf2+0x68>
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	2c00      	cmp	r4, #0
 8000ed6:	d0e1      	beq.n	8000e9c <__ledf2+0x88>
 8000ed8:	e7d2      	b.n	8000e80 <__ledf2+0x6c>
 8000eda:	4584      	cmp	ip, r0
 8000edc:	d1d0      	bne.n	8000e80 <__ledf2+0x6c>
 8000ede:	2000      	movs	r0, #0
 8000ee0:	e7dc      	b.n	8000e9c <__ledf2+0x88>
 8000ee2:	45c8      	cmp	r8, r9
 8000ee4:	d8cc      	bhi.n	8000e80 <__ledf2+0x6c>
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	45c8      	cmp	r8, r9
 8000eea:	d2d7      	bcs.n	8000e9c <__ledf2+0x88>
 8000eec:	e7e9      	b.n	8000ec2 <__ledf2+0xae>
 8000eee:	4584      	cmp	ip, r0
 8000ef0:	d0e3      	beq.n	8000eba <__ledf2+0xa6>
 8000ef2:	e7c5      	b.n	8000e80 <__ledf2+0x6c>
 8000ef4:	000007ff 	.word	0x000007ff

08000ef8 <__aeabi_f2d>:
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	0242      	lsls	r2, r0, #9
 8000efc:	0043      	lsls	r3, r0, #1
 8000efe:	0fc4      	lsrs	r4, r0, #31
 8000f00:	20fe      	movs	r0, #254	@ 0xfe
 8000f02:	0e1b      	lsrs	r3, r3, #24
 8000f04:	1c59      	adds	r1, r3, #1
 8000f06:	0a55      	lsrs	r5, r2, #9
 8000f08:	4208      	tst	r0, r1
 8000f0a:	d00c      	beq.n	8000f26 <__aeabi_f2d+0x2e>
 8000f0c:	21e0      	movs	r1, #224	@ 0xe0
 8000f0e:	0089      	lsls	r1, r1, #2
 8000f10:	468c      	mov	ip, r1
 8000f12:	076d      	lsls	r5, r5, #29
 8000f14:	0b12      	lsrs	r2, r2, #12
 8000f16:	4463      	add	r3, ip
 8000f18:	051b      	lsls	r3, r3, #20
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	07e4      	lsls	r4, r4, #31
 8000f1e:	4323      	orrs	r3, r4
 8000f20:	0028      	movs	r0, r5
 8000f22:	0019      	movs	r1, r3
 8000f24:	bd70      	pop	{r4, r5, r6, pc}
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d114      	bne.n	8000f54 <__aeabi_f2d+0x5c>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d01b      	beq.n	8000f66 <__aeabi_f2d+0x6e>
 8000f2e:	0028      	movs	r0, r5
 8000f30:	f000 f82a 	bl	8000f88 <__clzsi2>
 8000f34:	280a      	cmp	r0, #10
 8000f36:	dc1c      	bgt.n	8000f72 <__aeabi_f2d+0x7a>
 8000f38:	230b      	movs	r3, #11
 8000f3a:	002a      	movs	r2, r5
 8000f3c:	1a1b      	subs	r3, r3, r0
 8000f3e:	40da      	lsrs	r2, r3
 8000f40:	0003      	movs	r3, r0
 8000f42:	3315      	adds	r3, #21
 8000f44:	409d      	lsls	r5, r3
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <__aeabi_f2d+0x88>)
 8000f48:	0312      	lsls	r2, r2, #12
 8000f4a:	1a1b      	subs	r3, r3, r0
 8000f4c:	055b      	lsls	r3, r3, #21
 8000f4e:	0b12      	lsrs	r2, r2, #12
 8000f50:	0d5b      	lsrs	r3, r3, #21
 8000f52:	e7e1      	b.n	8000f18 <__aeabi_f2d+0x20>
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d009      	beq.n	8000f6c <__aeabi_f2d+0x74>
 8000f58:	0b13      	lsrs	r3, r2, #12
 8000f5a:	2280      	movs	r2, #128	@ 0x80
 8000f5c:	0312      	lsls	r2, r2, #12
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	076d      	lsls	r5, r5, #29
 8000f62:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <__aeabi_f2d+0x8c>)
 8000f64:	e7d8      	b.n	8000f18 <__aeabi_f2d+0x20>
 8000f66:	2300      	movs	r3, #0
 8000f68:	2200      	movs	r2, #0
 8000f6a:	e7d5      	b.n	8000f18 <__aeabi_f2d+0x20>
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <__aeabi_f2d+0x8c>)
 8000f70:	e7d2      	b.n	8000f18 <__aeabi_f2d+0x20>
 8000f72:	0003      	movs	r3, r0
 8000f74:	002a      	movs	r2, r5
 8000f76:	3b0b      	subs	r3, #11
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	2500      	movs	r5, #0
 8000f7c:	e7e3      	b.n	8000f46 <__aeabi_f2d+0x4e>
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	00000389 	.word	0x00000389
 8000f84:	000007ff 	.word	0x000007ff

08000f88 <__clzsi2>:
 8000f88:	211c      	movs	r1, #28
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	041b      	lsls	r3, r3, #16
 8000f8e:	4298      	cmp	r0, r3
 8000f90:	d301      	bcc.n	8000f96 <__clzsi2+0xe>
 8000f92:	0c00      	lsrs	r0, r0, #16
 8000f94:	3910      	subs	r1, #16
 8000f96:	0a1b      	lsrs	r3, r3, #8
 8000f98:	4298      	cmp	r0, r3
 8000f9a:	d301      	bcc.n	8000fa0 <__clzsi2+0x18>
 8000f9c:	0a00      	lsrs	r0, r0, #8
 8000f9e:	3908      	subs	r1, #8
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	4298      	cmp	r0, r3
 8000fa4:	d301      	bcc.n	8000faa <__clzsi2+0x22>
 8000fa6:	0900      	lsrs	r0, r0, #4
 8000fa8:	3904      	subs	r1, #4
 8000faa:	a202      	add	r2, pc, #8	@ (adr r2, 8000fb4 <__clzsi2+0x2c>)
 8000fac:	5c10      	ldrb	r0, [r2, r0]
 8000fae:	1840      	adds	r0, r0, r1
 8000fb0:	4770      	bx	lr
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	02020304 	.word	0x02020304
 8000fb8:	01010101 	.word	0x01010101
	...

08000fc4 <adc_reset>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int8_t adc_reset()
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 8000fca:	240f      	movs	r4, #15
 8000fcc:	193b      	adds	r3, r7, r4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
	status = HAL_ADC_Stop_DMA(&hadc1);
 8000fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80010c8 <adc_reset+0x104>)
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f005 fa21 	bl	800641c <HAL_ADC_Stop_DMA>
 8000fda:	0003      	movs	r3, r0
 8000fdc:	001a      	movs	r2, r3
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	701a      	strb	r2, [r3, #0]
	status |= HAL_ADC_DeInit(&hadc1);
 8000fe2:	4b39      	ldr	r3, [pc, #228]	@ (80010c8 <adc_reset+0x104>)
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f005 f8ef 	bl	80061c8 <HAL_ADC_DeInit>
 8000fea:	0003      	movs	r3, r0
 8000fec:	b259      	sxtb	r1, r3
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	193a      	adds	r2, r7, r4
 8000ff2:	7812      	ldrb	r2, [r2, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	701a      	strb	r2, [r3, #0]
	__HAL_RCC_ADC_FORCE_RESET();
 8000ff8:	4b34      	ldr	r3, [pc, #208]	@ (80010cc <adc_reset+0x108>)
 8000ffa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ffc:	4b33      	ldr	r3, [pc, #204]	@ (80010cc <adc_reset+0x108>)
 8000ffe:	2180      	movs	r1, #128	@ 0x80
 8001000:	0349      	lsls	r1, r1, #13
 8001002:	430a      	orrs	r2, r1
 8001004:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_Delay(10);
 8001006:	200a      	movs	r0, #10
 8001008:	f004 fd9a 	bl	8005b40 <HAL_Delay>
	__HAL_RCC_ADC_RELEASE_RESET();
 800100c:	4b2f      	ldr	r3, [pc, #188]	@ (80010cc <adc_reset+0x108>)
 800100e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001010:	4b2e      	ldr	r3, [pc, #184]	@ (80010cc <adc_reset+0x108>)
 8001012:	492f      	ldr	r1, [pc, #188]	@ (80010d0 <adc_reset+0x10c>)
 8001014:	400a      	ands	r2, r1
 8001016:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_Delay(10);
 8001018:	200a      	movs	r0, #10
 800101a:	f004 fd91 	bl	8005b40 <HAL_Delay>
	status |= HAL_ADC_Init(&hadc1);
 800101e:	4b2a      	ldr	r3, [pc, #168]	@ (80010c8 <adc_reset+0x104>)
 8001020:	0018      	movs	r0, r3
 8001022:	f004 ff2b 	bl	8005e7c <HAL_ADC_Init>
 8001026:	0003      	movs	r3, r0
 8001028:	b259      	sxtb	r1, r3
 800102a:	193b      	adds	r3, r7, r4
 800102c:	193a      	adds	r2, r7, r4
 800102e:	7812      	ldrb	r2, [r2, #0]
 8001030:	430a      	orrs	r2, r1
 8001032:	701a      	strb	r2, [r3, #0]

	ADC_ChannelConfTypeDef sConfig = {0};
 8001034:	003b      	movs	r3, r7
 8001036:	0018      	movs	r0, r3
 8001038:	230c      	movs	r3, #12
 800103a:	001a      	movs	r2, r3
 800103c:	2100      	movs	r1, #0
 800103e:	f009 fe3b 	bl	800acb8 <memset>

	sConfig.Channel = ADC_CHANNEL_0;
 8001042:	003b      	movs	r3, r7
 8001044:	2201      	movs	r2, #1
 8001046:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001048:	003b      	movs	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800104e:	003b      	movs	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
	status |= HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001054:	003a      	movs	r2, r7
 8001056:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <adc_reset+0x104>)
 8001058:	0011      	movs	r1, r2
 800105a:	0018      	movs	r0, r3
 800105c:	f005 fa60 	bl	8006520 <HAL_ADC_ConfigChannel>
 8001060:	0003      	movs	r3, r0
 8001062:	b259      	sxtb	r1, r3
 8001064:	193b      	adds	r3, r7, r4
 8001066:	193a      	adds	r2, r7, r4
 8001068:	7812      	ldrb	r2, [r2, #0]
 800106a:	430a      	orrs	r2, r1
 800106c:	701a      	strb	r2, [r3, #0]

	sConfig.Channel = ADC_CHANNEL_1;
 800106e:	003b      	movs	r3, r7
 8001070:	4a18      	ldr	r2, [pc, #96]	@ (80010d4 <adc_reset+0x110>)
 8001072:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001074:	003b      	movs	r3, r7
 8001076:	2204      	movs	r2, #4
 8001078:	605a      	str	r2, [r3, #4]
	status |= HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800107a:	003a      	movs	r2, r7
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <adc_reset+0x104>)
 800107e:	0011      	movs	r1, r2
 8001080:	0018      	movs	r0, r3
 8001082:	f005 fa4d 	bl	8006520 <HAL_ADC_ConfigChannel>
 8001086:	0003      	movs	r3, r0
 8001088:	b259      	sxtb	r1, r3
 800108a:	193b      	adds	r3, r7, r4
 800108c:	193a      	adds	r2, r7, r4
 800108e:	7812      	ldrb	r2, [r2, #0]
 8001090:	430a      	orrs	r2, r1
 8001092:	701a      	strb	r2, [r3, #0]

	sConfig.Channel = ADC_CHANNEL_2;
 8001094:	003b      	movs	r3, r7
 8001096:	4a10      	ldr	r2, [pc, #64]	@ (80010d8 <adc_reset+0x114>)
 8001098:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 800109a:	003b      	movs	r3, r7
 800109c:	2208      	movs	r2, #8
 800109e:	605a      	str	r2, [r3, #4]
	status |= HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80010a0:	003a      	movs	r2, r7
 80010a2:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <adc_reset+0x104>)
 80010a4:	0011      	movs	r1, r2
 80010a6:	0018      	movs	r0, r3
 80010a8:	f005 fa3a 	bl	8006520 <HAL_ADC_ConfigChannel>
 80010ac:	0003      	movs	r3, r0
 80010ae:	b259      	sxtb	r1, r3
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	193a      	adds	r2, r7, r4
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	701a      	strb	r2, [r3, #0]
	return status;
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b25b      	sxtb	r3, r3
}
 80010c0:	0018      	movs	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b005      	add	sp, #20
 80010c6:	bd90      	pop	{r4, r7, pc}
 80010c8:	2000004c 	.word	0x2000004c
 80010cc:	40021000 	.word	0x40021000
 80010d0:	ffefffff 	.word	0xffefffff
 80010d4:	04000002 	.word	0x04000002
 80010d8:	08000004 	.word	0x08000004

080010dc <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	adc_err_int = 1U;
 80010e4:	4b03      	ldr	r3, [pc, #12]	@ (80010f4 <HAL_ADC_ErrorCallback+0x18>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
}
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b002      	add	sp, #8
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			@ (mov r8, r8)
 80010f4:	20000366 	.word	0x20000366

080010f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int8_t modbus_status = HAL_OK;
 80010fe:	230f      	movs	r3, #15
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
	int8_t i2c_status = HAL_OK;
 8001106:	230c      	movs	r3, #12
 8001108:	18fb      	adds	r3, r7, r3
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
	int8_t adc_status = HAL_OK;
 800110e:	230b      	movs	r3, #11
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
	uint8_t modbus_tx_len = 0;
 8001116:	003b      	movs	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
	uint8_t prev_adc_shutdown = 0;
 800111c:	230e      	movs	r3, #14
 800111e:	18fb      	adds	r3, r7, r3
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001124:	f004 fc8f 	bl	8005a46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001128:	f000 fb4e 	bl	80017c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112c:	f000 fcd4 	bl	8001ad8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001130:	f000 fca4 	bl	8001a7c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001134:	f000 fc52 	bl	80019dc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001138:	f000 fb84 	bl	8001844 <MX_ADC1_Init>
  MX_I2C1_Init();
 800113c:	f000 fc0e 	bl	800195c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

    if(modbus_set_rx() != HAL_OK)
 8001140:	f001 f9ac 	bl	800249c <modbus_set_rx>
 8001144:	1e03      	subs	r3, r0, #0
 8001146:	d001      	beq.n	800114c <main+0x54>
    {
    	Error_Handler();
 8001148:	f000 fd6a 	bl	8001c20 <Error_Handler>
    }

	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)(&holding_register_database[ADC_0]), 3) != HAL_OK)
 800114c:	49c7      	ldr	r1, [pc, #796]	@ (800146c <main+0x374>)
 800114e:	4bc8      	ldr	r3, [pc, #800]	@ (8001470 <main+0x378>)
 8001150:	2203      	movs	r2, #3
 8001152:	0018      	movs	r0, r3
 8001154:	f005 f8d4 	bl	8006300 <HAL_ADC_Start_DMA>
 8001158:	1e03      	subs	r3, r0, #0
 800115a:	d001      	beq.n	8001160 <main+0x68>
	{
		Error_Handler();
 800115c:	f000 fd60 	bl	8001c20 <Error_Handler>
	}

	adc_err_int = 0U;
 8001160:	4bc4      	ldr	r3, [pc, #784]	@ (8001474 <main+0x37c>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]

	// Initialise the VL53L0X
	statInfo_t_VL53L0X* distanceStr = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
	i2c_status = vl53l0x_init(1);
 800116a:	250c      	movs	r5, #12
 800116c:	197c      	adds	r4, r7, r5
 800116e:	2001      	movs	r0, #1
 8001170:	f002 f80c 	bl	800318c <vl53l0x_init>
 8001174:	0003      	movs	r3, r0
 8001176:	7023      	strb	r3, [r4, #0]
	if(i2c_status != HAL_OK)
 8001178:	197b      	adds	r3, r7, r5
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b25b      	sxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d006      	beq.n	8001190 <main+0x98>
	{
		holding_register_database[VL53L0X_ERRORS] |= (1U << VL53L0X_INIT_ERROR);
 8001182:	4bbd      	ldr	r3, [pc, #756]	@ (8001478 <main+0x380>)
 8001184:	895b      	ldrh	r3, [r3, #10]
 8001186:	2201      	movs	r2, #1
 8001188:	4313      	orrs	r3, r2
 800118a:	b29a      	uxth	r2, r3
 800118c:	4bba      	ldr	r3, [pc, #744]	@ (8001478 <main+0x380>)
 800118e:	815a      	strh	r2, [r3, #10]
	}

	// Configure the sensor for high accuracy and speed in 20 cm.
	i2c_status = vl53l0x_set_signal_rate_limit(200);
 8001190:	250c      	movs	r5, #12
 8001192:	197c      	adds	r4, r7, r5
 8001194:	4bb9      	ldr	r3, [pc, #740]	@ (800147c <main+0x384>)
 8001196:	1c18      	adds	r0, r3, #0
 8001198:	f003 f8da 	bl	8004350 <vl53l0x_set_signal_rate_limit>
 800119c:	0003      	movs	r3, r0
 800119e:	7023      	strb	r3, [r4, #0]
	if(i2c_status != HAL_OK)
 80011a0:	197b      	adds	r3, r7, r5
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d006      	beq.n	80011b8 <main+0xc0>
	{
		holding_register_database[VL53L0X_ERRORS] |= (1U << VL53L0X_SIGNAL_RATE_LIMIT_ERROR);
 80011aa:	4bb3      	ldr	r3, [pc, #716]	@ (8001478 <main+0x380>)
 80011ac:	895b      	ldrh	r3, [r3, #10]
 80011ae:	2202      	movs	r2, #2
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4bb0      	ldr	r3, [pc, #704]	@ (8001478 <main+0x380>)
 80011b6:	815a      	strh	r2, [r3, #10]
	}
	i2c_status |= vl53l0x_set_measurement_timing_budget(300 * 1000UL);
 80011b8:	4bb1      	ldr	r3, [pc, #708]	@ (8001480 <main+0x388>)
 80011ba:	0018      	movs	r0, r3
 80011bc:	f003 f8f6 	bl	80043ac <vl53l0x_set_measurement_timing_budget>
 80011c0:	0003      	movs	r3, r0
 80011c2:	0019      	movs	r1, r3
 80011c4:	200c      	movs	r0, #12
 80011c6:	183b      	adds	r3, r7, r0
 80011c8:	183a      	adds	r2, r7, r0
 80011ca:	7812      	ldrb	r2, [r2, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	701a      	strb	r2, [r3, #0]
	if(i2c_status != HAL_OK)
 80011d0:	183b      	adds	r3, r7, r0
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d006      	beq.n	80011e8 <main+0xf0>
	{
		holding_register_database[VL53L0X_ERRORS] |= (1U << VL53L0X_TIMING_BUDGET_ERROR);
 80011da:	4ba7      	ldr	r3, [pc, #668]	@ (8001478 <main+0x380>)
 80011dc:	895b      	ldrh	r3, [r3, #10]
 80011de:	2204      	movs	r2, #4
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4ba4      	ldr	r3, [pc, #656]	@ (8001478 <main+0x380>)
 80011e6:	815a      	strh	r2, [r3, #10]
	}
	i2c_status |= vl53l0x_set_vcsel_pulse_period(VcselPeriodPreRange, 18);
 80011e8:	2112      	movs	r1, #18
 80011ea:	2000      	movs	r0, #0
 80011ec:	f003 f9d6 	bl	800459c <vl53l0x_set_vcsel_pulse_period>
 80011f0:	0003      	movs	r3, r0
 80011f2:	0019      	movs	r1, r3
 80011f4:	200c      	movs	r0, #12
 80011f6:	183b      	adds	r3, r7, r0
 80011f8:	183a      	adds	r2, r7, r0
 80011fa:	7812      	ldrb	r2, [r2, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	701a      	strb	r2, [r3, #0]
	if(i2c_status != HAL_OK)
 8001200:	183b      	adds	r3, r7, r0
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b25b      	sxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d006      	beq.n	8001218 <main+0x120>
	{
		holding_register_database[VL53L0X_ERRORS] |= (1U << VL53L0X_VCSEL_PULSE_ERROR);
 800120a:	4b9b      	ldr	r3, [pc, #620]	@ (8001478 <main+0x380>)
 800120c:	895b      	ldrh	r3, [r3, #10]
 800120e:	2208      	movs	r2, #8
 8001210:	4313      	orrs	r3, r2
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b98      	ldr	r3, [pc, #608]	@ (8001478 <main+0x380>)
 8001216:	815a      	strh	r2, [r3, #10]
	}
	i2c_status |= vl53l0x_set_vcsel_pulse_period(VcselPeriodFinalRange, 14);
 8001218:	210e      	movs	r1, #14
 800121a:	2001      	movs	r0, #1
 800121c:	f003 f9be 	bl	800459c <vl53l0x_set_vcsel_pulse_period>
 8001220:	0003      	movs	r3, r0
 8001222:	0019      	movs	r1, r3
 8001224:	200c      	movs	r0, #12
 8001226:	183b      	adds	r3, r7, r0
 8001228:	183a      	adds	r2, r7, r0
 800122a:	7812      	ldrb	r2, [r2, #0]
 800122c:	430a      	orrs	r2, r1
 800122e:	701a      	strb	r2, [r3, #0]
	if(i2c_status != HAL_OK)
 8001230:	183b      	adds	r3, r7, r0
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b25b      	sxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <main+0x150>
	{
		holding_register_database[VL53L0X_ERRORS] |= (1U << VL53L0X_VCSEL_PULSE_ERROR);
 800123a:	4b8f      	ldr	r3, [pc, #572]	@ (8001478 <main+0x380>)
 800123c:	895b      	ldrh	r3, [r3, #10]
 800123e:	2208      	movs	r2, #8
 8001240:	4313      	orrs	r3, r2
 8001242:	b29a      	uxth	r2, r3
 8001244:	4b8c      	ldr	r3, [pc, #560]	@ (8001478 <main+0x380>)
 8001246:	815a      	strh	r2, [r3, #10]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    // Update the GPIO_READ register
		GPIO_PinState oil_high = HAL_GPIO_ReadPin(Oil_High_GPIO_Port, Oil_High_Pin);
 8001248:	1cfc      	adds	r4, r7, #3
 800124a:	2380      	movs	r3, #128	@ 0x80
 800124c:	021a      	lsls	r2, r3, #8
 800124e:	23a0      	movs	r3, #160	@ 0xa0
 8001250:	05db      	lsls	r3, r3, #23
 8001252:	0011      	movs	r1, r2
 8001254:	0018      	movs	r0, r3
 8001256:	f006 fbe5 	bl	8007a24 <HAL_GPIO_ReadPin>
 800125a:	0003      	movs	r3, r0
 800125c:	7023      	strb	r3, [r4, #0]
		GPIO_PinState oil_low = HAL_GPIO_ReadPin(Oil_Low_GPIO_Port, Oil_Low_Pin);
 800125e:	1cbc      	adds	r4, r7, #2
 8001260:	4b88      	ldr	r3, [pc, #544]	@ (8001484 <main+0x38c>)
 8001262:	2101      	movs	r1, #1
 8001264:	0018      	movs	r0, r3
 8001266:	f006 fbdd 	bl	8007a24 <HAL_GPIO_ReadPin>
 800126a:	0003      	movs	r3, r0
 800126c:	7023      	strb	r3, [r4, #0]
		GPIO_PinState oil_estop = HAL_GPIO_ReadPin(Oil_E_Stop_GPIO_Port, Oil_E_Stop_Pin);
 800126e:	1c7c      	adds	r4, r7, #1
 8001270:	4b84      	ldr	r3, [pc, #528]	@ (8001484 <main+0x38c>)
 8001272:	2102      	movs	r1, #2
 8001274:	0018      	movs	r0, r3
 8001276:	f006 fbd5 	bl	8007a24 <HAL_GPIO_ReadPin>
 800127a:	0003      	movs	r3, r0
 800127c:	7023      	strb	r3, [r4, #0]

		holding_register_database[GPIO_READ] = ((oil_high << OIL_HIGH) | (oil_low << OIL_LOW) | (oil_estop << OIL_ESTOP));
 800127e:	1cfb      	adds	r3, r7, #3
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b21a      	sxth	r2, r3
 8001284:	1cbb      	adds	r3, r7, #2
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21a      	sxth	r2, r3
 8001290:	1c7b      	adds	r3, r7, #1
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	b21b      	sxth	r3, r3
 8001298:	4313      	orrs	r3, r2
 800129a:	b21b      	sxth	r3, r3
 800129c:	b29a      	uxth	r2, r3
 800129e:	4b76      	ldr	r3, [pc, #472]	@ (8001478 <main+0x380>)
 80012a0:	839a      	strh	r2, [r3, #28]

		if(prev_gpio_write_register != holding_register_database[GPIO_WRITE])
 80012a2:	4b75      	ldr	r3, [pc, #468]	@ (8001478 <main+0x380>)
 80012a4:	8bda      	ldrh	r2, [r3, #30]
 80012a6:	4b78      	ldr	r3, [pc, #480]	@ (8001488 <main+0x390>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d100      	bne.n	80012b0 <main+0x1b8>
 80012ae:	e0c6      	b.n	800143e <main+0x346>
		{
			if((prev_gpio_write_register & MCU_DCV_A_MASK) != (holding_register_database[GPIO_WRITE] & MCU_DCV_A_MASK))
 80012b0:	4b71      	ldr	r3, [pc, #452]	@ (8001478 <main+0x380>)
 80012b2:	8bda      	ldrh	r2, [r3, #30]
 80012b4:	4b74      	ldr	r3, [pc, #464]	@ (8001488 <main+0x390>)
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	4053      	eors	r3, r2
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	001a      	movs	r2, r3
 80012be:	2301      	movs	r3, #1
 80012c0:	4013      	ands	r3, r2
 80012c2:	d041      	beq.n	8001348 <main+0x250>
			{
				// If A wants to be high
				if((holding_register_database[GPIO_WRITE] & MCU_DCV_A_MASK) != 0)
 80012c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001478 <main+0x380>)
 80012c6:	8bdb      	ldrh	r3, [r3, #30]
 80012c8:	001a      	movs	r2, r3
 80012ca:	2301      	movs	r3, #1
 80012cc:	4013      	ands	r3, r2
 80012ce:	d030      	beq.n	8001332 <main+0x23a>
				{
					// If B wants to be low
					if((holding_register_database[GPIO_WRITE] & MCU_DCV_B_MASK) == 0)
 80012d0:	4b69      	ldr	r3, [pc, #420]	@ (8001478 <main+0x380>)
 80012d2:	8bdb      	ldrh	r3, [r3, #30]
 80012d4:	001a      	movs	r2, r3
 80012d6:	2302      	movs	r3, #2
 80012d8:	4013      	ands	r3, r2
 80012da:	d114      	bne.n	8001306 <main+0x20e>
					{
						// If B is high but B wants to be low
						if((prev_gpio_write_register & MCU_DCV_B_MASK) != 0)
 80012dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001488 <main+0x390>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	001a      	movs	r2, r3
 80012e2:	2302      	movs	r3, #2
 80012e4:	4013      	ands	r3, r2
 80012e6:	d02f      	beq.n	8001348 <main+0x250>
						{
							// Write B low first
							HAL_GPIO_WritePin(MCU_DCV_B_GPIO_Port, MCU_DCV_B_Pin,(holding_register_database[GPIO_WRITE] & MCU_DCV_B_MASK));
 80012e8:	4b63      	ldr	r3, [pc, #396]	@ (8001478 <main+0x380>)
 80012ea:	8bdb      	ldrh	r3, [r3, #30]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2202      	movs	r2, #2
 80012f0:	4013      	ands	r3, r2
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4865      	ldr	r0, [pc, #404]	@ (800148c <main+0x394>)
 80012f6:	001a      	movs	r2, r3
 80012f8:	2102      	movs	r1, #2
 80012fa:	f006 fbb0 	bl	8007a5e <HAL_GPIO_WritePin>
							HAL_Delay(100); // Wait a few seconds for safety
 80012fe:	2064      	movs	r0, #100	@ 0x64
 8001300:	f004 fc1e 	bl	8005b40 <HAL_Delay>
 8001304:	e020      	b.n	8001348 <main+0x250>
					}
					// If B wants to be high -> FORBIDDEN
					else
					{
						// If B is high
						if((prev_gpio_write_register & MCU_DCV_B_MASK) != 0)
 8001306:	4b60      	ldr	r3, [pc, #384]	@ (8001488 <main+0x390>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	001a      	movs	r2, r3
 800130c:	2302      	movs	r3, #2
 800130e:	4013      	ands	r3, r2
 8001310:	d007      	beq.n	8001322 <main+0x22a>
						{
							// Cancel the user request, clear the A bit
							holding_register_database[GPIO_WRITE] &= ~ MCU_DCV_A_MASK;
 8001312:	4b59      	ldr	r3, [pc, #356]	@ (8001478 <main+0x380>)
 8001314:	8bdb      	ldrh	r3, [r3, #30]
 8001316:	2201      	movs	r2, #1
 8001318:	4393      	bics	r3, r2
 800131a:	b29a      	uxth	r2, r3
 800131c:	4b56      	ldr	r3, [pc, #344]	@ (8001478 <main+0x380>)
 800131e:	83da      	strh	r2, [r3, #30]
 8001320:	e012      	b.n	8001348 <main+0x250>
						}
						// If A and B both want to be set high from a low state
						else
						{
							// Cancel the user request, clear the A and B bit
							holding_register_database[GPIO_WRITE] &= ~ (MCU_DCV_A_MASK | MCU_DCV_B_MASK);
 8001322:	4b55      	ldr	r3, [pc, #340]	@ (8001478 <main+0x380>)
 8001324:	8bdb      	ldrh	r3, [r3, #30]
 8001326:	2203      	movs	r2, #3
 8001328:	4393      	bics	r3, r2
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b52      	ldr	r3, [pc, #328]	@ (8001478 <main+0x380>)
 800132e:	83da      	strh	r2, [r3, #30]
 8001330:	e00a      	b.n	8001348 <main+0x250>
					}
				}
				// If A wants to be low
				else
				{
					HAL_GPIO_WritePin(MCU_DCV_A_GPIO_Port, MCU_DCV_A_Pin, (holding_register_database[GPIO_WRITE] & MCU_DCV_A_MASK));
 8001332:	4b51      	ldr	r3, [pc, #324]	@ (8001478 <main+0x380>)
 8001334:	8bdb      	ldrh	r3, [r3, #30]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2201      	movs	r2, #1
 800133a:	4013      	ands	r3, r2
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4853      	ldr	r0, [pc, #332]	@ (800148c <main+0x394>)
 8001340:	001a      	movs	r2, r3
 8001342:	2101      	movs	r1, #1
 8001344:	f006 fb8b 	bl	8007a5e <HAL_GPIO_WritePin>
				}
			}
			if((prev_gpio_write_register & MCU_DCV_B_MASK) != (holding_register_database[GPIO_WRITE] & MCU_DCV_B_MASK))
 8001348:	4b4b      	ldr	r3, [pc, #300]	@ (8001478 <main+0x380>)
 800134a:	8bda      	ldrh	r2, [r3, #30]
 800134c:	4b4e      	ldr	r3, [pc, #312]	@ (8001488 <main+0x390>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	4053      	eors	r3, r2
 8001352:	b29b      	uxth	r3, r3
 8001354:	001a      	movs	r2, r3
 8001356:	2302      	movs	r3, #2
 8001358:	4013      	ands	r3, r2
 800135a:	d041      	beq.n	80013e0 <main+0x2e8>
			{
				// If B wants to be high
				if((holding_register_database[GPIO_WRITE] & MCU_DCV_B_MASK) != 0)
 800135c:	4b46      	ldr	r3, [pc, #280]	@ (8001478 <main+0x380>)
 800135e:	8bdb      	ldrh	r3, [r3, #30]
 8001360:	001a      	movs	r2, r3
 8001362:	2302      	movs	r3, #2
 8001364:	4013      	ands	r3, r2
 8001366:	d030      	beq.n	80013ca <main+0x2d2>
				{
					// If A wants to be low
					if((holding_register_database[GPIO_WRITE] & MCU_DCV_A_MASK) == 0)
 8001368:	4b43      	ldr	r3, [pc, #268]	@ (8001478 <main+0x380>)
 800136a:	8bdb      	ldrh	r3, [r3, #30]
 800136c:	001a      	movs	r2, r3
 800136e:	2301      	movs	r3, #1
 8001370:	4013      	ands	r3, r2
 8001372:	d114      	bne.n	800139e <main+0x2a6>
					{
						// If A is high but A wants to be low
						if((prev_gpio_write_register & MCU_DCV_A_MASK) != 0)
 8001374:	4b44      	ldr	r3, [pc, #272]	@ (8001488 <main+0x390>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	001a      	movs	r2, r3
 800137a:	2301      	movs	r3, #1
 800137c:	4013      	ands	r3, r2
 800137e:	d02f      	beq.n	80013e0 <main+0x2e8>
						{
							// Write A low first
							HAL_GPIO_WritePin(MCU_DCV_A_GPIO_Port, MCU_DCV_A_Pin,(holding_register_database[GPIO_WRITE] & MCU_DCV_A_MASK));
 8001380:	4b3d      	ldr	r3, [pc, #244]	@ (8001478 <main+0x380>)
 8001382:	8bdb      	ldrh	r3, [r3, #30]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2201      	movs	r2, #1
 8001388:	4013      	ands	r3, r2
 800138a:	b2db      	uxtb	r3, r3
 800138c:	483f      	ldr	r0, [pc, #252]	@ (800148c <main+0x394>)
 800138e:	001a      	movs	r2, r3
 8001390:	2101      	movs	r1, #1
 8001392:	f006 fb64 	bl	8007a5e <HAL_GPIO_WritePin>
							HAL_Delay(100); // Wait a few seconds for safety
 8001396:	2064      	movs	r0, #100	@ 0x64
 8001398:	f004 fbd2 	bl	8005b40 <HAL_Delay>
 800139c:	e020      	b.n	80013e0 <main+0x2e8>
					}
					// If A wants to be high -> FORBIDDEN
					else
					{
						// If A is high
						if((prev_gpio_write_register & MCU_DCV_A_MASK) != 0)
 800139e:	4b3a      	ldr	r3, [pc, #232]	@ (8001488 <main+0x390>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	001a      	movs	r2, r3
 80013a4:	2301      	movs	r3, #1
 80013a6:	4013      	ands	r3, r2
 80013a8:	d007      	beq.n	80013ba <main+0x2c2>
						{
							// Cancel the user request, clear the B bit
							holding_register_database[GPIO_WRITE] &= ~ MCU_DCV_B_MASK;
 80013aa:	4b33      	ldr	r3, [pc, #204]	@ (8001478 <main+0x380>)
 80013ac:	8bdb      	ldrh	r3, [r3, #30]
 80013ae:	2202      	movs	r2, #2
 80013b0:	4393      	bics	r3, r2
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b30      	ldr	r3, [pc, #192]	@ (8001478 <main+0x380>)
 80013b6:	83da      	strh	r2, [r3, #30]
 80013b8:	e012      	b.n	80013e0 <main+0x2e8>
						}
						// If A and B both want to be set high from a low state
						else
						{
							// Cancel the user request, clear the A and B bit
							holding_register_database[GPIO_WRITE] &= ~ (MCU_DCV_A_MASK | MCU_DCV_B_MASK);
 80013ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001478 <main+0x380>)
 80013bc:	8bdb      	ldrh	r3, [r3, #30]
 80013be:	2203      	movs	r2, #3
 80013c0:	4393      	bics	r3, r2
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001478 <main+0x380>)
 80013c6:	83da      	strh	r2, [r3, #30]
 80013c8:	e00a      	b.n	80013e0 <main+0x2e8>
					}
				}
				// If B wants to be low
				else
				{
					HAL_GPIO_WritePin(MCU_DCV_B_GPIO_Port, MCU_DCV_B_Pin, (holding_register_database[GPIO_WRITE] & MCU_DCV_B_MASK));
 80013ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001478 <main+0x380>)
 80013cc:	8bdb      	ldrh	r3, [r3, #30]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2202      	movs	r2, #2
 80013d2:	4013      	ands	r3, r2
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	482d      	ldr	r0, [pc, #180]	@ (800148c <main+0x394>)
 80013d8:	001a      	movs	r2, r3
 80013da:	2102      	movs	r1, #2
 80013dc:	f006 fb3f 	bl	8007a5e <HAL_GPIO_WritePin>
				}
			}
			if((prev_gpio_write_register & HPU_GATE_MASK) != (holding_register_database[GPIO_WRITE] & HPU_GATE_MASK))
 80013e0:	4b25      	ldr	r3, [pc, #148]	@ (8001478 <main+0x380>)
 80013e2:	8bda      	ldrh	r2, [r3, #30]
 80013e4:	4b28      	ldr	r3, [pc, #160]	@ (8001488 <main+0x390>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	4053      	eors	r3, r2
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	001a      	movs	r2, r3
 80013ee:	2304      	movs	r3, #4
 80013f0:	4013      	ands	r3, r2
 80013f2:	d00b      	beq.n	800140c <main+0x314>
			{
				HAL_GPIO_WritePin(HPU_Gate_GPIO_Port, HPU_Gate_Pin, (holding_register_database[GPIO_WRITE] & HPU_GATE_MASK));
 80013f4:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <main+0x380>)
 80013f6:	8bdb      	ldrh	r3, [r3, #30]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2204      	movs	r2, #4
 80013fc:	4013      	ands	r3, r2
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	015b      	lsls	r3, r3, #5
 8001404:	4821      	ldr	r0, [pc, #132]	@ (800148c <main+0x394>)
 8001406:	0019      	movs	r1, r3
 8001408:	f006 fb29 	bl	8007a5e <HAL_GPIO_WritePin>
			}
			if((prev_gpio_write_register & WATER_SOLINOID_MASK) != (holding_register_database[GPIO_WRITE] & WATER_SOLINOID_MASK))
 800140c:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <main+0x380>)
 800140e:	8bda      	ldrh	r2, [r3, #30]
 8001410:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <main+0x390>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	4053      	eors	r3, r2
 8001416:	b29b      	uxth	r3, r3
 8001418:	001a      	movs	r2, r3
 800141a:	2308      	movs	r3, #8
 800141c:	4013      	ands	r3, r2
 800141e:	d00a      	beq.n	8001436 <main+0x33e>
			{
				HAL_GPIO_WritePin(Water_Solinoid_GPIO_Port, Water_Solinoid_Pin, (holding_register_database[GPIO_WRITE] & WATER_SOLINOID_MASK));
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <main+0x380>)
 8001422:	8bdb      	ldrh	r3, [r3, #30]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2208      	movs	r2, #8
 8001428:	4013      	ands	r3, r2
 800142a:	b2db      	uxtb	r3, r3
 800142c:	4815      	ldr	r0, [pc, #84]	@ (8001484 <main+0x38c>)
 800142e:	001a      	movs	r2, r3
 8001430:	2104      	movs	r1, #4
 8001432:	f006 fb14 	bl	8007a5e <HAL_GPIO_WritePin>
			}
			prev_gpio_write_register = holding_register_database[GPIO_WRITE];
 8001436:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <main+0x380>)
 8001438:	8bda      	ldrh	r2, [r3, #30]
 800143a:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <main+0x390>)
 800143c:	801a      	strh	r2, [r3, #0]
		}

		// Handle Modbus Communication
		if(modbus_rx())
 800143e:	f000 fcc5 	bl	8001dcc <modbus_rx>
 8001442:	1e03      	subs	r3, r0, #0
 8001444:	d100      	bne.n	8001448 <main+0x350>
 8001446:	e0ab      	b.n	80015a0 <main+0x4a8>
		{
			if(get_rx_buffer(0) == holding_register_database[MODBUS_ID]) // Check Slave ID
 8001448:	2000      	movs	r0, #0
 800144a:	f001 f933 	bl	80026b4 <get_rx_buffer>
 800144e:	0003      	movs	r3, r0
 8001450:	001a      	movs	r2, r3
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <main+0x380>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	d149      	bne.n	80014ee <main+0x3f6>
			{
				switch(get_rx_buffer(1))
 800145a:	2001      	movs	r0, #1
 800145c:	f001 f92a 	bl	80026b4 <get_rx_buffer>
 8001460:	0003      	movs	r3, r0
 8001462:	2b03      	cmp	r3, #3
 8001464:	d014      	beq.n	8001490 <main+0x398>
 8001466:	2b10      	cmp	r3, #16
 8001468:	d01b      	beq.n	80014a2 <main+0x3aa>
 800146a:	e023      	b.n	80014b4 <main+0x3bc>
 800146c:	20000014 	.word	0x20000014
 8001470:	2000004c 	.word	0x2000004c
 8001474:	20000366 	.word	0x20000366
 8001478:	20000000 	.word	0x20000000
 800147c:	43480000 	.word	0x43480000
 8001480:	000493e0 	.word	0x000493e0
 8001484:	50000c00 	.word	0x50000c00
 8001488:	20000364 	.word	0x20000364
 800148c:	50000400 	.word	0x50000400
				{
					case 0x03:
					{
						// Return holding registers
						modbus_status = return_holding_registers(&modbus_tx_len);
 8001490:	230f      	movs	r3, #15
 8001492:	18fc      	adds	r4, r7, r3
 8001494:	003b      	movs	r3, r7
 8001496:	0018      	movs	r0, r3
 8001498:	f000 fcaa 	bl	8001df0 <return_holding_registers>
 800149c:	0003      	movs	r3, r0
 800149e:	7023      	strb	r3, [r4, #0]
						break;
 80014a0:	e010      	b.n	80014c4 <main+0x3cc>
					}
					case 0x10:
					{
						// Write holding registers
						modbus_status = edit_multiple_registers(&modbus_tx_len);
 80014a2:	230f      	movs	r3, #15
 80014a4:	18fc      	adds	r4, r7, r3
 80014a6:	003b      	movs	r3, r7
 80014a8:	0018      	movs	r0, r3
 80014aa:	f000 fd4d 	bl	8001f48 <edit_multiple_registers>
 80014ae:	0003      	movs	r3, r0
 80014b0:	7023      	strb	r3, [r4, #0]
						break;
 80014b2:	e007      	b.n	80014c4 <main+0x3cc>
					}
					default:
					{
						modbus_status = modbus_exception(MB_ILLEGAL_FUNCTION);
 80014b4:	230f      	movs	r3, #15
 80014b6:	18fc      	adds	r4, r7, r3
 80014b8:	2004      	movs	r0, #4
 80014ba:	f000 fe47 	bl	800214c <modbus_exception>
 80014be:	0003      	movs	r3, r0
 80014c0:	7023      	strb	r3, [r4, #0]
						break;
 80014c2:	46c0      	nop			@ (mov r8, r8)
					}
				}
				if(modbus_status != 0)
 80014c4:	210f      	movs	r1, #15
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d04d      	beq.n	800156c <main+0x474>
				{
					holding_register_database[MB_ERRORS] |= 1U << (modbus_status + (MB_FATAL_ERROR - 1));
 80014d0:	4bb8      	ldr	r3, [pc, #736]	@ (80017b4 <main+0x6bc>)
 80014d2:	891a      	ldrh	r2, [r3, #8]
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	3314      	adds	r3, #20
 80014dc:	2101      	movs	r1, #1
 80014de:	4099      	lsls	r1, r3
 80014e0:	000b      	movs	r3, r1
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	4bb2      	ldr	r3, [pc, #712]	@ (80017b4 <main+0x6bc>)
 80014ea:	811a      	strh	r2, [r3, #8]
 80014ec:	e03e      	b.n	800156c <main+0x474>
				}
			}
			// Special case where you retrieve the modbus ID
			else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 80014ee:	2000      	movs	r0, #0
 80014f0:	f001 f8e0 	bl	80026b4 <get_rx_buffer>
 80014f4:	0003      	movs	r3, r0
 80014f6:	2bff      	cmp	r3, #255	@ 0xff
 80014f8:	d138      	bne.n	800156c <main+0x474>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 80014fa:	2001      	movs	r0, #1
 80014fc:	f001 f8da 	bl	80026b4 <get_rx_buffer>
 8001500:	0003      	movs	r3, r0
			else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8001502:	2b03      	cmp	r3, #3
 8001504:	d132      	bne.n	800156c <main+0x474>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8001506:	2002      	movs	r0, #2
 8001508:	f001 f8d4 	bl	80026b4 <get_rx_buffer>
 800150c:	0003      	movs	r3, r0
 800150e:	021c      	lsls	r4, r3, #8
 8001510:	2003      	movs	r0, #3
 8001512:	f001 f8cf 	bl	80026b4 <get_rx_buffer>
 8001516:	0003      	movs	r3, r0
 8001518:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 800151a:	d127      	bne.n	800156c <main+0x474>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 800151c:	2004      	movs	r0, #4
 800151e:	f001 f8c9 	bl	80026b4 <get_rx_buffer>
 8001522:	0003      	movs	r3, r0
 8001524:	021c      	lsls	r4, r3, #8
 8001526:	2005      	movs	r0, #5
 8001528:	f001 f8c4 	bl	80026b4 <get_rx_buffer>
 800152c:	0003      	movs	r3, r0
 800152e:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8001530:	2b01      	cmp	r3, #1
 8001532:	d11b      	bne.n	800156c <main+0x474>
			{
				modbus_status = return_holding_registers(&modbus_tx_len);
 8001534:	250f      	movs	r5, #15
 8001536:	197c      	adds	r4, r7, r5
 8001538:	003b      	movs	r3, r7
 800153a:	0018      	movs	r0, r3
 800153c:	f000 fc58 	bl	8001df0 <return_holding_registers>
 8001540:	0003      	movs	r3, r0
 8001542:	7023      	strb	r3, [r4, #0]
				if(modbus_status != 0)
 8001544:	0029      	movs	r1, r5
 8001546:	187b      	adds	r3, r7, r1
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b25b      	sxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00d      	beq.n	800156c <main+0x474>
				{
					holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 8001550:	4b98      	ldr	r3, [pc, #608]	@ (80017b4 <main+0x6bc>)
 8001552:	891a      	ldrh	r2, [r3, #8]
 8001554:	187b      	adds	r3, r7, r1
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b25b      	sxtb	r3, r3
 800155a:	3314      	adds	r3, #20
 800155c:	2101      	movs	r1, #1
 800155e:	4099      	lsls	r1, r3
 8001560:	000b      	movs	r3, r1
 8001562:	b29b      	uxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b29a      	uxth	r2, r3
 8001568:	4b92      	ldr	r3, [pc, #584]	@ (80017b4 <main+0x6bc>)
 800156a:	811a      	strh	r2, [r3, #8]
				}
			}
			modbus_status = modbus_set_rx();
 800156c:	250f      	movs	r5, #15
 800156e:	197c      	adds	r4, r7, r5
 8001570:	f000 ff94 	bl	800249c <modbus_set_rx>
 8001574:	0003      	movs	r3, r0
 8001576:	7023      	strb	r3, [r4, #0]
			if(modbus_status != 0)
 8001578:	0029      	movs	r1, r5
 800157a:	187b      	adds	r3, r7, r1
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b25b      	sxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00d      	beq.n	80015a0 <main+0x4a8>
			{
				holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 8001584:	4b8b      	ldr	r3, [pc, #556]	@ (80017b4 <main+0x6bc>)
 8001586:	891a      	ldrh	r2, [r3, #8]
 8001588:	187b      	adds	r3, r7, r1
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b25b      	sxtb	r3, r3
 800158e:	3314      	adds	r3, #20
 8001590:	2101      	movs	r1, #1
 8001592:	4099      	lsls	r1, r3
 8001594:	000b      	movs	r3, r1
 8001596:	b29b      	uxth	r3, r3
 8001598:	4313      	orrs	r3, r2
 800159a:	b29a      	uxth	r2, r3
 800159c:	4b85      	ldr	r3, [pc, #532]	@ (80017b4 <main+0x6bc>)
 800159e:	811a      	strh	r2, [r3, #8]
			}
		}
		modbus_status = monitor_modbus();
 80015a0:	250f      	movs	r5, #15
 80015a2:	197c      	adds	r4, r7, r5
 80015a4:	f000 ff9c 	bl	80024e0 <monitor_modbus>
 80015a8:	0003      	movs	r3, r0
 80015aa:	7023      	strb	r3, [r4, #0]
		if(modbus_status != HAL_OK && modbus_status != HAL_BUSY)
 80015ac:	197b      	adds	r3, r7, r5
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <main+0x4c0>
 80015b6:	e068      	b.n	800168a <main+0x592>
 80015b8:	197b      	adds	r3, r7, r5
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d063      	beq.n	800168a <main+0x592>
		{
			switch(modbus_status)
 80015c2:	197b      	adds	r3, r7, r5
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	2b15      	cmp	r3, #21
 80015ca:	d057      	beq.n	800167c <main+0x584>
 80015cc:	dc62      	bgt.n	8001694 <main+0x59c>
 80015ce:	2b14      	cmp	r3, #20
 80015d0:	d033      	beq.n	800163a <main+0x542>
 80015d2:	dc5f      	bgt.n	8001694 <main+0x59c>
 80015d4:	2b12      	cmp	r3, #18
 80015d6:	d15a      	bne.n	800168e <main+0x596>
			{
				case MB_TX_TIMEOUT:
				{
					for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 80015d8:	230d      	movs	r3, #13
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
 80015e0:	e022      	b.n	8001628 <main+0x530>
					{
						modbus_status = modbus_send(modbus_tx_len);
 80015e2:	003b      	movs	r3, r7
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	250f      	movs	r5, #15
 80015e8:	197c      	adds	r4, r7, r5
 80015ea:	0018      	movs	r0, r3
 80015ec:	f000 fe92 	bl	8002314 <modbus_send>
 80015f0:	0003      	movs	r3, r0
 80015f2:	7023      	strb	r3, [r4, #0]
						if(modbus_status != HAL_OK)
 80015f4:	0029      	movs	r1, r5
 80015f6:	187b      	adds	r3, r7, r1
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00d      	beq.n	800161c <main+0x524>
						{
							holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 8001600:	4b6c      	ldr	r3, [pc, #432]	@ (80017b4 <main+0x6bc>)
 8001602:	891a      	ldrh	r2, [r3, #8]
 8001604:	187b      	adds	r3, r7, r1
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b25b      	sxtb	r3, r3
 800160a:	3314      	adds	r3, #20
 800160c:	2101      	movs	r1, #1
 800160e:	4099      	lsls	r1, r3
 8001610:	000b      	movs	r3, r1
 8001612:	b29b      	uxth	r3, r3
 8001614:	4313      	orrs	r3, r2
 8001616:	b29a      	uxth	r2, r3
 8001618:	4b66      	ldr	r3, [pc, #408]	@ (80017b4 <main+0x6bc>)
 800161a:	811a      	strh	r2, [r3, #8]
					for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 800161c:	210d      	movs	r1, #13
 800161e:	187b      	adds	r3, r7, r1
 8001620:	781a      	ldrb	r2, [r3, #0]
 8001622:	187b      	adds	r3, r7, r1
 8001624:	3201      	adds	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	230d      	movs	r3, #13
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	b29a      	uxth	r2, r3
 8001630:	4b60      	ldr	r3, [pc, #384]	@ (80017b4 <main+0x6bc>)
 8001632:	88db      	ldrh	r3, [r3, #6]
 8001634:	429a      	cmp	r2, r3
 8001636:	d3d4      	bcc.n	80015e2 <main+0x4ea>
						}
					}
				  break;
 8001638:	e02c      	b.n	8001694 <main+0x59c>
					// Error only relates to Modbus Master Nodes
					break;
				}
				case MB_UART_ERROR:
				{
					modbus_status = modbus_set_rx();
 800163a:	250f      	movs	r5, #15
 800163c:	197c      	adds	r4, r7, r5
 800163e:	f000 ff2d 	bl	800249c <modbus_set_rx>
 8001642:	0003      	movs	r3, r0
 8001644:	7023      	strb	r3, [r4, #0]
					if(modbus_status != 0)
 8001646:	0029      	movs	r1, r5
 8001648:	187b      	adds	r3, r7, r1
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b25b      	sxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d01f      	beq.n	8001692 <main+0x59a>
					{
						holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 8001652:	4b58      	ldr	r3, [pc, #352]	@ (80017b4 <main+0x6bc>)
 8001654:	891a      	ldrh	r2, [r3, #8]
 8001656:	187b      	adds	r3, r7, r1
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b25b      	sxtb	r3, r3
 800165c:	3314      	adds	r3, #20
 800165e:	2101      	movs	r1, #1
 8001660:	4099      	lsls	r1, r3
 8001662:	000b      	movs	r3, r1
 8001664:	b29b      	uxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b29a      	uxth	r2, r3
 800166a:	4b52      	ldr	r3, [pc, #328]	@ (80017b4 <main+0x6bc>)
 800166c:	811a      	strh	r2, [r3, #8]
					}
					break;
 800166e:	e010      	b.n	8001692 <main+0x59a>
				}
				case MB_FATAL_ERROR:
				{
					while(modbus_status != HAL_OK)
					{
						modbus_status = modbus_reset();
 8001670:	230f      	movs	r3, #15
 8001672:	18fc      	adds	r4, r7, r3
 8001674:	f000 fea4 	bl	80023c0 <modbus_reset>
 8001678:	0003      	movs	r3, r0
 800167a:	7023      	strb	r3, [r4, #0]
					while(modbus_status != HAL_OK)
 800167c:	230f      	movs	r3, #15
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b25b      	sxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f3      	bne.n	8001670 <main+0x578>
					}
					break;
 8001688:	e004      	b.n	8001694 <main+0x59c>
				}
				default:
 800168a:	46c0      	nop			@ (mov r8, r8)
 800168c:	e002      	b.n	8001694 <main+0x59c>
					break;
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	e000      	b.n	8001694 <main+0x59c>
					break;
 8001692:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}

		// Handle I2C Communication
		if(!holding_register_database[I2C_SHUTDOWN])
 8001694:	4b47      	ldr	r3, [pc, #284]	@ (80017b4 <main+0x6bc>)
 8001696:	89db      	ldrh	r3, [r3, #14]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d115      	bne.n	80016c8 <main+0x5d0>
		{
			// statInfo_t_VL53L0X distanceStr is the statistics read from the sensor.
			i2c_status = vl53l0x_read_range_single(distanceStr, &holding_register_database[LASER_DISTANCE]);
 800169c:	250c      	movs	r5, #12
 800169e:	197c      	adds	r4, r7, r5
 80016a0:	4a45      	ldr	r2, [pc, #276]	@ (80017b8 <main+0x6c0>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	0011      	movs	r1, r2
 80016a6:	0018      	movs	r0, r3
 80016a8:	f003 fc20 	bl	8004eec <vl53l0x_read_range_single>
 80016ac:	0003      	movs	r3, r0
 80016ae:	7023      	strb	r3, [r4, #0]
			if(i2c_status != HAL_OK)
 80016b0:	197b      	adds	r3, r7, r5
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d006      	beq.n	80016c8 <main+0x5d0>
			{
				holding_register_database[VL53L0X_ERRORS] |= (1U << VL53L0X_AQUISITION_ERROR);
 80016ba:	4b3e      	ldr	r3, [pc, #248]	@ (80017b4 <main+0x6bc>)
 80016bc:	895b      	ldrh	r3, [r3, #10]
 80016be:	2210      	movs	r2, #16
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	4b3b      	ldr	r3, [pc, #236]	@ (80017b4 <main+0x6bc>)
 80016c6:	815a      	strh	r2, [r3, #10]
			}
		}

		// Handle ADC Errors

		if(adc_err_int != 0U)
 80016c8:	4b3c      	ldr	r3, [pc, #240]	@ (80017bc <main+0x6c4>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d02b      	beq.n	800172a <main+0x632>
		{
			adc_err_int = 0U;
 80016d2:	4b3a      	ldr	r3, [pc, #232]	@ (80017bc <main+0x6c4>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
			holding_register_database[ADC_ERRORS] |= hadc1.ErrorCode;
 80016d8:	4b39      	ldr	r3, [pc, #228]	@ (80017c0 <main+0x6c8>)
 80016da:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80016dc:	4b35      	ldr	r3, [pc, #212]	@ (80017b4 <main+0x6bc>)
 80016de:	8a1a      	ldrh	r2, [r3, #16]
 80016e0:	b28b      	uxth	r3, r1
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	4b33      	ldr	r3, [pc, #204]	@ (80017b4 <main+0x6bc>)
 80016e8:	821a      	strh	r2, [r3, #16]
			adc_status = adc_reset();
 80016ea:	250b      	movs	r5, #11
 80016ec:	197c      	adds	r4, r7, r5
 80016ee:	f7ff fc69 	bl	8000fc4 <adc_reset>
 80016f2:	0003      	movs	r3, r0
 80016f4:	7023      	strb	r3, [r4, #0]
			if(adc_status != HAL_OK)
 80016f6:	197b      	adds	r3, r7, r5
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00e      	beq.n	800171e <main+0x626>
			{
				// Fatal Error
				holding_register_database[ADC_ERRORS] |= (1U << 5U);
 8001700:	4b2c      	ldr	r3, [pc, #176]	@ (80017b4 <main+0x6bc>)
 8001702:	8a1b      	ldrh	r3, [r3, #16]
 8001704:	2220      	movs	r2, #32
 8001706:	4313      	orrs	r3, r2
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b2a      	ldr	r3, [pc, #168]	@ (80017b4 <main+0x6bc>)
 800170c:	821a      	strh	r2, [r3, #16]
				holding_register_database[ADC_SHUTDOWN] = 1;
 800170e:	4b29      	ldr	r3, [pc, #164]	@ (80017b4 <main+0x6bc>)
 8001710:	2201      	movs	r2, #1
 8001712:	825a      	strh	r2, [r3, #18]
				prev_adc_shutdown = 1;
 8001714:	230e      	movs	r3, #14
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	e005      	b.n	800172a <main+0x632>
			}
			else
			{
				HAL_ADC_Start_DMA(&hadc1, (uint32_t*)(&holding_register_database[ADC_0]), 3);
 800171e:	4929      	ldr	r1, [pc, #164]	@ (80017c4 <main+0x6cc>)
 8001720:	4b27      	ldr	r3, [pc, #156]	@ (80017c0 <main+0x6c8>)
 8001722:	2203      	movs	r2, #3
 8001724:	0018      	movs	r0, r3
 8001726:	f004 fdeb 	bl	8006300 <HAL_ADC_Start_DMA>
			}
		}
		if(prev_adc_shutdown != holding_register_database[ADC_SHUTDOWN])
 800172a:	210e      	movs	r1, #14
 800172c:	187b      	adds	r3, r7, r1
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	b29a      	uxth	r2, r3
 8001732:	4b20      	ldr	r3, [pc, #128]	@ (80017b4 <main+0x6bc>)
 8001734:	8a5b      	ldrh	r3, [r3, #18]
 8001736:	429a      	cmp	r2, r3
 8001738:	d100      	bne.n	800173c <main+0x644>
 800173a:	e585      	b.n	8001248 <main+0x150>
		{
			if(prev_adc_shutdown == 1)
 800173c:	187b      	adds	r3, r7, r1
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d11f      	bne.n	8001784 <main+0x68c>
			{
				prev_adc_shutdown = 0;
 8001744:	187b      	adds	r3, r7, r1
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
				adc_status = adc_reset();
 800174a:	250b      	movs	r5, #11
 800174c:	197c      	adds	r4, r7, r5
 800174e:	f7ff fc39 	bl	8000fc4 <adc_reset>
 8001752:	0003      	movs	r3, r0
 8001754:	7023      	strb	r3, [r4, #0]
				if(adc_status != HAL_OK)
 8001756:	197b      	adds	r3, r7, r5
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b25b      	sxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00a      	beq.n	8001776 <main+0x67e>
				{
					// Fatal Error
					holding_register_database[ADC_ERRORS] |= (1U << 5U);
 8001760:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <main+0x6bc>)
 8001762:	8a1b      	ldrh	r3, [r3, #16]
 8001764:	2220      	movs	r2, #32
 8001766:	4313      	orrs	r3, r2
 8001768:	b29a      	uxth	r2, r3
 800176a:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <main+0x6bc>)
 800176c:	821a      	strh	r2, [r3, #16]
					holding_register_database[ADC_SHUTDOWN] = 1;
 800176e:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <main+0x6bc>)
 8001770:	2201      	movs	r2, #1
 8001772:	825a      	strh	r2, [r3, #18]
 8001774:	e018      	b.n	80017a8 <main+0x6b0>
				}
				else
				{
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)(&holding_register_database[ADC_0]), 3);
 8001776:	4913      	ldr	r1, [pc, #76]	@ (80017c4 <main+0x6cc>)
 8001778:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <main+0x6c8>)
 800177a:	2203      	movs	r2, #3
 800177c:	0018      	movs	r0, r3
 800177e:	f004 fdbf 	bl	8006300 <HAL_ADC_Start_DMA>
 8001782:	e011      	b.n	80017a8 <main+0x6b0>
				}
			}
			else
			{
				adc_status = adc_reset();
 8001784:	250b      	movs	r5, #11
 8001786:	197c      	adds	r4, r7, r5
 8001788:	f7ff fc1c 	bl	8000fc4 <adc_reset>
 800178c:	0003      	movs	r3, r0
 800178e:	7023      	strb	r3, [r4, #0]
				if(adc_status != HAL_OK)
 8001790:	197b      	adds	r3, r7, r5
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b25b      	sxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <main+0x6b0>
				{
					// Fatal Error
					holding_register_database[ADC_ERRORS] |= (1U << 5U);
 800179a:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <main+0x6bc>)
 800179c:	8a1b      	ldrh	r3, [r3, #16]
 800179e:	2220      	movs	r2, #32
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	4b03      	ldr	r3, [pc, #12]	@ (80017b4 <main+0x6bc>)
 80017a6:	821a      	strh	r2, [r3, #16]
				}
			}
			prev_adc_shutdown = holding_register_database[ADC_SHUTDOWN];
 80017a8:	4b02      	ldr	r3, [pc, #8]	@ (80017b4 <main+0x6bc>)
 80017aa:	8a5a      	ldrh	r2, [r3, #18]
 80017ac:	230e      	movs	r3, #14
 80017ae:	18fb      	adds	r3, r7, r3
 80017b0:	701a      	strb	r2, [r3, #0]
  {
 80017b2:	e549      	b.n	8001248 <main+0x150>
 80017b4:	20000000 	.word	0x20000000
 80017b8:	2000001a 	.word	0x2000001a
 80017bc:	20000366 	.word	0x20000366
 80017c0:	2000004c 	.word	0x2000004c
 80017c4:	20000014 	.word	0x20000014

080017c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b08f      	sub	sp, #60	@ 0x3c
 80017cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ce:	2418      	movs	r4, #24
 80017d0:	193b      	adds	r3, r7, r4
 80017d2:	0018      	movs	r0, r3
 80017d4:	2320      	movs	r3, #32
 80017d6:	001a      	movs	r2, r3
 80017d8:	2100      	movs	r1, #0
 80017da:	f009 fa6d 	bl	800acb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	0018      	movs	r0, r3
 80017e2:	2314      	movs	r3, #20
 80017e4:	001a      	movs	r2, r3
 80017e6:	2100      	movs	r1, #0
 80017e8:	f009 fa66 	bl	800acb8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	2201      	movs	r2, #1
 80017f0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017f2:	193b      	adds	r3, r7, r4
 80017f4:	2280      	movs	r2, #128	@ 0x80
 80017f6:	0252      	lsls	r2, r2, #9
 80017f8:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fa:	193b      	adds	r3, r7, r4
 80017fc:	0018      	movs	r0, r3
 80017fe:	f007 f817 	bl	8008830 <HAL_RCC_OscConfig>
 8001802:	1e03      	subs	r3, r0, #0
 8001804:	d001      	beq.n	800180a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8001806:	f000 fa0b 	bl	8001c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	2201      	movs	r2, #1
 8001814:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2100      	movs	r1, #0
 800182c:	0018      	movs	r0, r3
 800182e:	f007 fa25 	bl	8008c7c <HAL_RCC_ClockConfig>
 8001832:	1e03      	subs	r3, r0, #0
 8001834:	d001      	beq.n	800183a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001836:	f000 f9f3 	bl	8001c20 <Error_Handler>
  }
}
 800183a:	46c0      	nop			@ (mov r8, r8)
 800183c:	46bd      	mov	sp, r7
 800183e:	b00f      	add	sp, #60	@ 0x3c
 8001840:	bd90      	pop	{r4, r7, pc}
	...

08001844 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	0018      	movs	r0, r3
 800184e:	230c      	movs	r3, #12
 8001850:	001a      	movs	r2, r3
 8001852:	2100      	movs	r1, #0
 8001854:	f009 fa30 	bl	800acb8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001858:	4b3c      	ldr	r3, [pc, #240]	@ (800194c <MX_ADC1_Init+0x108>)
 800185a:	4a3d      	ldr	r2, [pc, #244]	@ (8001950 <MX_ADC1_Init+0x10c>)
 800185c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800185e:	4b3b      	ldr	r3, [pc, #236]	@ (800194c <MX_ADC1_Init+0x108>)
 8001860:	22c0      	movs	r2, #192	@ 0xc0
 8001862:	0612      	lsls	r2, r2, #24
 8001864:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001866:	4b39      	ldr	r3, [pc, #228]	@ (800194c <MX_ADC1_Init+0x108>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800186c:	4b37      	ldr	r3, [pc, #220]	@ (800194c <MX_ADC1_Init+0x108>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001872:	4b36      	ldr	r3, [pc, #216]	@ (800194c <MX_ADC1_Init+0x108>)
 8001874:	2280      	movs	r2, #128	@ 0x80
 8001876:	0392      	lsls	r2, r2, #14
 8001878:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800187a:	4b34      	ldr	r3, [pc, #208]	@ (800194c <MX_ADC1_Init+0x108>)
 800187c:	2204      	movs	r2, #4
 800187e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001880:	4b32      	ldr	r3, [pc, #200]	@ (800194c <MX_ADC1_Init+0x108>)
 8001882:	2200      	movs	r2, #0
 8001884:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001886:	4b31      	ldr	r3, [pc, #196]	@ (800194c <MX_ADC1_Init+0x108>)
 8001888:	2200      	movs	r2, #0
 800188a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800188c:	4b2f      	ldr	r3, [pc, #188]	@ (800194c <MX_ADC1_Init+0x108>)
 800188e:	2201      	movs	r2, #1
 8001890:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8001892:	4b2e      	ldr	r3, [pc, #184]	@ (800194c <MX_ADC1_Init+0x108>)
 8001894:	2203      	movs	r2, #3
 8001896:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001898:	4b2c      	ldr	r3, [pc, #176]	@ (800194c <MX_ADC1_Init+0x108>)
 800189a:	2200      	movs	r2, #0
 800189c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800189e:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <MX_ADC1_Init+0x108>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018a4:	4b29      	ldr	r3, [pc, #164]	@ (800194c <MX_ADC1_Init+0x108>)
 80018a6:	222c      	movs	r2, #44	@ 0x2c
 80018a8:	2100      	movs	r1, #0
 80018aa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018ac:	4b27      	ldr	r3, [pc, #156]	@ (800194c <MX_ADC1_Init+0x108>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80018b2:	4b26      	ldr	r3, [pc, #152]	@ (800194c <MX_ADC1_Init+0x108>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80018b8:	4b24      	ldr	r3, [pc, #144]	@ (800194c <MX_ADC1_Init+0x108>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80018be:	4b23      	ldr	r3, [pc, #140]	@ (800194c <MX_ADC1_Init+0x108>)
 80018c0:	223c      	movs	r2, #60	@ 0x3c
 80018c2:	2100      	movs	r1, #0
 80018c4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 80018c6:	4b21      	ldr	r3, [pc, #132]	@ (800194c <MX_ADC1_Init+0x108>)
 80018c8:	2280      	movs	r2, #128	@ 0x80
 80018ca:	0592      	lsls	r2, r2, #22
 80018cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018ce:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <MX_ADC1_Init+0x108>)
 80018d0:	0018      	movs	r0, r3
 80018d2:	f004 fad3 	bl	8005e7c <HAL_ADC_Init>
 80018d6:	1e03      	subs	r3, r0, #0
 80018d8:	d001      	beq.n	80018de <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80018da:	f000 f9a1 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	2201      	movs	r2, #1
 80018e2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	2200      	movs	r2, #0
 80018e8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018f0:	1d3a      	adds	r2, r7, #4
 80018f2:	4b16      	ldr	r3, [pc, #88]	@ (800194c <MX_ADC1_Init+0x108>)
 80018f4:	0011      	movs	r1, r2
 80018f6:	0018      	movs	r0, r3
 80018f8:	f004 fe12 	bl	8006520 <HAL_ADC_ConfigChannel>
 80018fc:	1e03      	subs	r3, r0, #0
 80018fe:	d001      	beq.n	8001904 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8001900:	f000 f98e 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	4a13      	ldr	r2, [pc, #76]	@ (8001954 <MX_ADC1_Init+0x110>)
 8001908:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	2204      	movs	r2, #4
 800190e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001910:	1d3a      	adds	r2, r7, #4
 8001912:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <MX_ADC1_Init+0x108>)
 8001914:	0011      	movs	r1, r2
 8001916:	0018      	movs	r0, r3
 8001918:	f004 fe02 	bl	8006520 <HAL_ADC_ConfigChannel>
 800191c:	1e03      	subs	r3, r0, #0
 800191e:	d001      	beq.n	8001924 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001920:	f000 f97e 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	4a0c      	ldr	r2, [pc, #48]	@ (8001958 <MX_ADC1_Init+0x114>)
 8001928:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	2208      	movs	r2, #8
 800192e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001930:	1d3a      	adds	r2, r7, #4
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <MX_ADC1_Init+0x108>)
 8001934:	0011      	movs	r1, r2
 8001936:	0018      	movs	r0, r3
 8001938:	f004 fdf2 	bl	8006520 <HAL_ADC_ConfigChannel>
 800193c:	1e03      	subs	r3, r0, #0
 800193e:	d001      	beq.n	8001944 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001940:	f000 f96e 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001944:	46c0      	nop			@ (mov r8, r8)
 8001946:	46bd      	mov	sp, r7
 8001948:	b004      	add	sp, #16
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000004c 	.word	0x2000004c
 8001950:	40012400 	.word	0x40012400
 8001954:	04000002 	.word	0x04000002
 8001958:	08000004 	.word	0x08000004

0800195c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001960:	4b1b      	ldr	r3, [pc, #108]	@ (80019d0 <MX_I2C1_Init+0x74>)
 8001962:	4a1c      	ldr	r2, [pc, #112]	@ (80019d4 <MX_I2C1_Init+0x78>)
 8001964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8001966:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <MX_I2C1_Init+0x74>)
 8001968:	4a1b      	ldr	r2, [pc, #108]	@ (80019d8 <MX_I2C1_Init+0x7c>)
 800196a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800196c:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <MX_I2C1_Init+0x74>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001972:	4b17      	ldr	r3, [pc, #92]	@ (80019d0 <MX_I2C1_Init+0x74>)
 8001974:	2201      	movs	r2, #1
 8001976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001978:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <MX_I2C1_Init+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800197e:	4b14      	ldr	r3, [pc, #80]	@ (80019d0 <MX_I2C1_Init+0x74>)
 8001980:	2200      	movs	r2, #0
 8001982:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001984:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <MX_I2C1_Init+0x74>)
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800198a:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <MX_I2C1_Init+0x74>)
 800198c:	2200      	movs	r2, #0
 800198e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001990:	4b0f      	ldr	r3, [pc, #60]	@ (80019d0 <MX_I2C1_Init+0x74>)
 8001992:	2200      	movs	r2, #0
 8001994:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001996:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <MX_I2C1_Init+0x74>)
 8001998:	0018      	movs	r0, r3
 800199a:	f006 f87d 	bl	8007a98 <HAL_I2C_Init>
 800199e:	1e03      	subs	r3, r0, #0
 80019a0:	d001      	beq.n	80019a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019a2:	f000 f93d 	bl	8001c20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019a6:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <MX_I2C1_Init+0x74>)
 80019a8:	2100      	movs	r1, #0
 80019aa:	0018      	movs	r0, r3
 80019ac:	f006 fea8 	bl	8008700 <HAL_I2CEx_ConfigAnalogFilter>
 80019b0:	1e03      	subs	r3, r0, #0
 80019b2:	d001      	beq.n	80019b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019b4:	f000 f934 	bl	8001c20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019b8:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <MX_I2C1_Init+0x74>)
 80019ba:	2100      	movs	r1, #0
 80019bc:	0018      	movs	r0, r3
 80019be:	f006 feeb 	bl	8008798 <HAL_I2CEx_ConfigDigitalFilter>
 80019c2:	1e03      	subs	r3, r0, #0
 80019c4:	d001      	beq.n	80019ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019c6:	f000 f92b 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	2000010c 	.word	0x2000010c
 80019d4:	40005400 	.word	0x40005400
 80019d8:	00201d2b 	.word	0x00201d2b

080019dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019e0:	4b24      	ldr	r3, [pc, #144]	@ (8001a74 <MX_USART1_UART_Init+0x98>)
 80019e2:	4a25      	ldr	r2, [pc, #148]	@ (8001a78 <MX_USART1_UART_Init+0x9c>)
 80019e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80019e6:	4b23      	ldr	r3, [pc, #140]	@ (8001a74 <MX_USART1_UART_Init+0x98>)
 80019e8:	2296      	movs	r2, #150	@ 0x96
 80019ea:	0192      	lsls	r2, r2, #6
 80019ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019ee:	4b21      	ldr	r3, [pc, #132]	@ (8001a74 <MX_USART1_UART_Init+0x98>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a74 <MX_USART1_UART_Init+0x98>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001a74 <MX_USART1_UART_Init+0x98>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a00:	4b1c      	ldr	r3, [pc, #112]	@ (8001a74 <MX_USART1_UART_Init+0x98>)
 8001a02:	220c      	movs	r2, #12
 8001a04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a06:	4b1b      	ldr	r3, [pc, #108]	@ (8001a74 <MX_USART1_UART_Init+0x98>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a0c:	4b19      	ldr	r3, [pc, #100]	@ (8001a74 <MX_USART1_UART_Init+0x98>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a12:	4b18      	ldr	r3, [pc, #96]	@ (8001a74 <MX_USART1_UART_Init+0x98>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a18:	4b16      	ldr	r3, [pc, #88]	@ (8001a74 <MX_USART1_UART_Init+0x98>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a1e:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <MX_USART1_UART_Init+0x98>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001a24:	4813      	ldr	r0, [pc, #76]	@ (8001a74 <MX_USART1_UART_Init+0x98>)
 8001a26:	2300      	movs	r3, #0
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	f008 ff38 	bl	800a8a0 <HAL_RS485Ex_Init>
 8001a30:	1e03      	subs	r3, r0, #0
 8001a32:	d001      	beq.n	8001a38 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001a34:	f000 f8f4 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a38:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <MX_USART1_UART_Init+0x98>)
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f008 fff3 	bl	800aa28 <HAL_UARTEx_SetTxFifoThreshold>
 8001a42:	1e03      	subs	r3, r0, #0
 8001a44:	d001      	beq.n	8001a4a <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8001a46:	f000 f8eb 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <MX_USART1_UART_Init+0x98>)
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f009 f82a 	bl	800aaa8 <HAL_UARTEx_SetRxFifoThreshold>
 8001a54:	1e03      	subs	r3, r0, #0
 8001a56:	d001      	beq.n	8001a5c <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001a58:	f000 f8e2 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <MX_USART1_UART_Init+0x98>)
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f008 ffa8 	bl	800a9b4 <HAL_UARTEx_DisableFifoMode>
 8001a64:	1e03      	subs	r3, r0, #0
 8001a66:	d001      	beq.n	8001a6c <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8001a68:	f000 f8da 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a6c:	46c0      	nop			@ (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	20000218 	.word	0x20000218
 8001a78:	40013800 	.word	0x40013800

08001a7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a82:	4b14      	ldr	r3, [pc, #80]	@ (8001ad4 <MX_DMA_Init+0x58>)
 8001a84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a86:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <MX_DMA_Init+0x58>)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <MX_DMA_Init+0x58>)
 8001a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a92:	2201      	movs	r2, #1
 8001a94:	4013      	ands	r3, r2
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2009      	movs	r0, #9
 8001aa0:	f005 f982 	bl	8006da8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001aa4:	2009      	movs	r0, #9
 8001aa6:	f005 f994 	bl	8006dd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	200a      	movs	r0, #10
 8001ab0:	f005 f97a 	bl	8006da8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001ab4:	200a      	movs	r0, #10
 8001ab6:	f005 f98c 	bl	8006dd2 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_DMA1_CH4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_DMA1_CH4_5_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	200b      	movs	r0, #11
 8001ac0:	f005 f972 	bl	8006da8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_DMA1_CH4_5_IRQn);
 8001ac4:	200b      	movs	r0, #11
 8001ac6:	f005 f984 	bl	8006dd2 <HAL_NVIC_EnableIRQ>

}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b002      	add	sp, #8
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			@ (mov r8, r8)
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b08b      	sub	sp, #44	@ 0x2c
 8001adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ade:	2414      	movs	r4, #20
 8001ae0:	193b      	adds	r3, r7, r4
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	2314      	movs	r3, #20
 8001ae6:	001a      	movs	r2, r3
 8001ae8:	2100      	movs	r1, #0
 8001aea:	f009 f8e5 	bl	800acb8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aee:	4b48      	ldr	r3, [pc, #288]	@ (8001c10 <MX_GPIO_Init+0x138>)
 8001af0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001af2:	4b47      	ldr	r3, [pc, #284]	@ (8001c10 <MX_GPIO_Init+0x138>)
 8001af4:	2104      	movs	r1, #4
 8001af6:	430a      	orrs	r2, r1
 8001af8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001afa:	4b45      	ldr	r3, [pc, #276]	@ (8001c10 <MX_GPIO_Init+0x138>)
 8001afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001afe:	2204      	movs	r2, #4
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b06:	4b42      	ldr	r3, [pc, #264]	@ (8001c10 <MX_GPIO_Init+0x138>)
 8001b08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b0a:	4b41      	ldr	r3, [pc, #260]	@ (8001c10 <MX_GPIO_Init+0x138>)
 8001b0c:	2120      	movs	r1, #32
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b12:	4b3f      	ldr	r3, [pc, #252]	@ (8001c10 <MX_GPIO_Init+0x138>)
 8001b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b16:	2220      	movs	r2, #32
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c10 <MX_GPIO_Init+0x138>)
 8001b20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b22:	4b3b      	ldr	r3, [pc, #236]	@ (8001c10 <MX_GPIO_Init+0x138>)
 8001b24:	2101      	movs	r1, #1
 8001b26:	430a      	orrs	r2, r1
 8001b28:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b2a:	4b39      	ldr	r3, [pc, #228]	@ (8001c10 <MX_GPIO_Init+0x138>)
 8001b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4013      	ands	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	4b36      	ldr	r3, [pc, #216]	@ (8001c10 <MX_GPIO_Init+0x138>)
 8001b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b3a:	4b35      	ldr	r3, [pc, #212]	@ (8001c10 <MX_GPIO_Init+0x138>)
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b42:	4b33      	ldr	r3, [pc, #204]	@ (8001c10 <MX_GPIO_Init+0x138>)
 8001b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b46:	2202      	movs	r2, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4e:	4b30      	ldr	r3, [pc, #192]	@ (8001c10 <MX_GPIO_Init+0x138>)
 8001b50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b52:	4b2f      	ldr	r3, [pc, #188]	@ (8001c10 <MX_GPIO_Init+0x138>)
 8001b54:	2108      	movs	r1, #8
 8001b56:	430a      	orrs	r2, r1
 8001b58:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c10 <MX_GPIO_Init+0x138>)
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b5e:	2208      	movs	r2, #8
 8001b60:	4013      	ands	r3, r2
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_DCV_A_Pin|MCU_DCV_B_Pin|HPU_Gate_Pin, GPIO_PIN_RESET);
 8001b66:	492b      	ldr	r1, [pc, #172]	@ (8001c14 <MX_GPIO_Init+0x13c>)
 8001b68:	4b2b      	ldr	r3, [pc, #172]	@ (8001c18 <MX_GPIO_Init+0x140>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f005 ff76 	bl	8007a5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Water_Solinoid_GPIO_Port, Water_Solinoid_Pin, GPIO_PIN_RESET);
 8001b72:	4b2a      	ldr	r3, [pc, #168]	@ (8001c1c <MX_GPIO_Init+0x144>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	2104      	movs	r1, #4
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f005 ff70 	bl	8007a5e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MCU_DCV_A_Pin MCU_DCV_B_Pin HPU_Gate_Pin */
  GPIO_InitStruct.Pin = MCU_DCV_A_Pin|MCU_DCV_B_Pin|HPU_Gate_Pin;
 8001b7e:	193b      	adds	r3, r7, r4
 8001b80:	4a24      	ldr	r2, [pc, #144]	@ (8001c14 <MX_GPIO_Init+0x13c>)
 8001b82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b84:	193b      	adds	r3, r7, r4
 8001b86:	2201      	movs	r2, #1
 8001b88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	193b      	adds	r3, r7, r4
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	193b      	adds	r3, r7, r4
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	193b      	adds	r3, r7, r4
 8001b98:	4a1f      	ldr	r2, [pc, #124]	@ (8001c18 <MX_GPIO_Init+0x140>)
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	0010      	movs	r0, r2
 8001b9e:	f005 fcf7 	bl	8007590 <HAL_GPIO_Init>

  /*Configure GPIO pin : Oil_High_Pin */
  GPIO_InitStruct.Pin = Oil_High_Pin;
 8001ba2:	193b      	adds	r3, r7, r4
 8001ba4:	2280      	movs	r2, #128	@ 0x80
 8001ba6:	0212      	lsls	r2, r2, #8
 8001ba8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001baa:	193b      	adds	r3, r7, r4
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb0:	193b      	adds	r3, r7, r4
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Oil_High_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	193a      	adds	r2, r7, r4
 8001bb8:	23a0      	movs	r3, #160	@ 0xa0
 8001bba:	05db      	lsls	r3, r3, #23
 8001bbc:	0011      	movs	r1, r2
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f005 fce6 	bl	8007590 <HAL_GPIO_Init>

  /*Configure GPIO pins : Oil_Low_Pin Oil_E_Stop_Pin */
  GPIO_InitStruct.Pin = Oil_Low_Pin|Oil_E_Stop_Pin;
 8001bc4:	193b      	adds	r3, r7, r4
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bca:	193b      	adds	r3, r7, r4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd0:	193b      	adds	r3, r7, r4
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd6:	193b      	adds	r3, r7, r4
 8001bd8:	4a10      	ldr	r2, [pc, #64]	@ (8001c1c <MX_GPIO_Init+0x144>)
 8001bda:	0019      	movs	r1, r3
 8001bdc:	0010      	movs	r0, r2
 8001bde:	f005 fcd7 	bl	8007590 <HAL_GPIO_Init>

  /*Configure GPIO pin : Water_Solinoid_Pin */
  GPIO_InitStruct.Pin = Water_Solinoid_Pin;
 8001be2:	0021      	movs	r1, r4
 8001be4:	187b      	adds	r3, r7, r1
 8001be6:	2204      	movs	r2, #4
 8001be8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	2201      	movs	r2, #1
 8001bee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	187b      	adds	r3, r7, r1
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Water_Solinoid_GPIO_Port, &GPIO_InitStruct);
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	4a07      	ldr	r2, [pc, #28]	@ (8001c1c <MX_GPIO_Init+0x144>)
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	f005 fcc4 	bl	8007590 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c08:	46c0      	nop			@ (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b00b      	add	sp, #44	@ 0x2c
 8001c0e:	bd90      	pop	{r4, r7, pc}
 8001c10:	40021000 	.word	0x40021000
 8001c14:	00001003 	.word	0x00001003
 8001c18:	50000400 	.word	0x50000400
 8001c1c:	50000c00 	.word	0x50000c00

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	46c0      	nop			@ (mov r8, r8)
 8001c2a:	e7fd      	b.n	8001c28 <Error_Handler+0x8>

08001c2c <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001c2c:	b590      	push	{r4, r7, lr}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	000a      	movs	r2, r1
 8001c36:	1cbb      	adds	r3, r7, #2
 8001c38:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a45      	ldr	r2, [pc, #276]	@ (8001d54 <HAL_UARTEx_RxEventCallback+0x128>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d000      	beq.n	8001c46 <HAL_UARTEx_RxEventCallback+0x1a>
 8001c44:	e081      	b.n	8001d4a <HAL_UARTEx_RxEventCallback+0x11e>
	{
		chunk_start_i = chunk_end_i;  // Update the last position before copying new data
 8001c46:	4b44      	ldr	r3, [pc, #272]	@ (8001d58 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4b43      	ldr	r3, [pc, #268]	@ (8001d5c <HAL_UARTEx_RxEventCallback+0x130>)
 8001c4e:	801a      	strh	r2, [r3, #0]
		/*
		 * If the data is large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (chunk_start_i + Size > MODBUS_RX_BUFFER_SIZE)  // If the current position + new data size is greater than the main buffer
 8001c50:	4b42      	ldr	r3, [pc, #264]	@ (8001d5c <HAL_UARTEx_RxEventCallback+0x130>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	001a      	movs	r2, r3
 8001c58:	1cbb      	adds	r3, r7, #2
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	18d2      	adds	r2, r2, r3
 8001c5e:	2380      	movs	r3, #128	@ 0x80
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	429a      	cmp	r2, r3
 8001c64:	dd29      	ble.n	8001cba <HAL_UARTEx_RxEventCallback+0x8e>
		{
			uint16_t datatocopy = MODBUS_RX_BUFFER_SIZE - chunk_start_i;  // find out how much space is left in the main buffer
 8001c66:	4b3d      	ldr	r3, [pc, #244]	@ (8001d5c <HAL_UARTEx_RxEventCallback+0x130>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	240e      	movs	r4, #14
 8001c6e:	193b      	adds	r3, r7, r4
 8001c70:	2180      	movs	r1, #128	@ 0x80
 8001c72:	0049      	lsls	r1, r1, #1
 8001c74:	1a8a      	subs	r2, r1, r2
 8001c76:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, datatocopy);  // copy data in that remaining space
 8001c78:	4b38      	ldr	r3, [pc, #224]	@ (8001d5c <HAL_UARTEx_RxEventCallback+0x130>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	001a      	movs	r2, r3
 8001c80:	4b37      	ldr	r3, [pc, #220]	@ (8001d60 <HAL_UARTEx_RxEventCallback+0x134>)
 8001c82:	18d0      	adds	r0, r2, r3
 8001c84:	193b      	adds	r3, r7, r4
 8001c86:	881a      	ldrh	r2, [r3, #0]
 8001c88:	4b36      	ldr	r3, [pc, #216]	@ (8001d64 <HAL_UARTEx_RxEventCallback+0x138>)
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	f009 f840 	bl	800ad10 <memcpy>

			chunk_end_i = (Size - datatocopy);  // update the position
 8001c90:	1cba      	adds	r2, r7, #2
 8001c92:	193b      	adds	r3, r7, r4
 8001c94:	8812      	ldrh	r2, [r2, #0]
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d58 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001c9e:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)modbus_rx_buffer, (uint8_t *)(rx_chunk + datatocopy), chunk_end_i);  // copy the remaining data
 8001ca0:	193b      	adds	r3, r7, r4
 8001ca2:	881a      	ldrh	r2, [r3, #0]
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d64 <HAL_UARTEx_RxEventCallback+0x138>)
 8001ca6:	18d1      	adds	r1, r2, r3
 8001ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d58 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	001a      	movs	r2, r3
 8001cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d60 <HAL_UARTEx_RxEventCallback+0x134>)
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f009 f82c 	bl	800ad10 <memcpy>
 8001cb8:	e014      	b.n	8001ce4 <HAL_UARTEx_RxEventCallback+0xb8>
		 * If the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, Size);
 8001cba:	4b28      	ldr	r3, [pc, #160]	@ (8001d5c <HAL_UARTEx_RxEventCallback+0x130>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	001a      	movs	r2, r3
 8001cc2:	4b27      	ldr	r3, [pc, #156]	@ (8001d60 <HAL_UARTEx_RxEventCallback+0x134>)
 8001cc4:	18d0      	adds	r0, r2, r3
 8001cc6:	1cbb      	adds	r3, r7, #2
 8001cc8:	881a      	ldrh	r2, [r3, #0]
 8001cca:	4b26      	ldr	r3, [pc, #152]	@ (8001d64 <HAL_UARTEx_RxEventCallback+0x138>)
 8001ccc:	0019      	movs	r1, r3
 8001cce:	f009 f81f 	bl	800ad10 <memcpy>
			chunk_end_i = Size + chunk_start_i;
 8001cd2:	4b22      	ldr	r3, [pc, #136]	@ (8001d5c <HAL_UARTEx_RxEventCallback+0x130>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	1cbb      	adds	r3, r7, #2
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	18d3      	adds	r3, r2, r3
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d58 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001ce2:	801a      	strh	r2, [r3, #0]
		}

		if(modbus_header)
 8001ce4:	4b20      	ldr	r3, [pc, #128]	@ (8001d68 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d027      	beq.n	8001d3e <HAL_UARTEx_RxEventCallback+0x112>
		{
			// Log the time for chunk miss error handling
			chunk_time = HAL_GetTick();
 8001cee:	f003 ff1d 	bl	8005b2c <HAL_GetTick>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <HAL_UARTEx_RxEventCallback+0x140>)
 8001cf6:	601a      	str	r2, [r3, #0]

			start_index = chunk_start_i;
 8001cf8:	4b18      	ldr	r3, [pc, #96]	@ (8001d5c <HAL_UARTEx_RxEventCallback+0x130>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001d70 <HAL_UARTEx_RxEventCallback+0x144>)
 8001d00:	801a      	strh	r2, [r3, #0]
			modbus_header = 0;
 8001d02:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	801a      	strh	r2, [r3, #0]

			// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, (uint16_t)(((rx_chunk[4] << 8) | rx_chunk[5])*2 + 2 + 1));
 8001d08:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <HAL_UARTEx_RxEventCallback+0x138>)
 8001d0a:	791b      	ldrb	r3, [r3, #4]
 8001d0c:	021b      	lsls	r3, r3, #8
 8001d0e:	4a15      	ldr	r2, [pc, #84]	@ (8001d64 <HAL_UARTEx_RxEventCallback+0x138>)
 8001d10:	7952      	ldrb	r2, [r2, #5]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3301      	adds	r3, #1
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	18db      	adds	r3, r3, r3
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	4910      	ldr	r1, [pc, #64]	@ (8001d64 <HAL_UARTEx_RxEventCallback+0x138>)
 8001d24:	4b13      	ldr	r3, [pc, #76]	@ (8001d74 <HAL_UARTEx_RxEventCallback+0x148>)
 8001d26:	0018      	movs	r0, r3
 8001d28:	f008 ff00 	bl	800ab2c <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001d2c:	4b12      	ldr	r3, [pc, #72]	@ (8001d78 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2104      	movs	r1, #4
 8001d38:	438a      	bics	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
			 */
			modbus_header = 1;
			uart_rx_int = 1;
		}
	}
}
 8001d3c:	e005      	b.n	8001d4a <HAL_UARTEx_RxEventCallback+0x11e>
			modbus_header = 1;
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	801a      	strh	r2, [r3, #0]
			uart_rx_int = 1;
 8001d44:	4b0d      	ldr	r3, [pc, #52]	@ (8001d7c <HAL_UARTEx_RxEventCallback+0x150>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
}
 8001d4a:	46c0      	nop			@ (mov r8, r8)
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b005      	add	sp, #20
 8001d50:	bd90      	pop	{r4, r7, pc}
 8001d52:	46c0      	nop			@ (mov r8, r8)
 8001d54:	40013800 	.word	0x40013800
 8001d58:	20000670 	.word	0x20000670
 8001d5c:	2000066e 	.word	0x2000066e
 8001d60:	20000368 	.word	0x20000368
 8001d64:	20000568 	.word	0x20000568
 8001d68:	20000020 	.word	0x20000020
 8001d6c:	20000668 	.word	0x20000668
 8001d70:	2000066c 	.word	0x2000066c
 8001d74:	20000218 	.word	0x20000218
 8001d78:	200002ac 	.word	0x200002ac
 8001d7c:	20000672 	.word	0x20000672

08001d80 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	uart_tx_int = 1;
 8001d88:	4b03      	ldr	r3, [pc, #12]	@ (8001d98 <HAL_UART_TxCpltCallback+0x18>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
}
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b002      	add	sp, #8
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	46c0      	nop			@ (mov r8, r8)
 8001d98:	20000022 	.word	0x20000022

08001d9c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	uart_err_int = 1;
 8001da4:	4b07      	ldr	r3, [pc, #28]	@ (8001dc4 <HAL_UART_ErrorCallback+0x28>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_MASK);
 8001daa:	4b07      	ldr	r3, [pc, #28]	@ (8001dc8 <HAL_UART_ErrorCallback+0x2c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_UART_ErrorCallback+0x2c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	0052      	lsls	r2, r2, #1
 8001db6:	0852      	lsrs	r2, r2, #1
 8001db8:	609a      	str	r2, [r3, #8]
}
 8001dba:	46c0      	nop			@ (mov r8, r8)
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b002      	add	sp, #8
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			@ (mov r8, r8)
 8001dc4:	20000673 	.word	0x20000673
 8001dc8:	20000218 	.word	0x20000218

08001dcc <modbus_rx>:

// Modbus Slave Functions ---------------------------------------------------------------------

#ifdef MB_SLAVE
uint8_t modbus_rx()
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	if(uart_rx_int)
 8001dd0:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <modbus_rx+0x20>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d004      	beq.n	8001de4 <modbus_rx+0x18>
	{
		uart_rx_int = 0;
 8001dda:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <modbus_rx+0x20>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
		return 1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <modbus_rx+0x1a>
	}
	return 0;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	0018      	movs	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000672 	.word	0x20000672

08001df0 <return_holding_registers>:

int8_t return_holding_registers(uint8_t* tx_len)
{
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8001dfe:	2002      	movs	r0, #2
 8001e00:	f000 fc58 	bl	80026b4 <get_rx_buffer>
 8001e04:	0003      	movs	r3, r0
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	b21c      	sxth	r4, r3
 8001e0a:	2003      	movs	r0, #3
 8001e0c:	f000 fc52 	bl	80026b4 <get_rx_buffer>
 8001e10:	0003      	movs	r3, r0
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	4323      	orrs	r3, r4
 8001e16:	b21a      	sxth	r2, r3
 8001e18:	230c      	movs	r3, #12
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8001e1e:	2004      	movs	r0, #4
 8001e20:	f000 fc48 	bl	80026b4 <get_rx_buffer>
 8001e24:	0003      	movs	r3, r0
 8001e26:	021b      	lsls	r3, r3, #8
 8001e28:	b21c      	sxth	r4, r3
 8001e2a:	2005      	movs	r0, #5
 8001e2c:	f000 fc42 	bl	80026b4 <get_rx_buffer>
 8001e30:	0003      	movs	r3, r0
 8001e32:	b21b      	sxth	r3, r3
 8001e34:	4323      	orrs	r3, r4
 8001e36:	b21a      	sxth	r2, r3
 8001e38:	210a      	movs	r1, #10
 8001e3a:	187b      	adds	r3, r7, r1
 8001e3c:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 8001e3e:	000a      	movs	r2, r1
 8001e40:	18bb      	adds	r3, r7, r2
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	2b7d      	cmp	r3, #125	@ 0x7d
 8001e46:	d803      	bhi.n	8001e50 <return_holding_registers+0x60>
 8001e48:	18bb      	adds	r3, r7, r2
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d104      	bne.n	8001e5a <return_holding_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8001e50:	2006      	movs	r0, #6
 8001e52:	f000 f97b 	bl	800214c <modbus_exception>
 8001e56:	0003      	movs	r3, r0
 8001e58:	e06e      	b.n	8001f38 <return_holding_registers+0x148>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8001e5a:	230a      	movs	r3, #10
 8001e5c:	18fa      	adds	r2, r7, r3
 8001e5e:	230c      	movs	r3, #12
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	8812      	ldrh	r2, [r2, #0]
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	18d3      	adds	r3, r2, r3
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	2108      	movs	r1, #8
 8001e6c:	187b      	adds	r3, r7, r1
 8001e6e:	3a01      	subs	r2, #1
 8001e70:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8001e72:	187b      	adds	r3, r7, r1
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d904      	bls.n	8001e84 <return_holding_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8001e7a:	2005      	movs	r0, #5
 8001e7c:	f000 f966 	bl	800214c <modbus_exception>
 8001e80:	0003      	movs	r3, r0
 8001e82:	e059      	b.n	8001f38 <return_holding_registers+0x148>
	}

	// Return register values

	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8001e84:	2000      	movs	r0, #0
 8001e86:	f000 fc15 	bl	80026b4 <get_rx_buffer>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	001a      	movs	r2, r3
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f40 <return_holding_registers+0x150>)
 8001e90:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8001e92:	2001      	movs	r0, #1
 8001e94:	f000 fc0e 	bl	80026b4 <get_rx_buffer>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	001a      	movs	r2, r3
 8001e9c:	4b28      	ldr	r3, [pc, #160]	@ (8001f40 <return_holding_registers+0x150>)
 8001e9e:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8001ea0:	230a      	movs	r3, #10
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	18db      	adds	r3, r3, r3
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	4b24      	ldr	r3, [pc, #144]	@ (8001f40 <return_holding_registers+0x150>)
 8001eae:	709a      	strb	r2, [r3, #2]
	(*tx_len) = 3;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	701a      	strb	r2, [r3, #0]
//		prim = __get_PRIMASK();
//		__disable_irq();
	}

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8001eb6:	230f      	movs	r3, #15
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
 8001ebe:	e02c      	b.n	8001f1a <return_holding_registers+0x12a>
	{
		modbus_tx_buffer[(*tx_len)++] = high_byte(holding_register_database[first_register_address + i]);
 8001ec0:	250c      	movs	r5, #12
 8001ec2:	197b      	adds	r3, r7, r5
 8001ec4:	881a      	ldrh	r2, [r3, #0]
 8001ec6:	240f      	movs	r4, #15
 8001ec8:	193b      	adds	r3, r7, r4
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	18d2      	adds	r2, r2, r3
 8001ece:	4b1d      	ldr	r3, [pc, #116]	@ (8001f44 <return_holding_registers+0x154>)
 8001ed0:	0052      	lsls	r2, r2, #1
 8001ed2:	5ad3      	ldrh	r3, [r2, r3]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	b299      	uxth	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	b2d0      	uxtb	r0, r2
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	7010      	strb	r0, [r2, #0]
 8001ee4:	001a      	movs	r2, r3
 8001ee6:	b2c9      	uxtb	r1, r1
 8001ee8:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <return_holding_registers+0x150>)
 8001eea:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[(*tx_len)++] = low_byte(holding_register_database[first_register_address + i]);
 8001eec:	197b      	adds	r3, r7, r5
 8001eee:	881a      	ldrh	r2, [r3, #0]
 8001ef0:	193b      	adds	r3, r7, r4
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	18d2      	adds	r2, r2, r3
 8001ef6:	4b13      	ldr	r3, [pc, #76]	@ (8001f44 <return_holding_registers+0x154>)
 8001ef8:	0052      	lsls	r2, r2, #1
 8001efa:	5ad1      	ldrh	r1, [r2, r3]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	b2d0      	uxtb	r0, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	7010      	strb	r0, [r2, #0]
 8001f08:	001a      	movs	r2, r3
 8001f0a:	b2c9      	uxtb	r1, r1
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <return_holding_registers+0x150>)
 8001f0e:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 8001f10:	193b      	adds	r3, r7, r4
 8001f12:	781a      	ldrb	r2, [r3, #0]
 8001f14:	193b      	adds	r3, r7, r4
 8001f16:	3201      	adds	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
 8001f1a:	230f      	movs	r3, #15
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	220a      	movs	r2, #10
 8001f24:	18ba      	adds	r2, r7, r2
 8001f26:	8812      	ldrh	r2, [r2, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d8c9      	bhi.n	8001ec0 <return_holding_registers+0xd0>
//		if(prim == 0)
//		{
//			__enable_irq();
//		}
	}
	return modbus_send((*tx_len));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f000 f9ef 	bl	8002314 <modbus_send>
 8001f36:	0003      	movs	r3, r0
}
 8001f38:	0018      	movs	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b004      	add	sp, #16
 8001f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f40:	20000468 	.word	0x20000468
 8001f44:	20000000 	.word	0x20000000

08001f48 <edit_multiple_registers>:

int8_t edit_multiple_registers(uint8_t *tx_len)
{
 8001f48:	b5b0      	push	{r4, r5, r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8001f56:	2002      	movs	r0, #2
 8001f58:	f000 fbac 	bl	80026b4 <get_rx_buffer>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	b21c      	sxth	r4, r3
 8001f62:	2003      	movs	r0, #3
 8001f64:	f000 fba6 	bl	80026b4 <get_rx_buffer>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	b21b      	sxth	r3, r3
 8001f6c:	4323      	orrs	r3, r4
 8001f6e:	b21a      	sxth	r2, r3
 8001f70:	2314      	movs	r3, #20
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8001f76:	2004      	movs	r0, #4
 8001f78:	f000 fb9c 	bl	80026b4 <get_rx_buffer>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	b21c      	sxth	r4, r3
 8001f82:	2005      	movs	r0, #5
 8001f84:	f000 fb96 	bl	80026b4 <get_rx_buffer>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	b21b      	sxth	r3, r3
 8001f8c:	4323      	orrs	r3, r4
 8001f8e:	b21a      	sxth	r2, r3
 8001f90:	2112      	movs	r1, #18
 8001f92:	187b      	adds	r3, r7, r1
 8001f94:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8001f96:	000a      	movs	r2, r1
 8001f98:	18bb      	adds	r3, r7, r2
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	2b7d      	cmp	r3, #125	@ 0x7d
 8001f9e:	d803      	bhi.n	8001fa8 <edit_multiple_registers+0x60>
 8001fa0:	18bb      	adds	r3, r7, r2
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d104      	bne.n	8001fb2 <edit_multiple_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8001fa8:	2006      	movs	r0, #6
 8001faa:	f000 f8cf 	bl	800214c <modbus_exception>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	e0c3      	b.n	800213a <edit_multiple_registers+0x1f2>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8001fb2:	2312      	movs	r3, #18
 8001fb4:	18fa      	adds	r2, r7, r3
 8001fb6:	2314      	movs	r3, #20
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	8812      	ldrh	r2, [r2, #0]
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	18d3      	adds	r3, r2, r3
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	2110      	movs	r1, #16
 8001fc4:	187b      	adds	r3, r7, r1
 8001fc6:	3a01      	subs	r2, #1
 8001fc8:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8001fca:	187b      	adds	r3, r7, r1
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	2b10      	cmp	r3, #16
 8001fd0:	d904      	bls.n	8001fdc <edit_multiple_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8001fd2:	2005      	movs	r0, #5
 8001fd4:	f000 f8ba 	bl	800214c <modbus_exception>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	e0ae      	b.n	800213a <edit_multiple_registers+0x1f2>
	}

	// Protect Read only values
	if(((first_register_address >= ADC_0) && (first_register_address <= GPIO_READ)) ||
 8001fdc:	2214      	movs	r2, #20
 8001fde:	18bb      	adds	r3, r7, r2
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	2b09      	cmp	r3, #9
 8001fe4:	d903      	bls.n	8001fee <edit_multiple_registers+0xa6>
 8001fe6:	18bb      	adds	r3, r7, r2
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	2b0e      	cmp	r3, #14
 8001fec:	d912      	bls.n	8002014 <edit_multiple_registers+0xcc>
 8001fee:	2210      	movs	r2, #16
 8001ff0:	18bb      	adds	r3, r7, r2
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	2b09      	cmp	r3, #9
 8001ff6:	d903      	bls.n	8002000 <edit_multiple_registers+0xb8>
		 ((last_register_address >= ADC_0) && (last_register_address <= GPIO_READ)) ||
 8001ff8:	18bb      	adds	r3, r7, r2
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	2b0e      	cmp	r3, #14
 8001ffe:	d909      	bls.n	8002014 <edit_multiple_registers+0xcc>
 8002000:	2314      	movs	r3, #20
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	2b09      	cmp	r3, #9
 8002008:	d809      	bhi.n	800201e <edit_multiple_registers+0xd6>
		 ((first_register_address < ADC_0) && (last_register_address > GPIO_READ)))
 800200a:	2310      	movs	r3, #16
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	2b0e      	cmp	r3, #14
 8002012:	d904      	bls.n	800201e <edit_multiple_registers+0xd6>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 8002014:	2004      	movs	r0, #4
 8002016:	f000 f899 	bl	800214c <modbus_exception>
 800201a:	0003      	movs	r3, r0
 800201c:	e08d      	b.n	800213a <edit_multiple_registers+0x1f2>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 800201e:	2000      	movs	r0, #0
 8002020:	f000 fb48 	bl	80026b4 <get_rx_buffer>
 8002024:	0003      	movs	r3, r0
 8002026:	001a      	movs	r2, r3
 8002028:	4b46      	ldr	r3, [pc, #280]	@ (8002144 <edit_multiple_registers+0x1fc>)
 800202a:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 800202c:	2001      	movs	r0, #1
 800202e:	f000 fb41 	bl	80026b4 <get_rx_buffer>
 8002032:	0003      	movs	r3, r0
 8002034:	001a      	movs	r2, r3
 8002036:	4b43      	ldr	r3, [pc, #268]	@ (8002144 <edit_multiple_registers+0x1fc>)
 8002038:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 800203a:	2002      	movs	r0, #2
 800203c:	f000 fb3a 	bl	80026b4 <get_rx_buffer>
 8002040:	0003      	movs	r3, r0
 8002042:	001a      	movs	r2, r3
 8002044:	4b3f      	ldr	r3, [pc, #252]	@ (8002144 <edit_multiple_registers+0x1fc>)
 8002046:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 8002048:	2003      	movs	r0, #3
 800204a:	f000 fb33 	bl	80026b4 <get_rx_buffer>
 800204e:	0003      	movs	r3, r0
 8002050:	001a      	movs	r2, r3
 8002052:	4b3c      	ldr	r3, [pc, #240]	@ (8002144 <edit_multiple_registers+0x1fc>)
 8002054:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 8002056:	2004      	movs	r0, #4
 8002058:	f000 fb2c 	bl	80026b4 <get_rx_buffer>
 800205c:	0003      	movs	r3, r0
 800205e:	001a      	movs	r2, r3
 8002060:	4b38      	ldr	r3, [pc, #224]	@ (8002144 <edit_multiple_registers+0x1fc>)
 8002062:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 8002064:	2005      	movs	r0, #5
 8002066:	f000 fb25 	bl	80026b4 <get_rx_buffer>
 800206a:	0003      	movs	r3, r0
 800206c:	001a      	movs	r2, r3
 800206e:	4b35      	ldr	r3, [pc, #212]	@ (8002144 <edit_multiple_registers+0x1fc>)
 8002070:	715a      	strb	r2, [r3, #5]
	(*tx_len) = 6;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2206      	movs	r2, #6
 8002076:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8002078:	2317      	movs	r3, #23
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
 8002080:	e032      	b.n	80020e8 <edit_multiple_registers+0x1a0>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 8002082:	2517      	movs	r5, #23
 8002084:	197b      	adds	r3, r7, r5
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	18db      	adds	r3, r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	3307      	adds	r3, #7
 800208e:	b2db      	uxtb	r3, r3
 8002090:	0018      	movs	r0, r3
 8002092:	f000 fb0f 	bl	80026b4 <get_rx_buffer>
 8002096:	0003      	movs	r3, r0
 8002098:	021b      	lsls	r3, r3, #8
 800209a:	b21c      	sxth	r4, r3
 800209c:	197b      	adds	r3, r7, r5
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	3304      	adds	r3, #4
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	18db      	adds	r3, r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	0018      	movs	r0, r3
 80020aa:	f000 fb03 	bl	80026b4 <get_rx_buffer>
 80020ae:	0003      	movs	r3, r0
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	4323      	orrs	r3, r4
 80020b4:	b219      	sxth	r1, r3
 80020b6:	2014      	movs	r0, #20
 80020b8:	183b      	adds	r3, r7, r0
 80020ba:	881a      	ldrh	r2, [r3, #0]
 80020bc:	197b      	adds	r3, r7, r5
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	18d2      	adds	r2, r2, r3
 80020c2:	b289      	uxth	r1, r1
 80020c4:	4b20      	ldr	r3, [pc, #128]	@ (8002148 <edit_multiple_registers+0x200>)
 80020c6:	0052      	lsls	r2, r2, #1
 80020c8:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 80020ca:	197b      	adds	r3, r7, r5
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	183b      	adds	r3, r7, r0
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	18d3      	adds	r3, r2, r3
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	0018      	movs	r0, r3
 80020da:	f000 f85f 	bl	800219c <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 80020de:	197b      	adds	r3, r7, r5
 80020e0:	781a      	ldrb	r2, [r3, #0]
 80020e2:	197b      	adds	r3, r7, r5
 80020e4:	3201      	adds	r2, #1
 80020e6:	701a      	strb	r2, [r3, #0]
 80020e8:	2317      	movs	r3, #23
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2212      	movs	r2, #18
 80020f2:	18ba      	adds	r2, r7, r2
 80020f4:	8812      	ldrh	r2, [r2, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d8c3      	bhi.n	8002082 <edit_multiple_registers+0x13a>

	// TIMING WORKAROUND START
//	HAL_Delay(1);
	// TIMING WORKAROUND END

	int8_t status = modbus_send((*tx_len));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	250f      	movs	r5, #15
 8002100:	197c      	adds	r4, r7, r5
 8002102:	0018      	movs	r0, r3
 8002104:	f000 f906 	bl	8002314 <modbus_send>
 8002108:	0003      	movs	r3, r0
 800210a:	7023      	strb	r3, [r4, #0]

	if(status == MB_SUCCESS)
 800210c:	197b      	adds	r3, r7, r5
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	b25b      	sxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10d      	bne.n	8002132 <edit_multiple_registers+0x1ea>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 8002116:	2314      	movs	r3, #20
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d808      	bhi.n	8002132 <edit_multiple_registers+0x1ea>
 8002120:	2310      	movs	r3, #16
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <edit_multiple_registers+0x1ea>
		{
			return modbus_change_baud_rate();
 800212a:	f000 fa3d 	bl	80025a8 <modbus_change_baud_rate>
 800212e:	0003      	movs	r3, r0
 8002130:	e003      	b.n	800213a <edit_multiple_registers+0x1f2>
		}
	}
	return status;
 8002132:	230f      	movs	r3, #15
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	b25b      	sxtb	r3, r3
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b006      	add	sp, #24
 8002140:	bdb0      	pop	{r4, r5, r7, pc}
 8002142:	46c0      	nop			@ (mov r8, r8)
 8002144:	20000468 	.word	0x20000468
 8002148:	20000000 	.word	0x20000000

0800214c <modbus_exception>:

int8_t modbus_exception(int8_t exception_code)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	0002      	movs	r2, r0
 8002154:	1dfb      	adds	r3, r7, #7
 8002156:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 8002158:	2000      	movs	r0, #0
 800215a:	f000 faab 	bl	80026b4 <get_rx_buffer>
 800215e:	0003      	movs	r3, r0
 8002160:	001a      	movs	r2, r3
 8002162:	4b0d      	ldr	r3, [pc, #52]	@ (8002198 <modbus_exception+0x4c>)
 8002164:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 8002166:	2001      	movs	r0, #1
 8002168:	f000 faa4 	bl	80026b4 <get_rx_buffer>
 800216c:	0003      	movs	r3, r0
 800216e:	001a      	movs	r2, r3
 8002170:	2380      	movs	r3, #128	@ 0x80
 8002172:	425b      	negs	r3, r3
 8002174:	4313      	orrs	r3, r2
 8002176:	b2da      	uxtb	r2, r3
 8002178:	4b07      	ldr	r3, [pc, #28]	@ (8002198 <modbus_exception+0x4c>)
 800217a:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 800217c:	1dfb      	adds	r3, r7, #7
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	3b03      	subs	r3, #3
 8002182:	b2da      	uxtb	r2, r3
 8002184:	4b04      	ldr	r3, [pc, #16]	@ (8002198 <modbus_exception+0x4c>)
 8002186:	709a      	strb	r2, [r3, #2]

	return modbus_send(3);
 8002188:	2003      	movs	r0, #3
 800218a:	f000 f8c3 	bl	8002314 <modbus_send>
 800218e:	0003      	movs	r3, r0
}
 8002190:	0018      	movs	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	b002      	add	sp, #8
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000468 	.word	0x20000468

0800219c <handle_range>:

void handle_range(uint16_t holding_register)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	0002      	movs	r2, r0
 80021a4:	1dbb      	adds	r3, r7, #6
 80021a6:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 80021a8:	1dbb      	adds	r3, r7, #6
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	2b0f      	cmp	r3, #15
 80021ae:	d900      	bls.n	80021b2 <handle_range+0x16>
 80021b0:	e0a6      	b.n	8002300 <handle_range+0x164>
 80021b2:	009a      	lsls	r2, r3, #2
 80021b4:	4b54      	ldr	r3, [pc, #336]	@ (8002308 <handle_range+0x16c>)
 80021b6:	18d3      	adds	r3, r2, r3
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	469f      	mov	pc, r3
	{
		case MODBUS_ID:
		{
			if(holding_register_database[holding_register] > 0xFF)
 80021bc:	1dbb      	adds	r3, r7, #6
 80021be:	881a      	ldrh	r2, [r3, #0]
 80021c0:	4b52      	ldr	r3, [pc, #328]	@ (800230c <handle_range+0x170>)
 80021c2:	0052      	lsls	r2, r2, #1
 80021c4:	5ad3      	ldrh	r3, [r2, r3]
 80021c6:	2bff      	cmp	r3, #255	@ 0xff
 80021c8:	d800      	bhi.n	80021cc <handle_range+0x30>
 80021ca:	e08a      	b.n	80022e2 <handle_range+0x146>
			{
				holding_register_database[holding_register] = 0xFF;
 80021cc:	1dbb      	adds	r3, r7, #6
 80021ce:	881a      	ldrh	r2, [r3, #0]
 80021d0:	4b4e      	ldr	r3, [pc, #312]	@ (800230c <handle_range+0x170>)
 80021d2:	0052      	lsls	r2, r2, #1
 80021d4:	21ff      	movs	r1, #255	@ 0xff
 80021d6:	52d1      	strh	r1, [r2, r3]
			}
			break;
 80021d8:	e083      	b.n	80022e2 <handle_range+0x146>
		}
		case MB_BAUD_RATE:
		{
			if(holding_register_database[holding_register] < BAUD_RATE_4800)
 80021da:	1dbb      	adds	r3, r7, #6
 80021dc:	881a      	ldrh	r2, [r3, #0]
 80021de:	4b4b      	ldr	r3, [pc, #300]	@ (800230c <handle_range+0x170>)
 80021e0:	0052      	lsls	r2, r2, #1
 80021e2:	5ad3      	ldrh	r3, [r2, r3]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d806      	bhi.n	80021f6 <handle_range+0x5a>
			{
				holding_register_database[holding_register] = BAUD_RATE_4800;
 80021e8:	1dbb      	adds	r3, r7, #6
 80021ea:	881a      	ldrh	r2, [r3, #0]
 80021ec:	4b47      	ldr	r3, [pc, #284]	@ (800230c <handle_range+0x170>)
 80021ee:	0052      	lsls	r2, r2, #1
 80021f0:	2102      	movs	r1, #2
 80021f2:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
			{
				holding_register_database[holding_register] = BAUD_RATE_256000;
			}
			break;
 80021f4:	e077      	b.n	80022e6 <handle_range+0x14a>
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
 80021f6:	1dbb      	adds	r3, r7, #6
 80021f8:	881a      	ldrh	r2, [r3, #0]
 80021fa:	4b44      	ldr	r3, [pc, #272]	@ (800230c <handle_range+0x170>)
 80021fc:	0052      	lsls	r2, r2, #1
 80021fe:	5ad3      	ldrh	r3, [r2, r3]
 8002200:	2b09      	cmp	r3, #9
 8002202:	d800      	bhi.n	8002206 <handle_range+0x6a>
 8002204:	e06f      	b.n	80022e6 <handle_range+0x14a>
				holding_register_database[holding_register] = BAUD_RATE_256000;
 8002206:	1dbb      	adds	r3, r7, #6
 8002208:	881a      	ldrh	r2, [r3, #0]
 800220a:	4b40      	ldr	r3, [pc, #256]	@ (800230c <handle_range+0x170>)
 800220c:	0052      	lsls	r2, r2, #1
 800220e:	2109      	movs	r1, #9
 8002210:	52d1      	strh	r1, [r2, r3]
			break;
 8002212:	e068      	b.n	80022e6 <handle_range+0x14a>
		}
		case MB_TRANSMIT_TIMEOUT:
		{
			if(holding_register_database[holding_register] < 5)
 8002214:	1dbb      	adds	r3, r7, #6
 8002216:	881a      	ldrh	r2, [r3, #0]
 8002218:	4b3c      	ldr	r3, [pc, #240]	@ (800230c <handle_range+0x170>)
 800221a:	0052      	lsls	r2, r2, #1
 800221c:	5ad3      	ldrh	r3, [r2, r3]
 800221e:	2b04      	cmp	r3, #4
 8002220:	d806      	bhi.n	8002230 <handle_range+0x94>
			{
				holding_register_database[holding_register] = 5;
 8002222:	1dbb      	adds	r3, r7, #6
 8002224:	881a      	ldrh	r2, [r3, #0]
 8002226:	4b39      	ldr	r3, [pc, #228]	@ (800230c <handle_range+0x170>)
 8002228:	0052      	lsls	r2, r2, #1
 800222a:	2105      	movs	r1, #5
 800222c:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 1000)
			{
				holding_register_database[holding_register] = 1000;
			}
			break;
 800222e:	e05c      	b.n	80022ea <handle_range+0x14e>
			else if(holding_register_database[holding_register] > 1000)
 8002230:	1dbb      	adds	r3, r7, #6
 8002232:	881a      	ldrh	r2, [r3, #0]
 8002234:	4b35      	ldr	r3, [pc, #212]	@ (800230c <handle_range+0x170>)
 8002236:	0052      	lsls	r2, r2, #1
 8002238:	5ad2      	ldrh	r2, [r2, r3]
 800223a:	23fa      	movs	r3, #250	@ 0xfa
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	429a      	cmp	r2, r3
 8002240:	d953      	bls.n	80022ea <handle_range+0x14e>
				holding_register_database[holding_register] = 1000;
 8002242:	1dbb      	adds	r3, r7, #6
 8002244:	881a      	ldrh	r2, [r3, #0]
 8002246:	4b31      	ldr	r3, [pc, #196]	@ (800230c <handle_range+0x170>)
 8002248:	0052      	lsls	r2, r2, #1
 800224a:	21fa      	movs	r1, #250	@ 0xfa
 800224c:	0089      	lsls	r1, r1, #2
 800224e:	52d1      	strh	r1, [r2, r3]
			break;
 8002250:	e04b      	b.n	80022ea <handle_range+0x14e>
		}
		case MB_TRANSMIT_RETRIES:
		{
			if(holding_register_database[holding_register] > 5)
 8002252:	1dbb      	adds	r3, r7, #6
 8002254:	881a      	ldrh	r2, [r3, #0]
 8002256:	4b2d      	ldr	r3, [pc, #180]	@ (800230c <handle_range+0x170>)
 8002258:	0052      	lsls	r2, r2, #1
 800225a:	5ad3      	ldrh	r3, [r2, r3]
 800225c:	2b05      	cmp	r3, #5
 800225e:	d946      	bls.n	80022ee <handle_range+0x152>
			{
				holding_register_database[holding_register] = 5;
 8002260:	1dbb      	adds	r3, r7, #6
 8002262:	881a      	ldrh	r2, [r3, #0]
 8002264:	4b29      	ldr	r3, [pc, #164]	@ (800230c <handle_range+0x170>)
 8002266:	0052      	lsls	r2, r2, #1
 8002268:	2105      	movs	r1, #5
 800226a:	52d1      	strh	r1, [r2, r3]
			}
			break;
 800226c:	e03f      	b.n	80022ee <handle_range+0x152>
		}
		case MB_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x3FF)
 800226e:	1dbb      	adds	r3, r7, #6
 8002270:	881a      	ldrh	r2, [r3, #0]
 8002272:	4b26      	ldr	r3, [pc, #152]	@ (800230c <handle_range+0x170>)
 8002274:	0052      	lsls	r2, r2, #1
 8002276:	5ad2      	ldrh	r2, [r2, r3]
 8002278:	2380      	movs	r3, #128	@ 0x80
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	429a      	cmp	r2, r3
 800227e:	d338      	bcc.n	80022f2 <handle_range+0x156>
			{
				holding_register_database[holding_register] = 0x3FF;
 8002280:	1dbb      	adds	r3, r7, #6
 8002282:	881a      	ldrh	r2, [r3, #0]
 8002284:	4b21      	ldr	r3, [pc, #132]	@ (800230c <handle_range+0x170>)
 8002286:	0052      	lsls	r2, r2, #1
 8002288:	4921      	ldr	r1, [pc, #132]	@ (8002310 <handle_range+0x174>)
 800228a:	52d1      	strh	r1, [r2, r3]
			}
			break;
 800228c:	e031      	b.n	80022f2 <handle_range+0x156>
		}
		case I2C_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x7F)
 800228e:	1dbb      	adds	r3, r7, #6
 8002290:	881a      	ldrh	r2, [r3, #0]
 8002292:	4b1e      	ldr	r3, [pc, #120]	@ (800230c <handle_range+0x170>)
 8002294:	0052      	lsls	r2, r2, #1
 8002296:	5ad3      	ldrh	r3, [r2, r3]
 8002298:	2b7f      	cmp	r3, #127	@ 0x7f
 800229a:	d92c      	bls.n	80022f6 <handle_range+0x15a>
			{
				holding_register_database[holding_register] = 0x7F;
 800229c:	1dbb      	adds	r3, r7, #6
 800229e:	881a      	ldrh	r2, [r3, #0]
 80022a0:	4b1a      	ldr	r3, [pc, #104]	@ (800230c <handle_range+0x170>)
 80022a2:	0052      	lsls	r2, r2, #1
 80022a4:	217f      	movs	r1, #127	@ 0x7f
 80022a6:	52d1      	strh	r1, [r2, r3]
			}
			break;
 80022a8:	e025      	b.n	80022f6 <handle_range+0x15a>
		}
		case I2C_SHUTDOWN:
		{
			if(holding_register_database[holding_register] > 1)
 80022aa:	1dbb      	adds	r3, r7, #6
 80022ac:	881a      	ldrh	r2, [r3, #0]
 80022ae:	4b17      	ldr	r3, [pc, #92]	@ (800230c <handle_range+0x170>)
 80022b0:	0052      	lsls	r2, r2, #1
 80022b2:	5ad3      	ldrh	r3, [r2, r3]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d920      	bls.n	80022fa <handle_range+0x15e>
			{
				holding_register_database[holding_register] = 1;
 80022b8:	1dbb      	adds	r3, r7, #6
 80022ba:	881a      	ldrh	r2, [r3, #0]
 80022bc:	4b13      	ldr	r3, [pc, #76]	@ (800230c <handle_range+0x170>)
 80022be:	0052      	lsls	r2, r2, #1
 80022c0:	2101      	movs	r1, #1
 80022c2:	52d1      	strh	r1, [r2, r3]
			}
			break;
 80022c4:	e019      	b.n	80022fa <handle_range+0x15e>
		}
		case GPIO_WRITE:
		{
			if(holding_register_database[holding_register] > 0xF)
 80022c6:	1dbb      	adds	r3, r7, #6
 80022c8:	881a      	ldrh	r2, [r3, #0]
 80022ca:	4b10      	ldr	r3, [pc, #64]	@ (800230c <handle_range+0x170>)
 80022cc:	0052      	lsls	r2, r2, #1
 80022ce:	5ad3      	ldrh	r3, [r2, r3]
 80022d0:	2b0f      	cmp	r3, #15
 80022d2:	d914      	bls.n	80022fe <handle_range+0x162>
			{
				holding_register_database[holding_register] = 0xF;
 80022d4:	1dbb      	adds	r3, r7, #6
 80022d6:	881a      	ldrh	r2, [r3, #0]
 80022d8:	4b0c      	ldr	r3, [pc, #48]	@ (800230c <handle_range+0x170>)
 80022da:	0052      	lsls	r2, r2, #1
 80022dc:	210f      	movs	r1, #15
 80022de:	52d1      	strh	r1, [r2, r3]
			}
			break;
 80022e0:	e00d      	b.n	80022fe <handle_range+0x162>
			break;
 80022e2:	46c0      	nop			@ (mov r8, r8)
 80022e4:	e00c      	b.n	8002300 <handle_range+0x164>
			break;
 80022e6:	46c0      	nop			@ (mov r8, r8)
 80022e8:	e00a      	b.n	8002300 <handle_range+0x164>
			break;
 80022ea:	46c0      	nop			@ (mov r8, r8)
 80022ec:	e008      	b.n	8002300 <handle_range+0x164>
			break;
 80022ee:	46c0      	nop			@ (mov r8, r8)
 80022f0:	e006      	b.n	8002300 <handle_range+0x164>
			break;
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	e004      	b.n	8002300 <handle_range+0x164>
			break;
 80022f6:	46c0      	nop			@ (mov r8, r8)
 80022f8:	e002      	b.n	8002300 <handle_range+0x164>
			break;
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	e000      	b.n	8002300 <handle_range+0x164>
			break;
 80022fe:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 8002300:	46c0      	nop			@ (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b002      	add	sp, #8
 8002306:	bd80      	pop	{r7, pc}
 8002308:	0800af3c 	.word	0x0800af3c
 800230c:	20000000 	.word	0x20000000
 8002310:	000003ff 	.word	0x000003ff

08002314 <modbus_send>:
#endif // MB_SLAVE

// General Modbus Functions -------------------------------------------------------------------

int8_t modbus_send(uint8_t size)
{
 8002314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	0002      	movs	r2, r0
 800231c:	1dfb      	adds	r3, r7, #7
 800231e:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8002320:	250f      	movs	r5, #15
 8002322:	197b      	adds	r3, r7, r5
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 8002328:	260c      	movs	r6, #12
 800232a:	19bc      	adds	r4, r7, r6
 800232c:	1dfb      	adds	r3, r7, #7
 800232e:	781a      	ldrb	r2, [r3, #0]
 8002330:	4b1e      	ldr	r3, [pc, #120]	@ (80023ac <modbus_send+0x98>)
 8002332:	0011      	movs	r1, r2
 8002334:	0018      	movs	r0, r3
 8002336:	f000 fa0d 	bl	8002754 <crc_16>
 800233a:	0003      	movs	r3, r0
 800233c:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 800233e:	1dfb      	adds	r3, r7, #7
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	19ba      	adds	r2, r7, r6
 8002344:	8812      	ldrh	r2, [r2, #0]
 8002346:	b2d1      	uxtb	r1, r2
 8002348:	4a18      	ldr	r2, [pc, #96]	@ (80023ac <modbus_send+0x98>)
 800234a:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 800234c:	19bb      	adds	r3, r7, r6
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	b29a      	uxth	r2, r3
 8002354:	1dfb      	adds	r3, r7, #7
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	3301      	adds	r3, #1
 800235a:	b2d1      	uxtb	r1, r2
 800235c:	4a13      	ldr	r2, [pc, #76]	@ (80023ac <modbus_send+0x98>)
 800235e:	54d1      	strb	r1, [r2, r3]

	uart_tx_int = 0; // This will enable tx timeout monitoring
 8002360:	4b13      	ldr	r3, [pc, #76]	@ (80023b0 <modbus_send+0x9c>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
	tx_time = HAL_GetTick();
 8002366:	f003 fbe1 	bl	8005b2c <HAL_GetTick>
 800236a:	0002      	movs	r2, r0
 800236c:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <modbus_send+0xa0>)
 800236e:	601a      	str	r2, [r3, #0]
	status = HAL_UART_Transmit_DMA(&huart1, modbus_tx_buffer, size + 2);
 8002370:	1dfb      	adds	r3, r7, #7
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	3302      	adds	r3, #2
 8002378:	b29a      	uxth	r2, r3
 800237a:	490c      	ldr	r1, [pc, #48]	@ (80023ac <modbus_send+0x98>)
 800237c:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <modbus_send+0xa4>)
 800237e:	0018      	movs	r0, r3
 8002380:	f006 ff5e 	bl	8009240 <HAL_UART_Transmit_DMA>
 8002384:	0003      	movs	r3, r0
 8002386:	001a      	movs	r2, r3
 8002388:	197b      	adds	r3, r7, r5
 800238a:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_tx, DMA_IT_HT);
 800238c:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <modbus_send+0xa8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <modbus_send+0xa8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2104      	movs	r1, #4
 8002398:	438a      	bics	r2, r1
 800239a:	601a      	str	r2, [r3, #0]
	return status;
 800239c:	197b      	adds	r3, r7, r5
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b25b      	sxtb	r3, r3
}
 80023a2:	0018      	movs	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b005      	add	sp, #20
 80023a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023aa:	46c0      	nop			@ (mov r8, r8)
 80023ac:	20000468 	.word	0x20000468
 80023b0:	20000022 	.word	0x20000022
 80023b4:	20000664 	.word	0x20000664
 80023b8:	20000218 	.word	0x20000218
 80023bc:	20000308 	.word	0x20000308

080023c0 <modbus_reset>:

int8_t modbus_reset()
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
	int8_t status = 0;
 80023c6:	1dfb      	adds	r3, r7, #7
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Abort(&huart1);
 80023cc:	4b30      	ldr	r3, [pc, #192]	@ (8002490 <modbus_reset+0xd0>)
 80023ce:	0018      	movs	r0, r3
 80023d0:	f006 ffc8 	bl	8009364 <HAL_UART_Abort>
 80023d4:	0003      	movs	r3, r0
 80023d6:	001a      	movs	r2, r3
 80023d8:	1dfb      	adds	r3, r7, #7
 80023da:	701a      	strb	r2, [r3, #0]
	status |= HAL_UART_DeInit(&huart1);
 80023dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002490 <modbus_reset+0xd0>)
 80023de:	0018      	movs	r0, r3
 80023e0:	f006 feee 	bl	80091c0 <HAL_UART_DeInit>
 80023e4:	0003      	movs	r3, r0
 80023e6:	b259      	sxtb	r1, r3
 80023e8:	1dfb      	adds	r3, r7, #7
 80023ea:	1dfa      	adds	r2, r7, #7
 80023ec:	7812      	ldrb	r2, [r2, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	701a      	strb	r2, [r3, #0]
	__USART1_FORCE_RESET();
 80023f2:	4b28      	ldr	r3, [pc, #160]	@ (8002494 <modbus_reset+0xd4>)
 80023f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023f6:	4b27      	ldr	r3, [pc, #156]	@ (8002494 <modbus_reset+0xd4>)
 80023f8:	2180      	movs	r1, #128	@ 0x80
 80023fa:	01c9      	lsls	r1, r1, #7
 80023fc:	430a      	orrs	r2, r1
 80023fe:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_Delay(100);
 8002400:	2064      	movs	r0, #100	@ 0x64
 8002402:	f003 fb9d 	bl	8005b40 <HAL_Delay>
	__USART1_RELEASE_RESET();
 8002406:	4b23      	ldr	r3, [pc, #140]	@ (8002494 <modbus_reset+0xd4>)
 8002408:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800240a:	4b22      	ldr	r3, [pc, #136]	@ (8002494 <modbus_reset+0xd4>)
 800240c:	4922      	ldr	r1, [pc, #136]	@ (8002498 <modbus_reset+0xd8>)
 800240e:	400a      	ands	r2, r1
 8002410:	631a      	str	r2, [r3, #48]	@ 0x30
	status = HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0);
 8002412:	481f      	ldr	r0, [pc, #124]	@ (8002490 <modbus_reset+0xd0>)
 8002414:	2300      	movs	r3, #0
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	f008 fa41 	bl	800a8a0 <HAL_RS485Ex_Init>
 800241e:	0003      	movs	r3, r0
 8002420:	001a      	movs	r2, r3
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8);
 8002426:	4b1a      	ldr	r3, [pc, #104]	@ (8002490 <modbus_reset+0xd0>)
 8002428:	2100      	movs	r1, #0
 800242a:	0018      	movs	r0, r3
 800242c:	f008 fafc 	bl	800aa28 <HAL_UARTEx_SetTxFifoThreshold>
 8002430:	0003      	movs	r3, r0
 8002432:	b259      	sxtb	r1, r3
 8002434:	1dfb      	adds	r3, r7, #7
 8002436:	1dfa      	adds	r2, r7, #7
 8002438:	7812      	ldrb	r2, [r2, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8);
 800243e:	4b14      	ldr	r3, [pc, #80]	@ (8002490 <modbus_reset+0xd0>)
 8002440:	2100      	movs	r1, #0
 8002442:	0018      	movs	r0, r3
 8002444:	f008 fb30 	bl	800aaa8 <HAL_UARTEx_SetRxFifoThreshold>
 8002448:	0003      	movs	r3, r0
 800244a:	b259      	sxtb	r1, r3
 800244c:	1dfb      	adds	r3, r7, #7
 800244e:	1dfa      	adds	r2, r7, #7
 8002450:	7812      	ldrb	r2, [r2, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_DisableFifoMode(&huart1);
 8002456:	4b0e      	ldr	r3, [pc, #56]	@ (8002490 <modbus_reset+0xd0>)
 8002458:	0018      	movs	r0, r3
 800245a:	f008 faab 	bl	800a9b4 <HAL_UARTEx_DisableFifoMode>
 800245e:	0003      	movs	r3, r0
 8002460:	b259      	sxtb	r1, r3
 8002462:	1dfb      	adds	r3, r7, #7
 8002464:	1dfa      	adds	r2, r7, #7
 8002466:	7812      	ldrb	r2, [r2, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 800246c:	1dfb      	adds	r3, r7, #7
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	b25b      	sxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d004      	beq.n	8002480 <modbus_reset+0xc0>
	{
		return handle_modbus_error(MB_FATAL_ERROR);
 8002476:	2015      	movs	r0, #21
 8002478:	f000 f94e 	bl	8002718 <handle_modbus_error>
 800247c:	0003      	movs	r3, r0
 800247e:	e002      	b.n	8002486 <modbus_reset+0xc6>
	}
	return status;
 8002480:	1dfb      	adds	r3, r7, #7
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	b25b      	sxtb	r3, r3
}
 8002486:	0018      	movs	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	b002      	add	sp, #8
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			@ (mov r8, r8)
 8002490:	20000218 	.word	0x20000218
 8002494:	40021000 	.word	0x40021000
 8002498:	ffffbfff 	.word	0xffffbfff

0800249c <modbus_set_rx>:

int8_t modbus_set_rx()
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, 6);
 80024a2:	490c      	ldr	r1, [pc, #48]	@ (80024d4 <modbus_set_rx+0x38>)
 80024a4:	4b0c      	ldr	r3, [pc, #48]	@ (80024d8 <modbus_set_rx+0x3c>)
 80024a6:	2206      	movs	r2, #6
 80024a8:	0018      	movs	r0, r3
 80024aa:	f008 fb3f 	bl	800ab2c <HAL_UARTEx_ReceiveToIdle_DMA>
 80024ae:	0003      	movs	r3, r0
 80024b0:	001a      	movs	r2, r3
 80024b2:	1dfb      	adds	r3, r7, #7
 80024b4:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80024b6:	4b09      	ldr	r3, [pc, #36]	@ (80024dc <modbus_set_rx+0x40>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b07      	ldr	r3, [pc, #28]	@ (80024dc <modbus_set_rx+0x40>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2104      	movs	r1, #4
 80024c2:	438a      	bics	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]

	return status;
 80024c6:	1dfb      	adds	r3, r7, #7
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	b25b      	sxtb	r3, r3
}
 80024cc:	0018      	movs	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b002      	add	sp, #8
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000568 	.word	0x20000568
 80024d8:	20000218 	.word	0x20000218
 80024dc:	200002ac 	.word	0x200002ac

080024e0 <monitor_modbus>:

int8_t monitor_modbus()
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
	int8_t status = MB_SUCCESS;
 80024e6:	1dfb      	adds	r3, r7, #7
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]

	// Chunk miss handling
	status = handle_chunk_miss();
 80024ec:	1dfc      	adds	r4, r7, #7
 80024ee:	f000 f977 	bl	80027e0 <handle_chunk_miss>
 80024f2:	0003      	movs	r3, r0
 80024f4:	7023      	strb	r3, [r4, #0]
	if(status != MB_SUCCESS)
 80024f6:	1dfb      	adds	r3, r7, #7
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d012      	beq.n	8002526 <monitor_modbus+0x46>
	{
		status = modbus_reset();
 8002500:	1dfc      	adds	r4, r7, #7
 8002502:	f7ff ff5d 	bl	80023c0 <modbus_reset>
 8002506:	0003      	movs	r3, r0
 8002508:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 800250a:	1dfb      	adds	r3, r7, #7
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	b25b      	sxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <monitor_modbus+0x3c>
		{
			return status;
 8002514:	1dfb      	adds	r3, r7, #7
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	b25b      	sxtb	r3, r3
 800251a:	e039      	b.n	8002590 <monitor_modbus+0xb0>
		}
		return handle_modbus_error(MB_UART_ERROR);
 800251c:	2014      	movs	r0, #20
 800251e:	f000 f8fb 	bl	8002718 <handle_modbus_error>
 8002522:	0003      	movs	r3, r0
 8002524:	e034      	b.n	8002590 <monitor_modbus+0xb0>
	}

	// Uart error handling
	if(uart_err_int)
 8002526:	4b1c      	ldr	r3, [pc, #112]	@ (8002598 <monitor_modbus+0xb8>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d015      	beq.n	800255c <monitor_modbus+0x7c>
	{
		uart_err_int = 0;
 8002530:	4b19      	ldr	r3, [pc, #100]	@ (8002598 <monitor_modbus+0xb8>)
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
		status = modbus_reset();
 8002536:	1dfc      	adds	r4, r7, #7
 8002538:	f7ff ff42 	bl	80023c0 <modbus_reset>
 800253c:	0003      	movs	r3, r0
 800253e:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 8002540:	1dfb      	adds	r3, r7, #7
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b25b      	sxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <monitor_modbus+0x72>
		{
			return status;
 800254a:	1dfb      	adds	r3, r7, #7
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	b25b      	sxtb	r3, r3
 8002550:	e01e      	b.n	8002590 <monitor_modbus+0xb0>
		}
		return handle_modbus_error(MB_UART_ERROR);
 8002552:	2014      	movs	r0, #20
 8002554:	f000 f8e0 	bl	8002718 <handle_modbus_error>
 8002558:	0003      	movs	r3, r0
 800255a:	e019      	b.n	8002590 <monitor_modbus+0xb0>
	}

	// TX timeout handling
	if(!uart_tx_int)
 800255c:	4b0f      	ldr	r3, [pc, #60]	@ (800259c <monitor_modbus+0xbc>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d111      	bne.n	800258a <monitor_modbus+0xaa>
	{
		if(HAL_GetTick() - tx_time >= holding_register_database[MB_TRANSMIT_TIMEOUT])
 8002566:	f003 fae1 	bl	8005b2c <HAL_GetTick>
 800256a:	0002      	movs	r2, r0
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <monitor_modbus+0xc0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	4a0c      	ldr	r2, [pc, #48]	@ (80025a4 <monitor_modbus+0xc4>)
 8002574:	8892      	ldrh	r2, [r2, #4]
 8002576:	4293      	cmp	r3, r2
 8002578:	d304      	bcc.n	8002584 <monitor_modbus+0xa4>
		{
			return handle_modbus_error(MB_TX_TIMEOUT);
 800257a:	2012      	movs	r0, #18
 800257c:	f000 f8cc 	bl	8002718 <handle_modbus_error>
 8002580:	0003      	movs	r3, r0
 8002582:	e005      	b.n	8002590 <monitor_modbus+0xb0>
		}
		status = HAL_BUSY;
 8002584:	1dfb      	adds	r3, r7, #7
 8002586:	2202      	movs	r2, #2
 8002588:	701a      	strb	r2, [r3, #0]
			}
			status = HAL_BUSY;
		}
	}
#endif
	return status;
 800258a:	1dfb      	adds	r3, r7, #7
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	b25b      	sxtb	r3, r3
}
 8002590:	0018      	movs	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	b003      	add	sp, #12
 8002596:	bd90      	pop	{r4, r7, pc}
 8002598:	20000673 	.word	0x20000673
 800259c:	20000022 	.word	0x20000022
 80025a0:	20000664 	.word	0x20000664
 80025a4:	20000000 	.word	0x20000000

080025a8 <modbus_change_baud_rate>:

	return status;
}

int8_t modbus_change_baud_rate()
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
	int8_t status = 0;
 80025ae:	1dfb      	adds	r3, r7, #7
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[MB_BAUD_RATE])
 80025b4:	4b3c      	ldr	r3, [pc, #240]	@ (80026a8 <modbus_change_baud_rate+0x100>)
 80025b6:	885b      	ldrh	r3, [r3, #2]
 80025b8:	2b09      	cmp	r3, #9
 80025ba:	d82c      	bhi.n	8002616 <modbus_change_baud_rate+0x6e>
 80025bc:	009a      	lsls	r2, r3, #2
 80025be:	4b3b      	ldr	r3, [pc, #236]	@ (80026ac <modbus_change_baud_rate+0x104>)
 80025c0:	18d3      	adds	r3, r2, r3
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	469f      	mov	pc, r3
	{
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 80025c6:	4b3a      	ldr	r3, [pc, #232]	@ (80026b0 <modbus_change_baud_rate+0x108>)
 80025c8:	2296      	movs	r2, #150	@ 0x96
 80025ca:	0152      	lsls	r2, r2, #5
 80025cc:	605a      	str	r2, [r3, #4]
			break;
 80025ce:	e049      	b.n	8002664 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 80025d0:	4b37      	ldr	r3, [pc, #220]	@ (80026b0 <modbus_change_baud_rate+0x108>)
 80025d2:	2296      	movs	r2, #150	@ 0x96
 80025d4:	0192      	lsls	r2, r2, #6
 80025d6:	605a      	str	r2, [r3, #4]
			break;
 80025d8:	e044      	b.n	8002664 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 80025da:	4b35      	ldr	r3, [pc, #212]	@ (80026b0 <modbus_change_baud_rate+0x108>)
 80025dc:	2296      	movs	r2, #150	@ 0x96
 80025de:	01d2      	lsls	r2, r2, #7
 80025e0:	605a      	str	r2, [r3, #4]
			break;
 80025e2:	e03f      	b.n	8002664 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 80025e4:	4b32      	ldr	r3, [pc, #200]	@ (80026b0 <modbus_change_baud_rate+0x108>)
 80025e6:	2296      	movs	r2, #150	@ 0x96
 80025e8:	0212      	lsls	r2, r2, #8
 80025ea:	605a      	str	r2, [r3, #4]
			break;
 80025ec:	e03a      	b.n	8002664 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 80025ee:	4b30      	ldr	r3, [pc, #192]	@ (80026b0 <modbus_change_baud_rate+0x108>)
 80025f0:	22e1      	movs	r2, #225	@ 0xe1
 80025f2:	0212      	lsls	r2, r2, #8
 80025f4:	605a      	str	r2, [r3, #4]
			break;
 80025f6:	e035      	b.n	8002664 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 80025f8:	4b2d      	ldr	r3, [pc, #180]	@ (80026b0 <modbus_change_baud_rate+0x108>)
 80025fa:	22e1      	movs	r2, #225	@ 0xe1
 80025fc:	0252      	lsls	r2, r2, #9
 80025fe:	605a      	str	r2, [r3, #4]
			break;
 8002600:	e030      	b.n	8002664 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 8002602:	4b2b      	ldr	r3, [pc, #172]	@ (80026b0 <modbus_change_baud_rate+0x108>)
 8002604:	22fa      	movs	r2, #250	@ 0xfa
 8002606:	0252      	lsls	r2, r2, #9
 8002608:	605a      	str	r2, [r3, #4]
			break;
 800260a:	e02b      	b.n	8002664 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 800260c:	4b28      	ldr	r3, [pc, #160]	@ (80026b0 <modbus_change_baud_rate+0x108>)
 800260e:	22fa      	movs	r2, #250	@ 0xfa
 8002610:	0292      	lsls	r2, r2, #10
 8002612:	605a      	str	r2, [r3, #4]
			break;
 8002614:	e026      	b.n	8002664 <modbus_change_baud_rate+0xbc>
		}
		default:
		{
			holding_register_database[MB_BAUD_RATE] = BAUD_RATE_9600;
 8002616:	4b24      	ldr	r3, [pc, #144]	@ (80026a8 <modbus_change_baud_rate+0x100>)
 8002618:	2203      	movs	r2, #3
 800261a:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 800261c:	4b24      	ldr	r3, [pc, #144]	@ (80026b0 <modbus_change_baud_rate+0x108>)
 800261e:	2296      	movs	r2, #150	@ 0x96
 8002620:	0192      	lsls	r2, r2, #6
 8002622:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 8002624:	4b22      	ldr	r3, [pc, #136]	@ (80026b0 <modbus_change_baud_rate+0x108>)
 8002626:	0018      	movs	r0, r3
 8002628:	f007 fb06 	bl	8009c38 <UART_SetConfig>
 800262c:	0003      	movs	r3, r0
 800262e:	001a      	movs	r2, r3
 8002630:	1dfb      	adds	r3, r7, #7
 8002632:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8002634:	1dfb      	adds	r3, r7, #7
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	b25b      	sxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10d      	bne.n	800265a <modbus_change_baud_rate+0xb2>
			{
				status = modbus_reset();
 800263e:	1dfc      	adds	r4, r7, #7
 8002640:	f7ff febe 	bl	80023c0 <modbus_reset>
 8002644:	0003      	movs	r3, r0
 8002646:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK)
 8002648:	1dfb      	adds	r3, r7, #7
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b25b      	sxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <modbus_change_baud_rate+0xb2>
				{
					return status;
 8002652:	1dfb      	adds	r3, r7, #7
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	b25b      	sxtb	r3, r3
 8002658:	e022      	b.n	80026a0 <modbus_change_baud_rate+0xf8>
				}
			}
			return handle_modbus_error(RANGE_ERROR);
 800265a:	200e      	movs	r0, #14
 800265c:	f000 f85c 	bl	8002718 <handle_modbus_error>
 8002660:	0003      	movs	r3, r0
 8002662:	e01d      	b.n	80026a0 <modbus_change_baud_rate+0xf8>
		}
	}
	status = UART_SetConfig(&huart1);
 8002664:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <modbus_change_baud_rate+0x108>)
 8002666:	0018      	movs	r0, r3
 8002668:	f007 fae6 	bl	8009c38 <UART_SetConfig>
 800266c:	0003      	movs	r3, r0
 800266e:	001a      	movs	r2, r3
 8002670:	1dfb      	adds	r3, r7, #7
 8002672:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
 8002674:	1dfb      	adds	r3, r7, #7
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	b25b      	sxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10d      	bne.n	800269a <modbus_change_baud_rate+0xf2>
	{
		// Log error, reset UART
		status = modbus_reset();
 800267e:	1dfc      	adds	r4, r7, #7
 8002680:	f7ff fe9e 	bl	80023c0 <modbus_reset>
 8002684:	0003      	movs	r3, r0
 8002686:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 8002688:	1dfb      	adds	r3, r7, #7
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	b25b      	sxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <modbus_change_baud_rate+0xf2>
		{
			return status;
 8002692:	1dfb      	adds	r3, r7, #7
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	b25b      	sxtb	r3, r3
 8002698:	e002      	b.n	80026a0 <modbus_change_baud_rate+0xf8>
		}
	}

	return modbus_set_rx();
 800269a:	f7ff feff 	bl	800249c <modbus_set_rx>
 800269e:	0003      	movs	r3, r0
}
 80026a0:	0018      	movs	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b003      	add	sp, #12
 80026a6:	bd90      	pop	{r4, r7, pc}
 80026a8:	20000000 	.word	0x20000000
 80026ac:	0800af7c 	.word	0x0800af7c
 80026b0:	20000218 	.word	0x20000218

080026b4 <get_rx_buffer>:
}


// Low Level Functions -------------------------------------------------------------------------
uint8_t get_rx_buffer(uint8_t index)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	0002      	movs	r2, r0
 80026bc:	1dfb      	adds	r3, r7, #7
 80026be:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 80026c0:	1dfb      	adds	r3, r7, #7
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2bff      	cmp	r3, #255	@ 0xff
 80026c6:	d01e      	beq.n	8002706 <get_rx_buffer+0x52>
	{
		return ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 80026c8:	4b11      	ldr	r3, [pc, #68]	@ (8002710 <get_rx_buffer+0x5c>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	001a      	movs	r2, r3
 80026d0:	1dfb      	adds	r3, r7, #7
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 80026d6:	2bff      	cmp	r3, #255	@ 0xff
 80026d8:	dd0b      	ble.n	80026f2 <get_rx_buffer+0x3e>
 80026da:	4b0d      	ldr	r3, [pc, #52]	@ (8002710 <get_rx_buffer+0x5c>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	001a      	movs	r2, r3
 80026e2:	1dfb      	adds	r3, r7, #7
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	18d3      	adds	r3, r2, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	3bff      	subs	r3, #255	@ 0xff
 80026ec:	4a09      	ldr	r2, [pc, #36]	@ (8002714 <get_rx_buffer+0x60>)
 80026ee:	5cd3      	ldrb	r3, [r2, r3]
 80026f0:	e00a      	b.n	8002708 <get_rx_buffer+0x54>
				modbus_rx_buffer[start_index + index];
 80026f2:	4b07      	ldr	r3, [pc, #28]	@ (8002710 <get_rx_buffer+0x5c>)
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	001a      	movs	r2, r3
 80026fa:	1dfb      	adds	r3, r7, #7
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 8002700:	4a04      	ldr	r2, [pc, #16]	@ (8002714 <get_rx_buffer+0x60>)
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	e000      	b.n	8002708 <get_rx_buffer+0x54>
	}
	return 0xFF;
 8002706:	23ff      	movs	r3, #255	@ 0xff
}
 8002708:	0018      	movs	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	b002      	add	sp, #8
 800270e:	bd80      	pop	{r7, pc}
 8002710:	2000066c 	.word	0x2000066c
 8002714:	20000368 	.word	0x20000368

08002718 <handle_modbus_error>:

int8_t handle_modbus_error(int8_t error_code)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	0002      	movs	r2, r0
 8002720:	1dfb      	adds	r3, r7, #7
 8002722:	701a      	strb	r2, [r3, #0]
	holding_register_database[MB_ERRORS] |= 1U << (error_code - RANGE_ERROR);
 8002724:	4b0a      	ldr	r3, [pc, #40]	@ (8002750 <handle_modbus_error+0x38>)
 8002726:	891a      	ldrh	r2, [r3, #8]
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	b25b      	sxtb	r3, r3
 800272e:	3b0e      	subs	r3, #14
 8002730:	2101      	movs	r1, #1
 8002732:	4099      	lsls	r1, r3
 8002734:	000b      	movs	r3, r1
 8002736:	b29b      	uxth	r3, r3
 8002738:	4313      	orrs	r3, r2
 800273a:	b29a      	uxth	r2, r3
 800273c:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <handle_modbus_error+0x38>)
 800273e:	811a      	strh	r2, [r3, #8]
	return error_code;
 8002740:	1dfb      	adds	r3, r7, #7
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	b25b      	sxtb	r3, r3
}
 8002746:	0018      	movs	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	b002      	add	sp, #8
 800274c:	bd80      	pop	{r7, pc}
 800274e:	46c0      	nop			@ (mov r8, r8)
 8002750:	20000000 	.word	0x20000000

08002754 <crc_16>:

// Private Functions ---------------------------------------------------------------------------

uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	000a      	movs	r2, r1
 800275e:	1cfb      	adds	r3, r7, #3
 8002760:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 8002762:	230f      	movs	r3, #15
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	22ff      	movs	r2, #255	@ 0xff
 8002768:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 800276a:	230e      	movs	r3, #14
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	22ff      	movs	r2, #255	@ 0xff
 8002770:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8002772:	e019      	b.n	80027a8 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	781a      	ldrb	r2, [r3, #0]
 800277c:	200e      	movs	r0, #14
 800277e:	183b      	adds	r3, r7, r0
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	4053      	eors	r3, r2
 8002784:	b2db      	uxtb	r3, r3
 8002786:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8002788:	4a13      	ldr	r2, [pc, #76]	@ (80027d8 <crc_16+0x84>)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	18d3      	adds	r3, r2, r3
 800278e:	7819      	ldrb	r1, [r3, #0]
 8002790:	183b      	adds	r3, r7, r0
 8002792:	200f      	movs	r0, #15
 8002794:	183a      	adds	r2, r7, r0
 8002796:	7812      	ldrb	r2, [r2, #0]
 8002798:	404a      	eors	r2, r1
 800279a:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 800279c:	183b      	adds	r3, r7, r0
 800279e:	490f      	ldr	r1, [pc, #60]	@ (80027dc <crc_16+0x88>)
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	188a      	adds	r2, r1, r2
 80027a4:	7812      	ldrb	r2, [r2, #0]
 80027a6:	701a      	strb	r2, [r3, #0]
	while (size--)
 80027a8:	1cfb      	adds	r3, r7, #3
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	1cfa      	adds	r2, r7, #3
 80027ae:	1e59      	subs	r1, r3, #1
 80027b0:	7011      	strb	r1, [r2, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1de      	bne.n	8002774 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 80027b6:	230f      	movs	r3, #15
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	b21a      	sxth	r2, r3
 80027c0:	230e      	movs	r3, #14
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	4313      	orrs	r3, r2
 80027ca:	b21b      	sxth	r3, r3
 80027cc:	b29b      	uxth	r3, r3
}
 80027ce:	0018      	movs	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b004      	add	sp, #16
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	46c0      	nop			@ (mov r8, r8)
 80027d8:	0800ad3c 	.word	0x0800ad3c
 80027dc:	0800ae3c 	.word	0x0800ae3c

080027e0 <handle_chunk_miss>:

int8_t handle_chunk_miss()
{
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 80027e6:	4b15      	ldr	r3, [pc, #84]	@ (800283c <handle_chunk_miss+0x5c>)
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d120      	bne.n	8002832 <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 80027f0:	f003 f99c 	bl	8005b2c <HAL_GetTick>
 80027f4:	0002      	movs	r2, r0
 80027f6:	4b12      	ldr	r3, [pc, #72]	@ (8002840 <handle_chunk_miss+0x60>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b0a      	cmp	r3, #10
 80027fe:	d918      	bls.n	8002832 <handle_chunk_miss+0x52>
		{
			modbus_header = 1;
 8002800:	4b0e      	ldr	r3, [pc, #56]	@ (800283c <handle_chunk_miss+0x5c>)
 8002802:	2201      	movs	r2, #1
 8002804:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort(&huart1);
 8002806:	4b0f      	ldr	r3, [pc, #60]	@ (8002844 <handle_chunk_miss+0x64>)
 8002808:	0018      	movs	r0, r3
 800280a:	f006 fdab 	bl	8009364 <HAL_UART_Abort>
 800280e:	0003      	movs	r3, r0
 8002810:	001a      	movs	r2, r3
 8002812:	1dfb      	adds	r3, r7, #7
 8002814:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8002816:	1dfb      	adds	r3, r7, #7
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b25b      	sxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d104      	bne.n	800282a <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8002820:	1dfc      	adds	r4, r7, #7
 8002822:	f7ff fe3b 	bl	800249c <modbus_set_rx>
 8002826:	0003      	movs	r3, r0
 8002828:	7023      	strb	r3, [r4, #0]
			}
			return status;
 800282a:	1dfb      	adds	r3, r7, #7
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	b25b      	sxtb	r3, r3
 8002830:	e000      	b.n	8002834 <handle_chunk_miss+0x54>
		}
	}
	return MB_SUCCESS;
 8002832:	2300      	movs	r3, #0
}
 8002834:	0018      	movs	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	b003      	add	sp, #12
 800283a:	bd90      	pop	{r4, r7, pc}
 800283c:	20000020 	.word	0x20000020
 8002840:	20000668 	.word	0x20000668
 8002844:	20000218 	.word	0x20000218

08002848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284e:	4b0f      	ldr	r3, [pc, #60]	@ (800288c <HAL_MspInit+0x44>)
 8002850:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002852:	4b0e      	ldr	r3, [pc, #56]	@ (800288c <HAL_MspInit+0x44>)
 8002854:	2101      	movs	r1, #1
 8002856:	430a      	orrs	r2, r1
 8002858:	641a      	str	r2, [r3, #64]	@ 0x40
 800285a:	4b0c      	ldr	r3, [pc, #48]	@ (800288c <HAL_MspInit+0x44>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	2201      	movs	r2, #1
 8002860:	4013      	ands	r3, r2
 8002862:	607b      	str	r3, [r7, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	4b09      	ldr	r3, [pc, #36]	@ (800288c <HAL_MspInit+0x44>)
 8002868:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800286a:	4b08      	ldr	r3, [pc, #32]	@ (800288c <HAL_MspInit+0x44>)
 800286c:	2180      	movs	r1, #128	@ 0x80
 800286e:	0549      	lsls	r1, r1, #21
 8002870:	430a      	orrs	r2, r1
 8002872:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002874:	4b05      	ldr	r3, [pc, #20]	@ (800288c <HAL_MspInit+0x44>)
 8002876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002878:	2380      	movs	r3, #128	@ 0x80
 800287a:	055b      	lsls	r3, r3, #21
 800287c:	4013      	ands	r3, r2
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002882:	46c0      	nop			@ (mov r8, r8)
 8002884:	46bd      	mov	sp, r7
 8002886:	b002      	add	sp, #8
 8002888:	bd80      	pop	{r7, pc}
 800288a:	46c0      	nop			@ (mov r8, r8)
 800288c:	40021000 	.word	0x40021000

08002890 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b093      	sub	sp, #76	@ 0x4c
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	2334      	movs	r3, #52	@ 0x34
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	0018      	movs	r0, r3
 800289e:	2314      	movs	r3, #20
 80028a0:	001a      	movs	r2, r3
 80028a2:	2100      	movs	r1, #0
 80028a4:	f008 fa08 	bl	800acb8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028a8:	2414      	movs	r4, #20
 80028aa:	193b      	adds	r3, r7, r4
 80028ac:	0018      	movs	r0, r3
 80028ae:	2320      	movs	r3, #32
 80028b0:	001a      	movs	r2, r3
 80028b2:	2100      	movs	r1, #0
 80028b4:	f008 fa00 	bl	800acb8 <memset>
  if(hadc->Instance==ADC1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a35      	ldr	r2, [pc, #212]	@ (8002994 <HAL_ADC_MspInit+0x104>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d163      	bne.n	800298a <HAL_ADC_MspInit+0xfa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80028c2:	193b      	adds	r3, r7, r4
 80028c4:	2220      	movs	r2, #32
 80028c6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80028c8:	193b      	adds	r3, r7, r4
 80028ca:	2200      	movs	r2, #0
 80028cc:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028ce:	193b      	adds	r3, r7, r4
 80028d0:	0018      	movs	r0, r3
 80028d2:	f006 fb79 	bl	8008fc8 <HAL_RCCEx_PeriphCLKConfig>
 80028d6:	1e03      	subs	r3, r0, #0
 80028d8:	d001      	beq.n	80028de <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 80028da:	f7ff f9a1 	bl	8001c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80028de:	4b2e      	ldr	r3, [pc, #184]	@ (8002998 <HAL_ADC_MspInit+0x108>)
 80028e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002998 <HAL_ADC_MspInit+0x108>)
 80028e4:	2180      	movs	r1, #128	@ 0x80
 80028e6:	0349      	lsls	r1, r1, #13
 80028e8:	430a      	orrs	r2, r1
 80028ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80028ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002998 <HAL_ADC_MspInit+0x108>)
 80028ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028f0:	2380      	movs	r3, #128	@ 0x80
 80028f2:	035b      	lsls	r3, r3, #13
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	4b27      	ldr	r3, [pc, #156]	@ (8002998 <HAL_ADC_MspInit+0x108>)
 80028fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028fe:	4b26      	ldr	r3, [pc, #152]	@ (8002998 <HAL_ADC_MspInit+0x108>)
 8002900:	2101      	movs	r1, #1
 8002902:	430a      	orrs	r2, r1
 8002904:	635a      	str	r2, [r3, #52]	@ 0x34
 8002906:	4b24      	ldr	r3, [pc, #144]	@ (8002998 <HAL_ADC_MspInit+0x108>)
 8002908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800290a:	2201      	movs	r2, #1
 800290c:	4013      	ands	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Oil_Temp_Pin|Water_Pressure_Pin|Oil_Pressure_Pin;
 8002912:	2134      	movs	r1, #52	@ 0x34
 8002914:	187b      	adds	r3, r7, r1
 8002916:	2207      	movs	r2, #7
 8002918:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800291a:	187b      	adds	r3, r7, r1
 800291c:	2203      	movs	r2, #3
 800291e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	187b      	adds	r3, r7, r1
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002926:	187a      	adds	r2, r7, r1
 8002928:	23a0      	movs	r3, #160	@ 0xa0
 800292a:	05db      	lsls	r3, r3, #23
 800292c:	0011      	movs	r1, r2
 800292e:	0018      	movs	r0, r3
 8002930:	f004 fe2e 	bl	8007590 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002934:	4b19      	ldr	r3, [pc, #100]	@ (800299c <HAL_ADC_MspInit+0x10c>)
 8002936:	4a1a      	ldr	r2, [pc, #104]	@ (80029a0 <HAL_ADC_MspInit+0x110>)
 8002938:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800293a:	4b18      	ldr	r3, [pc, #96]	@ (800299c <HAL_ADC_MspInit+0x10c>)
 800293c:	2205      	movs	r2, #5
 800293e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002940:	4b16      	ldr	r3, [pc, #88]	@ (800299c <HAL_ADC_MspInit+0x10c>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002946:	4b15      	ldr	r3, [pc, #84]	@ (800299c <HAL_ADC_MspInit+0x10c>)
 8002948:	2200      	movs	r2, #0
 800294a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800294c:	4b13      	ldr	r3, [pc, #76]	@ (800299c <HAL_ADC_MspInit+0x10c>)
 800294e:	2280      	movs	r2, #128	@ 0x80
 8002950:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002952:	4b12      	ldr	r3, [pc, #72]	@ (800299c <HAL_ADC_MspInit+0x10c>)
 8002954:	2280      	movs	r2, #128	@ 0x80
 8002956:	0052      	lsls	r2, r2, #1
 8002958:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800295a:	4b10      	ldr	r3, [pc, #64]	@ (800299c <HAL_ADC_MspInit+0x10c>)
 800295c:	2280      	movs	r2, #128	@ 0x80
 800295e:	00d2      	lsls	r2, r2, #3
 8002960:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <HAL_ADC_MspInit+0x10c>)
 8002964:	2220      	movs	r2, #32
 8002966:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002968:	4b0c      	ldr	r3, [pc, #48]	@ (800299c <HAL_ADC_MspInit+0x10c>)
 800296a:	2200      	movs	r2, #0
 800296c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800296e:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <HAL_ADC_MspInit+0x10c>)
 8002970:	0018      	movs	r0, r3
 8002972:	f004 fa5b 	bl	8006e2c <HAL_DMA_Init>
 8002976:	1e03      	subs	r3, r0, #0
 8002978:	d001      	beq.n	800297e <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800297a:	f7ff f951 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a06      	ldr	r2, [pc, #24]	@ (800299c <HAL_ADC_MspInit+0x10c>)
 8002982:	651a      	str	r2, [r3, #80]	@ 0x50
 8002984:	4b05      	ldr	r3, [pc, #20]	@ (800299c <HAL_ADC_MspInit+0x10c>)
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	46bd      	mov	sp, r7
 800298e:	b013      	add	sp, #76	@ 0x4c
 8002990:	bd90      	pop	{r4, r7, pc}
 8002992:	46c0      	nop			@ (mov r8, r8)
 8002994:	40012400 	.word	0x40012400
 8002998:	40021000 	.word	0x40021000
 800299c:	200000b0 	.word	0x200000b0
 80029a0:	40020008 	.word	0x40020008

080029a4 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a0b      	ldr	r2, [pc, #44]	@ (80029e0 <HAL_ADC_MspDeInit+0x3c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d110      	bne.n	80029d8 <HAL_ADC_MspDeInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80029b6:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <HAL_ADC_MspDeInit+0x40>)
 80029b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029ba:	4b0a      	ldr	r3, [pc, #40]	@ (80029e4 <HAL_ADC_MspDeInit+0x40>)
 80029bc:	490a      	ldr	r1, [pc, #40]	@ (80029e8 <HAL_ADC_MspDeInit+0x44>)
 80029be:	400a      	ands	r2, r1
 80029c0:	641a      	str	r2, [r3, #64]	@ 0x40
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    HAL_GPIO_DeInit(GPIOA, Oil_Temp_Pin|Water_Pressure_Pin|Oil_Pressure_Pin);
 80029c2:	23a0      	movs	r3, #160	@ 0xa0
 80029c4:	05db      	lsls	r3, r3, #23
 80029c6:	2107      	movs	r1, #7
 80029c8:	0018      	movs	r0, r3
 80029ca:	f004 ff53 	bl	8007874 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d2:	0018      	movs	r0, r3
 80029d4:	f004 fab4 	bl	8006f40 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 80029d8:	46c0      	nop			@ (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	b002      	add	sp, #8
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40012400 	.word	0x40012400
 80029e4:	40021000 	.word	0x40021000
 80029e8:	ffefffff 	.word	0xffefffff

080029ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b093      	sub	sp, #76	@ 0x4c
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	2334      	movs	r3, #52	@ 0x34
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	0018      	movs	r0, r3
 80029fa:	2314      	movs	r3, #20
 80029fc:	001a      	movs	r2, r3
 80029fe:	2100      	movs	r1, #0
 8002a00:	f008 f95a 	bl	800acb8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a04:	2414      	movs	r4, #20
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	0018      	movs	r0, r3
 8002a0a:	2320      	movs	r3, #32
 8002a0c:	001a      	movs	r2, r3
 8002a0e:	2100      	movs	r1, #0
 8002a10:	f008 f952 	bl	800acb8 <memset>
  if(hi2c->Instance==I2C1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a4d      	ldr	r2, [pc, #308]	@ (8002b50 <HAL_I2C_MspInit+0x164>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d000      	beq.n	8002a20 <HAL_I2C_MspInit+0x34>
 8002a1e:	e093      	b.n	8002b48 <HAL_I2C_MspInit+0x15c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a20:	193b      	adds	r3, r7, r4
 8002a22:	2202      	movs	r2, #2
 8002a24:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a26:	193b      	adds	r3, r7, r4
 8002a28:	2200      	movs	r2, #0
 8002a2a:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a2c:	193b      	adds	r3, r7, r4
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f006 faca 	bl	8008fc8 <HAL_RCCEx_PeriphCLKConfig>
 8002a34:	1e03      	subs	r3, r0, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002a38:	f7ff f8f2 	bl	8001c20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3c:	4b45      	ldr	r3, [pc, #276]	@ (8002b54 <HAL_I2C_MspInit+0x168>)
 8002a3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a40:	4b44      	ldr	r3, [pc, #272]	@ (8002b54 <HAL_I2C_MspInit+0x168>)
 8002a42:	2101      	movs	r1, #1
 8002a44:	430a      	orrs	r2, r1
 8002a46:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a48:	4b42      	ldr	r3, [pc, #264]	@ (8002b54 <HAL_I2C_MspInit+0x168>)
 8002a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a54:	2134      	movs	r1, #52	@ 0x34
 8002a56:	187b      	adds	r3, r7, r1
 8002a58:	22c0      	movs	r2, #192	@ 0xc0
 8002a5a:	00d2      	lsls	r2, r2, #3
 8002a5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	2212      	movs	r2, #18
 8002a62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002a70:	187b      	adds	r3, r7, r1
 8002a72:	2206      	movs	r2, #6
 8002a74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a76:	187a      	adds	r2, r7, r1
 8002a78:	23a0      	movs	r3, #160	@ 0xa0
 8002a7a:	05db      	lsls	r3, r3, #23
 8002a7c:	0011      	movs	r1, r2
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f004 fd86 	bl	8007590 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a84:	4b33      	ldr	r3, [pc, #204]	@ (8002b54 <HAL_I2C_MspInit+0x168>)
 8002a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a88:	4b32      	ldr	r3, [pc, #200]	@ (8002b54 <HAL_I2C_MspInit+0x168>)
 8002a8a:	2180      	movs	r1, #128	@ 0x80
 8002a8c:	0389      	lsls	r1, r1, #14
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a92:	4b30      	ldr	r3, [pc, #192]	@ (8002b54 <HAL_I2C_MspInit+0x168>)
 8002a94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a96:	2380      	movs	r3, #128	@ 0x80
 8002a98:	039b      	lsls	r3, r3, #14
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 8002aa0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b58 <HAL_I2C_MspInit+0x16c>)
 8002aa2:	4a2e      	ldr	r2, [pc, #184]	@ (8002b5c <HAL_I2C_MspInit+0x170>)
 8002aa4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8002b58 <HAL_I2C_MspInit+0x16c>)
 8002aa8:	220a      	movs	r2, #10
 8002aaa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aac:	4b2a      	ldr	r3, [pc, #168]	@ (8002b58 <HAL_I2C_MspInit+0x16c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab2:	4b29      	ldr	r3, [pc, #164]	@ (8002b58 <HAL_I2C_MspInit+0x16c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ab8:	4b27      	ldr	r3, [pc, #156]	@ (8002b58 <HAL_I2C_MspInit+0x16c>)
 8002aba:	2280      	movs	r2, #128	@ 0x80
 8002abc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002abe:	4b26      	ldr	r3, [pc, #152]	@ (8002b58 <HAL_I2C_MspInit+0x16c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ac4:	4b24      	ldr	r3, [pc, #144]	@ (8002b58 <HAL_I2C_MspInit+0x16c>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002aca:	4b23      	ldr	r3, [pc, #140]	@ (8002b58 <HAL_I2C_MspInit+0x16c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ad0:	4b21      	ldr	r3, [pc, #132]	@ (8002b58 <HAL_I2C_MspInit+0x16c>)
 8002ad2:	2280      	movs	r2, #128	@ 0x80
 8002ad4:	0152      	lsls	r2, r2, #5
 8002ad6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b58 <HAL_I2C_MspInit+0x16c>)
 8002ada:	0018      	movs	r0, r3
 8002adc:	f004 f9a6 	bl	8006e2c <HAL_DMA_Init>
 8002ae0:	1e03      	subs	r3, r0, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8002ae4:	f7ff f89c 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a1b      	ldr	r2, [pc, #108]	@ (8002b58 <HAL_I2C_MspInit+0x16c>)
 8002aec:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002aee:	4b1a      	ldr	r3, [pc, #104]	@ (8002b58 <HAL_I2C_MspInit+0x16c>)
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel5;
 8002af4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b60 <HAL_I2C_MspInit+0x174>)
 8002af6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b64 <HAL_I2C_MspInit+0x178>)
 8002af8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002afa:	4b19      	ldr	r3, [pc, #100]	@ (8002b60 <HAL_I2C_MspInit+0x174>)
 8002afc:	220b      	movs	r2, #11
 8002afe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b00:	4b17      	ldr	r3, [pc, #92]	@ (8002b60 <HAL_I2C_MspInit+0x174>)
 8002b02:	2210      	movs	r2, #16
 8002b04:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b06:	4b16      	ldr	r3, [pc, #88]	@ (8002b60 <HAL_I2C_MspInit+0x174>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b0c:	4b14      	ldr	r3, [pc, #80]	@ (8002b60 <HAL_I2C_MspInit+0x174>)
 8002b0e:	2280      	movs	r2, #128	@ 0x80
 8002b10:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b12:	4b13      	ldr	r3, [pc, #76]	@ (8002b60 <HAL_I2C_MspInit+0x174>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b18:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <HAL_I2C_MspInit+0x174>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002b1e:	4b10      	ldr	r3, [pc, #64]	@ (8002b60 <HAL_I2C_MspInit+0x174>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b24:	4b0e      	ldr	r3, [pc, #56]	@ (8002b60 <HAL_I2C_MspInit+0x174>)
 8002b26:	2280      	movs	r2, #128	@ 0x80
 8002b28:	0152      	lsls	r2, r2, #5
 8002b2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <HAL_I2C_MspInit+0x174>)
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f004 f97c 	bl	8006e2c <HAL_DMA_Init>
 8002b34:	1e03      	subs	r3, r0, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_I2C_MspInit+0x150>
    {
      Error_Handler();
 8002b38:	f7ff f872 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a08      	ldr	r2, [pc, #32]	@ (8002b60 <HAL_I2C_MspInit+0x174>)
 8002b40:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b42:	4b07      	ldr	r3, [pc, #28]	@ (8002b60 <HAL_I2C_MspInit+0x174>)
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002b48:	46c0      	nop			@ (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b013      	add	sp, #76	@ 0x4c
 8002b4e:	bd90      	pop	{r4, r7, pc}
 8002b50:	40005400 	.word	0x40005400
 8002b54:	40021000 	.word	0x40021000
 8002b58:	20000160 	.word	0x20000160
 8002b5c:	40020044 	.word	0x40020044
 8002b60:	200001bc 	.word	0x200001bc
 8002b64:	40020058 	.word	0x40020058

08002b68 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a13      	ldr	r2, [pc, #76]	@ (8002bc4 <HAL_I2C_MspDeInit+0x5c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d11f      	bne.n	8002bba <HAL_I2C_MspDeInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002b7a:	4b13      	ldr	r3, [pc, #76]	@ (8002bc8 <HAL_I2C_MspDeInit+0x60>)
 8002b7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b7e:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <HAL_I2C_MspDeInit+0x60>)
 8002b80:	4912      	ldr	r1, [pc, #72]	@ (8002bcc <HAL_I2C_MspDeInit+0x64>)
 8002b82:	400a      	ands	r2, r1
 8002b84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 8002b86:	2380      	movs	r3, #128	@ 0x80
 8002b88:	009a      	lsls	r2, r3, #2
 8002b8a:	23a0      	movs	r3, #160	@ 0xa0
 8002b8c:	05db      	lsls	r3, r3, #23
 8002b8e:	0011      	movs	r1, r2
 8002b90:	0018      	movs	r0, r3
 8002b92:	f004 fe6f 	bl	8007874 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8002b96:	2380      	movs	r3, #128	@ 0x80
 8002b98:	00da      	lsls	r2, r3, #3
 8002b9a:	23a0      	movs	r3, #160	@ 0xa0
 8002b9c:	05db      	lsls	r3, r3, #23
 8002b9e:	0011      	movs	r1, r2
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f004 fe67 	bl	8007874 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002baa:	0018      	movs	r0, r3
 8002bac:	f004 f9c8 	bl	8006f40 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f004 f9c3 	bl	8006f40 <HAL_DMA_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002bba:	46c0      	nop			@ (mov r8, r8)
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	b002      	add	sp, #8
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	46c0      	nop			@ (mov r8, r8)
 8002bc4:	40005400 	.word	0x40005400
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	ffdfffff 	.word	0xffdfffff

08002bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	b095      	sub	sp, #84	@ 0x54
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	233c      	movs	r3, #60	@ 0x3c
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	0018      	movs	r0, r3
 8002bde:	2314      	movs	r3, #20
 8002be0:	001a      	movs	r2, r3
 8002be2:	2100      	movs	r1, #0
 8002be4:	f008 f868 	bl	800acb8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002be8:	241c      	movs	r4, #28
 8002bea:	193b      	adds	r3, r7, r4
 8002bec:	0018      	movs	r0, r3
 8002bee:	2320      	movs	r3, #32
 8002bf0:	001a      	movs	r2, r3
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	f008 f860 	bl	800acb8 <memset>
  if(huart->Instance==USART1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a74      	ldr	r2, [pc, #464]	@ (8002dd0 <HAL_UART_MspInit+0x200>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d000      	beq.n	8002c04 <HAL_UART_MspInit+0x34>
 8002c02:	e0e1      	b.n	8002dc8 <HAL_UART_MspInit+0x1f8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c04:	193b      	adds	r3, r7, r4
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002c0a:	193b      	adds	r3, r7, r4
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c10:	193b      	adds	r3, r7, r4
 8002c12:	0018      	movs	r0, r3
 8002c14:	f006 f9d8 	bl	8008fc8 <HAL_RCCEx_PeriphCLKConfig>
 8002c18:	1e03      	subs	r3, r0, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002c1c:	f7ff f800 	bl	8001c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c20:	4b6c      	ldr	r3, [pc, #432]	@ (8002dd4 <HAL_UART_MspInit+0x204>)
 8002c22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c24:	4b6b      	ldr	r3, [pc, #428]	@ (8002dd4 <HAL_UART_MspInit+0x204>)
 8002c26:	2180      	movs	r1, #128	@ 0x80
 8002c28:	01c9      	lsls	r1, r1, #7
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c2e:	4b69      	ldr	r3, [pc, #420]	@ (8002dd4 <HAL_UART_MspInit+0x204>)
 8002c30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c32:	2380      	movs	r3, #128	@ 0x80
 8002c34:	01db      	lsls	r3, r3, #7
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3c:	4b65      	ldr	r3, [pc, #404]	@ (8002dd4 <HAL_UART_MspInit+0x204>)
 8002c3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c40:	4b64      	ldr	r3, [pc, #400]	@ (8002dd4 <HAL_UART_MspInit+0x204>)
 8002c42:	2104      	movs	r1, #4
 8002c44:	430a      	orrs	r2, r1
 8002c46:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c48:	4b62      	ldr	r3, [pc, #392]	@ (8002dd4 <HAL_UART_MspInit+0x204>)
 8002c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	4013      	ands	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c54:	4b5f      	ldr	r3, [pc, #380]	@ (8002dd4 <HAL_UART_MspInit+0x204>)
 8002c56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c58:	4b5e      	ldr	r3, [pc, #376]	@ (8002dd4 <HAL_UART_MspInit+0x204>)
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c60:	4b5c      	ldr	r3, [pc, #368]	@ (8002dd4 <HAL_UART_MspInit+0x204>)
 8002c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c64:	2202      	movs	r2, #2
 8002c66:	4013      	ands	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6c:	4b59      	ldr	r3, [pc, #356]	@ (8002dd4 <HAL_UART_MspInit+0x204>)
 8002c6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c70:	4b58      	ldr	r3, [pc, #352]	@ (8002dd4 <HAL_UART_MspInit+0x204>)
 8002c72:	2101      	movs	r1, #1
 8002c74:	430a      	orrs	r2, r1
 8002c76:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c78:	4b56      	ldr	r3, [pc, #344]	@ (8002dd4 <HAL_UART_MspInit+0x204>)
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	4013      	ands	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c84:	213c      	movs	r1, #60	@ 0x3c
 8002c86:	187b      	adds	r3, r7, r1
 8002c88:	2280      	movs	r2, #128	@ 0x80
 8002c8a:	01d2      	lsls	r2, r2, #7
 8002c8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8e:	000c      	movs	r4, r1
 8002c90:	193b      	adds	r3, r7, r4
 8002c92:	2202      	movs	r2, #2
 8002c94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	193b      	adds	r3, r7, r4
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9c:	193b      	adds	r3, r7, r4
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002ca2:	193b      	adds	r3, r7, r4
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca8:	193b      	adds	r3, r7, r4
 8002caa:	4a4b      	ldr	r2, [pc, #300]	@ (8002dd8 <HAL_UART_MspInit+0x208>)
 8002cac:	0019      	movs	r1, r3
 8002cae:	0010      	movs	r0, r2
 8002cb0:	f004 fc6e 	bl	8007590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cb4:	193b      	adds	r3, r7, r4
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	193b      	adds	r3, r7, r4
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	193b      	adds	r3, r7, r4
 8002cc8:	2200      	movs	r2, #0
 8002cca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002ccc:	193b      	adds	r3, r7, r4
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd2:	193b      	adds	r3, r7, r4
 8002cd4:	4a41      	ldr	r2, [pc, #260]	@ (8002ddc <HAL_UART_MspInit+0x20c>)
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	0010      	movs	r0, r2
 8002cda:	f004 fc59 	bl	8007590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002cde:	0021      	movs	r1, r4
 8002ce0:	187b      	adds	r3, r7, r1
 8002ce2:	2280      	movs	r2, #128	@ 0x80
 8002ce4:	0152      	lsls	r2, r2, #5
 8002ce6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce8:	187b      	adds	r3, r7, r1
 8002cea:	2202      	movs	r2, #2
 8002cec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	187b      	adds	r3, r7, r1
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d00:	187a      	adds	r2, r7, r1
 8002d02:	23a0      	movs	r3, #160	@ 0xa0
 8002d04:	05db      	lsls	r3, r3, #23
 8002d06:	0011      	movs	r1, r2
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f004 fc41 	bl	8007590 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8002d0e:	4b34      	ldr	r3, [pc, #208]	@ (8002de0 <HAL_UART_MspInit+0x210>)
 8002d10:	4a34      	ldr	r2, [pc, #208]	@ (8002de4 <HAL_UART_MspInit+0x214>)
 8002d12:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002d14:	4b32      	ldr	r3, [pc, #200]	@ (8002de0 <HAL_UART_MspInit+0x210>)
 8002d16:	2232      	movs	r2, #50	@ 0x32
 8002d18:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d1a:	4b31      	ldr	r3, [pc, #196]	@ (8002de0 <HAL_UART_MspInit+0x210>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d20:	4b2f      	ldr	r3, [pc, #188]	@ (8002de0 <HAL_UART_MspInit+0x210>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d26:	4b2e      	ldr	r3, [pc, #184]	@ (8002de0 <HAL_UART_MspInit+0x210>)
 8002d28:	2280      	movs	r2, #128	@ 0x80
 8002d2a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8002de0 <HAL_UART_MspInit+0x210>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d32:	4b2b      	ldr	r3, [pc, #172]	@ (8002de0 <HAL_UART_MspInit+0x210>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002d38:	4b29      	ldr	r3, [pc, #164]	@ (8002de0 <HAL_UART_MspInit+0x210>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d3e:	4b28      	ldr	r3, [pc, #160]	@ (8002de0 <HAL_UART_MspInit+0x210>)
 8002d40:	22c0      	movs	r2, #192	@ 0xc0
 8002d42:	0192      	lsls	r2, r2, #6
 8002d44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d46:	4b26      	ldr	r3, [pc, #152]	@ (8002de0 <HAL_UART_MspInit+0x210>)
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f004 f86f 	bl	8006e2c <HAL_DMA_Init>
 8002d4e:	1e03      	subs	r3, r0, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 8002d52:	f7fe ff65 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2180      	movs	r1, #128	@ 0x80
 8002d5a:	4a21      	ldr	r2, [pc, #132]	@ (8002de0 <HAL_UART_MspInit+0x210>)
 8002d5c:	505a      	str	r2, [r3, r1]
 8002d5e:	4b20      	ldr	r3, [pc, #128]	@ (8002de0 <HAL_UART_MspInit+0x210>)
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8002d64:	4b20      	ldr	r3, [pc, #128]	@ (8002de8 <HAL_UART_MspInit+0x218>)
 8002d66:	4a21      	ldr	r2, [pc, #132]	@ (8002dec <HAL_UART_MspInit+0x21c>)
 8002d68:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002de8 <HAL_UART_MspInit+0x218>)
 8002d6c:	2233      	movs	r2, #51	@ 0x33
 8002d6e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d70:	4b1d      	ldr	r3, [pc, #116]	@ (8002de8 <HAL_UART_MspInit+0x218>)
 8002d72:	2210      	movs	r2, #16
 8002d74:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d76:	4b1c      	ldr	r3, [pc, #112]	@ (8002de8 <HAL_UART_MspInit+0x218>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002de8 <HAL_UART_MspInit+0x218>)
 8002d7e:	2280      	movs	r2, #128	@ 0x80
 8002d80:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d82:	4b19      	ldr	r3, [pc, #100]	@ (8002de8 <HAL_UART_MspInit+0x218>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d88:	4b17      	ldr	r3, [pc, #92]	@ (8002de8 <HAL_UART_MspInit+0x218>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002d8e:	4b16      	ldr	r3, [pc, #88]	@ (8002de8 <HAL_UART_MspInit+0x218>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002d94:	4b14      	ldr	r3, [pc, #80]	@ (8002de8 <HAL_UART_MspInit+0x218>)
 8002d96:	2280      	movs	r2, #128	@ 0x80
 8002d98:	0192      	lsls	r2, r2, #6
 8002d9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d9c:	4b12      	ldr	r3, [pc, #72]	@ (8002de8 <HAL_UART_MspInit+0x218>)
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f004 f844 	bl	8006e2c <HAL_DMA_Init>
 8002da4:	1e03      	subs	r3, r0, #0
 8002da6:	d001      	beq.n	8002dac <HAL_UART_MspInit+0x1dc>
    {
      Error_Handler();
 8002da8:	f7fe ff3a 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a0e      	ldr	r2, [pc, #56]	@ (8002de8 <HAL_UART_MspInit+0x218>)
 8002db0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002db2:	4b0d      	ldr	r3, [pc, #52]	@ (8002de8 <HAL_UART_MspInit+0x218>)
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002db8:	2200      	movs	r2, #0
 8002dba:	2100      	movs	r1, #0
 8002dbc:	201b      	movs	r0, #27
 8002dbe:	f003 fff3 	bl	8006da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dc2:	201b      	movs	r0, #27
 8002dc4:	f004 f805 	bl	8006dd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002dc8:	46c0      	nop			@ (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b015      	add	sp, #84	@ 0x54
 8002dce:	bd90      	pop	{r4, r7, pc}
 8002dd0:	40013800 	.word	0x40013800
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	50000800 	.word	0x50000800
 8002ddc:	50000400 	.word	0x50000400
 8002de0:	200002ac 	.word	0x200002ac
 8002de4:	4002001c 	.word	0x4002001c
 8002de8:	20000308 	.word	0x20000308
 8002dec:	40020030 	.word	0x40020030

08002df0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a17      	ldr	r2, [pc, #92]	@ (8002e5c <HAL_UART_MspDeInit+0x6c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d127      	bne.n	8002e52 <HAL_UART_MspDeInit+0x62>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002e02:	4b17      	ldr	r3, [pc, #92]	@ (8002e60 <HAL_UART_MspDeInit+0x70>)
 8002e04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e06:	4b16      	ldr	r3, [pc, #88]	@ (8002e60 <HAL_UART_MspDeInit+0x70>)
 8002e08:	4916      	ldr	r1, [pc, #88]	@ (8002e64 <HAL_UART_MspDeInit+0x74>)
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	641a      	str	r2, [r3, #64]	@ 0x40
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);
 8002e0e:	2380      	movs	r3, #128	@ 0x80
 8002e10:	01db      	lsls	r3, r3, #7
 8002e12:	4a15      	ldr	r2, [pc, #84]	@ (8002e68 <HAL_UART_MspDeInit+0x78>)
 8002e14:	0019      	movs	r1, r3
 8002e16:	0010      	movs	r0, r2
 8002e18:	f004 fd2c 	bl	8007874 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8002e1c:	4b13      	ldr	r3, [pc, #76]	@ (8002e6c <HAL_UART_MspDeInit+0x7c>)
 8002e1e:	2104      	movs	r1, #4
 8002e20:	0018      	movs	r0, r3
 8002e22:	f004 fd27 	bl	8007874 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 8002e26:	2380      	movs	r3, #128	@ 0x80
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	23a0      	movs	r3, #160	@ 0xa0
 8002e2c:	05db      	lsls	r3, r3, #23
 8002e2e:	0011      	movs	r1, r2
 8002e30:	0018      	movs	r0, r3
 8002e32:	f004 fd1f 	bl	8007874 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2280      	movs	r2, #128	@ 0x80
 8002e3a:	589b      	ldr	r3, [r3, r2]
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f004 f87f 	bl	8006f40 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e46:	0018      	movs	r0, r3
 8002e48:	f004 f87a 	bl	8006f40 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002e4c:	201b      	movs	r0, #27
 8002e4e:	f003 ffd0 	bl	8006df2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b002      	add	sp, #8
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	46c0      	nop			@ (mov r8, r8)
 8002e5c:	40013800 	.word	0x40013800
 8002e60:	40021000 	.word	0x40021000
 8002e64:	ffffbfff 	.word	0xffffbfff
 8002e68:	50000800 	.word	0x50000800
 8002e6c:	50000400 	.word	0x50000400

08002e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e74:	46c0      	nop			@ (mov r8, r8)
 8002e76:	e7fd      	b.n	8002e74 <NMI_Handler+0x4>

08002e78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e7c:	46c0      	nop			@ (mov r8, r8)
 8002e7e:	e7fd      	b.n	8002e7c <HardFault_Handler+0x4>

08002e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e84:	46c0      	nop			@ (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e8e:	46c0      	nop			@ (mov r8, r8)
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e98:	f002 fe36 	bl	8005b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e9c:	46c0      	nop			@ (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ea8:	4b03      	ldr	r3, [pc, #12]	@ (8002eb8 <DMA1_Channel1_IRQHandler+0x14>)
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f004 fa24 	bl	80072f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002eb0:	46c0      	nop			@ (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	200000b0 	.word	0x200000b0

08002ebc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ec0:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f004 fa18 	bl	80072f8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002ec8:	4b04      	ldr	r3, [pc, #16]	@ (8002edc <DMA1_Channel2_3_IRQHandler+0x20>)
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f004 fa14 	bl	80072f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002ed0:	46c0      	nop			@ (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			@ (mov r8, r8)
 8002ed8:	200002ac 	.word	0x200002ac
 8002edc:	20000308 	.word	0x20000308

08002ee0 <DMAMUX1_DMA1_CH4_5_IRQHandler>:

/**
  * @brief This function handles DMAMUX1, DMA1 Channel 4 and 5.
  */
void DMAMUX1_DMA1_CH4_5_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 0 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002ee4:	4b05      	ldr	r3, [pc, #20]	@ (8002efc <DMAMUX1_DMA1_CH4_5_IRQHandler+0x1c>)
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f004 fa06 	bl	80072f8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002eec:	4b04      	ldr	r3, [pc, #16]	@ (8002f00 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x20>)
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f004 fa02 	bl	80072f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 1 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 1 */
}
 8002ef4:	46c0      	nop			@ (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	20000160 	.word	0x20000160
 8002f00:	200001bc 	.word	0x200001bc

08002f04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f08:	4b03      	ldr	r3, [pc, #12]	@ (8002f18 <USART1_IRQHandler+0x14>)
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f006 fb36 	bl	800957c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f10:	46c0      	nop			@ (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	20000218 	.word	0x20000218

08002f1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f20:	4b03      	ldr	r3, [pc, #12]	@ (8002f30 <SystemInit+0x14>)
 8002f22:	2280      	movs	r2, #128	@ 0x80
 8002f24:	0512      	lsls	r2, r2, #20
 8002f26:	609a      	str	r2, [r3, #8]
#endif
}
 8002f28:	46c0      	nop			@ (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <writeReg>:
//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
int8_t writeReg(uint8_t reg, uint8_t value)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af04      	add	r7, sp, #16
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	1dfb      	adds	r3, r7, #7
 8002f3e:	701a      	strb	r2, [r3, #0]
 8002f40:	1dbb      	adds	r3, r7, #6
 8002f42:	1c0a      	adds	r2, r1, #0
 8002f44:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = value; // Assign the value to the buffer.
 8002f46:	4b0f      	ldr	r3, [pc, #60]	@ (8002f84 <writeReg+0x50>)
 8002f48:	1dba      	adds	r2, r7, #6
 8002f4a:	7812      	ldrb	r2, [r2, #0]
 8002f4c:	701a      	strb	r2, [r3, #0]
	return handle_i2c_error(HAL_I2C_Mem_Write(&hi2c1, vl53l0x_address | I2C_WRITE, reg, 1, i2c_tx_buffer, 1, I2C_TIMEOUT));
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f88 <writeReg+0x54>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	0019      	movs	r1, r3
 8002f54:	1dfb      	adds	r3, r7, #7
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	480c      	ldr	r0, [pc, #48]	@ (8002f8c <writeReg+0x58>)
 8002f5c:	2364      	movs	r3, #100	@ 0x64
 8002f5e:	9302      	str	r3, [sp, #8]
 8002f60:	2301      	movs	r3, #1
 8002f62:	9301      	str	r3, [sp, #4]
 8002f64:	4b07      	ldr	r3, [pc, #28]	@ (8002f84 <writeReg+0x50>)
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f004 fe6b 	bl	8007c44 <HAL_I2C_Mem_Write>
 8002f6e:	0003      	movs	r3, r0
 8002f70:	b25b      	sxtb	r3, r3
 8002f72:	0018      	movs	r0, r3
 8002f74:	f002 fcb6 	bl	80058e4 <handle_i2c_error>
 8002f78:	0003      	movs	r3, r0
}
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b002      	add	sp, #8
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	20000674 	.word	0x20000674
 8002f88:	2000068c 	.word	0x2000068c
 8002f8c:	2000010c 	.word	0x2000010c

08002f90 <writeReg16Bit>:

// Write a 16-bit register
int8_t writeReg16Bit(uint8_t reg, uint16_t value)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af04      	add	r7, sp, #16
 8002f96:	0002      	movs	r2, r0
 8002f98:	1dfb      	adds	r3, r7, #7
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	1d3b      	adds	r3, r7, #4
 8002f9e:	1c0a      	adds	r2, r1, #0
 8002fa0:	801a      	strh	r2, [r3, #0]
	memcpy(i2c_tx_buffer, &value, 2); // Assign the value to the buffer.
 8002fa2:	1d3b      	adds	r3, r7, #4
 8002fa4:	881a      	ldrh	r2, [r3, #0]
 8002fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe0 <writeReg16Bit+0x50>)
 8002fa8:	801a      	strh	r2, [r3, #0]
	return handle_i2c_error(HAL_I2C_Mem_Write(&hi2c1, vl53l0x_address | I2C_WRITE, reg, 1, i2c_tx_buffer, 2, I2C_TIMEOUT));
 8002faa:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe4 <writeReg16Bit+0x54>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	0019      	movs	r1, r3
 8002fb0:	1dfb      	adds	r3, r7, #7
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	480c      	ldr	r0, [pc, #48]	@ (8002fe8 <writeReg16Bit+0x58>)
 8002fb8:	2364      	movs	r3, #100	@ 0x64
 8002fba:	9302      	str	r3, [sp, #8]
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	4b07      	ldr	r3, [pc, #28]	@ (8002fe0 <writeReg16Bit+0x50>)
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	f004 fe3d 	bl	8007c44 <HAL_I2C_Mem_Write>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	b25b      	sxtb	r3, r3
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f002 fc88 	bl	80058e4 <handle_i2c_error>
 8002fd4:	0003      	movs	r3, r0
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b002      	add	sp, #8
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			@ (mov r8, r8)
 8002fe0:	20000674 	.word	0x20000674
 8002fe4:	2000068c 	.word	0x2000068c
 8002fe8:	2000010c 	.word	0x2000010c

08002fec <readReg>:

}

// Read an 8-bit register
int8_t readReg(uint8_t reg, uint8_t* value)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af04      	add	r7, sp, #16
 8002ff2:	0002      	movs	r2, r0
 8002ff4:	6039      	str	r1, [r7, #0]
 8002ff6:	1dfb      	adds	r3, r7, #7
 8002ff8:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_I2C_Mem_Read(&hi2c1, vl53l0x_address | I2C_READ, reg, 1, i2c_rx_buffer, 1, I2C_TIMEOUT);
 8002ffa:	4b13      	ldr	r3, [pc, #76]	@ (8003048 <readReg+0x5c>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2201      	movs	r2, #1
 8003000:	4313      	orrs	r3, r2
 8003002:	b2db      	uxtb	r3, r3
 8003004:	0019      	movs	r1, r3
 8003006:	1dfb      	adds	r3, r7, #7
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	b29a      	uxth	r2, r3
 800300c:	480f      	ldr	r0, [pc, #60]	@ (800304c <readReg+0x60>)
 800300e:	2364      	movs	r3, #100	@ 0x64
 8003010:	9302      	str	r3, [sp, #8]
 8003012:	2301      	movs	r3, #1
 8003014:	9301      	str	r3, [sp, #4]
 8003016:	4b0e      	ldr	r3, [pc, #56]	@ (8003050 <readReg+0x64>)
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	2301      	movs	r3, #1
 800301c:	f004 ff40 	bl	8007ea0 <HAL_I2C_Mem_Read>
 8003020:	0003      	movs	r3, r0
 8003022:	001a      	movs	r2, r3
 8003024:	210f      	movs	r1, #15
 8003026:	187b      	adds	r3, r7, r1
 8003028:	701a      	strb	r2, [r3, #0]
	(*value) = i2c_rx_buffer[0];
 800302a:	4b09      	ldr	r3, [pc, #36]	@ (8003050 <readReg+0x64>)
 800302c:	781a      	ldrb	r2, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	701a      	strb	r2, [r3, #0]
	return handle_i2c_error(status);
 8003032:	187b      	adds	r3, r7, r1
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	b25b      	sxtb	r3, r3
 8003038:	0018      	movs	r0, r3
 800303a:	f002 fc53 	bl	80058e4 <handle_i2c_error>
 800303e:	0003      	movs	r3, r0
}
 8003040:	0018      	movs	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	b004      	add	sp, #16
 8003046:	bd80      	pop	{r7, pc}
 8003048:	2000068c 	.word	0x2000068c
 800304c:	2000010c 	.word	0x2000010c
 8003050:	20000680 	.word	0x20000680

08003054 <readReg16Bit>:

// Read a 16-bit register
int8_t readReg16Bit(uint8_t reg, uint16_t* value)
{
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b089      	sub	sp, #36	@ 0x24
 8003058:	af04      	add	r7, sp, #16
 800305a:	0002      	movs	r2, r0
 800305c:	6039      	str	r1, [r7, #0]
 800305e:	1dfb      	adds	r3, r7, #7
 8003060:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_I2C_Mem_Read(&hi2c1, vl53l0x_address | I2C_READ, reg, 1, i2c_rx_buffer, 2, I2C_TIMEOUT);
 8003062:	4b14      	ldr	r3, [pc, #80]	@ (80030b4 <readReg16Bit+0x60>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2201      	movs	r2, #1
 8003068:	4313      	orrs	r3, r2
 800306a:	b2db      	uxtb	r3, r3
 800306c:	0019      	movs	r1, r3
 800306e:	1dfb      	adds	r3, r7, #7
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	b29a      	uxth	r2, r3
 8003074:	4810      	ldr	r0, [pc, #64]	@ (80030b8 <readReg16Bit+0x64>)
 8003076:	2364      	movs	r3, #100	@ 0x64
 8003078:	9302      	str	r3, [sp, #8]
 800307a:	2302      	movs	r3, #2
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	4b0f      	ldr	r3, [pc, #60]	@ (80030bc <readReg16Bit+0x68>)
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	2301      	movs	r3, #1
 8003084:	f004 ff0c 	bl	8007ea0 <HAL_I2C_Mem_Read>
 8003088:	0003      	movs	r3, r0
 800308a:	001a      	movs	r2, r3
 800308c:	240f      	movs	r4, #15
 800308e:	193b      	adds	r3, r7, r4
 8003090:	701a      	strb	r2, [r3, #0]
	memcpy(value, i2c_rx_buffer, 2);
 8003092:	490a      	ldr	r1, [pc, #40]	@ (80030bc <readReg16Bit+0x68>)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2202      	movs	r2, #2
 8003098:	0018      	movs	r0, r3
 800309a:	f007 fe39 	bl	800ad10 <memcpy>
	return handle_i2c_error(status);
 800309e:	193b      	adds	r3, r7, r4
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	b25b      	sxtb	r3, r3
 80030a4:	0018      	movs	r0, r3
 80030a6:	f002 fc1d 	bl	80058e4 <handle_i2c_error>
 80030aa:	0003      	movs	r3, r0
}
 80030ac:	0018      	movs	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b005      	add	sp, #20
 80030b2:	bd90      	pop	{r4, r7, pc}
 80030b4:	2000068c 	.word	0x2000068c
 80030b8:	2000010c 	.word	0x2000010c
 80030bc:	20000680 	.word	0x20000680

080030c0 <writeMulti>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
int8_t writeMulti(uint8_t reg, uint8_t const *src, uint8_t count)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af04      	add	r7, sp, #16
 80030c6:	6039      	str	r1, [r7, #0]
 80030c8:	0011      	movs	r1, r2
 80030ca:	1dfb      	adds	r3, r7, #7
 80030cc:	1c02      	adds	r2, r0, #0
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	1dbb      	adds	r3, r7, #6
 80030d2:	1c0a      	adds	r2, r1, #0
 80030d4:	701a      	strb	r2, [r3, #0]
	memcpy(i2c_tx_buffer, src, 4);
 80030d6:	6839      	ldr	r1, [r7, #0]
 80030d8:	4b10      	ldr	r3, [pc, #64]	@ (800311c <writeMulti+0x5c>)
 80030da:	2204      	movs	r2, #4
 80030dc:	0018      	movs	r0, r3
 80030de:	f007 fe17 	bl	800ad10 <memcpy>
	return handle_i2c_error(HAL_I2C_Mem_Write(&hi2c1, vl53l0x_address | I2C_WRITE, reg, 1, msgBuffer, count, I2C_TIMEOUT));
 80030e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003120 <writeMulti+0x60>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	001c      	movs	r4, r3
 80030e8:	1dfb      	adds	r3, r7, #7
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	1dbb      	adds	r3, r7, #6
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	480b      	ldr	r0, [pc, #44]	@ (8003124 <writeMulti+0x64>)
 80030f6:	2164      	movs	r1, #100	@ 0x64
 80030f8:	9102      	str	r1, [sp, #8]
 80030fa:	9301      	str	r3, [sp, #4]
 80030fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003128 <writeMulti+0x68>)
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	2301      	movs	r3, #1
 8003102:	0021      	movs	r1, r4
 8003104:	f004 fd9e 	bl	8007c44 <HAL_I2C_Mem_Write>
 8003108:	0003      	movs	r3, r0
 800310a:	b25b      	sxtb	r3, r3
 800310c:	0018      	movs	r0, r3
 800310e:	f002 fbe9 	bl	80058e4 <handle_i2c_error>
 8003112:	0003      	movs	r3, r0
}
 8003114:	0018      	movs	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	b003      	add	sp, #12
 800311a:	bd90      	pop	{r4, r7, pc}
 800311c:	20000674 	.word	0x20000674
 8003120:	2000068c 	.word	0x2000068c
 8003124:	2000010c 	.word	0x2000010c
 8003128:	2000069c 	.word	0x2000069c

0800312c <readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
int8_t readMulti(uint8_t reg, uint8_t* dst, uint8_t count)
{
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b087      	sub	sp, #28
 8003130:	af04      	add	r7, sp, #16
 8003132:	6039      	str	r1, [r7, #0]
 8003134:	0011      	movs	r1, r2
 8003136:	1dfb      	adds	r3, r7, #7
 8003138:	1c02      	adds	r2, r0, #0
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	1dbb      	adds	r3, r7, #6
 800313e:	1c0a      	adds	r2, r1, #0
 8003140:	701a      	strb	r2, [r3, #0]
	 return handle_i2c_error(HAL_I2C_Mem_Read(&hi2c1, vl53l0x_address | I2C_READ, reg, 1, dst, count, I2C_TIMEOUT));
 8003142:	4b10      	ldr	r3, [pc, #64]	@ (8003184 <readMulti+0x58>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2201      	movs	r2, #1
 8003148:	4313      	orrs	r3, r2
 800314a:	b2db      	uxtb	r3, r3
 800314c:	001c      	movs	r4, r3
 800314e:	1dfb      	adds	r3, r7, #7
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	b29a      	uxth	r2, r3
 8003154:	1dbb      	adds	r3, r7, #6
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	b29b      	uxth	r3, r3
 800315a:	480b      	ldr	r0, [pc, #44]	@ (8003188 <readMulti+0x5c>)
 800315c:	2164      	movs	r1, #100	@ 0x64
 800315e:	9102      	str	r1, [sp, #8]
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	2301      	movs	r3, #1
 8003168:	0021      	movs	r1, r4
 800316a:	f004 fe99 	bl	8007ea0 <HAL_I2C_Mem_Read>
 800316e:	0003      	movs	r3, r0
 8003170:	b25b      	sxtb	r3, r3
 8003172:	0018      	movs	r0, r3
 8003174:	f002 fbb6 	bl	80058e4 <handle_i2c_error>
 8003178:	0003      	movs	r3, r0
}
 800317a:	0018      	movs	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	b003      	add	sp, #12
 8003180:	bd90      	pop	{r4, r7, pc}
 8003182:	46c0      	nop			@ (mov r8, r8)
 8003184:	2000068c 	.word	0x2000068c
 8003188:	2000010c 	.word	0x2000010c

0800318c <vl53l0x_init>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is HAL_OK or not given, the sensor is configured for 2V8
// mode.
int8_t vl53l0x_init(uint8_t io_2v8)
{
 800318c:	b5b0      	push	{r4, r5, r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	0002      	movs	r2, r0
 8003194:	1dfb      	adds	r3, r7, #7
 8003196:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8003198:	2314      	movs	r3, #20
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val = 0;
 80031a0:	2312      	movs	r3, #18
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]

	// Reset buffers
	for(uint8_t i = 0; i < I2C_BUFFER_SIZE; i++)
 80031a8:	2317      	movs	r3, #23
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
 80031b0:	e00f      	b.n	80031d2 <vl53l0x_init+0x46>
	{
		i2c_tx_buffer[i] = 0;
 80031b2:	2017      	movs	r0, #23
 80031b4:	183b      	adds	r3, r7, r0
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	4ae3      	ldr	r2, [pc, #908]	@ (8003548 <vl53l0x_init+0x3bc>)
 80031ba:	2100      	movs	r1, #0
 80031bc:	54d1      	strb	r1, [r2, r3]
		i2c_rx_buffer[i] = 0;
 80031be:	183b      	adds	r3, r7, r0
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	4ae2      	ldr	r2, [pc, #904]	@ (800354c <vl53l0x_init+0x3c0>)
 80031c4:	2100      	movs	r1, #0
 80031c6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < I2C_BUFFER_SIZE; i++)
 80031c8:	183b      	adds	r3, r7, r0
 80031ca:	781a      	ldrb	r2, [r3, #0]
 80031cc:	183b      	adds	r3, r7, r0
 80031ce:	3201      	adds	r2, #1
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	2317      	movs	r3, #23
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b0b      	cmp	r3, #11
 80031da:	d9ea      	bls.n	80031b2 <vl53l0x_init+0x26>
	}
	vl53l0x_address = ADDRESS_DEFAULT;
 80031dc:	4bdc      	ldr	r3, [pc, #880]	@ (8003550 <vl53l0x_init+0x3c4>)
 80031de:	2252      	movs	r2, #82	@ 0x52
 80031e0:	701a      	strb	r2, [r3, #0]

	// Data Initialization
	// sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
	if (io_2v8)
 80031e2:	1dfb      	adds	r3, r7, #7
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d02f      	beq.n	800324a <vl53l0x_init+0xbe>
	{
		status = readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, &reg_val);
 80031ea:	2514      	movs	r5, #20
 80031ec:	197c      	adds	r4, r7, r5
 80031ee:	2312      	movs	r3, #18
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	0019      	movs	r1, r3
 80031f4:	2089      	movs	r0, #137	@ 0x89
 80031f6:	f7ff fef9 	bl	8002fec <readReg>
 80031fa:	0003      	movs	r3, r0
 80031fc:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 80031fe:	197b      	adds	r3, r7, r5
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	b25b      	sxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d004      	beq.n	8003212 <vl53l0x_init+0x86>
 8003208:	197b      	adds	r3, r7, r5
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	b25b      	sxtb	r3, r3
 800320e:	f001 f89a 	bl	8004346 <vl53l0x_init+0x11ba>
		status = writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, (reg_val | 0x01)); // set bit 0
 8003212:	2312      	movs	r3, #18
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2201      	movs	r2, #1
 800321a:	4313      	orrs	r3, r2
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2514      	movs	r5, #20
 8003220:	197c      	adds	r4, r7, r5
 8003222:	0019      	movs	r1, r3
 8003224:	2089      	movs	r0, #137	@ 0x89
 8003226:	f7ff fe85 	bl	8002f34 <writeReg>
 800322a:	0003      	movs	r3, r0
 800322c:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 800322e:	197b      	adds	r3, r7, r5
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	b25b      	sxtb	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d004      	beq.n	8003242 <vl53l0x_init+0xb6>
 8003238:	197b      	adds	r3, r7, r5
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	b25b      	sxtb	r3, r3
 800323e:	f001 f882 	bl	8004346 <vl53l0x_init+0x11ba>
		reg_val = 0;
 8003242:	2312      	movs	r3, #18
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
	}

	// "Set I2C standard mode"
	status = writeReg(0x88, 0x00);
 800324a:	2514      	movs	r5, #20
 800324c:	197c      	adds	r4, r7, r5
 800324e:	2100      	movs	r1, #0
 8003250:	2088      	movs	r0, #136	@ 0x88
 8003252:	f7ff fe6f 	bl	8002f34 <writeReg>
 8003256:	0003      	movs	r3, r0
 8003258:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800325a:	002a      	movs	r2, r5
 800325c:	18bb      	adds	r3, r7, r2
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	b25b      	sxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d004      	beq.n	8003270 <vl53l0x_init+0xe4>
 8003266:	18bb      	adds	r3, r7, r2
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	b25b      	sxtb	r3, r3
 800326c:	f001 f86b 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x80, 0x01);
 8003270:	2514      	movs	r5, #20
 8003272:	197c      	adds	r4, r7, r5
 8003274:	2101      	movs	r1, #1
 8003276:	2080      	movs	r0, #128	@ 0x80
 8003278:	f7ff fe5c 	bl	8002f34 <writeReg>
 800327c:	0003      	movs	r3, r0
 800327e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003280:	002a      	movs	r2, r5
 8003282:	18bb      	adds	r3, r7, r2
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	b25b      	sxtb	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d004      	beq.n	8003296 <vl53l0x_init+0x10a>
 800328c:	18bb      	adds	r3, r7, r2
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	b25b      	sxtb	r3, r3
 8003292:	f001 f858 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0xFF, 0x01);
 8003296:	2514      	movs	r5, #20
 8003298:	197c      	adds	r4, r7, r5
 800329a:	2101      	movs	r1, #1
 800329c:	20ff      	movs	r0, #255	@ 0xff
 800329e:	f7ff fe49 	bl	8002f34 <writeReg>
 80032a2:	0003      	movs	r3, r0
 80032a4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80032a6:	002a      	movs	r2, r5
 80032a8:	18bb      	adds	r3, r7, r2
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	b25b      	sxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d004      	beq.n	80032bc <vl53l0x_init+0x130>
 80032b2:	18bb      	adds	r3, r7, r2
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	b25b      	sxtb	r3, r3
 80032b8:	f001 f845 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x00, 0x00);
 80032bc:	2514      	movs	r5, #20
 80032be:	197c      	adds	r4, r7, r5
 80032c0:	2100      	movs	r1, #0
 80032c2:	2000      	movs	r0, #0
 80032c4:	f7ff fe36 	bl	8002f34 <writeReg>
 80032c8:	0003      	movs	r3, r0
 80032ca:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80032cc:	002a      	movs	r2, r5
 80032ce:	18bb      	adds	r3, r7, r2
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	b25b      	sxtb	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d004      	beq.n	80032e2 <vl53l0x_init+0x156>
 80032d8:	18bb      	adds	r3, r7, r2
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	b25b      	sxtb	r3, r3
 80032de:	f001 f832 	bl	8004346 <vl53l0x_init+0x11ba>
	status = readReg(0x91, &g_stopVariable);
 80032e2:	2514      	movs	r5, #20
 80032e4:	197c      	adds	r4, r7, r5
 80032e6:	4b9b      	ldr	r3, [pc, #620]	@ (8003554 <vl53l0x_init+0x3c8>)
 80032e8:	0019      	movs	r1, r3
 80032ea:	2091      	movs	r0, #145	@ 0x91
 80032ec:	f7ff fe7e 	bl	8002fec <readReg>
 80032f0:	0003      	movs	r3, r0
 80032f2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80032f4:	197b      	adds	r3, r7, r5
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	b25b      	sxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d004      	beq.n	8003308 <vl53l0x_init+0x17c>
 80032fe:	197b      	adds	r3, r7, r5
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	b25b      	sxtb	r3, r3
 8003304:	f001 f81f 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x00, 0x01);
 8003308:	2514      	movs	r5, #20
 800330a:	197c      	adds	r4, r7, r5
 800330c:	2101      	movs	r1, #1
 800330e:	2000      	movs	r0, #0
 8003310:	f7ff fe10 	bl	8002f34 <writeReg>
 8003314:	0003      	movs	r3, r0
 8003316:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003318:	002a      	movs	r2, r5
 800331a:	18bb      	adds	r3, r7, r2
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	b25b      	sxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <vl53l0x_init+0x1a2>
 8003324:	18bb      	adds	r3, r7, r2
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	b25b      	sxtb	r3, r3
 800332a:	f001 f80c 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0xFF, 0x00);
 800332e:	2514      	movs	r5, #20
 8003330:	197c      	adds	r4, r7, r5
 8003332:	2100      	movs	r1, #0
 8003334:	20ff      	movs	r0, #255	@ 0xff
 8003336:	f7ff fdfd 	bl	8002f34 <writeReg>
 800333a:	0003      	movs	r3, r0
 800333c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800333e:	002a      	movs	r2, r5
 8003340:	18bb      	adds	r3, r7, r2
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	b25b      	sxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d004      	beq.n	8003354 <vl53l0x_init+0x1c8>
 800334a:	18bb      	adds	r3, r7, r2
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	b25b      	sxtb	r3, r3
 8003350:	f000 fff9 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x80, 0x00);
 8003354:	2514      	movs	r5, #20
 8003356:	197c      	adds	r4, r7, r5
 8003358:	2100      	movs	r1, #0
 800335a:	2080      	movs	r0, #128	@ 0x80
 800335c:	f7ff fdea 	bl	8002f34 <writeReg>
 8003360:	0003      	movs	r3, r0
 8003362:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003364:	002a      	movs	r2, r5
 8003366:	18bb      	adds	r3, r7, r2
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	b25b      	sxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d004      	beq.n	800337a <vl53l0x_init+0x1ee>
 8003370:	18bb      	adds	r3, r7, r2
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	b25b      	sxtb	r3, r3
 8003376:	f000 ffe6 	bl	8004346 <vl53l0x_init+0x11ba>

	// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
	status = readReg(MSRC_CONFIG_CONTROL, &reg_val);
 800337a:	2514      	movs	r5, #20
 800337c:	197c      	adds	r4, r7, r5
 800337e:	2312      	movs	r3, #18
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	0019      	movs	r1, r3
 8003384:	2060      	movs	r0, #96	@ 0x60
 8003386:	f7ff fe31 	bl	8002fec <readReg>
 800338a:	0003      	movs	r3, r0
 800338c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800338e:	197b      	adds	r3, r7, r5
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	b25b      	sxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d004      	beq.n	80033a2 <vl53l0x_init+0x216>
 8003398:	197b      	adds	r3, r7, r5
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	b25b      	sxtb	r3, r3
 800339e:	f000 ffd2 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(MSRC_CONFIG_CONTROL, reg_val | 0x12);
 80033a2:	2312      	movs	r3, #18
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2212      	movs	r2, #18
 80033aa:	4313      	orrs	r3, r2
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2514      	movs	r5, #20
 80033b0:	197c      	adds	r4, r7, r5
 80033b2:	0019      	movs	r1, r3
 80033b4:	2060      	movs	r0, #96	@ 0x60
 80033b6:	f7ff fdbd 	bl	8002f34 <writeReg>
 80033ba:	0003      	movs	r3, r0
 80033bc:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80033be:	197b      	adds	r3, r7, r5
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	b25b      	sxtb	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <vl53l0x_init+0x246>
 80033c8:	197b      	adds	r3, r7, r5
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b25b      	sxtb	r3, r3
 80033ce:	f000 ffba 	bl	8004346 <vl53l0x_init+0x11ba>
	reg_val = 0;
 80033d2:	2312      	movs	r3, #18
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]

	// set final range signal rate limit to 0.25 MCPS (million counts per second)
	status = vl53l0x_set_signal_rate_limit(0.25);
 80033da:	2514      	movs	r5, #20
 80033dc:	197c      	adds	r4, r7, r5
 80033de:	23fa      	movs	r3, #250	@ 0xfa
 80033e0:	059b      	lsls	r3, r3, #22
 80033e2:	1c18      	adds	r0, r3, #0
 80033e4:	f000 ffb4 	bl	8004350 <vl53l0x_set_signal_rate_limit>
 80033e8:	0003      	movs	r3, r0
 80033ea:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80033ec:	197b      	adds	r3, r7, r5
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	b25b      	sxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d004      	beq.n	8003400 <vl53l0x_init+0x274>
 80033f6:	197b      	adds	r3, r7, r5
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	b25b      	sxtb	r3, r3
 80033fc:	f000 ffa3 	bl	8004346 <vl53l0x_init+0x11ba>

	status = writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8003400:	2514      	movs	r5, #20
 8003402:	197c      	adds	r4, r7, r5
 8003404:	21ff      	movs	r1, #255	@ 0xff
 8003406:	2001      	movs	r0, #1
 8003408:	f7ff fd94 	bl	8002f34 <writeReg>
 800340c:	0003      	movs	r3, r0
 800340e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003410:	002a      	movs	r2, r5
 8003412:	18bb      	adds	r3, r7, r2
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	b25b      	sxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d004      	beq.n	8003426 <vl53l0x_init+0x29a>
 800341c:	18bb      	adds	r3, r7, r2
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	b25b      	sxtb	r3, r3
 8003422:	f000 ff90 	bl	8004346 <vl53l0x_init+0x11ba>

	// Static Initialization
	uint8_t spad_count;
	uint8_t spad_type_is_aperture;
	status = vl53l0x_get_spad_info(&spad_count, &spad_type_is_aperture);
 8003426:	2514      	movs	r5, #20
 8003428:	197c      	adds	r4, r7, r5
 800342a:	2310      	movs	r3, #16
 800342c:	18fa      	adds	r2, r7, r3
 800342e:	2311      	movs	r3, #17
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	0011      	movs	r1, r2
 8003434:	0018      	movs	r0, r3
 8003436:	f001 fe41 	bl	80050bc <vl53l0x_get_spad_info>
 800343a:	0003      	movs	r3, r0
 800343c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800343e:	197b      	adds	r3, r7, r5
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	b25b      	sxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d004      	beq.n	8003452 <vl53l0x_init+0x2c6>
 8003448:	197b      	adds	r3, r7, r5
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	b25b      	sxtb	r3, r3
 800344e:	f000 ff7a 	bl	8004346 <vl53l0x_init+0x11ba>

	// The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
	// the API, but the same data seems to be more easily readable from
	// GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
	uint8_t ref_spad_map[6];
	status = readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8003452:	2514      	movs	r5, #20
 8003454:	197c      	adds	r4, r7, r5
 8003456:	2308      	movs	r3, #8
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	2206      	movs	r2, #6
 800345c:	0019      	movs	r1, r3
 800345e:	20b0      	movs	r0, #176	@ 0xb0
 8003460:	f7ff fe64 	bl	800312c <readMulti>
 8003464:	0003      	movs	r3, r0
 8003466:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003468:	197b      	adds	r3, r7, r5
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	b25b      	sxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d004      	beq.n	800347c <vl53l0x_init+0x2f0>
 8003472:	197b      	adds	r3, r7, r5
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	b25b      	sxtb	r3, r3
 8003478:	f000 ff65 	bl	8004346 <vl53l0x_init+0x11ba>

	// -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)
	status = writeReg(0xFF, 0x01);
 800347c:	2514      	movs	r5, #20
 800347e:	197c      	adds	r4, r7, r5
 8003480:	2101      	movs	r1, #1
 8003482:	20ff      	movs	r0, #255	@ 0xff
 8003484:	f7ff fd56 	bl	8002f34 <writeReg>
 8003488:	0003      	movs	r3, r0
 800348a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800348c:	002a      	movs	r2, r5
 800348e:	18bb      	adds	r3, r7, r2
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	b25b      	sxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d004      	beq.n	80034a2 <vl53l0x_init+0x316>
 8003498:	18bb      	adds	r3, r7, r2
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	b25b      	sxtb	r3, r3
 800349e:	f000 ff52 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80034a2:	2514      	movs	r5, #20
 80034a4:	197c      	adds	r4, r7, r5
 80034a6:	2100      	movs	r1, #0
 80034a8:	204f      	movs	r0, #79	@ 0x4f
 80034aa:	f7ff fd43 	bl	8002f34 <writeReg>
 80034ae:	0003      	movs	r3, r0
 80034b0:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80034b2:	002a      	movs	r2, r5
 80034b4:	18bb      	adds	r3, r7, r2
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	b25b      	sxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d004      	beq.n	80034c8 <vl53l0x_init+0x33c>
 80034be:	18bb      	adds	r3, r7, r2
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	f000 ff3f 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80034c8:	2514      	movs	r5, #20
 80034ca:	197c      	adds	r4, r7, r5
 80034cc:	212c      	movs	r1, #44	@ 0x2c
 80034ce:	204e      	movs	r0, #78	@ 0x4e
 80034d0:	f7ff fd30 	bl	8002f34 <writeReg>
 80034d4:	0003      	movs	r3, r0
 80034d6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80034d8:	002a      	movs	r2, r5
 80034da:	18bb      	adds	r3, r7, r2
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	b25b      	sxtb	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d004      	beq.n	80034ee <vl53l0x_init+0x362>
 80034e4:	18bb      	adds	r3, r7, r2
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	b25b      	sxtb	r3, r3
 80034ea:	f000 ff2c 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0xFF, 0x00);
 80034ee:	2514      	movs	r5, #20
 80034f0:	197c      	adds	r4, r7, r5
 80034f2:	2100      	movs	r1, #0
 80034f4:	20ff      	movs	r0, #255	@ 0xff
 80034f6:	f7ff fd1d 	bl	8002f34 <writeReg>
 80034fa:	0003      	movs	r3, r0
 80034fc:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80034fe:	002a      	movs	r2, r5
 8003500:	18bb      	adds	r3, r7, r2
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	b25b      	sxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d004      	beq.n	8003514 <vl53l0x_init+0x388>
 800350a:	18bb      	adds	r3, r7, r2
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	b25b      	sxtb	r3, r3
 8003510:	f000 ff19 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8003514:	2514      	movs	r5, #20
 8003516:	197c      	adds	r4, r7, r5
 8003518:	21b4      	movs	r1, #180	@ 0xb4
 800351a:	20b6      	movs	r0, #182	@ 0xb6
 800351c:	f7ff fd0a 	bl	8002f34 <writeReg>
 8003520:	0003      	movs	r3, r0
 8003522:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003524:	002a      	movs	r2, r5
 8003526:	18bb      	adds	r3, r7, r2
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	b25b      	sxtb	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d004      	beq.n	800353a <vl53l0x_init+0x3ae>
 8003530:	18bb      	adds	r3, r7, r2
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	b25b      	sxtb	r3, r3
 8003536:	f000 ff06 	bl	8004346 <vl53l0x_init+0x11ba>

	uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 800353a:	2310      	movs	r3, #16
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d009      	beq.n	8003558 <vl53l0x_init+0x3cc>
 8003544:	220c      	movs	r2, #12
 8003546:	e008      	b.n	800355a <vl53l0x_init+0x3ce>
 8003548:	20000674 	.word	0x20000674
 800354c:	20000680 	.word	0x20000680
 8003550:	2000068c 	.word	0x2000068c
 8003554:	20000694 	.word	0x20000694
 8003558:	2200      	movs	r2, #0
 800355a:	2313      	movs	r3, #19
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	701a      	strb	r2, [r3, #0]
	uint8_t spads_enabled = 0;
 8003560:	2316      	movs	r3, #22
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	2200      	movs	r2, #0
 8003566:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < 48; i++)
 8003568:	2315      	movs	r3, #21
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
 8003570:	e049      	b.n	8003606 <vl53l0x_init+0x47a>
	{
		if (i < first_spad_to_enable || spads_enabled == spad_count)
 8003572:	2315      	movs	r3, #21
 8003574:	18fa      	adds	r2, r7, r3
 8003576:	2313      	movs	r3, #19
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	7812      	ldrb	r2, [r2, #0]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d307      	bcc.n	8003592 <vl53l0x_init+0x406>
 8003582:	2311      	movs	r3, #17
 8003584:	18fb      	adds	r3, r7, r3
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2216      	movs	r2, #22
 800358a:	18ba      	adds	r2, r7, r2
 800358c:	7812      	ldrb	r2, [r2, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d11a      	bne.n	80035c8 <vl53l0x_init+0x43c>
		{
			// This bit is lower than the first one that should be enabled, or
			// (reference_spad_count) bits have already been enabled, so zero this bit
			ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8003592:	2115      	movs	r1, #21
 8003594:	187b      	adds	r3, r7, r1
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	08db      	lsrs	r3, r3, #3
 800359a:	b2d8      	uxtb	r0, r3
 800359c:	0002      	movs	r2, r0
 800359e:	2408      	movs	r4, #8
 80035a0:	193b      	adds	r3, r7, r4
 80035a2:	5c9b      	ldrb	r3, [r3, r2]
 80035a4:	b25b      	sxtb	r3, r3
 80035a6:	187a      	adds	r2, r7, r1
 80035a8:	7812      	ldrb	r2, [r2, #0]
 80035aa:	2107      	movs	r1, #7
 80035ac:	400a      	ands	r2, r1
 80035ae:	2101      	movs	r1, #1
 80035b0:	4091      	lsls	r1, r2
 80035b2:	000a      	movs	r2, r1
 80035b4:	b252      	sxtb	r2, r2
 80035b6:	43d2      	mvns	r2, r2
 80035b8:	b252      	sxtb	r2, r2
 80035ba:	4013      	ands	r3, r2
 80035bc:	b25b      	sxtb	r3, r3
 80035be:	0002      	movs	r2, r0
 80035c0:	b2d9      	uxtb	r1, r3
 80035c2:	193b      	adds	r3, r7, r4
 80035c4:	5499      	strb	r1, [r3, r2]
 80035c6:	e018      	b.n	80035fa <vl53l0x_init+0x46e>
		}
		else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 80035c8:	2015      	movs	r0, #21
 80035ca:	183b      	adds	r3, r7, r0
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	08db      	lsrs	r3, r3, #3
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	001a      	movs	r2, r3
 80035d4:	2308      	movs	r3, #8
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	5c9b      	ldrb	r3, [r3, r2]
 80035da:	0019      	movs	r1, r3
 80035dc:	183b      	adds	r3, r7, r0
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2207      	movs	r2, #7
 80035e2:	4013      	ands	r3, r2
 80035e4:	4119      	asrs	r1, r3
 80035e6:	000b      	movs	r3, r1
 80035e8:	2201      	movs	r2, #1
 80035ea:	4013      	ands	r3, r2
 80035ec:	d005      	beq.n	80035fa <vl53l0x_init+0x46e>
		{
			spads_enabled++;
 80035ee:	2116      	movs	r1, #22
 80035f0:	187b      	adds	r3, r7, r1
 80035f2:	781a      	ldrb	r2, [r3, #0]
 80035f4:	187b      	adds	r3, r7, r1
 80035f6:	3201      	adds	r2, #1
 80035f8:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 48; i++)
 80035fa:	2115      	movs	r1, #21
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	781a      	ldrb	r2, [r3, #0]
 8003600:	187b      	adds	r3, r7, r1
 8003602:	3201      	adds	r2, #1
 8003604:	701a      	strb	r2, [r3, #0]
 8003606:	2315      	movs	r3, #21
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b2f      	cmp	r3, #47	@ 0x2f
 800360e:	d9b0      	bls.n	8003572 <vl53l0x_init+0x3e6>
		}
	}

	status = writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8003610:	2514      	movs	r5, #20
 8003612:	197c      	adds	r4, r7, r5
 8003614:	2308      	movs	r3, #8
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	2206      	movs	r2, #6
 800361a:	0019      	movs	r1, r3
 800361c:	20b0      	movs	r0, #176	@ 0xb0
 800361e:	f7ff fd4f 	bl	80030c0 <writeMulti>
 8003622:	0003      	movs	r3, r0
 8003624:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003626:	197b      	adds	r3, r7, r5
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	b25b      	sxtb	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d004      	beq.n	800363a <vl53l0x_init+0x4ae>
 8003630:	197b      	adds	r3, r7, r5
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	b25b      	sxtb	r3, r3
 8003636:	f000 fe86 	bl	8004346 <vl53l0x_init+0x11ba>
	// -- VL53L0X_set_reference_spads() end

	// -- VL53L0X_load_tuning_settings() begin
	// DefaultTuningSettings from vl53l0x_tuning.h
	status = writeReg(0xFF, 0x01);
 800363a:	2514      	movs	r5, #20
 800363c:	197c      	adds	r4, r7, r5
 800363e:	2101      	movs	r1, #1
 8003640:	20ff      	movs	r0, #255	@ 0xff
 8003642:	f7ff fc77 	bl	8002f34 <writeReg>
 8003646:	0003      	movs	r3, r0
 8003648:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800364a:	002a      	movs	r2, r5
 800364c:	18bb      	adds	r3, r7, r2
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	b25b      	sxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d004      	beq.n	8003660 <vl53l0x_init+0x4d4>
 8003656:	18bb      	adds	r3, r7, r2
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	b25b      	sxtb	r3, r3
 800365c:	f000 fe73 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x00, 0x00);
 8003660:	2514      	movs	r5, #20
 8003662:	197c      	adds	r4, r7, r5
 8003664:	2100      	movs	r1, #0
 8003666:	2000      	movs	r0, #0
 8003668:	f7ff fc64 	bl	8002f34 <writeReg>
 800366c:	0003      	movs	r3, r0
 800366e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003670:	002a      	movs	r2, r5
 8003672:	18bb      	adds	r3, r7, r2
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	b25b      	sxtb	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d004      	beq.n	8003686 <vl53l0x_init+0x4fa>
 800367c:	18bb      	adds	r3, r7, r2
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	b25b      	sxtb	r3, r3
 8003682:	f000 fe60 	bl	8004346 <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x00);
 8003686:	2514      	movs	r5, #20
 8003688:	197c      	adds	r4, r7, r5
 800368a:	2100      	movs	r1, #0
 800368c:	20ff      	movs	r0, #255	@ 0xff
 800368e:	f7ff fc51 	bl	8002f34 <writeReg>
 8003692:	0003      	movs	r3, r0
 8003694:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003696:	002a      	movs	r2, r5
 8003698:	18bb      	adds	r3, r7, r2
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	b25b      	sxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d004      	beq.n	80036ac <vl53l0x_init+0x520>
 80036a2:	18bb      	adds	r3, r7, r2
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	b25b      	sxtb	r3, r3
 80036a8:	f000 fe4d 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x09, 0x00);
 80036ac:	2514      	movs	r5, #20
 80036ae:	197c      	adds	r4, r7, r5
 80036b0:	2100      	movs	r1, #0
 80036b2:	2009      	movs	r0, #9
 80036b4:	f7ff fc3e 	bl	8002f34 <writeReg>
 80036b8:	0003      	movs	r3, r0
 80036ba:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80036bc:	002a      	movs	r2, r5
 80036be:	18bb      	adds	r3, r7, r2
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	b25b      	sxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d004      	beq.n	80036d2 <vl53l0x_init+0x546>
 80036c8:	18bb      	adds	r3, r7, r2
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	b25b      	sxtb	r3, r3
 80036ce:	f000 fe3a 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x10, 0x00);
 80036d2:	2514      	movs	r5, #20
 80036d4:	197c      	adds	r4, r7, r5
 80036d6:	2100      	movs	r1, #0
 80036d8:	2010      	movs	r0, #16
 80036da:	f7ff fc2b 	bl	8002f34 <writeReg>
 80036de:	0003      	movs	r3, r0
 80036e0:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80036e2:	002a      	movs	r2, r5
 80036e4:	18bb      	adds	r3, r7, r2
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	b25b      	sxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d004      	beq.n	80036f8 <vl53l0x_init+0x56c>
 80036ee:	18bb      	adds	r3, r7, r2
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	b25b      	sxtb	r3, r3
 80036f4:	f000 fe27 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x11, 0x00);
 80036f8:	2514      	movs	r5, #20
 80036fa:	197c      	adds	r4, r7, r5
 80036fc:	2100      	movs	r1, #0
 80036fe:	2011      	movs	r0, #17
 8003700:	f7ff fc18 	bl	8002f34 <writeReg>
 8003704:	0003      	movs	r3, r0
 8003706:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003708:	002a      	movs	r2, r5
 800370a:	18bb      	adds	r3, r7, r2
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	b25b      	sxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <vl53l0x_init+0x592>
 8003714:	18bb      	adds	r3, r7, r2
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	b25b      	sxtb	r3, r3
 800371a:	f000 fe14 	bl	8004346 <vl53l0x_init+0x11ba>

	status = writeReg(0x24, 0x01);
 800371e:	2514      	movs	r5, #20
 8003720:	197c      	adds	r4, r7, r5
 8003722:	2101      	movs	r1, #1
 8003724:	2024      	movs	r0, #36	@ 0x24
 8003726:	f7ff fc05 	bl	8002f34 <writeReg>
 800372a:	0003      	movs	r3, r0
 800372c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800372e:	002a      	movs	r2, r5
 8003730:	18bb      	adds	r3, r7, r2
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	b25b      	sxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d004      	beq.n	8003744 <vl53l0x_init+0x5b8>
 800373a:	18bb      	adds	r3, r7, r2
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	b25b      	sxtb	r3, r3
 8003740:	f000 fe01 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x25, 0xFF);
 8003744:	2514      	movs	r5, #20
 8003746:	197c      	adds	r4, r7, r5
 8003748:	21ff      	movs	r1, #255	@ 0xff
 800374a:	2025      	movs	r0, #37	@ 0x25
 800374c:	f7ff fbf2 	bl	8002f34 <writeReg>
 8003750:	0003      	movs	r3, r0
 8003752:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003754:	002a      	movs	r2, r5
 8003756:	18bb      	adds	r3, r7, r2
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	b25b      	sxtb	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <vl53l0x_init+0x5de>
 8003760:	18bb      	adds	r3, r7, r2
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	b25b      	sxtb	r3, r3
 8003766:	f000 fdee 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x75, 0x00);
 800376a:	2514      	movs	r5, #20
 800376c:	197c      	adds	r4, r7, r5
 800376e:	2100      	movs	r1, #0
 8003770:	2075      	movs	r0, #117	@ 0x75
 8003772:	f7ff fbdf 	bl	8002f34 <writeReg>
 8003776:	0003      	movs	r3, r0
 8003778:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800377a:	002a      	movs	r2, r5
 800377c:	18bb      	adds	r3, r7, r2
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	b25b      	sxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d004      	beq.n	8003790 <vl53l0x_init+0x604>
 8003786:	18bb      	adds	r3, r7, r2
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	b25b      	sxtb	r3, r3
 800378c:	f000 fddb 	bl	8004346 <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x01);
 8003790:	2514      	movs	r5, #20
 8003792:	197c      	adds	r4, r7, r5
 8003794:	2101      	movs	r1, #1
 8003796:	20ff      	movs	r0, #255	@ 0xff
 8003798:	f7ff fbcc 	bl	8002f34 <writeReg>
 800379c:	0003      	movs	r3, r0
 800379e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80037a0:	002a      	movs	r2, r5
 80037a2:	18bb      	adds	r3, r7, r2
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	b25b      	sxtb	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d004      	beq.n	80037b6 <vl53l0x_init+0x62a>
 80037ac:	18bb      	adds	r3, r7, r2
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	b25b      	sxtb	r3, r3
 80037b2:	f000 fdc8 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x4E, 0x2C);
 80037b6:	2514      	movs	r5, #20
 80037b8:	197c      	adds	r4, r7, r5
 80037ba:	212c      	movs	r1, #44	@ 0x2c
 80037bc:	204e      	movs	r0, #78	@ 0x4e
 80037be:	f7ff fbb9 	bl	8002f34 <writeReg>
 80037c2:	0003      	movs	r3, r0
 80037c4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80037c6:	002a      	movs	r2, r5
 80037c8:	18bb      	adds	r3, r7, r2
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	b25b      	sxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d004      	beq.n	80037dc <vl53l0x_init+0x650>
 80037d2:	18bb      	adds	r3, r7, r2
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	b25b      	sxtb	r3, r3
 80037d8:	f000 fdb5 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x48, 0x00);
 80037dc:	2514      	movs	r5, #20
 80037de:	197c      	adds	r4, r7, r5
 80037e0:	2100      	movs	r1, #0
 80037e2:	2048      	movs	r0, #72	@ 0x48
 80037e4:	f7ff fba6 	bl	8002f34 <writeReg>
 80037e8:	0003      	movs	r3, r0
 80037ea:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80037ec:	002a      	movs	r2, r5
 80037ee:	18bb      	adds	r3, r7, r2
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	b25b      	sxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d004      	beq.n	8003802 <vl53l0x_init+0x676>
 80037f8:	18bb      	adds	r3, r7, r2
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	b25b      	sxtb	r3, r3
 80037fe:	f000 fda2 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x30, 0x20);
 8003802:	2514      	movs	r5, #20
 8003804:	197c      	adds	r4, r7, r5
 8003806:	2120      	movs	r1, #32
 8003808:	2030      	movs	r0, #48	@ 0x30
 800380a:	f7ff fb93 	bl	8002f34 <writeReg>
 800380e:	0003      	movs	r3, r0
 8003810:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003812:	002a      	movs	r2, r5
 8003814:	18bb      	adds	r3, r7, r2
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	b25b      	sxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d004      	beq.n	8003828 <vl53l0x_init+0x69c>
 800381e:	18bb      	adds	r3, r7, r2
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	b25b      	sxtb	r3, r3
 8003824:	f000 fd8f 	bl	8004346 <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x00);
 8003828:	2514      	movs	r5, #20
 800382a:	197c      	adds	r4, r7, r5
 800382c:	2100      	movs	r1, #0
 800382e:	20ff      	movs	r0, #255	@ 0xff
 8003830:	f7ff fb80 	bl	8002f34 <writeReg>
 8003834:	0003      	movs	r3, r0
 8003836:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003838:	002a      	movs	r2, r5
 800383a:	18bb      	adds	r3, r7, r2
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	b25b      	sxtb	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d004      	beq.n	800384e <vl53l0x_init+0x6c2>
 8003844:	18bb      	adds	r3, r7, r2
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	b25b      	sxtb	r3, r3
 800384a:	f000 fd7c 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x30, 0x09);
 800384e:	2514      	movs	r5, #20
 8003850:	197c      	adds	r4, r7, r5
 8003852:	2109      	movs	r1, #9
 8003854:	2030      	movs	r0, #48	@ 0x30
 8003856:	f7ff fb6d 	bl	8002f34 <writeReg>
 800385a:	0003      	movs	r3, r0
 800385c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800385e:	002a      	movs	r2, r5
 8003860:	18bb      	adds	r3, r7, r2
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	b25b      	sxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d004      	beq.n	8003874 <vl53l0x_init+0x6e8>
 800386a:	18bb      	adds	r3, r7, r2
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	b25b      	sxtb	r3, r3
 8003870:	f000 fd69 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x54, 0x00);
 8003874:	2514      	movs	r5, #20
 8003876:	197c      	adds	r4, r7, r5
 8003878:	2100      	movs	r1, #0
 800387a:	2054      	movs	r0, #84	@ 0x54
 800387c:	f7ff fb5a 	bl	8002f34 <writeReg>
 8003880:	0003      	movs	r3, r0
 8003882:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003884:	002a      	movs	r2, r5
 8003886:	18bb      	adds	r3, r7, r2
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	b25b      	sxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d004      	beq.n	800389a <vl53l0x_init+0x70e>
 8003890:	18bb      	adds	r3, r7, r2
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	b25b      	sxtb	r3, r3
 8003896:	f000 fd56 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x31, 0x04);
 800389a:	2514      	movs	r5, #20
 800389c:	197c      	adds	r4, r7, r5
 800389e:	2104      	movs	r1, #4
 80038a0:	2031      	movs	r0, #49	@ 0x31
 80038a2:	f7ff fb47 	bl	8002f34 <writeReg>
 80038a6:	0003      	movs	r3, r0
 80038a8:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80038aa:	002a      	movs	r2, r5
 80038ac:	18bb      	adds	r3, r7, r2
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	b25b      	sxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d004      	beq.n	80038c0 <vl53l0x_init+0x734>
 80038b6:	18bb      	adds	r3, r7, r2
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	b25b      	sxtb	r3, r3
 80038bc:	f000 fd43 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x32, 0x03);
 80038c0:	2514      	movs	r5, #20
 80038c2:	197c      	adds	r4, r7, r5
 80038c4:	2103      	movs	r1, #3
 80038c6:	2032      	movs	r0, #50	@ 0x32
 80038c8:	f7ff fb34 	bl	8002f34 <writeReg>
 80038cc:	0003      	movs	r3, r0
 80038ce:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80038d0:	002a      	movs	r2, r5
 80038d2:	18bb      	adds	r3, r7, r2
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	b25b      	sxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d004      	beq.n	80038e6 <vl53l0x_init+0x75a>
 80038dc:	18bb      	adds	r3, r7, r2
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	b25b      	sxtb	r3, r3
 80038e2:	f000 fd30 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x40, 0x83);
 80038e6:	2514      	movs	r5, #20
 80038e8:	197c      	adds	r4, r7, r5
 80038ea:	2183      	movs	r1, #131	@ 0x83
 80038ec:	2040      	movs	r0, #64	@ 0x40
 80038ee:	f7ff fb21 	bl	8002f34 <writeReg>
 80038f2:	0003      	movs	r3, r0
 80038f4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80038f6:	002a      	movs	r2, r5
 80038f8:	18bb      	adds	r3, r7, r2
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	b25b      	sxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d004      	beq.n	800390c <vl53l0x_init+0x780>
 8003902:	18bb      	adds	r3, r7, r2
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	b25b      	sxtb	r3, r3
 8003908:	f000 fd1d 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x46, 0x25);
 800390c:	2514      	movs	r5, #20
 800390e:	197c      	adds	r4, r7, r5
 8003910:	2125      	movs	r1, #37	@ 0x25
 8003912:	2046      	movs	r0, #70	@ 0x46
 8003914:	f7ff fb0e 	bl	8002f34 <writeReg>
 8003918:	0003      	movs	r3, r0
 800391a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800391c:	002a      	movs	r2, r5
 800391e:	18bb      	adds	r3, r7, r2
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	b25b      	sxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <vl53l0x_init+0x7a6>
 8003928:	18bb      	adds	r3, r7, r2
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	b25b      	sxtb	r3, r3
 800392e:	f000 fd0a 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x60, 0x00);
 8003932:	2514      	movs	r5, #20
 8003934:	197c      	adds	r4, r7, r5
 8003936:	2100      	movs	r1, #0
 8003938:	2060      	movs	r0, #96	@ 0x60
 800393a:	f7ff fafb 	bl	8002f34 <writeReg>
 800393e:	0003      	movs	r3, r0
 8003940:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003942:	002a      	movs	r2, r5
 8003944:	18bb      	adds	r3, r7, r2
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	b25b      	sxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d004      	beq.n	8003958 <vl53l0x_init+0x7cc>
 800394e:	18bb      	adds	r3, r7, r2
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	b25b      	sxtb	r3, r3
 8003954:	f000 fcf7 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x27, 0x00);
 8003958:	2514      	movs	r5, #20
 800395a:	197c      	adds	r4, r7, r5
 800395c:	2100      	movs	r1, #0
 800395e:	2027      	movs	r0, #39	@ 0x27
 8003960:	f7ff fae8 	bl	8002f34 <writeReg>
 8003964:	0003      	movs	r3, r0
 8003966:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003968:	002a      	movs	r2, r5
 800396a:	18bb      	adds	r3, r7, r2
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	b25b      	sxtb	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d004      	beq.n	800397e <vl53l0x_init+0x7f2>
 8003974:	18bb      	adds	r3, r7, r2
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	b25b      	sxtb	r3, r3
 800397a:	f000 fce4 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x50, 0x06);
 800397e:	2514      	movs	r5, #20
 8003980:	197c      	adds	r4, r7, r5
 8003982:	2106      	movs	r1, #6
 8003984:	2050      	movs	r0, #80	@ 0x50
 8003986:	f7ff fad5 	bl	8002f34 <writeReg>
 800398a:	0003      	movs	r3, r0
 800398c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800398e:	002a      	movs	r2, r5
 8003990:	18bb      	adds	r3, r7, r2
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	b25b      	sxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d004      	beq.n	80039a4 <vl53l0x_init+0x818>
 800399a:	18bb      	adds	r3, r7, r2
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	b25b      	sxtb	r3, r3
 80039a0:	f000 fcd1 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x51, 0x00);
 80039a4:	2514      	movs	r5, #20
 80039a6:	197c      	adds	r4, r7, r5
 80039a8:	2100      	movs	r1, #0
 80039aa:	2051      	movs	r0, #81	@ 0x51
 80039ac:	f7ff fac2 	bl	8002f34 <writeReg>
 80039b0:	0003      	movs	r3, r0
 80039b2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80039b4:	002a      	movs	r2, r5
 80039b6:	18bb      	adds	r3, r7, r2
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	b25b      	sxtb	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d004      	beq.n	80039ca <vl53l0x_init+0x83e>
 80039c0:	18bb      	adds	r3, r7, r2
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	b25b      	sxtb	r3, r3
 80039c6:	f000 fcbe 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x52, 0x96);
 80039ca:	2514      	movs	r5, #20
 80039cc:	197c      	adds	r4, r7, r5
 80039ce:	2196      	movs	r1, #150	@ 0x96
 80039d0:	2052      	movs	r0, #82	@ 0x52
 80039d2:	f7ff faaf 	bl	8002f34 <writeReg>
 80039d6:	0003      	movs	r3, r0
 80039d8:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80039da:	002a      	movs	r2, r5
 80039dc:	18bb      	adds	r3, r7, r2
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	b25b      	sxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d004      	beq.n	80039f0 <vl53l0x_init+0x864>
 80039e6:	18bb      	adds	r3, r7, r2
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	b25b      	sxtb	r3, r3
 80039ec:	f000 fcab 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x56, 0x08);
 80039f0:	2514      	movs	r5, #20
 80039f2:	197c      	adds	r4, r7, r5
 80039f4:	2108      	movs	r1, #8
 80039f6:	2056      	movs	r0, #86	@ 0x56
 80039f8:	f7ff fa9c 	bl	8002f34 <writeReg>
 80039fc:	0003      	movs	r3, r0
 80039fe:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003a00:	002a      	movs	r2, r5
 8003a02:	18bb      	adds	r3, r7, r2
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	b25b      	sxtb	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d004      	beq.n	8003a16 <vl53l0x_init+0x88a>
 8003a0c:	18bb      	adds	r3, r7, r2
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	f000 fc98 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x57, 0x30);
 8003a16:	2514      	movs	r5, #20
 8003a18:	197c      	adds	r4, r7, r5
 8003a1a:	2130      	movs	r1, #48	@ 0x30
 8003a1c:	2057      	movs	r0, #87	@ 0x57
 8003a1e:	f7ff fa89 	bl	8002f34 <writeReg>
 8003a22:	0003      	movs	r3, r0
 8003a24:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003a26:	002a      	movs	r2, r5
 8003a28:	18bb      	adds	r3, r7, r2
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	b25b      	sxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d004      	beq.n	8003a3c <vl53l0x_init+0x8b0>
 8003a32:	18bb      	adds	r3, r7, r2
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	b25b      	sxtb	r3, r3
 8003a38:	f000 fc85 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x61, 0x00);
 8003a3c:	2514      	movs	r5, #20
 8003a3e:	197c      	adds	r4, r7, r5
 8003a40:	2100      	movs	r1, #0
 8003a42:	2061      	movs	r0, #97	@ 0x61
 8003a44:	f7ff fa76 	bl	8002f34 <writeReg>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003a4c:	002a      	movs	r2, r5
 8003a4e:	18bb      	adds	r3, r7, r2
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	b25b      	sxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d004      	beq.n	8003a62 <vl53l0x_init+0x8d6>
 8003a58:	18bb      	adds	r3, r7, r2
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	b25b      	sxtb	r3, r3
 8003a5e:	f000 fc72 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x62, 0x00);
 8003a62:	2514      	movs	r5, #20
 8003a64:	197c      	adds	r4, r7, r5
 8003a66:	2100      	movs	r1, #0
 8003a68:	2062      	movs	r0, #98	@ 0x62
 8003a6a:	f7ff fa63 	bl	8002f34 <writeReg>
 8003a6e:	0003      	movs	r3, r0
 8003a70:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003a72:	002a      	movs	r2, r5
 8003a74:	18bb      	adds	r3, r7, r2
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	b25b      	sxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <vl53l0x_init+0x8fc>
 8003a7e:	18bb      	adds	r3, r7, r2
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	b25b      	sxtb	r3, r3
 8003a84:	f000 fc5f 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x64, 0x00);
 8003a88:	2514      	movs	r5, #20
 8003a8a:	197c      	adds	r4, r7, r5
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	2064      	movs	r0, #100	@ 0x64
 8003a90:	f7ff fa50 	bl	8002f34 <writeReg>
 8003a94:	0003      	movs	r3, r0
 8003a96:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003a98:	002a      	movs	r2, r5
 8003a9a:	18bb      	adds	r3, r7, r2
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	b25b      	sxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d004      	beq.n	8003aae <vl53l0x_init+0x922>
 8003aa4:	18bb      	adds	r3, r7, r2
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	b25b      	sxtb	r3, r3
 8003aaa:	f000 fc4c 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x65, 0x00);
 8003aae:	2514      	movs	r5, #20
 8003ab0:	197c      	adds	r4, r7, r5
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	2065      	movs	r0, #101	@ 0x65
 8003ab6:	f7ff fa3d 	bl	8002f34 <writeReg>
 8003aba:	0003      	movs	r3, r0
 8003abc:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003abe:	002a      	movs	r2, r5
 8003ac0:	18bb      	adds	r3, r7, r2
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	b25b      	sxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d004      	beq.n	8003ad4 <vl53l0x_init+0x948>
 8003aca:	18bb      	adds	r3, r7, r2
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	b25b      	sxtb	r3, r3
 8003ad0:	f000 fc39 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x66, 0xA0);
 8003ad4:	2514      	movs	r5, #20
 8003ad6:	197c      	adds	r4, r7, r5
 8003ad8:	21a0      	movs	r1, #160	@ 0xa0
 8003ada:	2066      	movs	r0, #102	@ 0x66
 8003adc:	f7ff fa2a 	bl	8002f34 <writeReg>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003ae4:	002a      	movs	r2, r5
 8003ae6:	18bb      	adds	r3, r7, r2
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	b25b      	sxtb	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d004      	beq.n	8003afa <vl53l0x_init+0x96e>
 8003af0:	18bb      	adds	r3, r7, r2
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	b25b      	sxtb	r3, r3
 8003af6:	f000 fc26 	bl	8004346 <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x01);
 8003afa:	2514      	movs	r5, #20
 8003afc:	197c      	adds	r4, r7, r5
 8003afe:	2101      	movs	r1, #1
 8003b00:	20ff      	movs	r0, #255	@ 0xff
 8003b02:	f7ff fa17 	bl	8002f34 <writeReg>
 8003b06:	0003      	movs	r3, r0
 8003b08:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003b0a:	002a      	movs	r2, r5
 8003b0c:	18bb      	adds	r3, r7, r2
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	b25b      	sxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <vl53l0x_init+0x994>
 8003b16:	18bb      	adds	r3, r7, r2
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	b25b      	sxtb	r3, r3
 8003b1c:	f000 fc13 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x22, 0x32);
 8003b20:	2514      	movs	r5, #20
 8003b22:	197c      	adds	r4, r7, r5
 8003b24:	2132      	movs	r1, #50	@ 0x32
 8003b26:	2022      	movs	r0, #34	@ 0x22
 8003b28:	f7ff fa04 	bl	8002f34 <writeReg>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003b30:	002a      	movs	r2, r5
 8003b32:	18bb      	adds	r3, r7, r2
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	b25b      	sxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d004      	beq.n	8003b46 <vl53l0x_init+0x9ba>
 8003b3c:	18bb      	adds	r3, r7, r2
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	b25b      	sxtb	r3, r3
 8003b42:	f000 fc00 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x47, 0x14);
 8003b46:	2514      	movs	r5, #20
 8003b48:	197c      	adds	r4, r7, r5
 8003b4a:	2114      	movs	r1, #20
 8003b4c:	2047      	movs	r0, #71	@ 0x47
 8003b4e:	f7ff f9f1 	bl	8002f34 <writeReg>
 8003b52:	0003      	movs	r3, r0
 8003b54:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003b56:	002a      	movs	r2, r5
 8003b58:	18bb      	adds	r3, r7, r2
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	b25b      	sxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d004      	beq.n	8003b6c <vl53l0x_init+0x9e0>
 8003b62:	18bb      	adds	r3, r7, r2
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	b25b      	sxtb	r3, r3
 8003b68:	f000 fbed 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x49, 0xFF);
 8003b6c:	2514      	movs	r5, #20
 8003b6e:	197c      	adds	r4, r7, r5
 8003b70:	21ff      	movs	r1, #255	@ 0xff
 8003b72:	2049      	movs	r0, #73	@ 0x49
 8003b74:	f7ff f9de 	bl	8002f34 <writeReg>
 8003b78:	0003      	movs	r3, r0
 8003b7a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003b7c:	002a      	movs	r2, r5
 8003b7e:	18bb      	adds	r3, r7, r2
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	b25b      	sxtb	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d004      	beq.n	8003b92 <vl53l0x_init+0xa06>
 8003b88:	18bb      	adds	r3, r7, r2
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	b25b      	sxtb	r3, r3
 8003b8e:	f000 fbda 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x4A, 0x00);
 8003b92:	2514      	movs	r5, #20
 8003b94:	197c      	adds	r4, r7, r5
 8003b96:	2100      	movs	r1, #0
 8003b98:	204a      	movs	r0, #74	@ 0x4a
 8003b9a:	f7ff f9cb 	bl	8002f34 <writeReg>
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003ba2:	002a      	movs	r2, r5
 8003ba4:	18bb      	adds	r3, r7, r2
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	b25b      	sxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d004      	beq.n	8003bb8 <vl53l0x_init+0xa2c>
 8003bae:	18bb      	adds	r3, r7, r2
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	b25b      	sxtb	r3, r3
 8003bb4:	f000 fbc7 	bl	8004346 <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x00);
 8003bb8:	2514      	movs	r5, #20
 8003bba:	197c      	adds	r4, r7, r5
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	20ff      	movs	r0, #255	@ 0xff
 8003bc0:	f7ff f9b8 	bl	8002f34 <writeReg>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003bc8:	002a      	movs	r2, r5
 8003bca:	18bb      	adds	r3, r7, r2
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	b25b      	sxtb	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <vl53l0x_init+0xa52>
 8003bd4:	18bb      	adds	r3, r7, r2
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	b25b      	sxtb	r3, r3
 8003bda:	f000 fbb4 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x7A, 0x0A);
 8003bde:	2514      	movs	r5, #20
 8003be0:	197c      	adds	r4, r7, r5
 8003be2:	210a      	movs	r1, #10
 8003be4:	207a      	movs	r0, #122	@ 0x7a
 8003be6:	f7ff f9a5 	bl	8002f34 <writeReg>
 8003bea:	0003      	movs	r3, r0
 8003bec:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003bee:	002a      	movs	r2, r5
 8003bf0:	18bb      	adds	r3, r7, r2
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	b25b      	sxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d004      	beq.n	8003c04 <vl53l0x_init+0xa78>
 8003bfa:	18bb      	adds	r3, r7, r2
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	b25b      	sxtb	r3, r3
 8003c00:	f000 fba1 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x7B, 0x00);
 8003c04:	2514      	movs	r5, #20
 8003c06:	197c      	adds	r4, r7, r5
 8003c08:	2100      	movs	r1, #0
 8003c0a:	207b      	movs	r0, #123	@ 0x7b
 8003c0c:	f7ff f992 	bl	8002f34 <writeReg>
 8003c10:	0003      	movs	r3, r0
 8003c12:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003c14:	002a      	movs	r2, r5
 8003c16:	18bb      	adds	r3, r7, r2
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	b25b      	sxtb	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d004      	beq.n	8003c2a <vl53l0x_init+0xa9e>
 8003c20:	18bb      	adds	r3, r7, r2
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	b25b      	sxtb	r3, r3
 8003c26:	f000 fb8e 	bl	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x78, 0x21);
 8003c2a:	2514      	movs	r5, #20
 8003c2c:	197c      	adds	r4, r7, r5
 8003c2e:	2121      	movs	r1, #33	@ 0x21
 8003c30:	2078      	movs	r0, #120	@ 0x78
 8003c32:	f7ff f97f 	bl	8002f34 <writeReg>
 8003c36:	0003      	movs	r3, r0
 8003c38:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003c3a:	002a      	movs	r2, r5
 8003c3c:	18bb      	adds	r3, r7, r2
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	b25b      	sxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d004      	beq.n	8003c50 <vl53l0x_init+0xac4>
 8003c46:	18bb      	adds	r3, r7, r2
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	b25b      	sxtb	r3, r3
 8003c4c:	f000 fb7b 	bl	8004346 <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x01);
 8003c50:	2514      	movs	r5, #20
 8003c52:	197c      	adds	r4, r7, r5
 8003c54:	2101      	movs	r1, #1
 8003c56:	20ff      	movs	r0, #255	@ 0xff
 8003c58:	f7ff f96c 	bl	8002f34 <writeReg>
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003c60:	002a      	movs	r2, r5
 8003c62:	18bb      	adds	r3, r7, r2
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	b25b      	sxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <vl53l0x_init+0xae8>
 8003c6c:	18bb      	adds	r3, r7, r2
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	b25b      	sxtb	r3, r3
 8003c72:	e368      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x23, 0x34);
 8003c74:	2514      	movs	r5, #20
 8003c76:	197c      	adds	r4, r7, r5
 8003c78:	2134      	movs	r1, #52	@ 0x34
 8003c7a:	2023      	movs	r0, #35	@ 0x23
 8003c7c:	f7ff f95a 	bl	8002f34 <writeReg>
 8003c80:	0003      	movs	r3, r0
 8003c82:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003c84:	002a      	movs	r2, r5
 8003c86:	18bb      	adds	r3, r7, r2
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	b25b      	sxtb	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <vl53l0x_init+0xb0c>
 8003c90:	18bb      	adds	r3, r7, r2
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	b25b      	sxtb	r3, r3
 8003c96:	e356      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x42, 0x00);
 8003c98:	2514      	movs	r5, #20
 8003c9a:	197c      	adds	r4, r7, r5
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	2042      	movs	r0, #66	@ 0x42
 8003ca0:	f7ff f948 	bl	8002f34 <writeReg>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003ca8:	002a      	movs	r2, r5
 8003caa:	18bb      	adds	r3, r7, r2
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	b25b      	sxtb	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <vl53l0x_init+0xb30>
 8003cb4:	18bb      	adds	r3, r7, r2
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	b25b      	sxtb	r3, r3
 8003cba:	e344      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x44, 0xFF);
 8003cbc:	2514      	movs	r5, #20
 8003cbe:	197c      	adds	r4, r7, r5
 8003cc0:	21ff      	movs	r1, #255	@ 0xff
 8003cc2:	2044      	movs	r0, #68	@ 0x44
 8003cc4:	f7ff f936 	bl	8002f34 <writeReg>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003ccc:	002a      	movs	r2, r5
 8003cce:	18bb      	adds	r3, r7, r2
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	b25b      	sxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <vl53l0x_init+0xb54>
 8003cd8:	18bb      	adds	r3, r7, r2
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	b25b      	sxtb	r3, r3
 8003cde:	e332      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x45, 0x26);
 8003ce0:	2514      	movs	r5, #20
 8003ce2:	197c      	adds	r4, r7, r5
 8003ce4:	2126      	movs	r1, #38	@ 0x26
 8003ce6:	2045      	movs	r0, #69	@ 0x45
 8003ce8:	f7ff f924 	bl	8002f34 <writeReg>
 8003cec:	0003      	movs	r3, r0
 8003cee:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003cf0:	002a      	movs	r2, r5
 8003cf2:	18bb      	adds	r3, r7, r2
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	b25b      	sxtb	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <vl53l0x_init+0xb78>
 8003cfc:	18bb      	adds	r3, r7, r2
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	b25b      	sxtb	r3, r3
 8003d02:	e320      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x46, 0x05);
 8003d04:	2514      	movs	r5, #20
 8003d06:	197c      	adds	r4, r7, r5
 8003d08:	2105      	movs	r1, #5
 8003d0a:	2046      	movs	r0, #70	@ 0x46
 8003d0c:	f7ff f912 	bl	8002f34 <writeReg>
 8003d10:	0003      	movs	r3, r0
 8003d12:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003d14:	002a      	movs	r2, r5
 8003d16:	18bb      	adds	r3, r7, r2
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	b25b      	sxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <vl53l0x_init+0xb9c>
 8003d20:	18bb      	adds	r3, r7, r2
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	b25b      	sxtb	r3, r3
 8003d26:	e30e      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x40, 0x40);
 8003d28:	2514      	movs	r5, #20
 8003d2a:	197c      	adds	r4, r7, r5
 8003d2c:	2140      	movs	r1, #64	@ 0x40
 8003d2e:	2040      	movs	r0, #64	@ 0x40
 8003d30:	f7ff f900 	bl	8002f34 <writeReg>
 8003d34:	0003      	movs	r3, r0
 8003d36:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003d38:	002a      	movs	r2, r5
 8003d3a:	18bb      	adds	r3, r7, r2
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	b25b      	sxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <vl53l0x_init+0xbc0>
 8003d44:	18bb      	adds	r3, r7, r2
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	b25b      	sxtb	r3, r3
 8003d4a:	e2fc      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x0E, 0x06);
 8003d4c:	2514      	movs	r5, #20
 8003d4e:	197c      	adds	r4, r7, r5
 8003d50:	2106      	movs	r1, #6
 8003d52:	200e      	movs	r0, #14
 8003d54:	f7ff f8ee 	bl	8002f34 <writeReg>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003d5c:	002a      	movs	r2, r5
 8003d5e:	18bb      	adds	r3, r7, r2
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	b25b      	sxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <vl53l0x_init+0xbe4>
 8003d68:	18bb      	adds	r3, r7, r2
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	b25b      	sxtb	r3, r3
 8003d6e:	e2ea      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x20, 0x1A);
 8003d70:	2514      	movs	r5, #20
 8003d72:	197c      	adds	r4, r7, r5
 8003d74:	211a      	movs	r1, #26
 8003d76:	2020      	movs	r0, #32
 8003d78:	f7ff f8dc 	bl	8002f34 <writeReg>
 8003d7c:	0003      	movs	r3, r0
 8003d7e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003d80:	002a      	movs	r2, r5
 8003d82:	18bb      	adds	r3, r7, r2
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	b25b      	sxtb	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <vl53l0x_init+0xc08>
 8003d8c:	18bb      	adds	r3, r7, r2
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	b25b      	sxtb	r3, r3
 8003d92:	e2d8      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x43, 0x40);
 8003d94:	2514      	movs	r5, #20
 8003d96:	197c      	adds	r4, r7, r5
 8003d98:	2140      	movs	r1, #64	@ 0x40
 8003d9a:	2043      	movs	r0, #67	@ 0x43
 8003d9c:	f7ff f8ca 	bl	8002f34 <writeReg>
 8003da0:	0003      	movs	r3, r0
 8003da2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003da4:	002a      	movs	r2, r5
 8003da6:	18bb      	adds	r3, r7, r2
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	b25b      	sxtb	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <vl53l0x_init+0xc2c>
 8003db0:	18bb      	adds	r3, r7, r2
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	b25b      	sxtb	r3, r3
 8003db6:	e2c6      	b.n	8004346 <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x00);
 8003db8:	2514      	movs	r5, #20
 8003dba:	197c      	adds	r4, r7, r5
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	20ff      	movs	r0, #255	@ 0xff
 8003dc0:	f7ff f8b8 	bl	8002f34 <writeReg>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003dc8:	002a      	movs	r2, r5
 8003dca:	18bb      	adds	r3, r7, r2
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	b25b      	sxtb	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <vl53l0x_init+0xc50>
 8003dd4:	18bb      	adds	r3, r7, r2
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	b25b      	sxtb	r3, r3
 8003dda:	e2b4      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x34, 0x03);
 8003ddc:	2514      	movs	r5, #20
 8003dde:	197c      	adds	r4, r7, r5
 8003de0:	2103      	movs	r1, #3
 8003de2:	2034      	movs	r0, #52	@ 0x34
 8003de4:	f7ff f8a6 	bl	8002f34 <writeReg>
 8003de8:	0003      	movs	r3, r0
 8003dea:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003dec:	002a      	movs	r2, r5
 8003dee:	18bb      	adds	r3, r7, r2
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	b25b      	sxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <vl53l0x_init+0xc74>
 8003df8:	18bb      	adds	r3, r7, r2
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	b25b      	sxtb	r3, r3
 8003dfe:	e2a2      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x35, 0x44);
 8003e00:	2514      	movs	r5, #20
 8003e02:	197c      	adds	r4, r7, r5
 8003e04:	2144      	movs	r1, #68	@ 0x44
 8003e06:	2035      	movs	r0, #53	@ 0x35
 8003e08:	f7ff f894 	bl	8002f34 <writeReg>
 8003e0c:	0003      	movs	r3, r0
 8003e0e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003e10:	002a      	movs	r2, r5
 8003e12:	18bb      	adds	r3, r7, r2
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	b25b      	sxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <vl53l0x_init+0xc98>
 8003e1c:	18bb      	adds	r3, r7, r2
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	b25b      	sxtb	r3, r3
 8003e22:	e290      	b.n	8004346 <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x01);
 8003e24:	2514      	movs	r5, #20
 8003e26:	197c      	adds	r4, r7, r5
 8003e28:	2101      	movs	r1, #1
 8003e2a:	20ff      	movs	r0, #255	@ 0xff
 8003e2c:	f7ff f882 	bl	8002f34 <writeReg>
 8003e30:	0003      	movs	r3, r0
 8003e32:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003e34:	002a      	movs	r2, r5
 8003e36:	18bb      	adds	r3, r7, r2
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	b25b      	sxtb	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <vl53l0x_init+0xcbc>
 8003e40:	18bb      	adds	r3, r7, r2
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	b25b      	sxtb	r3, r3
 8003e46:	e27e      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x31, 0x04);
 8003e48:	2514      	movs	r5, #20
 8003e4a:	197c      	adds	r4, r7, r5
 8003e4c:	2104      	movs	r1, #4
 8003e4e:	2031      	movs	r0, #49	@ 0x31
 8003e50:	f7ff f870 	bl	8002f34 <writeReg>
 8003e54:	0003      	movs	r3, r0
 8003e56:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003e58:	002a      	movs	r2, r5
 8003e5a:	18bb      	adds	r3, r7, r2
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	b25b      	sxtb	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <vl53l0x_init+0xce0>
 8003e64:	18bb      	adds	r3, r7, r2
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	b25b      	sxtb	r3, r3
 8003e6a:	e26c      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x4B, 0x09);
 8003e6c:	2514      	movs	r5, #20
 8003e6e:	197c      	adds	r4, r7, r5
 8003e70:	2109      	movs	r1, #9
 8003e72:	204b      	movs	r0, #75	@ 0x4b
 8003e74:	f7ff f85e 	bl	8002f34 <writeReg>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003e7c:	002a      	movs	r2, r5
 8003e7e:	18bb      	adds	r3, r7, r2
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	b25b      	sxtb	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <vl53l0x_init+0xd04>
 8003e88:	18bb      	adds	r3, r7, r2
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	b25b      	sxtb	r3, r3
 8003e8e:	e25a      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x4C, 0x05);
 8003e90:	2514      	movs	r5, #20
 8003e92:	197c      	adds	r4, r7, r5
 8003e94:	2105      	movs	r1, #5
 8003e96:	204c      	movs	r0, #76	@ 0x4c
 8003e98:	f7ff f84c 	bl	8002f34 <writeReg>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003ea0:	002a      	movs	r2, r5
 8003ea2:	18bb      	adds	r3, r7, r2
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	b25b      	sxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <vl53l0x_init+0xd28>
 8003eac:	18bb      	adds	r3, r7, r2
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	b25b      	sxtb	r3, r3
 8003eb2:	e248      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x4D, 0x04);
 8003eb4:	2514      	movs	r5, #20
 8003eb6:	197c      	adds	r4, r7, r5
 8003eb8:	2104      	movs	r1, #4
 8003eba:	204d      	movs	r0, #77	@ 0x4d
 8003ebc:	f7ff f83a 	bl	8002f34 <writeReg>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003ec4:	002a      	movs	r2, r5
 8003ec6:	18bb      	adds	r3, r7, r2
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	b25b      	sxtb	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <vl53l0x_init+0xd4c>
 8003ed0:	18bb      	adds	r3, r7, r2
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	b25b      	sxtb	r3, r3
 8003ed6:	e236      	b.n	8004346 <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x00);
 8003ed8:	2514      	movs	r5, #20
 8003eda:	197c      	adds	r4, r7, r5
 8003edc:	2100      	movs	r1, #0
 8003ede:	20ff      	movs	r0, #255	@ 0xff
 8003ee0:	f7ff f828 	bl	8002f34 <writeReg>
 8003ee4:	0003      	movs	r3, r0
 8003ee6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003ee8:	002a      	movs	r2, r5
 8003eea:	18bb      	adds	r3, r7, r2
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	b25b      	sxtb	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <vl53l0x_init+0xd70>
 8003ef4:	18bb      	adds	r3, r7, r2
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	b25b      	sxtb	r3, r3
 8003efa:	e224      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x44, 0x00);
 8003efc:	2514      	movs	r5, #20
 8003efe:	197c      	adds	r4, r7, r5
 8003f00:	2100      	movs	r1, #0
 8003f02:	2044      	movs	r0, #68	@ 0x44
 8003f04:	f7ff f816 	bl	8002f34 <writeReg>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003f0c:	002a      	movs	r2, r5
 8003f0e:	18bb      	adds	r3, r7, r2
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	b25b      	sxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <vl53l0x_init+0xd94>
 8003f18:	18bb      	adds	r3, r7, r2
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	b25b      	sxtb	r3, r3
 8003f1e:	e212      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x45, 0x20);
 8003f20:	2514      	movs	r5, #20
 8003f22:	197c      	adds	r4, r7, r5
 8003f24:	2120      	movs	r1, #32
 8003f26:	2045      	movs	r0, #69	@ 0x45
 8003f28:	f7ff f804 	bl	8002f34 <writeReg>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003f30:	002a      	movs	r2, r5
 8003f32:	18bb      	adds	r3, r7, r2
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	b25b      	sxtb	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <vl53l0x_init+0xdb8>
 8003f3c:	18bb      	adds	r3, r7, r2
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	b25b      	sxtb	r3, r3
 8003f42:	e200      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x47, 0x08);
 8003f44:	2514      	movs	r5, #20
 8003f46:	197c      	adds	r4, r7, r5
 8003f48:	2108      	movs	r1, #8
 8003f4a:	2047      	movs	r0, #71	@ 0x47
 8003f4c:	f7fe fff2 	bl	8002f34 <writeReg>
 8003f50:	0003      	movs	r3, r0
 8003f52:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003f54:	002a      	movs	r2, r5
 8003f56:	18bb      	adds	r3, r7, r2
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	b25b      	sxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <vl53l0x_init+0xddc>
 8003f60:	18bb      	adds	r3, r7, r2
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	b25b      	sxtb	r3, r3
 8003f66:	e1ee      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x48, 0x28);
 8003f68:	2514      	movs	r5, #20
 8003f6a:	197c      	adds	r4, r7, r5
 8003f6c:	2128      	movs	r1, #40	@ 0x28
 8003f6e:	2048      	movs	r0, #72	@ 0x48
 8003f70:	f7fe ffe0 	bl	8002f34 <writeReg>
 8003f74:	0003      	movs	r3, r0
 8003f76:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003f78:	002a      	movs	r2, r5
 8003f7a:	18bb      	adds	r3, r7, r2
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	b25b      	sxtb	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <vl53l0x_init+0xe00>
 8003f84:	18bb      	adds	r3, r7, r2
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	b25b      	sxtb	r3, r3
 8003f8a:	e1dc      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x67, 0x00);
 8003f8c:	2514      	movs	r5, #20
 8003f8e:	197c      	adds	r4, r7, r5
 8003f90:	2100      	movs	r1, #0
 8003f92:	2067      	movs	r0, #103	@ 0x67
 8003f94:	f7fe ffce 	bl	8002f34 <writeReg>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003f9c:	002a      	movs	r2, r5
 8003f9e:	18bb      	adds	r3, r7, r2
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	b25b      	sxtb	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <vl53l0x_init+0xe24>
 8003fa8:	18bb      	adds	r3, r7, r2
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	b25b      	sxtb	r3, r3
 8003fae:	e1ca      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x70, 0x04);
 8003fb0:	2514      	movs	r5, #20
 8003fb2:	197c      	adds	r4, r7, r5
 8003fb4:	2104      	movs	r1, #4
 8003fb6:	2070      	movs	r0, #112	@ 0x70
 8003fb8:	f7fe ffbc 	bl	8002f34 <writeReg>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003fc0:	002a      	movs	r2, r5
 8003fc2:	18bb      	adds	r3, r7, r2
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	b25b      	sxtb	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <vl53l0x_init+0xe48>
 8003fcc:	18bb      	adds	r3, r7, r2
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	b25b      	sxtb	r3, r3
 8003fd2:	e1b8      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x71, 0x01);
 8003fd4:	2514      	movs	r5, #20
 8003fd6:	197c      	adds	r4, r7, r5
 8003fd8:	2101      	movs	r1, #1
 8003fda:	2071      	movs	r0, #113	@ 0x71
 8003fdc:	f7fe ffaa 	bl	8002f34 <writeReg>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003fe4:	002a      	movs	r2, r5
 8003fe6:	18bb      	adds	r3, r7, r2
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	b25b      	sxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <vl53l0x_init+0xe6c>
 8003ff0:	18bb      	adds	r3, r7, r2
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	b25b      	sxtb	r3, r3
 8003ff6:	e1a6      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x72, 0xFE);
 8003ff8:	2514      	movs	r5, #20
 8003ffa:	197c      	adds	r4, r7, r5
 8003ffc:	21fe      	movs	r1, #254	@ 0xfe
 8003ffe:	2072      	movs	r0, #114	@ 0x72
 8004000:	f7fe ff98 	bl	8002f34 <writeReg>
 8004004:	0003      	movs	r3, r0
 8004006:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004008:	002a      	movs	r2, r5
 800400a:	18bb      	adds	r3, r7, r2
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	b25b      	sxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <vl53l0x_init+0xe90>
 8004014:	18bb      	adds	r3, r7, r2
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	b25b      	sxtb	r3, r3
 800401a:	e194      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x76, 0x00);
 800401c:	2514      	movs	r5, #20
 800401e:	197c      	adds	r4, r7, r5
 8004020:	2100      	movs	r1, #0
 8004022:	2076      	movs	r0, #118	@ 0x76
 8004024:	f7fe ff86 	bl	8002f34 <writeReg>
 8004028:	0003      	movs	r3, r0
 800402a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800402c:	002a      	movs	r2, r5
 800402e:	18bb      	adds	r3, r7, r2
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	b25b      	sxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <vl53l0x_init+0xeb4>
 8004038:	18bb      	adds	r3, r7, r2
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	b25b      	sxtb	r3, r3
 800403e:	e182      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x77, 0x00);
 8004040:	2514      	movs	r5, #20
 8004042:	197c      	adds	r4, r7, r5
 8004044:	2100      	movs	r1, #0
 8004046:	2077      	movs	r0, #119	@ 0x77
 8004048:	f7fe ff74 	bl	8002f34 <writeReg>
 800404c:	0003      	movs	r3, r0
 800404e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004050:	002a      	movs	r2, r5
 8004052:	18bb      	adds	r3, r7, r2
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	b25b      	sxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <vl53l0x_init+0xed8>
 800405c:	18bb      	adds	r3, r7, r2
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	b25b      	sxtb	r3, r3
 8004062:	e170      	b.n	8004346 <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x01);
 8004064:	2514      	movs	r5, #20
 8004066:	197c      	adds	r4, r7, r5
 8004068:	2101      	movs	r1, #1
 800406a:	20ff      	movs	r0, #255	@ 0xff
 800406c:	f7fe ff62 	bl	8002f34 <writeReg>
 8004070:	0003      	movs	r3, r0
 8004072:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004074:	002a      	movs	r2, r5
 8004076:	18bb      	adds	r3, r7, r2
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	b25b      	sxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <vl53l0x_init+0xefc>
 8004080:	18bb      	adds	r3, r7, r2
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	b25b      	sxtb	r3, r3
 8004086:	e15e      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x0D, 0x01);
 8004088:	2514      	movs	r5, #20
 800408a:	197c      	adds	r4, r7, r5
 800408c:	2101      	movs	r1, #1
 800408e:	200d      	movs	r0, #13
 8004090:	f7fe ff50 	bl	8002f34 <writeReg>
 8004094:	0003      	movs	r3, r0
 8004096:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004098:	002a      	movs	r2, r5
 800409a:	18bb      	adds	r3, r7, r2
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	b25b      	sxtb	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <vl53l0x_init+0xf20>
 80040a4:	18bb      	adds	r3, r7, r2
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	b25b      	sxtb	r3, r3
 80040aa:	e14c      	b.n	8004346 <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x00);
 80040ac:	2514      	movs	r5, #20
 80040ae:	197c      	adds	r4, r7, r5
 80040b0:	2100      	movs	r1, #0
 80040b2:	20ff      	movs	r0, #255	@ 0xff
 80040b4:	f7fe ff3e 	bl	8002f34 <writeReg>
 80040b8:	0003      	movs	r3, r0
 80040ba:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80040bc:	002a      	movs	r2, r5
 80040be:	18bb      	adds	r3, r7, r2
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	b25b      	sxtb	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <vl53l0x_init+0xf44>
 80040c8:	18bb      	adds	r3, r7, r2
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	b25b      	sxtb	r3, r3
 80040ce:	e13a      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x80, 0x01);
 80040d0:	2514      	movs	r5, #20
 80040d2:	197c      	adds	r4, r7, r5
 80040d4:	2101      	movs	r1, #1
 80040d6:	2080      	movs	r0, #128	@ 0x80
 80040d8:	f7fe ff2c 	bl	8002f34 <writeReg>
 80040dc:	0003      	movs	r3, r0
 80040de:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80040e0:	002a      	movs	r2, r5
 80040e2:	18bb      	adds	r3, r7, r2
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b25b      	sxtb	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <vl53l0x_init+0xf68>
 80040ec:	18bb      	adds	r3, r7, r2
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	b25b      	sxtb	r3, r3
 80040f2:	e128      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x01, 0xF8);
 80040f4:	2514      	movs	r5, #20
 80040f6:	197c      	adds	r4, r7, r5
 80040f8:	21f8      	movs	r1, #248	@ 0xf8
 80040fa:	2001      	movs	r0, #1
 80040fc:	f7fe ff1a 	bl	8002f34 <writeReg>
 8004100:	0003      	movs	r3, r0
 8004102:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004104:	002a      	movs	r2, r5
 8004106:	18bb      	adds	r3, r7, r2
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	b25b      	sxtb	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <vl53l0x_init+0xf8c>
 8004110:	18bb      	adds	r3, r7, r2
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	b25b      	sxtb	r3, r3
 8004116:	e116      	b.n	8004346 <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x01);
 8004118:	2514      	movs	r5, #20
 800411a:	197c      	adds	r4, r7, r5
 800411c:	2101      	movs	r1, #1
 800411e:	20ff      	movs	r0, #255	@ 0xff
 8004120:	f7fe ff08 	bl	8002f34 <writeReg>
 8004124:	0003      	movs	r3, r0
 8004126:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004128:	002a      	movs	r2, r5
 800412a:	18bb      	adds	r3, r7, r2
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	b25b      	sxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <vl53l0x_init+0xfb0>
 8004134:	18bb      	adds	r3, r7, r2
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	b25b      	sxtb	r3, r3
 800413a:	e104      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x8E, 0x01);
 800413c:	2514      	movs	r5, #20
 800413e:	197c      	adds	r4, r7, r5
 8004140:	2101      	movs	r1, #1
 8004142:	208e      	movs	r0, #142	@ 0x8e
 8004144:	f7fe fef6 	bl	8002f34 <writeReg>
 8004148:	0003      	movs	r3, r0
 800414a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800414c:	002a      	movs	r2, r5
 800414e:	18bb      	adds	r3, r7, r2
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	b25b      	sxtb	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <vl53l0x_init+0xfd4>
 8004158:	18bb      	adds	r3, r7, r2
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	b25b      	sxtb	r3, r3
 800415e:	e0f2      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x00, 0x01);
 8004160:	2514      	movs	r5, #20
 8004162:	197c      	adds	r4, r7, r5
 8004164:	2101      	movs	r1, #1
 8004166:	2000      	movs	r0, #0
 8004168:	f7fe fee4 	bl	8002f34 <writeReg>
 800416c:	0003      	movs	r3, r0
 800416e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004170:	002a      	movs	r2, r5
 8004172:	18bb      	adds	r3, r7, r2
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	b25b      	sxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <vl53l0x_init+0xff8>
 800417c:	18bb      	adds	r3, r7, r2
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	b25b      	sxtb	r3, r3
 8004182:	e0e0      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0xFF, 0x00);
 8004184:	2514      	movs	r5, #20
 8004186:	197c      	adds	r4, r7, r5
 8004188:	2100      	movs	r1, #0
 800418a:	20ff      	movs	r0, #255	@ 0xff
 800418c:	f7fe fed2 	bl	8002f34 <writeReg>
 8004190:	0003      	movs	r3, r0
 8004192:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004194:	002a      	movs	r2, r5
 8004196:	18bb      	adds	r3, r7, r2
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	b25b      	sxtb	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <vl53l0x_init+0x101c>
 80041a0:	18bb      	adds	r3, r7, r2
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	b25b      	sxtb	r3, r3
 80041a6:	e0ce      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(0x80, 0x00);
 80041a8:	2514      	movs	r5, #20
 80041aa:	197c      	adds	r4, r7, r5
 80041ac:	2100      	movs	r1, #0
 80041ae:	2080      	movs	r0, #128	@ 0x80
 80041b0:	f7fe fec0 	bl	8002f34 <writeReg>
 80041b4:	0003      	movs	r3, r0
 80041b6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80041b8:	002a      	movs	r2, r5
 80041ba:	18bb      	adds	r3, r7, r2
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	b25b      	sxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <vl53l0x_init+0x1040>
 80041c4:	18bb      	adds	r3, r7, r2
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	b25b      	sxtb	r3, r3
 80041ca:	e0bc      	b.n	8004346 <vl53l0x_init+0x11ba>
	// -- VL53L0X_load_tuning_settings() end

	// "Set interrupt config to new sample ready"
	// -- VL53L0X_SetGpioConfig() begin

	status = writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80041cc:	2514      	movs	r5, #20
 80041ce:	197c      	adds	r4, r7, r5
 80041d0:	2104      	movs	r1, #4
 80041d2:	200a      	movs	r0, #10
 80041d4:	f7fe feae 	bl	8002f34 <writeReg>
 80041d8:	0003      	movs	r3, r0
 80041da:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80041dc:	002a      	movs	r2, r5
 80041de:	18bb      	adds	r3, r7, r2
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	b25b      	sxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <vl53l0x_init+0x1064>
 80041e8:	18bb      	adds	r3, r7, r2
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	b25b      	sxtb	r3, r3
 80041ee:	e0aa      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = readReg(GPIO_HV_MUX_ACTIVE_HIGH, &reg_val);
 80041f0:	2514      	movs	r5, #20
 80041f2:	197c      	adds	r4, r7, r5
 80041f4:	2312      	movs	r3, #18
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	0019      	movs	r1, r3
 80041fa:	2084      	movs	r0, #132	@ 0x84
 80041fc:	f7fe fef6 	bl	8002fec <readReg>
 8004200:	0003      	movs	r3, r0
 8004202:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004204:	197b      	adds	r3, r7, r5
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	b25b      	sxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <vl53l0x_init+0x108a>
 800420e:	197b      	adds	r3, r7, r5
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	b25b      	sxtb	r3, r3
 8004214:	e097      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = writeReg(GPIO_HV_MUX_ACTIVE_HIGH, reg_val & ~0x10); // active low
 8004216:	2312      	movs	r3, #18
 8004218:	18fb      	adds	r3, r7, r3
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2210      	movs	r2, #16
 800421e:	4393      	bics	r3, r2
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2514      	movs	r5, #20
 8004224:	197c      	adds	r4, r7, r5
 8004226:	0019      	movs	r1, r3
 8004228:	2084      	movs	r0, #132	@ 0x84
 800422a:	f7fe fe83 	bl	8002f34 <writeReg>
 800422e:	0003      	movs	r3, r0
 8004230:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004232:	197b      	adds	r3, r7, r5
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	b25b      	sxtb	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <vl53l0x_init+0x10b8>
 800423c:	197b      	adds	r3, r7, r5
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	b25b      	sxtb	r3, r3
 8004242:	e080      	b.n	8004346 <vl53l0x_init+0x11ba>
	reg_val = 0;
 8004244:	2312      	movs	r3, #18
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
	status = writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 800424c:	2514      	movs	r5, #20
 800424e:	197c      	adds	r4, r7, r5
 8004250:	2101      	movs	r1, #1
 8004252:	200b      	movs	r0, #11
 8004254:	f7fe fe6e 	bl	8002f34 <writeReg>
 8004258:	0003      	movs	r3, r0
 800425a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800425c:	002a      	movs	r2, r5
 800425e:	18bb      	adds	r3, r7, r2
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	b25b      	sxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <vl53l0x_init+0x10e4>
 8004268:	18bb      	adds	r3, r7, r2
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	b25b      	sxtb	r3, r3
 800426e:	e06a      	b.n	8004346 <vl53l0x_init+0x11ba>

	// "Disable MSRC and TCC by default"
	// MSRC = Minimum Signal Rate Check
	// TCC = Target CentreCheck
	// -- VL53L0X_SetSequenceStepEnable() begin
	status = writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8004270:	2514      	movs	r5, #20
 8004272:	197c      	adds	r4, r7, r5
 8004274:	21e8      	movs	r1, #232	@ 0xe8
 8004276:	2001      	movs	r0, #1
 8004278:	f7fe fe5c 	bl	8002f34 <writeReg>
 800427c:	0003      	movs	r3, r0
 800427e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004280:	002a      	movs	r2, r5
 8004282:	18bb      	adds	r3, r7, r2
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	b25b      	sxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <vl53l0x_init+0x1108>
 800428c:	18bb      	adds	r3, r7, r2
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	b25b      	sxtb	r3, r3
 8004292:	e058      	b.n	8004346 <vl53l0x_init+0x11ba>
	// VL53L0X_StaticInit() end

	// VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

	// -- VL53L0X_perform_vhv_calibration() begin
	status = writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8004294:	2514      	movs	r5, #20
 8004296:	197c      	adds	r4, r7, r5
 8004298:	2101      	movs	r1, #1
 800429a:	2001      	movs	r0, #1
 800429c:	f7fe fe4a 	bl	8002f34 <writeReg>
 80042a0:	0003      	movs	r3, r0
 80042a2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80042a4:	002a      	movs	r2, r5
 80042a6:	18bb      	adds	r3, r7, r2
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	b25b      	sxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <vl53l0x_init+0x112c>
 80042b0:	18bb      	adds	r3, r7, r2
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	b25b      	sxtb	r3, r3
 80042b6:	e046      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = vl53l0x_single_reference_calibration(0x40);
 80042b8:	2514      	movs	r5, #20
 80042ba:	197c      	adds	r4, r7, r5
 80042bc:	2040      	movs	r0, #64	@ 0x40
 80042be:	f001 fa9f 	bl	8005800 <vl53l0x_single_reference_calibration>
 80042c2:	0003      	movs	r3, r0
 80042c4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80042c6:	002a      	movs	r2, r5
 80042c8:	18bb      	adds	r3, r7, r2
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	b25b      	sxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <vl53l0x_init+0x114e>
 80042d2:	18bb      	adds	r3, r7, r2
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	b25b      	sxtb	r3, r3
 80042d8:	e035      	b.n	8004346 <vl53l0x_init+0x11ba>
	// -- VL53L0X_perform_vhv_calibration() end

	// -- VL53L0X_perform_phase_calibration() begin
	status = writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80042da:	2514      	movs	r5, #20
 80042dc:	197c      	adds	r4, r7, r5
 80042de:	2102      	movs	r1, #2
 80042e0:	2001      	movs	r0, #1
 80042e2:	f7fe fe27 	bl	8002f34 <writeReg>
 80042e6:	0003      	movs	r3, r0
 80042e8:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80042ea:	002a      	movs	r2, r5
 80042ec:	18bb      	adds	r3, r7, r2
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	b25b      	sxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <vl53l0x_init+0x1172>
 80042f6:	18bb      	adds	r3, r7, r2
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	b25b      	sxtb	r3, r3
 80042fc:	e023      	b.n	8004346 <vl53l0x_init+0x11ba>
	status = vl53l0x_single_reference_calibration(0x00);
 80042fe:	2514      	movs	r5, #20
 8004300:	197c      	adds	r4, r7, r5
 8004302:	2000      	movs	r0, #0
 8004304:	f001 fa7c 	bl	8005800 <vl53l0x_single_reference_calibration>
 8004308:	0003      	movs	r3, r0
 800430a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800430c:	002a      	movs	r2, r5
 800430e:	18bb      	adds	r3, r7, r2
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	b25b      	sxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <vl53l0x_init+0x1194>
 8004318:	18bb      	adds	r3, r7, r2
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	b25b      	sxtb	r3, r3
 800431e:	e012      	b.n	8004346 <vl53l0x_init+0x11ba>
	// -- VL53L0X_perform_phase_calibration() end

	// "restore the previous Sequence Config"
	status = writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8004320:	2514      	movs	r5, #20
 8004322:	197c      	adds	r4, r7, r5
 8004324:	21e8      	movs	r1, #232	@ 0xe8
 8004326:	2001      	movs	r0, #1
 8004328:	f7fe fe04 	bl	8002f34 <writeReg>
 800432c:	0003      	movs	r3, r0
 800432e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004330:	002a      	movs	r2, r5
 8004332:	18bb      	adds	r3, r7, r2
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	b25b      	sxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <vl53l0x_init+0x11b8>
 800433c:	18bb      	adds	r3, r7, r2
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	b25b      	sxtb	r3, r3
 8004342:	e000      	b.n	8004346 <vl53l0x_init+0x11ba>
	// VL53L0X_PerformRefCalibration() end

	return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	0018      	movs	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	b006      	add	sp, #24
 800434c:	bdb0      	pop	{r4, r5, r7, pc}
 800434e:	46c0      	nop			@ (mov r8, r8)

08004350 <vl53l0x_set_signal_rate_limit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
int8_t vl53l0x_set_signal_rate_limit(float limit_Mcps)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return HAL_ERROR; }
 8004358:	2100      	movs	r1, #0
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fc f89a 	bl	8000494 <__aeabi_fcmplt>
 8004360:	1e03      	subs	r3, r0, #0
 8004362:	d108      	bne.n	8004376 <vl53l0x_set_signal_rate_limit+0x26>
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7fc fdc7 	bl	8000ef8 <__aeabi_f2d>
 800436a:	4a0e      	ldr	r2, [pc, #56]	@ (80043a4 <vl53l0x_set_signal_rate_limit+0x54>)
 800436c:	4b0e      	ldr	r3, [pc, #56]	@ (80043a8 <vl53l0x_set_signal_rate_limit+0x58>)
 800436e:	f7fc f86b 	bl	8000448 <__aeabi_dcmpgt>
 8004372:	1e03      	subs	r3, r0, #0
 8004374:	d001      	beq.n	800437a <vl53l0x_set_signal_rate_limit+0x2a>
 8004376:	2301      	movs	r3, #1
 8004378:	e00f      	b.n	800439a <vl53l0x_set_signal_rate_limit+0x4a>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  return writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 800437a:	2186      	movs	r1, #134	@ 0x86
 800437c:	05c9      	lsls	r1, r1, #23
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fc f98e 	bl	80006a0 <__aeabi_fmul>
 8004384:	1c03      	adds	r3, r0, #0
 8004386:	1c18      	adds	r0, r3, #0
 8004388:	f7fc f8ac 	bl	80004e4 <__aeabi_f2uiz>
 800438c:	0003      	movs	r3, r0
 800438e:	b29b      	uxth	r3, r3
 8004390:	0019      	movs	r1, r3
 8004392:	2044      	movs	r0, #68	@ 0x44
 8004394:	f7fe fdfc 	bl	8002f90 <writeReg16Bit>
 8004398:	0003      	movs	r3, r0
}
 800439a:	0018      	movs	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	b002      	add	sp, #8
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	46c0      	nop			@ (mov r8, r8)
 80043a4:	0a3d70a4 	.word	0x0a3d70a4
 80043a8:	407fffd7 	.word	0x407fffd7

080043ac <vl53l0x_set_measurement_timing_budget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
int8_t vl53l0x_set_measurement_timing_budget(uint32_t budget_us)
{
 80043ac:	b5b0      	push	{r4, r5, r7, lr}
 80043ae:	b092      	sub	sp, #72	@ 0x48
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 80043b4:	2347      	movs	r3, #71	@ 0x47
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]
	SequenceStepEnables enables;
	SequenceStepTimeouts timeouts;

	uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 80043bc:	233c      	movs	r3, #60	@ 0x3c
 80043be:	18fb      	adds	r3, r7, r3
 80043c0:	22a5      	movs	r2, #165	@ 0xa5
 80043c2:	00d2      	lsls	r2, r2, #3
 80043c4:	801a      	strh	r2, [r3, #0]
	uint16_t const EndOverhead        = 960;
 80043c6:	233a      	movs	r3, #58	@ 0x3a
 80043c8:	18fb      	adds	r3, r7, r3
 80043ca:	22f0      	movs	r2, #240	@ 0xf0
 80043cc:	0092      	lsls	r2, r2, #2
 80043ce:	801a      	strh	r2, [r3, #0]
	uint16_t const MsrcOverhead       = 660;
 80043d0:	2338      	movs	r3, #56	@ 0x38
 80043d2:	18fb      	adds	r3, r7, r3
 80043d4:	22a5      	movs	r2, #165	@ 0xa5
 80043d6:	0092      	lsls	r2, r2, #2
 80043d8:	801a      	strh	r2, [r3, #0]
	uint16_t const TccOverhead        = 590;
 80043da:	2336      	movs	r3, #54	@ 0x36
 80043dc:	18fb      	adds	r3, r7, r3
 80043de:	4a6a      	ldr	r2, [pc, #424]	@ (8004588 <vl53l0x_set_measurement_timing_budget+0x1dc>)
 80043e0:	801a      	strh	r2, [r3, #0]
	uint16_t const DssOverhead        = 690;
 80043e2:	2334      	movs	r3, #52	@ 0x34
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	4a69      	ldr	r2, [pc, #420]	@ (800458c <vl53l0x_set_measurement_timing_budget+0x1e0>)
 80043e8:	801a      	strh	r2, [r3, #0]
	uint16_t const PreRangeOverhead   = 660;
 80043ea:	2332      	movs	r3, #50	@ 0x32
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	22a5      	movs	r2, #165	@ 0xa5
 80043f0:	0092      	lsls	r2, r2, #2
 80043f2:	801a      	strh	r2, [r3, #0]
	uint16_t const FinalRangeOverhead = 550;
 80043f4:	2330      	movs	r3, #48	@ 0x30
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	4a65      	ldr	r2, [pc, #404]	@ (8004590 <vl53l0x_set_measurement_timing_budget+0x1e4>)
 80043fa:	801a      	strh	r2, [r3, #0]

	uint32_t const MinTimingBudget = 20000;
 80043fc:	4b65      	ldr	r3, [pc, #404]	@ (8004594 <vl53l0x_set_measurement_timing_budget+0x1e8>)
 80043fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (budget_us < MinTimingBudget) { return HAL_ERROR; }
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004404:	429a      	cmp	r2, r3
 8004406:	d201      	bcs.n	800440c <vl53l0x_set_measurement_timing_budget+0x60>
 8004408:	2301      	movs	r3, #1
 800440a:	e0b9      	b.n	8004580 <vl53l0x_set_measurement_timing_budget+0x1d4>

	uint32_t used_budget_us = StartOverhead + EndOverhead;
 800440c:	233c      	movs	r3, #60	@ 0x3c
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	881a      	ldrh	r2, [r3, #0]
 8004412:	233a      	movs	r3, #58	@ 0x3a
 8004414:	18fb      	adds	r3, r7, r3
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	18d3      	adds	r3, r2, r3
 800441a:	643b      	str	r3, [r7, #64]	@ 0x40

	status = vl53l0x_get_sequence_step_enables(&enables);
 800441c:	2547      	movs	r5, #71	@ 0x47
 800441e:	197c      	adds	r4, r7, r5
 8004420:	2320      	movs	r3, #32
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	0018      	movs	r0, r3
 8004426:	f001 f825 	bl	8005474 <vl53l0x_get_sequence_step_enables>
 800442a:	0003      	movs	r3, r0
 800442c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800442e:	197b      	adds	r3, r7, r5
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	b25b      	sxtb	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <vl53l0x_set_measurement_timing_budget+0x94>
 8004438:	197b      	adds	r3, r7, r5
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	b25b      	sxtb	r3, r3
 800443e:	e09f      	b.n	8004580 <vl53l0x_set_measurement_timing_budget+0x1d4>
	status = vl53l0x_get_sequence_step_timeouts(&enables, &timeouts);
 8004440:	2547      	movs	r5, #71	@ 0x47
 8004442:	197c      	adds	r4, r7, r5
 8004444:	2308      	movs	r3, #8
 8004446:	18fa      	adds	r2, r7, r3
 8004448:	2320      	movs	r3, #32
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	0011      	movs	r1, r2
 800444e:	0018      	movs	r0, r3
 8004450:	f001 f860 	bl	8005514 <vl53l0x_get_sequence_step_timeouts>
 8004454:	0003      	movs	r3, r0
 8004456:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004458:	197b      	adds	r3, r7, r5
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	b25b      	sxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <vl53l0x_set_measurement_timing_budget+0xbe>
 8004462:	197b      	adds	r3, r7, r5
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	b25b      	sxtb	r3, r3
 8004468:	e08a      	b.n	8004580 <vl53l0x_set_measurement_timing_budget+0x1d4>

	if(enables.tcc)
 800446a:	2320      	movs	r3, #32
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d009      	beq.n	8004488 <vl53l0x_set_measurement_timing_budget+0xdc>
	{
		used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8004474:	2308      	movs	r3, #8
 8004476:	18fb      	adds	r3, r7, r3
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	2336      	movs	r3, #54	@ 0x36
 800447c:	18fb      	adds	r3, r7, r3
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	18d3      	adds	r3, r2, r3
 8004482:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004484:	18d3      	adds	r3, r2, r3
 8004486:	643b      	str	r3, [r7, #64]	@ 0x40
	}

	if(enables.dss)
 8004488:	2320      	movs	r3, #32
 800448a:	18fb      	adds	r3, r7, r3
 800448c:	789b      	ldrb	r3, [r3, #2]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00b      	beq.n	80044aa <vl53l0x_set_measurement_timing_budget+0xfe>
	{
		used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8004492:	2308      	movs	r3, #8
 8004494:	18fb      	adds	r3, r7, r3
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	2334      	movs	r3, #52	@ 0x34
 800449a:	18fb      	adds	r3, r7, r3
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	18d3      	adds	r3, r2, r3
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044a4:	18d3      	adds	r3, r2, r3
 80044a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80044a8:	e00e      	b.n	80044c8 <vl53l0x_set_measurement_timing_budget+0x11c>
	}
	else if(enables.msrc)
 80044aa:	2320      	movs	r3, #32
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	785b      	ldrb	r3, [r3, #1]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d009      	beq.n	80044c8 <vl53l0x_set_measurement_timing_budget+0x11c>
	{
		used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80044b4:	2308      	movs	r3, #8
 80044b6:	18fb      	adds	r3, r7, r3
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	2338      	movs	r3, #56	@ 0x38
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	18d3      	adds	r3, r2, r3
 80044c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044c4:	18d3      	adds	r3, r2, r3
 80044c6:	643b      	str	r3, [r7, #64]	@ 0x40
	}

	if(enables.pre_range)
 80044c8:	2320      	movs	r3, #32
 80044ca:	18fb      	adds	r3, r7, r3
 80044cc:	78db      	ldrb	r3, [r3, #3]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <vl53l0x_set_measurement_timing_budget+0x13a>
	{
		used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80044d2:	2308      	movs	r3, #8
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	2332      	movs	r3, #50	@ 0x32
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	18d3      	adds	r3, r2, r3
 80044e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044e2:	18d3      	adds	r3, r2, r3
 80044e4:	643b      	str	r3, [r7, #64]	@ 0x40
	}

	if(enables.final_range)
 80044e6:	2320      	movs	r3, #32
 80044e8:	18fb      	adds	r3, r7, r3
 80044ea:	791b      	ldrb	r3, [r3, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d043      	beq.n	8004578 <vl53l0x_set_measurement_timing_budget+0x1cc>
	{
		used_budget_us += FinalRangeOverhead;
 80044f0:	2330      	movs	r3, #48	@ 0x30
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044f8:	18d3      	adds	r3, r2, r3
 80044fa:	643b      	str	r3, [r7, #64]	@ 0x40
		// budget and the sum of all other timeouts within the sequence.
		// If there is no room for the final range timeout, then an error
		// will be set. Otherwise the remaining time will be applied to
		// the final range."

		if(used_budget_us > budget_us)
 80044fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	429a      	cmp	r2, r3
 8004502:	d901      	bls.n	8004508 <vl53l0x_set_measurement_timing_budget+0x15c>
		{
			// "Requested timeout too big."
			return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e03b      	b.n	8004580 <vl53l0x_set_measurement_timing_budget+0x1d4>
		}

		uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	62bb      	str	r3, [r7, #40]	@ 0x28
		// "For the final range timeout, the pre-range timeout
		//  must be added. To do this both final and pre-range
		//  timeouts must be expressed in macro periods MClks
		//  because they have different vcsel periods."

		uint16_t final_range_timeout_mclks = vl53l0x_timeout_us_to_mclks(final_range_timeout_us, timeouts.final_range_vcsel_period_pclks);
 8004510:	2408      	movs	r4, #8
 8004512:	193b      	adds	r3, r7, r4
 8004514:	885b      	ldrh	r3, [r3, #2]
 8004516:	b2da      	uxtb	r2, r3
 8004518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451a:	0011      	movs	r1, r2
 800451c:	0018      	movs	r0, r3
 800451e:	f001 f93e 	bl	800579e <vl53l0x_timeout_us_to_mclks>
 8004522:	0002      	movs	r2, r0
 8004524:	203e      	movs	r0, #62	@ 0x3e
 8004526:	183b      	adds	r3, r7, r0
 8004528:	801a      	strh	r2, [r3, #0]

		if (enables.pre_range)
 800452a:	2320      	movs	r3, #32
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	78db      	ldrb	r3, [r3, #3]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d006      	beq.n	8004542 <vl53l0x_set_measurement_timing_budget+0x196>
		{
			final_range_timeout_mclks += timeouts.pre_range_mclks;
 8004534:	193b      	adds	r3, r7, r4
 8004536:	88d9      	ldrh	r1, [r3, #6]
 8004538:	183b      	adds	r3, r7, r0
 800453a:	183a      	adds	r2, r7, r0
 800453c:	8812      	ldrh	r2, [r2, #0]
 800453e:	188a      	adds	r2, r1, r2
 8004540:	801a      	strh	r2, [r3, #0]
		}

		status = writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, vl53l0x_encode_timeout(final_range_timeout_mclks));
 8004542:	233e      	movs	r3, #62	@ 0x3e
 8004544:	18fb      	adds	r3, r7, r3
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	0018      	movs	r0, r3
 800454a:	f001 f8c6 	bl	80056da <vl53l0x_encode_timeout>
 800454e:	0003      	movs	r3, r0
 8004550:	2547      	movs	r5, #71	@ 0x47
 8004552:	197c      	adds	r4, r7, r5
 8004554:	0019      	movs	r1, r3
 8004556:	2071      	movs	r0, #113	@ 0x71
 8004558:	f7fe fd1a 	bl	8002f90 <writeReg16Bit>
 800455c:	0003      	movs	r3, r0
 800455e:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8004560:	197b      	adds	r3, r7, r5
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	b25b      	sxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <vl53l0x_set_measurement_timing_budget+0x1c6>
 800456a:	197b      	adds	r3, r7, r5
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	b25b      	sxtb	r3, r3
 8004570:	e006      	b.n	8004580 <vl53l0x_set_measurement_timing_budget+0x1d4>
		// set_sequence_step_timeout() end

		g_measTimBudUs = budget_us; // store for internal reuse
 8004572:	4b09      	ldr	r3, [pc, #36]	@ (8004598 <vl53l0x_set_measurement_timing_budget+0x1ec>)
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	601a      	str	r2, [r3, #0]
	}
	return status;
 8004578:	2347      	movs	r3, #71	@ 0x47
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	b25b      	sxtb	r3, r3
}
 8004580:	0018      	movs	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	b012      	add	sp, #72	@ 0x48
 8004586:	bdb0      	pop	{r4, r5, r7, pc}
 8004588:	0000024e 	.word	0x0000024e
 800458c:	000002b2 	.word	0x000002b2
 8004590:	00000226 	.word	0x00000226
 8004594:	00004e20 	.word	0x00004e20
 8004598:	20000698 	.word	0x20000698

0800459c <vl53l0x_set_vcsel_pulse_period>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
int8_t vl53l0x_set_vcsel_pulse_period(vcselPeriodType type, uint8_t period_pclks)
{
 800459c:	b5b0      	push	{r4, r5, r7, lr}
 800459e:	b08e      	sub	sp, #56	@ 0x38
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	0002      	movs	r2, r0
 80045a4:	1dfb      	adds	r3, r7, #7
 80045a6:	701a      	strb	r2, [r3, #0]
 80045a8:	1dbb      	adds	r3, r7, #6
 80045aa:	1c0a      	adds	r2, r1, #0
 80045ac:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 80045ae:	2137      	movs	r1, #55	@ 0x37
 80045b0:	187b      	adds	r3, r7, r1
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]
	uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 80045b6:	1dbb      	adds	r3, r7, #6
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	085b      	lsrs	r3, r3, #1
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	2333      	movs	r3, #51	@ 0x33
 80045c0:	18fb      	adds	r3, r7, r3
 80045c2:	3a01      	subs	r2, #1
 80045c4:	701a      	strb	r2, [r3, #0]

	SequenceStepEnables enables;
	SequenceStepTimeouts timeouts;

	status = vl53l0x_get_sequence_step_enables(&enables);
 80045c6:	000d      	movs	r5, r1
 80045c8:	187c      	adds	r4, r7, r1
 80045ca:	2328      	movs	r3, #40	@ 0x28
 80045cc:	18fb      	adds	r3, r7, r3
 80045ce:	0018      	movs	r0, r3
 80045d0:	f000 ff50 	bl	8005474 <vl53l0x_get_sequence_step_enables>
 80045d4:	0003      	movs	r3, r0
 80045d6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80045d8:	197b      	adds	r3, r7, r5
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	b25b      	sxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d004      	beq.n	80045ec <vl53l0x_set_vcsel_pulse_period+0x50>
 80045e2:	197b      	adds	r3, r7, r5
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	b25b      	sxtb	r3, r3
 80045e8:	f000 fb64 	bl	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
	status = vl53l0x_get_sequence_step_timeouts(&enables, &timeouts);
 80045ec:	2537      	movs	r5, #55	@ 0x37
 80045ee:	197c      	adds	r4, r7, r5
 80045f0:	2310      	movs	r3, #16
 80045f2:	18fa      	adds	r2, r7, r3
 80045f4:	2328      	movs	r3, #40	@ 0x28
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	0011      	movs	r1, r2
 80045fa:	0018      	movs	r0, r3
 80045fc:	f000 ff8a 	bl	8005514 <vl53l0x_get_sequence_step_timeouts>
 8004600:	0003      	movs	r3, r0
 8004602:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004604:	197b      	adds	r3, r7, r5
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	b25b      	sxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <vl53l0x_set_vcsel_pulse_period+0x7a>
 800460e:	197b      	adds	r3, r7, r5
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	b25b      	sxtb	r3, r3
 8004614:	e34e      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
	//
	// For the MSRC timeout, the same applies - this timeout being
	// dependant on the pre-range vcsel period."


	if (type == VcselPeriodPreRange)
 8004616:	1dfb      	adds	r3, r7, #7
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d000      	beq.n	8004620 <vl53l0x_set_vcsel_pulse_period+0x84>
 800461e:	e0b2      	b.n	8004786 <vl53l0x_set_vcsel_pulse_period+0x1ea>
	{
		// "Set phase check limits"
		switch (period_pclks)
 8004620:	1dbb      	adds	r3, r7, #6
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b12      	cmp	r3, #18
 8004626:	d023      	beq.n	8004670 <vl53l0x_set_vcsel_pulse_period+0xd4>
 8004628:	dc2b      	bgt.n	8004682 <vl53l0x_set_vcsel_pulse_period+0xe6>
 800462a:	2b10      	cmp	r3, #16
 800462c:	d017      	beq.n	800465e <vl53l0x_set_vcsel_pulse_period+0xc2>
 800462e:	dc28      	bgt.n	8004682 <vl53l0x_set_vcsel_pulse_period+0xe6>
 8004630:	2b0c      	cmp	r3, #12
 8004632:	d002      	beq.n	800463a <vl53l0x_set_vcsel_pulse_period+0x9e>
 8004634:	2b0e      	cmp	r3, #14
 8004636:	d009      	beq.n	800464c <vl53l0x_set_vcsel_pulse_period+0xb0>
 8004638:	e023      	b.n	8004682 <vl53l0x_set_vcsel_pulse_period+0xe6>
		{
			case 12:
			{
				status = writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 800463a:	2337      	movs	r3, #55	@ 0x37
 800463c:	18fc      	adds	r4, r7, r3
 800463e:	2118      	movs	r1, #24
 8004640:	2057      	movs	r0, #87	@ 0x57
 8004642:	f7fe fc77 	bl	8002f34 <writeReg>
 8004646:	0003      	movs	r3, r0
 8004648:	7023      	strb	r3, [r4, #0]
				break;
 800464a:	e01c      	b.n	8004686 <vl53l0x_set_vcsel_pulse_period+0xea>
			}
			case 14:
			{
				status = writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 800464c:	2337      	movs	r3, #55	@ 0x37
 800464e:	18fc      	adds	r4, r7, r3
 8004650:	2130      	movs	r1, #48	@ 0x30
 8004652:	2057      	movs	r0, #87	@ 0x57
 8004654:	f7fe fc6e 	bl	8002f34 <writeReg>
 8004658:	0003      	movs	r3, r0
 800465a:	7023      	strb	r3, [r4, #0]
				break;
 800465c:	e013      	b.n	8004686 <vl53l0x_set_vcsel_pulse_period+0xea>
			}
			case 16:
			{
				status = writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 800465e:	2337      	movs	r3, #55	@ 0x37
 8004660:	18fc      	adds	r4, r7, r3
 8004662:	2140      	movs	r1, #64	@ 0x40
 8004664:	2057      	movs	r0, #87	@ 0x57
 8004666:	f7fe fc65 	bl	8002f34 <writeReg>
 800466a:	0003      	movs	r3, r0
 800466c:	7023      	strb	r3, [r4, #0]
				break;
 800466e:	e00a      	b.n	8004686 <vl53l0x_set_vcsel_pulse_period+0xea>
			}
			case 18:
			{
				status = writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8004670:	2337      	movs	r3, #55	@ 0x37
 8004672:	18fc      	adds	r4, r7, r3
 8004674:	2150      	movs	r1, #80	@ 0x50
 8004676:	2057      	movs	r0, #87	@ 0x57
 8004678:	f7fe fc5c 	bl	8002f34 <writeReg>
 800467c:	0003      	movs	r3, r0
 800467e:	7023      	strb	r3, [r4, #0]
				break;
 8004680:	e001      	b.n	8004686 <vl53l0x_set_vcsel_pulse_period+0xea>
			}
			default:
			{
				// invalid period
				return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e316      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
			}
		}
		if(status != HAL_OK){return status;}
 8004686:	2237      	movs	r2, #55	@ 0x37
 8004688:	18bb      	adds	r3, r7, r2
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	b25b      	sxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <vl53l0x_set_vcsel_pulse_period+0xfe>
 8004692:	18bb      	adds	r3, r7, r2
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	b25b      	sxtb	r3, r3
 8004698:	e30c      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
		status = writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 800469a:	2537      	movs	r5, #55	@ 0x37
 800469c:	197c      	adds	r4, r7, r5
 800469e:	2108      	movs	r1, #8
 80046a0:	2056      	movs	r0, #86	@ 0x56
 80046a2:	f7fe fc47 	bl	8002f34 <writeReg>
 80046a6:	0003      	movs	r3, r0
 80046a8:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 80046aa:	002a      	movs	r2, r5
 80046ac:	18bb      	adds	r3, r7, r2
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	b25b      	sxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <vl53l0x_set_vcsel_pulse_period+0x122>
 80046b6:	18bb      	adds	r3, r7, r2
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	b25b      	sxtb	r3, r3
 80046bc:	e2fa      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>

		// apply new VCSEL period
		status = writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 80046be:	2537      	movs	r5, #55	@ 0x37
 80046c0:	197c      	adds	r4, r7, r5
 80046c2:	2333      	movs	r3, #51	@ 0x33
 80046c4:	18fb      	adds	r3, r7, r3
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	0019      	movs	r1, r3
 80046ca:	2050      	movs	r0, #80	@ 0x50
 80046cc:	f7fe fc32 	bl	8002f34 <writeReg>
 80046d0:	0003      	movs	r3, r0
 80046d2:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 80046d4:	197b      	adds	r3, r7, r5
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	b25b      	sxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <vl53l0x_set_vcsel_pulse_period+0x14a>
 80046de:	197b      	adds	r3, r7, r5
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	b25b      	sxtb	r3, r3
 80046e4:	e2e6      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>

		// update timeouts
		// set_sequence_step_timeout() begin
		// (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)
		uint16_t new_pre_range_timeout_mclks = vl53l0x_timeout_us_to_mclks(timeouts.pre_range_us, period_pclks);
 80046e6:	2310      	movs	r3, #16
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	1dbb      	adds	r3, r7, #6
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	0019      	movs	r1, r3
 80046f2:	0010      	movs	r0, r2
 80046f4:	f001 f853 	bl	800579e <vl53l0x_timeout_us_to_mclks>
 80046f8:	0002      	movs	r2, r0
 80046fa:	2130      	movs	r1, #48	@ 0x30
 80046fc:	187b      	adds	r3, r7, r1
 80046fe:	801a      	strh	r2, [r3, #0]

		status = writeReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, vl53l0x_encode_timeout(new_pre_range_timeout_mclks));
 8004700:	187b      	adds	r3, r7, r1
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	0018      	movs	r0, r3
 8004706:	f000 ffe8 	bl	80056da <vl53l0x_encode_timeout>
 800470a:	0003      	movs	r3, r0
 800470c:	2537      	movs	r5, #55	@ 0x37
 800470e:	197c      	adds	r4, r7, r5
 8004710:	0019      	movs	r1, r3
 8004712:	2051      	movs	r0, #81	@ 0x51
 8004714:	f7fe fc3c 	bl	8002f90 <writeReg16Bit>
 8004718:	0003      	movs	r3, r0
 800471a:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 800471c:	197b      	adds	r3, r7, r5
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	b25b      	sxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <vl53l0x_set_vcsel_pulse_period+0x192>
 8004726:	197b      	adds	r3, r7, r5
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	b25b      	sxtb	r3, r3
 800472c:	e2c2      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
		// set_sequence_step_timeout() end

		// set_sequence_step_timeout() begin
		// (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)
		uint16_t new_msrc_timeout_mclks = vl53l0x_timeout_us_to_mclks(timeouts.msrc_dss_tcc_us, period_pclks);
 800472e:	2310      	movs	r3, #16
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	1dbb      	adds	r3, r7, #6
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	0019      	movs	r1, r3
 800473a:	0010      	movs	r0, r2
 800473c:	f001 f82f 	bl	800579e <vl53l0x_timeout_us_to_mclks>
 8004740:	0002      	movs	r2, r0
 8004742:	212e      	movs	r1, #46	@ 0x2e
 8004744:	187b      	adds	r3, r7, r1
 8004746:	801a      	strh	r2, [r3, #0]
		status = writeReg(MSRC_CONFIG_TIMEOUT_MACROP, (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 8004748:	187b      	adds	r3, r7, r1
 800474a:	881a      	ldrh	r2, [r3, #0]
 800474c:	2380      	movs	r3, #128	@ 0x80
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	429a      	cmp	r2, r3
 8004752:	d805      	bhi.n	8004760 <vl53l0x_set_vcsel_pulse_period+0x1c4>
 8004754:	187b      	adds	r3, r7, r1
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b2db      	uxtb	r3, r3
 800475e:	e000      	b.n	8004762 <vl53l0x_set_vcsel_pulse_period+0x1c6>
 8004760:	23ff      	movs	r3, #255	@ 0xff
 8004762:	2537      	movs	r5, #55	@ 0x37
 8004764:	197c      	adds	r4, r7, r5
 8004766:	0019      	movs	r1, r3
 8004768:	2046      	movs	r0, #70	@ 0x46
 800476a:	f7fe fbe3 	bl	8002f34 <writeReg>
 800476e:	0003      	movs	r3, r0
 8004770:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8004772:	197b      	adds	r3, r7, r5
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	b25b      	sxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d100      	bne.n	800477e <vl53l0x_set_vcsel_pulse_period+0x1e2>
 800477c:	e241      	b.n	8004c02 <vl53l0x_set_vcsel_pulse_period+0x666>
 800477e:	197b      	adds	r3, r7, r5
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	b25b      	sxtb	r3, r3
 8004784:	e296      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
		// set_sequence_step_timeout() end
	}
	else if (type == VcselPeriodFinalRange)
 8004786:	1dfb      	adds	r3, r7, #7
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d000      	beq.n	8004790 <vl53l0x_set_vcsel_pulse_period+0x1f4>
 800478e:	e236      	b.n	8004bfe <vl53l0x_set_vcsel_pulse_period+0x662>
	{
		switch (period_pclks)
 8004790:	1dbb      	adds	r3, r7, #6
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b0e      	cmp	r3, #14
 8004796:	d100      	bne.n	800479a <vl53l0x_set_vcsel_pulse_period+0x1fe>
 8004798:	e16b      	b.n	8004a72 <vl53l0x_set_vcsel_pulse_period+0x4d6>
 800479a:	dd00      	ble.n	800479e <vl53l0x_set_vcsel_pulse_period+0x202>
 800479c:	e1de      	b.n	8004b5c <vl53l0x_set_vcsel_pulse_period+0x5c0>
 800479e:	2b0c      	cmp	r3, #12
 80047a0:	d100      	bne.n	80047a4 <vl53l0x_set_vcsel_pulse_period+0x208>
 80047a2:	e0f1      	b.n	8004988 <vl53l0x_set_vcsel_pulse_period+0x3ec>
 80047a4:	dd00      	ble.n	80047a8 <vl53l0x_set_vcsel_pulse_period+0x20c>
 80047a6:	e1d9      	b.n	8004b5c <vl53l0x_set_vcsel_pulse_period+0x5c0>
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d003      	beq.n	80047b4 <vl53l0x_set_vcsel_pulse_period+0x218>
 80047ac:	2b0a      	cmp	r3, #10
 80047ae:	d100      	bne.n	80047b2 <vl53l0x_set_vcsel_pulse_period+0x216>
 80047b0:	e075      	b.n	800489e <vl53l0x_set_vcsel_pulse_period+0x302>
 80047b2:	e1d3      	b.n	8004b5c <vl53l0x_set_vcsel_pulse_period+0x5c0>
		{
			case 8:
			{
				status = writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 80047b4:	2537      	movs	r5, #55	@ 0x37
 80047b6:	197c      	adds	r4, r7, r5
 80047b8:	2110      	movs	r1, #16
 80047ba:	2048      	movs	r0, #72	@ 0x48
 80047bc:	f7fe fbba 	bl	8002f34 <writeReg>
 80047c0:	0003      	movs	r3, r0
 80047c2:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 80047c4:	002a      	movs	r2, r5
 80047c6:	18bb      	adds	r3, r7, r2
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	b25b      	sxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <vl53l0x_set_vcsel_pulse_period+0x23c>
 80047d0:	18bb      	adds	r3, r7, r2
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	b25b      	sxtb	r3, r3
 80047d6:	e26d      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80047d8:	2537      	movs	r5, #55	@ 0x37
 80047da:	197c      	adds	r4, r7, r5
 80047dc:	2108      	movs	r1, #8
 80047de:	2047      	movs	r0, #71	@ 0x47
 80047e0:	f7fe fba8 	bl	8002f34 <writeReg>
 80047e4:	0003      	movs	r3, r0
 80047e6:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 80047e8:	002a      	movs	r2, r5
 80047ea:	18bb      	adds	r3, r7, r2
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	b25b      	sxtb	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <vl53l0x_set_vcsel_pulse_period+0x260>
 80047f4:	18bb      	adds	r3, r7, r2
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	b25b      	sxtb	r3, r3
 80047fa:	e25b      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 80047fc:	2537      	movs	r5, #55	@ 0x37
 80047fe:	197c      	adds	r4, r7, r5
 8004800:	2102      	movs	r1, #2
 8004802:	2032      	movs	r0, #50	@ 0x32
 8004804:	f7fe fb96 	bl	8002f34 <writeReg>
 8004808:	0003      	movs	r3, r0
 800480a:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 800480c:	002a      	movs	r2, r5
 800480e:	18bb      	adds	r3, r7, r2
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	b25b      	sxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <vl53l0x_set_vcsel_pulse_period+0x284>
 8004818:	18bb      	adds	r3, r7, r2
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	b25b      	sxtb	r3, r3
 800481e:	e249      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 8004820:	2537      	movs	r5, #55	@ 0x37
 8004822:	197c      	adds	r4, r7, r5
 8004824:	210c      	movs	r1, #12
 8004826:	2030      	movs	r0, #48	@ 0x30
 8004828:	f7fe fb84 	bl	8002f34 <writeReg>
 800482c:	0003      	movs	r3, r0
 800482e:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004830:	002a      	movs	r2, r5
 8004832:	18bb      	adds	r3, r7, r2
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	b25b      	sxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <vl53l0x_set_vcsel_pulse_period+0x2a8>
 800483c:	18bb      	adds	r3, r7, r2
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	b25b      	sxtb	r3, r3
 8004842:	e237      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(0xFF, 0x01);
 8004844:	2537      	movs	r5, #55	@ 0x37
 8004846:	197c      	adds	r4, r7, r5
 8004848:	2101      	movs	r1, #1
 800484a:	20ff      	movs	r0, #255	@ 0xff
 800484c:	f7fe fb72 	bl	8002f34 <writeReg>
 8004850:	0003      	movs	r3, r0
 8004852:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004854:	002a      	movs	r2, r5
 8004856:	18bb      	adds	r3, r7, r2
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	b25b      	sxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <vl53l0x_set_vcsel_pulse_period+0x2cc>
 8004860:	18bb      	adds	r3, r7, r2
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	b25b      	sxtb	r3, r3
 8004866:	e225      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(ALGO_PHASECAL_LIM, 0x30);
 8004868:	2537      	movs	r5, #55	@ 0x37
 800486a:	197c      	adds	r4, r7, r5
 800486c:	2130      	movs	r1, #48	@ 0x30
 800486e:	2030      	movs	r0, #48	@ 0x30
 8004870:	f7fe fb60 	bl	8002f34 <writeReg>
 8004874:	0003      	movs	r3, r0
 8004876:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004878:	002a      	movs	r2, r5
 800487a:	18bb      	adds	r3, r7, r2
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	b25b      	sxtb	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <vl53l0x_set_vcsel_pulse_period+0x2f0>
 8004884:	18bb      	adds	r3, r7, r2
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	b25b      	sxtb	r3, r3
 800488a:	e213      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(0xFF, 0x00);
 800488c:	2337      	movs	r3, #55	@ 0x37
 800488e:	18fc      	adds	r4, r7, r3
 8004890:	2100      	movs	r1, #0
 8004892:	20ff      	movs	r0, #255	@ 0xff
 8004894:	f7fe fb4e 	bl	8002f34 <writeReg>
 8004898:	0003      	movs	r3, r0
 800489a:	7023      	strb	r3, [r4, #0]
				break;
 800489c:	e160      	b.n	8004b60 <vl53l0x_set_vcsel_pulse_period+0x5c4>
			}
			case 10:
			{
				status = writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 800489e:	2537      	movs	r5, #55	@ 0x37
 80048a0:	197c      	adds	r4, r7, r5
 80048a2:	2128      	movs	r1, #40	@ 0x28
 80048a4:	2048      	movs	r0, #72	@ 0x48
 80048a6:	f7fe fb45 	bl	8002f34 <writeReg>
 80048aa:	0003      	movs	r3, r0
 80048ac:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 80048ae:	002a      	movs	r2, r5
 80048b0:	18bb      	adds	r3, r7, r2
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	b25b      	sxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <vl53l0x_set_vcsel_pulse_period+0x326>
 80048ba:	18bb      	adds	r3, r7, r2
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	b25b      	sxtb	r3, r3
 80048c0:	e1f8      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80048c2:	2537      	movs	r5, #55	@ 0x37
 80048c4:	197c      	adds	r4, r7, r5
 80048c6:	2108      	movs	r1, #8
 80048c8:	2047      	movs	r0, #71	@ 0x47
 80048ca:	f7fe fb33 	bl	8002f34 <writeReg>
 80048ce:	0003      	movs	r3, r0
 80048d0:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 80048d2:	002a      	movs	r2, r5
 80048d4:	18bb      	adds	r3, r7, r2
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	b25b      	sxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <vl53l0x_set_vcsel_pulse_period+0x34a>
 80048de:	18bb      	adds	r3, r7, r2
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	b25b      	sxtb	r3, r3
 80048e4:	e1e6      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80048e6:	2537      	movs	r5, #55	@ 0x37
 80048e8:	197c      	adds	r4, r7, r5
 80048ea:	2103      	movs	r1, #3
 80048ec:	2032      	movs	r0, #50	@ 0x32
 80048ee:	f7fe fb21 	bl	8002f34 <writeReg>
 80048f2:	0003      	movs	r3, r0
 80048f4:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 80048f6:	002a      	movs	r2, r5
 80048f8:	18bb      	adds	r3, r7, r2
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	b25b      	sxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <vl53l0x_set_vcsel_pulse_period+0x36e>
 8004902:	18bb      	adds	r3, r7, r2
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	b25b      	sxtb	r3, r3
 8004908:	e1d4      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 800490a:	2537      	movs	r5, #55	@ 0x37
 800490c:	197c      	adds	r4, r7, r5
 800490e:	2109      	movs	r1, #9
 8004910:	2030      	movs	r0, #48	@ 0x30
 8004912:	f7fe fb0f 	bl	8002f34 <writeReg>
 8004916:	0003      	movs	r3, r0
 8004918:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 800491a:	002a      	movs	r2, r5
 800491c:	18bb      	adds	r3, r7, r2
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	b25b      	sxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <vl53l0x_set_vcsel_pulse_period+0x392>
 8004926:	18bb      	adds	r3, r7, r2
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	b25b      	sxtb	r3, r3
 800492c:	e1c2      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(0xFF, 0x01);
 800492e:	2537      	movs	r5, #55	@ 0x37
 8004930:	197c      	adds	r4, r7, r5
 8004932:	2101      	movs	r1, #1
 8004934:	20ff      	movs	r0, #255	@ 0xff
 8004936:	f7fe fafd 	bl	8002f34 <writeReg>
 800493a:	0003      	movs	r3, r0
 800493c:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 800493e:	002a      	movs	r2, r5
 8004940:	18bb      	adds	r3, r7, r2
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	b25b      	sxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <vl53l0x_set_vcsel_pulse_period+0x3b6>
 800494a:	18bb      	adds	r3, r7, r2
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	b25b      	sxtb	r3, r3
 8004950:	e1b0      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(ALGO_PHASECAL_LIM, 0x20);
 8004952:	2537      	movs	r5, #55	@ 0x37
 8004954:	197c      	adds	r4, r7, r5
 8004956:	2120      	movs	r1, #32
 8004958:	2030      	movs	r0, #48	@ 0x30
 800495a:	f7fe faeb 	bl	8002f34 <writeReg>
 800495e:	0003      	movs	r3, r0
 8004960:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004962:	002a      	movs	r2, r5
 8004964:	18bb      	adds	r3, r7, r2
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	b25b      	sxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <vl53l0x_set_vcsel_pulse_period+0x3da>
 800496e:	18bb      	adds	r3, r7, r2
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	b25b      	sxtb	r3, r3
 8004974:	e19e      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(0xFF, 0x00);
 8004976:	2337      	movs	r3, #55	@ 0x37
 8004978:	18fc      	adds	r4, r7, r3
 800497a:	2100      	movs	r1, #0
 800497c:	20ff      	movs	r0, #255	@ 0xff
 800497e:	f7fe fad9 	bl	8002f34 <writeReg>
 8004982:	0003      	movs	r3, r0
 8004984:	7023      	strb	r3, [r4, #0]
				break;
 8004986:	e0eb      	b.n	8004b60 <vl53l0x_set_vcsel_pulse_period+0x5c4>
			}
			case 12:
			{
				status = writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 8004988:	2537      	movs	r5, #55	@ 0x37
 800498a:	197c      	adds	r4, r7, r5
 800498c:	2138      	movs	r1, #56	@ 0x38
 800498e:	2048      	movs	r0, #72	@ 0x48
 8004990:	f7fe fad0 	bl	8002f34 <writeReg>
 8004994:	0003      	movs	r3, r0
 8004996:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004998:	002a      	movs	r2, r5
 800499a:	18bb      	adds	r3, r7, r2
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	b25b      	sxtb	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <vl53l0x_set_vcsel_pulse_period+0x410>
 80049a4:	18bb      	adds	r3, r7, r2
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	b25b      	sxtb	r3, r3
 80049aa:	e183      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80049ac:	2537      	movs	r5, #55	@ 0x37
 80049ae:	197c      	adds	r4, r7, r5
 80049b0:	2108      	movs	r1, #8
 80049b2:	2047      	movs	r0, #71	@ 0x47
 80049b4:	f7fe fabe 	bl	8002f34 <writeReg>
 80049b8:	0003      	movs	r3, r0
 80049ba:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 80049bc:	002a      	movs	r2, r5
 80049be:	18bb      	adds	r3, r7, r2
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	b25b      	sxtb	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <vl53l0x_set_vcsel_pulse_period+0x434>
 80049c8:	18bb      	adds	r3, r7, r2
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	b25b      	sxtb	r3, r3
 80049ce:	e171      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80049d0:	2537      	movs	r5, #55	@ 0x37
 80049d2:	197c      	adds	r4, r7, r5
 80049d4:	2103      	movs	r1, #3
 80049d6:	2032      	movs	r0, #50	@ 0x32
 80049d8:	f7fe faac 	bl	8002f34 <writeReg>
 80049dc:	0003      	movs	r3, r0
 80049de:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 80049e0:	002a      	movs	r2, r5
 80049e2:	18bb      	adds	r3, r7, r2
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	b25b      	sxtb	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <vl53l0x_set_vcsel_pulse_period+0x458>
 80049ec:	18bb      	adds	r3, r7, r2
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	b25b      	sxtb	r3, r3
 80049f2:	e15f      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 80049f4:	2537      	movs	r5, #55	@ 0x37
 80049f6:	197c      	adds	r4, r7, r5
 80049f8:	2108      	movs	r1, #8
 80049fa:	2030      	movs	r0, #48	@ 0x30
 80049fc:	f7fe fa9a 	bl	8002f34 <writeReg>
 8004a00:	0003      	movs	r3, r0
 8004a02:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004a04:	002a      	movs	r2, r5
 8004a06:	18bb      	adds	r3, r7, r2
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	b25b      	sxtb	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <vl53l0x_set_vcsel_pulse_period+0x47c>
 8004a10:	18bb      	adds	r3, r7, r2
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	b25b      	sxtb	r3, r3
 8004a16:	e14d      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(0xFF, 0x01);
 8004a18:	2537      	movs	r5, #55	@ 0x37
 8004a1a:	197c      	adds	r4, r7, r5
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	20ff      	movs	r0, #255	@ 0xff
 8004a20:	f7fe fa88 	bl	8002f34 <writeReg>
 8004a24:	0003      	movs	r3, r0
 8004a26:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004a28:	002a      	movs	r2, r5
 8004a2a:	18bb      	adds	r3, r7, r2
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	b25b      	sxtb	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <vl53l0x_set_vcsel_pulse_period+0x4a0>
 8004a34:	18bb      	adds	r3, r7, r2
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	b25b      	sxtb	r3, r3
 8004a3a:	e13b      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(ALGO_PHASECAL_LIM, 0x20);
 8004a3c:	2537      	movs	r5, #55	@ 0x37
 8004a3e:	197c      	adds	r4, r7, r5
 8004a40:	2120      	movs	r1, #32
 8004a42:	2030      	movs	r0, #48	@ 0x30
 8004a44:	f7fe fa76 	bl	8002f34 <writeReg>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004a4c:	002a      	movs	r2, r5
 8004a4e:	18bb      	adds	r3, r7, r2
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	b25b      	sxtb	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <vl53l0x_set_vcsel_pulse_period+0x4c4>
 8004a58:	18bb      	adds	r3, r7, r2
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	b25b      	sxtb	r3, r3
 8004a5e:	e129      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(0xFF, 0x00);
 8004a60:	2337      	movs	r3, #55	@ 0x37
 8004a62:	18fc      	adds	r4, r7, r3
 8004a64:	2100      	movs	r1, #0
 8004a66:	20ff      	movs	r0, #255	@ 0xff
 8004a68:	f7fe fa64 	bl	8002f34 <writeReg>
 8004a6c:	0003      	movs	r3, r0
 8004a6e:	7023      	strb	r3, [r4, #0]
				break;
 8004a70:	e076      	b.n	8004b60 <vl53l0x_set_vcsel_pulse_period+0x5c4>
			}
			case 14:
			{
				status = writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8004a72:	2537      	movs	r5, #55	@ 0x37
 8004a74:	197c      	adds	r4, r7, r5
 8004a76:	2148      	movs	r1, #72	@ 0x48
 8004a78:	2048      	movs	r0, #72	@ 0x48
 8004a7a:	f7fe fa5b 	bl	8002f34 <writeReg>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004a82:	002a      	movs	r2, r5
 8004a84:	18bb      	adds	r3, r7, r2
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	b25b      	sxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <vl53l0x_set_vcsel_pulse_period+0x4fa>
 8004a8e:	18bb      	adds	r3, r7, r2
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	b25b      	sxtb	r3, r3
 8004a94:	e10e      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8004a96:	2537      	movs	r5, #55	@ 0x37
 8004a98:	197c      	adds	r4, r7, r5
 8004a9a:	2108      	movs	r1, #8
 8004a9c:	2047      	movs	r0, #71	@ 0x47
 8004a9e:	f7fe fa49 	bl	8002f34 <writeReg>
 8004aa2:	0003      	movs	r3, r0
 8004aa4:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004aa6:	002a      	movs	r2, r5
 8004aa8:	18bb      	adds	r3, r7, r2
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	b25b      	sxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <vl53l0x_set_vcsel_pulse_period+0x51e>
 8004ab2:	18bb      	adds	r3, r7, r2
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	b25b      	sxtb	r3, r3
 8004ab8:	e0fc      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8004aba:	2537      	movs	r5, #55	@ 0x37
 8004abc:	197c      	adds	r4, r7, r5
 8004abe:	2103      	movs	r1, #3
 8004ac0:	2032      	movs	r0, #50	@ 0x32
 8004ac2:	f7fe fa37 	bl	8002f34 <writeReg>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004aca:	002a      	movs	r2, r5
 8004acc:	18bb      	adds	r3, r7, r2
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	b25b      	sxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <vl53l0x_set_vcsel_pulse_period+0x542>
 8004ad6:	18bb      	adds	r3, r7, r2
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	b25b      	sxtb	r3, r3
 8004adc:	e0ea      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 8004ade:	2537      	movs	r5, #55	@ 0x37
 8004ae0:	197c      	adds	r4, r7, r5
 8004ae2:	2107      	movs	r1, #7
 8004ae4:	2030      	movs	r0, #48	@ 0x30
 8004ae6:	f7fe fa25 	bl	8002f34 <writeReg>
 8004aea:	0003      	movs	r3, r0
 8004aec:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004aee:	002a      	movs	r2, r5
 8004af0:	18bb      	adds	r3, r7, r2
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	b25b      	sxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <vl53l0x_set_vcsel_pulse_period+0x566>
 8004afa:	18bb      	adds	r3, r7, r2
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	b25b      	sxtb	r3, r3
 8004b00:	e0d8      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(0xFF, 0x01);
 8004b02:	2537      	movs	r5, #55	@ 0x37
 8004b04:	197c      	adds	r4, r7, r5
 8004b06:	2101      	movs	r1, #1
 8004b08:	20ff      	movs	r0, #255	@ 0xff
 8004b0a:	f7fe fa13 	bl	8002f34 <writeReg>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004b12:	002a      	movs	r2, r5
 8004b14:	18bb      	adds	r3, r7, r2
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	b25b      	sxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <vl53l0x_set_vcsel_pulse_period+0x58a>
 8004b1e:	18bb      	adds	r3, r7, r2
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	b25b      	sxtb	r3, r3
 8004b24:	e0c6      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(ALGO_PHASECAL_LIM, 0x20);
 8004b26:	2537      	movs	r5, #55	@ 0x37
 8004b28:	197c      	adds	r4, r7, r5
 8004b2a:	2120      	movs	r1, #32
 8004b2c:	2030      	movs	r0, #48	@ 0x30
 8004b2e:	f7fe fa01 	bl	8002f34 <writeReg>
 8004b32:	0003      	movs	r3, r0
 8004b34:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004b36:	002a      	movs	r2, r5
 8004b38:	18bb      	adds	r3, r7, r2
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	b25b      	sxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <vl53l0x_set_vcsel_pulse_period+0x5ae>
 8004b42:	18bb      	adds	r3, r7, r2
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	b25b      	sxtb	r3, r3
 8004b48:	e0b4      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(0xFF, 0x00);
 8004b4a:	2337      	movs	r3, #55	@ 0x37
 8004b4c:	18fc      	adds	r4, r7, r3
 8004b4e:	2100      	movs	r1, #0
 8004b50:	20ff      	movs	r0, #255	@ 0xff
 8004b52:	f7fe f9ef 	bl	8002f34 <writeReg>
 8004b56:	0003      	movs	r3, r0
 8004b58:	7023      	strb	r3, [r4, #0]
				break;
 8004b5a:	e001      	b.n	8004b60 <vl53l0x_set_vcsel_pulse_period+0x5c4>
			}
			default:
			{
				// invalid period
				return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0a9      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
			}
		}
		if(status != HAL_OK){return status;}
 8004b60:	2237      	movs	r2, #55	@ 0x37
 8004b62:	18bb      	adds	r3, r7, r2
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	b25b      	sxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <vl53l0x_set_vcsel_pulse_period+0x5d8>
 8004b6c:	18bb      	adds	r3, r7, r2
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	b25b      	sxtb	r3, r3
 8004b72:	e09f      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>

		// apply new VCSEL period
		status = writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8004b74:	2537      	movs	r5, #55	@ 0x37
 8004b76:	197c      	adds	r4, r7, r5
 8004b78:	2333      	movs	r3, #51	@ 0x33
 8004b7a:	18fb      	adds	r3, r7, r3
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	0019      	movs	r1, r3
 8004b80:	2070      	movs	r0, #112	@ 0x70
 8004b82:	f7fe f9d7 	bl	8002f34 <writeReg>
 8004b86:	0003      	movs	r3, r0
 8004b88:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8004b8a:	197b      	adds	r3, r7, r5
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	b25b      	sxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <vl53l0x_set_vcsel_pulse_period+0x600>
 8004b94:	197b      	adds	r3, r7, r5
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	b25b      	sxtb	r3, r3
 8004b9a:	e08b      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>

		// "For the final range timeout, the pre-range timeout
		//  must be added. To do this both final and pre-range
		//  timeouts must be expressed in macro periods MClks
		//  because they have different vcsel periods."
		uint16_t new_final_range_timeout_mclks = vl53l0x_timeout_us_to_mclks(timeouts.final_range_us, period_pclks);
 8004b9c:	2410      	movs	r4, #16
 8004b9e:	193b      	adds	r3, r7, r4
 8004ba0:	695a      	ldr	r2, [r3, #20]
 8004ba2:	1dbb      	adds	r3, r7, #6
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	0019      	movs	r1, r3
 8004ba8:	0010      	movs	r0, r2
 8004baa:	f000 fdf8 	bl	800579e <vl53l0x_timeout_us_to_mclks>
 8004bae:	0002      	movs	r2, r0
 8004bb0:	2034      	movs	r0, #52	@ 0x34
 8004bb2:	183b      	adds	r3, r7, r0
 8004bb4:	801a      	strh	r2, [r3, #0]

		if (enables.pre_range)
 8004bb6:	2328      	movs	r3, #40	@ 0x28
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	78db      	ldrb	r3, [r3, #3]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d006      	beq.n	8004bce <vl53l0x_set_vcsel_pulse_period+0x632>
		{
			new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8004bc0:	193b      	adds	r3, r7, r4
 8004bc2:	88d9      	ldrh	r1, [r3, #6]
 8004bc4:	183b      	adds	r3, r7, r0
 8004bc6:	183a      	adds	r2, r7, r0
 8004bc8:	8812      	ldrh	r2, [r2, #0]
 8004bca:	188a      	adds	r2, r1, r2
 8004bcc:	801a      	strh	r2, [r3, #0]
		}
		status = writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, vl53l0x_encode_timeout(new_final_range_timeout_mclks));
 8004bce:	2334      	movs	r3, #52	@ 0x34
 8004bd0:	18fb      	adds	r3, r7, r3
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f000 fd80 	bl	80056da <vl53l0x_encode_timeout>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	2537      	movs	r5, #55	@ 0x37
 8004bde:	197c      	adds	r4, r7, r5
 8004be0:	0019      	movs	r1, r3
 8004be2:	2071      	movs	r0, #113	@ 0x71
 8004be4:	f7fe f9d4 	bl	8002f90 <writeReg16Bit>
 8004be8:	0003      	movs	r3, r0
 8004bea:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8004bec:	197b      	adds	r3, r7, r5
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	b25b      	sxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d005      	beq.n	8004c02 <vl53l0x_set_vcsel_pulse_period+0x666>
 8004bf6:	197b      	adds	r3, r7, r5
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	b25b      	sxtb	r3, r3
 8004bfc:	e05a      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
		// set_sequence_step_timeout end
	}
	else
	{
		// invalid type
		return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e058      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
	}

	// "Finally, the timing budget must be re-applied"
	status = vl53l0x_set_measurement_timing_budget(g_measTimBudUs);
 8004c02:	4b2e      	ldr	r3, [pc, #184]	@ (8004cbc <vl53l0x_set_vcsel_pulse_period+0x720>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2537      	movs	r5, #55	@ 0x37
 8004c08:	197c      	adds	r4, r7, r5
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f7ff fbce 	bl	80043ac <vl53l0x_set_measurement_timing_budget>
 8004c10:	0003      	movs	r3, r0
 8004c12:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004c14:	197b      	adds	r3, r7, r5
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	b25b      	sxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <vl53l0x_set_vcsel_pulse_period+0x68a>
 8004c1e:	197b      	adds	r3, r7, r5
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	b25b      	sxtb	r3, r3
 8004c24:	e046      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>


	// "Perform the phase calibration. This is needed after changing on vcsel period."
	// VL53L0X_perform_phase_calibration() begin

	uint8_t sequence_config = 0;
 8004c26:	210f      	movs	r1, #15
 8004c28:	187b      	adds	r3, r7, r1
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	701a      	strb	r2, [r3, #0]
	status = readReg(SYSTEM_SEQUENCE_CONFIG, &sequence_config);
 8004c2e:	2537      	movs	r5, #55	@ 0x37
 8004c30:	197c      	adds	r4, r7, r5
 8004c32:	187b      	adds	r3, r7, r1
 8004c34:	0019      	movs	r1, r3
 8004c36:	2001      	movs	r0, #1
 8004c38:	f7fe f9d8 	bl	8002fec <readReg>
 8004c3c:	0003      	movs	r3, r0
 8004c3e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004c40:	197b      	adds	r3, r7, r5
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	b25b      	sxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <vl53l0x_set_vcsel_pulse_period+0x6b6>
 8004c4a:	197b      	adds	r3, r7, r5
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	b25b      	sxtb	r3, r3
 8004c50:	e030      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
	status = writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8004c52:	2537      	movs	r5, #55	@ 0x37
 8004c54:	197c      	adds	r4, r7, r5
 8004c56:	2102      	movs	r1, #2
 8004c58:	2001      	movs	r0, #1
 8004c5a:	f7fe f96b 	bl	8002f34 <writeReg>
 8004c5e:	0003      	movs	r3, r0
 8004c60:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004c62:	002a      	movs	r2, r5
 8004c64:	18bb      	adds	r3, r7, r2
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	b25b      	sxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <vl53l0x_set_vcsel_pulse_period+0x6da>
 8004c6e:	18bb      	adds	r3, r7, r2
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	b25b      	sxtb	r3, r3
 8004c74:	e01e      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
	status = vl53l0x_single_reference_calibration(0x0);
 8004c76:	2537      	movs	r5, #55	@ 0x37
 8004c78:	197c      	adds	r4, r7, r5
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	f000 fdc0 	bl	8005800 <vl53l0x_single_reference_calibration>
 8004c80:	0003      	movs	r3, r0
 8004c82:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004c84:	002a      	movs	r2, r5
 8004c86:	18bb      	adds	r3, r7, r2
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	b25b      	sxtb	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <vl53l0x_set_vcsel_pulse_period+0x6fc>
 8004c90:	18bb      	adds	r3, r7, r2
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	b25b      	sxtb	r3, r3
 8004c96:	e00d      	b.n	8004cb4 <vl53l0x_set_vcsel_pulse_period+0x718>
	status = writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8004c98:	230f      	movs	r3, #15
 8004c9a:	18fb      	adds	r3, r7, r3
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2537      	movs	r5, #55	@ 0x37
 8004ca0:	197c      	adds	r4, r7, r5
 8004ca2:	0019      	movs	r1, r3
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	f7fe f945 	bl	8002f34 <writeReg>
 8004caa:	0003      	movs	r3, r0
 8004cac:	7023      	strb	r3, [r4, #0]
	// VL53L0X_perform_phase_calibration() end

	return status;
 8004cae:	197b      	adds	r3, r7, r5
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	b25b      	sxtb	r3, r3
}
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b00e      	add	sp, #56	@ 0x38
 8004cba:	bdb0      	pop	{r4, r5, r7, pc}
 8004cbc:	20000698 	.word	0x20000698

08004cc0 <vl53l0x_get_vcsel_pulse_period>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
int8_t vl53l0x_get_vcsel_pulse_period(vcselPeriodType type, uint8_t* period_pclks)
{
 8004cc0:	b5b0      	push	{r4, r5, r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	0002      	movs	r2, r0
 8004cc8:	6039      	str	r1, [r7, #0]
 8004cca:	1dfb      	adds	r3, r7, #7
 8004ccc:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8004cce:	210f      	movs	r1, #15
 8004cd0:	187b      	adds	r3, r7, r1
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	701a      	strb	r2, [r3, #0]
	uint8_t reg_value = 0;
 8004cd6:	200e      	movs	r0, #14
 8004cd8:	183b      	adds	r3, r7, r0
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
	if (type == VcselPeriodPreRange)
 8004cde:	1dfb      	adds	r3, r7, #7
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d11b      	bne.n	8004d1e <vl53l0x_get_vcsel_pulse_period+0x5e>
	{
		status = readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, &reg_value);
 8004ce6:	000d      	movs	r5, r1
 8004ce8:	187c      	adds	r4, r7, r1
 8004cea:	183b      	adds	r3, r7, r0
 8004cec:	0019      	movs	r1, r3
 8004cee:	2050      	movs	r0, #80	@ 0x50
 8004cf0:	f7fe f97c 	bl	8002fec <readReg>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8004cf8:	197b      	adds	r3, r7, r5
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	b25b      	sxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <vl53l0x_get_vcsel_pulse_period+0x4a>
 8004d02:	197b      	adds	r3, r7, r5
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	b25b      	sxtb	r3, r3
 8004d08:	e030      	b.n	8004d6c <vl53l0x_get_vcsel_pulse_period+0xac>
		(*period_pclks) = decodeVcselPeriod(reg_value);
 8004d0a:	230e      	movs	r3, #14
 8004d0c:	18fb      	adds	r3, r7, r3
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	3301      	adds	r3, #1
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	18db      	adds	r3, r3, r3
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	701a      	strb	r2, [r3, #0]
 8004d1c:	e022      	b.n	8004d64 <vl53l0x_get_vcsel_pulse_period+0xa4>
	}
	else if (type == VcselPeriodFinalRange)
 8004d1e:	1dfb      	adds	r3, r7, #7
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d11c      	bne.n	8004d60 <vl53l0x_get_vcsel_pulse_period+0xa0>
	{
		status = readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, &reg_value);
 8004d26:	250f      	movs	r5, #15
 8004d28:	197c      	adds	r4, r7, r5
 8004d2a:	230e      	movs	r3, #14
 8004d2c:	18fb      	adds	r3, r7, r3
 8004d2e:	0019      	movs	r1, r3
 8004d30:	2070      	movs	r0, #112	@ 0x70
 8004d32:	f7fe f95b 	bl	8002fec <readReg>
 8004d36:	0003      	movs	r3, r0
 8004d38:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8004d3a:	197b      	adds	r3, r7, r5
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	b25b      	sxtb	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <vl53l0x_get_vcsel_pulse_period+0x8c>
 8004d44:	197b      	adds	r3, r7, r5
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	b25b      	sxtb	r3, r3
 8004d4a:	e00f      	b.n	8004d6c <vl53l0x_get_vcsel_pulse_period+0xac>
		(*period_pclks) = decodeVcselPeriod(reg_value);
 8004d4c:	230e      	movs	r3, #14
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	3301      	adds	r3, #1
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	18db      	adds	r3, r3, r3
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	701a      	strb	r2, [r3, #0]
 8004d5e:	e001      	b.n	8004d64 <vl53l0x_get_vcsel_pulse_period+0xa4>
	}
	else
	{
		return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e003      	b.n	8004d6c <vl53l0x_get_vcsel_pulse_period+0xac>
	}
	return status;
 8004d64:	230f      	movs	r3, #15
 8004d66:	18fb      	adds	r3, r7, r3
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	b25b      	sxtb	r3, r3
}
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	b004      	add	sp, #16
 8004d72:	bdb0      	pop	{r4, r5, r7, pc}

08004d74 <vl53l0x_read_range_continuous>:
// Returns a range reading in millimeters when continuous mode is active
// (vl53l0x_read_range_single() also calls this function after starting a
// single-shot range measurement)
// extraStats provides additional info for this measurment. Set to 0 if not needed.
int8_t vl53l0x_read_range_continuous( statInfo_t_VL53L0X *extraStats, uint16_t* range_mm)
{
 8004d74:	b5b0      	push	{r4, r5, r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
	int8_t status = HAL_OK;
 8004d7e:	230f      	movs	r3, #15
 8004d80:	18fb      	adds	r3, r7, r3
 8004d82:	2200      	movs	r2, #0
 8004d84:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val = 0;
 8004d86:	230e      	movs	r3, #14
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	701a      	strb	r2, [r3, #0]
	startTimeout();
 8004d8e:	f000 fecd 	bl	8005b2c <HAL_GetTick>
 8004d92:	0003      	movs	r3, r0
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	4b51      	ldr	r3, [pc, #324]	@ (8004edc <vl53l0x_read_range_continuous+0x168>)
 8004d98:	801a      	strh	r2, [r3, #0]
	while((reg_val & 0x07) == 0)
 8004d9a:	e027      	b.n	8004dec <vl53l0x_read_range_continuous+0x78>
	{
		status = readReg(RESULT_INTERRUPT_STATUS, &reg_val);
 8004d9c:	250f      	movs	r5, #15
 8004d9e:	197c      	adds	r4, r7, r5
 8004da0:	230e      	movs	r3, #14
 8004da2:	18fb      	adds	r3, r7, r3
 8004da4:	0019      	movs	r1, r3
 8004da6:	2013      	movs	r0, #19
 8004da8:	f7fe f920 	bl	8002fec <readReg>
 8004dac:	0003      	movs	r3, r0
 8004dae:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8004db0:	197b      	adds	r3, r7, r5
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	b25b      	sxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <vl53l0x_read_range_continuous+0x4e>
 8004dba:	197b      	adds	r3, r7, r5
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	b25b      	sxtb	r3, r3
 8004dc0:	e088      	b.n	8004ed4 <vl53l0x_read_range_continuous+0x160>
		if(checkTimeoutExpired())
 8004dc2:	4b47      	ldr	r3, [pc, #284]	@ (8004ee0 <vl53l0x_read_range_continuous+0x16c>)
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d010      	beq.n	8004dec <vl53l0x_read_range_continuous+0x78>
 8004dca:	f000 feaf 	bl	8005b2c <HAL_GetTick>
 8004dce:	0003      	movs	r3, r0
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	001a      	movs	r2, r3
 8004dd4:	4b41      	ldr	r3, [pc, #260]	@ (8004edc <vl53l0x_read_range_continuous+0x168>)
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	4a41      	ldr	r2, [pc, #260]	@ (8004ee0 <vl53l0x_read_range_continuous+0x16c>)
 8004ddc:	8812      	ldrh	r2, [r2, #0]
 8004dde:	4293      	cmp	r3, r2
 8004de0:	dd04      	ble.n	8004dec <vl53l0x_read_range_continuous+0x78>
		{
			g_isTimeout = HAL_OK;
 8004de2:	4b40      	ldr	r3, [pc, #256]	@ (8004ee4 <vl53l0x_read_range_continuous+0x170>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	701a      	strb	r2, [r3, #0]
			return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e073      	b.n	8004ed4 <vl53l0x_read_range_continuous+0x160>
	while((reg_val & 0x07) == 0)
 8004dec:	230e      	movs	r3, #14
 8004dee:	18fb      	adds	r3, r7, r3
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	001a      	movs	r2, r3
 8004df4:	2307      	movs	r3, #7
 8004df6:	4013      	ands	r3, r2
 8004df8:	d0d0      	beq.n	8004d9c <vl53l0x_read_range_continuous+0x28>
		}
	}
	if(extraStats == 0)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d111      	bne.n	8004e24 <vl53l0x_read_range_continuous+0xb0>
	{
		// assumptions: Linearity Corrective Gain is 1000 (default);
		// fractional ranging is not enabled
		status = readReg16Bit(RESULT_RANGE_STATUS + 10, range_mm);
 8004e00:	250f      	movs	r5, #15
 8004e02:	197c      	adds	r4, r7, r5
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	0019      	movs	r1, r3
 8004e08:	201e      	movs	r0, #30
 8004e0a:	f7fe f923 	bl	8003054 <readReg16Bit>
 8004e0e:	0003      	movs	r3, r0
 8004e10:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8004e12:	197b      	adds	r3, r7, r5
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	b25b      	sxtb	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d050      	beq.n	8004ebe <vl53l0x_read_range_continuous+0x14a>
 8004e1c:	197b      	adds	r3, r7, r5
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	b25b      	sxtb	r3, r3
 8004e22:	e057      	b.n	8004ed4 <vl53l0x_read_range_continuous+0x160>
		//   4: 0 ?
		//   5: ???
		// 6,7: signal count rate [mcps], uint16_t, fixpoint9.7
		// 8,9: AmbientRateRtnMegaCps  [mcps], uint16_t, fixpoimt9.7
		// 10,11: uncorrected distance [mm], uint16_t
		status = readMulti(0x14, i2c_rx_buffer, 12);
 8004e24:	250f      	movs	r5, #15
 8004e26:	197c      	adds	r4, r7, r5
 8004e28:	4b2f      	ldr	r3, [pc, #188]	@ (8004ee8 <vl53l0x_read_range_continuous+0x174>)
 8004e2a:	220c      	movs	r2, #12
 8004e2c:	0019      	movs	r1, r3
 8004e2e:	2014      	movs	r0, #20
 8004e30:	f7fe f97c 	bl	800312c <readMulti>
 8004e34:	0003      	movs	r3, r0
 8004e36:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8004e38:	197b      	adds	r3, r7, r5
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	b25b      	sxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <vl53l0x_read_range_continuous+0xd6>
 8004e42:	197b      	adds	r3, r7, r5
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	b25b      	sxtb	r3, r3
 8004e48:	e044      	b.n	8004ed4 <vl53l0x_read_range_continuous+0x160>

		extraStats->rangeStatus =  i2c_rx_buffer[0]>>3;
 8004e4a:	4b27      	ldr	r3, [pc, #156]	@ (8004ee8 <vl53l0x_read_range_continuous+0x174>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	08db      	lsrs	r3, r3, #3
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	721a      	strb	r2, [r3, #8]
		extraStats->spadCnt     = (i2c_rx_buffer[2]<<8) | i2c_rx_buffer[3];
 8004e56:	4b24      	ldr	r3, [pc, #144]	@ (8004ee8 <vl53l0x_read_range_continuous+0x174>)
 8004e58:	789b      	ldrb	r3, [r3, #2]
 8004e5a:	021b      	lsls	r3, r3, #8
 8004e5c:	b21a      	sxth	r2, r3
 8004e5e:	4b22      	ldr	r3, [pc, #136]	@ (8004ee8 <vl53l0x_read_range_continuous+0x174>)
 8004e60:	78db      	ldrb	r3, [r3, #3]
 8004e62:	b21b      	sxth	r3, r3
 8004e64:	4313      	orrs	r3, r2
 8004e66:	b21b      	sxth	r3, r3
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	80da      	strh	r2, [r3, #6]
		extraStats->signalCnt   = (i2c_rx_buffer[6]<<8) | i2c_rx_buffer[7];
 8004e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ee8 <vl53l0x_read_range_continuous+0x174>)
 8004e70:	799b      	ldrb	r3, [r3, #6]
 8004e72:	021b      	lsls	r3, r3, #8
 8004e74:	b21a      	sxth	r2, r3
 8004e76:	4b1c      	ldr	r3, [pc, #112]	@ (8004ee8 <vl53l0x_read_range_continuous+0x174>)
 8004e78:	79db      	ldrb	r3, [r3, #7]
 8004e7a:	b21b      	sxth	r3, r3
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	b21b      	sxth	r3, r3
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	805a      	strh	r2, [r3, #2]
		extraStats->ambientCnt  = (i2c_rx_buffer[8]<<8) | i2c_rx_buffer[9];
 8004e86:	4b18      	ldr	r3, [pc, #96]	@ (8004ee8 <vl53l0x_read_range_continuous+0x174>)
 8004e88:	7a1b      	ldrb	r3, [r3, #8]
 8004e8a:	021b      	lsls	r3, r3, #8
 8004e8c:	b21a      	sxth	r2, r3
 8004e8e:	4b16      	ldr	r3, [pc, #88]	@ (8004ee8 <vl53l0x_read_range_continuous+0x174>)
 8004e90:	7a5b      	ldrb	r3, [r3, #9]
 8004e92:	b21b      	sxth	r3, r3
 8004e94:	4313      	orrs	r3, r2
 8004e96:	b21b      	sxth	r3, r3
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	809a      	strh	r2, [r3, #4]
		(*range_mm)             = (i2c_rx_buffer[10]<<8) | i2c_rx_buffer[11];
 8004e9e:	4b12      	ldr	r3, [pc, #72]	@ (8004ee8 <vl53l0x_read_range_continuous+0x174>)
 8004ea0:	7a9b      	ldrb	r3, [r3, #10]
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	b21a      	sxth	r2, r3
 8004ea6:	4b10      	ldr	r3, [pc, #64]	@ (8004ee8 <vl53l0x_read_range_continuous+0x174>)
 8004ea8:	7adb      	ldrb	r3, [r3, #11]
 8004eaa:	b21b      	sxth	r3, r3
 8004eac:	4313      	orrs	r3, r2
 8004eae:	b21b      	sxth	r3, r3
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	801a      	strh	r2, [r3, #0]
		extraStats->rawDistance = (*range_mm);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	881a      	ldrh	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	801a      	strh	r2, [r3, #0]
	}
	status = writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8004ebe:	250f      	movs	r5, #15
 8004ec0:	197c      	adds	r4, r7, r5
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	200b      	movs	r0, #11
 8004ec6:	f7fe f835 	bl	8002f34 <writeReg>
 8004eca:	0003      	movs	r3, r0
 8004ecc:	7023      	strb	r3, [r4, #0]
	return status;
 8004ece:	197b      	adds	r3, r7, r5
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	b25b      	sxtb	r3, r3
}
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	b004      	add	sp, #16
 8004eda:	bdb0      	pop	{r4, r5, r7, pc}
 8004edc:	20000692 	.word	0x20000692
 8004ee0:	2000068e 	.word	0x2000068e
 8004ee4:	20000690 	.word	0x20000690
 8004ee8:	20000680 	.word	0x20000680

08004eec <vl53l0x_read_range_single>:
// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
int8_t vl53l0x_read_range_single(statInfo_t_VL53L0X *extraStats, uint16_t* range_mm)
{
 8004eec:	b5b0      	push	{r4, r5, r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
	int8_t status = HAL_OK;
 8004ef6:	210f      	movs	r1, #15
 8004ef8:	187b      	adds	r3, r7, r1
 8004efa:	2200      	movs	r2, #0
 8004efc:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val = 1;
 8004efe:	230e      	movs	r3, #14
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	2201      	movs	r2, #1
 8004f04:	701a      	strb	r2, [r3, #0]
	status = writeReg(0x80, 0x01);
 8004f06:	000d      	movs	r5, r1
 8004f08:	187c      	adds	r4, r7, r1
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	2080      	movs	r0, #128	@ 0x80
 8004f0e:	f7fe f811 	bl	8002f34 <writeReg>
 8004f12:	0003      	movs	r3, r0
 8004f14:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004f16:	0029      	movs	r1, r5
 8004f18:	187b      	adds	r3, r7, r1
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	b25b      	sxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <vl53l0x_read_range_single+0x3e>
 8004f22:	187b      	adds	r3, r7, r1
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	b25b      	sxtb	r3, r3
 8004f28:	e0bb      	b.n	80050a2 <vl53l0x_read_range_single+0x1b6>
	status = writeReg(0xFF, 0x01);
 8004f2a:	250f      	movs	r5, #15
 8004f2c:	197c      	adds	r4, r7, r5
 8004f2e:	2101      	movs	r1, #1
 8004f30:	20ff      	movs	r0, #255	@ 0xff
 8004f32:	f7fd ffff 	bl	8002f34 <writeReg>
 8004f36:	0003      	movs	r3, r0
 8004f38:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004f3a:	002a      	movs	r2, r5
 8004f3c:	18bb      	adds	r3, r7, r2
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	b25b      	sxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <vl53l0x_read_range_single+0x62>
 8004f46:	18bb      	adds	r3, r7, r2
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	b25b      	sxtb	r3, r3
 8004f4c:	e0a9      	b.n	80050a2 <vl53l0x_read_range_single+0x1b6>
	status = writeReg(0x00, 0x00);
 8004f4e:	250f      	movs	r5, #15
 8004f50:	197c      	adds	r4, r7, r5
 8004f52:	2100      	movs	r1, #0
 8004f54:	2000      	movs	r0, #0
 8004f56:	f7fd ffed 	bl	8002f34 <writeReg>
 8004f5a:	0003      	movs	r3, r0
 8004f5c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004f5e:	002a      	movs	r2, r5
 8004f60:	18bb      	adds	r3, r7, r2
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	b25b      	sxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <vl53l0x_read_range_single+0x86>
 8004f6a:	18bb      	adds	r3, r7, r2
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b25b      	sxtb	r3, r3
 8004f70:	e097      	b.n	80050a2 <vl53l0x_read_range_single+0x1b6>
	status = writeReg(0x91, g_stopVariable);
 8004f72:	4b4e      	ldr	r3, [pc, #312]	@ (80050ac <vl53l0x_read_range_single+0x1c0>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	250f      	movs	r5, #15
 8004f78:	197c      	adds	r4, r7, r5
 8004f7a:	0019      	movs	r1, r3
 8004f7c:	2091      	movs	r0, #145	@ 0x91
 8004f7e:	f7fd ffd9 	bl	8002f34 <writeReg>
 8004f82:	0003      	movs	r3, r0
 8004f84:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004f86:	197b      	adds	r3, r7, r5
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	b25b      	sxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <vl53l0x_read_range_single+0xac>
 8004f90:	197b      	adds	r3, r7, r5
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	b25b      	sxtb	r3, r3
 8004f96:	e084      	b.n	80050a2 <vl53l0x_read_range_single+0x1b6>
	status = writeReg(0x00, 0x01);
 8004f98:	250f      	movs	r5, #15
 8004f9a:	197c      	adds	r4, r7, r5
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	f7fd ffc8 	bl	8002f34 <writeReg>
 8004fa4:	0003      	movs	r3, r0
 8004fa6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004fa8:	002a      	movs	r2, r5
 8004faa:	18bb      	adds	r3, r7, r2
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	b25b      	sxtb	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <vl53l0x_read_range_single+0xd0>
 8004fb4:	18bb      	adds	r3, r7, r2
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	b25b      	sxtb	r3, r3
 8004fba:	e072      	b.n	80050a2 <vl53l0x_read_range_single+0x1b6>
	status = writeReg(0xFF, 0x00);
 8004fbc:	250f      	movs	r5, #15
 8004fbe:	197c      	adds	r4, r7, r5
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	20ff      	movs	r0, #255	@ 0xff
 8004fc4:	f7fd ffb6 	bl	8002f34 <writeReg>
 8004fc8:	0003      	movs	r3, r0
 8004fca:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004fcc:	002a      	movs	r2, r5
 8004fce:	18bb      	adds	r3, r7, r2
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	b25b      	sxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <vl53l0x_read_range_single+0xf4>
 8004fd8:	18bb      	adds	r3, r7, r2
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	b25b      	sxtb	r3, r3
 8004fde:	e060      	b.n	80050a2 <vl53l0x_read_range_single+0x1b6>
	status = writeReg(0x80, 0x00);
 8004fe0:	250f      	movs	r5, #15
 8004fe2:	197c      	adds	r4, r7, r5
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	2080      	movs	r0, #128	@ 0x80
 8004fe8:	f7fd ffa4 	bl	8002f34 <writeReg>
 8004fec:	0003      	movs	r3, r0
 8004fee:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004ff0:	002a      	movs	r2, r5
 8004ff2:	18bb      	adds	r3, r7, r2
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	b25b      	sxtb	r3, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <vl53l0x_read_range_single+0x118>
 8004ffc:	18bb      	adds	r3, r7, r2
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	b25b      	sxtb	r3, r3
 8005002:	e04e      	b.n	80050a2 <vl53l0x_read_range_single+0x1b6>
	status = writeReg(SYSRANGE_START, 0x01);
 8005004:	250f      	movs	r5, #15
 8005006:	197c      	adds	r4, r7, r5
 8005008:	2101      	movs	r1, #1
 800500a:	2000      	movs	r0, #0
 800500c:	f7fd ff92 	bl	8002f34 <writeReg>
 8005010:	0003      	movs	r3, r0
 8005012:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005014:	002a      	movs	r2, r5
 8005016:	18bb      	adds	r3, r7, r2
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	b25b      	sxtb	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <vl53l0x_read_range_single+0x13c>
 8005020:	18bb      	adds	r3, r7, r2
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	b25b      	sxtb	r3, r3
 8005026:	e03c      	b.n	80050a2 <vl53l0x_read_range_single+0x1b6>

	// "Wait until start bit has been cleared"
	startTimeout();
 8005028:	f000 fd80 	bl	8005b2c <HAL_GetTick>
 800502c:	0003      	movs	r3, r0
 800502e:	b29a      	uxth	r2, r3
 8005030:	4b1f      	ldr	r3, [pc, #124]	@ (80050b0 <vl53l0x_read_range_single+0x1c4>)
 8005032:	801a      	strh	r2, [r3, #0]
	while(reg_val & 0x01)
 8005034:	e027      	b.n	8005086 <vl53l0x_read_range_single+0x19a>
	{
		status = readReg(SYSRANGE_START, &reg_val);
 8005036:	250f      	movs	r5, #15
 8005038:	197c      	adds	r4, r7, r5
 800503a:	230e      	movs	r3, #14
 800503c:	18fb      	adds	r3, r7, r3
 800503e:	0019      	movs	r1, r3
 8005040:	2000      	movs	r0, #0
 8005042:	f7fd ffd3 	bl	8002fec <readReg>
 8005046:	0003      	movs	r3, r0
 8005048:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 800504a:	197b      	adds	r3, r7, r5
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	b25b      	sxtb	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <vl53l0x_read_range_single+0x170>
 8005054:	197b      	adds	r3, r7, r5
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	b25b      	sxtb	r3, r3
 800505a:	e022      	b.n	80050a2 <vl53l0x_read_range_single+0x1b6>
		if (checkTimeoutExpired())
 800505c:	4b15      	ldr	r3, [pc, #84]	@ (80050b4 <vl53l0x_read_range_single+0x1c8>)
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d010      	beq.n	8005086 <vl53l0x_read_range_single+0x19a>
 8005064:	f000 fd62 	bl	8005b2c <HAL_GetTick>
 8005068:	0003      	movs	r3, r0
 800506a:	b29b      	uxth	r3, r3
 800506c:	001a      	movs	r2, r3
 800506e:	4b10      	ldr	r3, [pc, #64]	@ (80050b0 <vl53l0x_read_range_single+0x1c4>)
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	4a0f      	ldr	r2, [pc, #60]	@ (80050b4 <vl53l0x_read_range_single+0x1c8>)
 8005076:	8812      	ldrh	r2, [r2, #0]
 8005078:	4293      	cmp	r3, r2
 800507a:	dd04      	ble.n	8005086 <vl53l0x_read_range_single+0x19a>
		{
			g_isTimeout = HAL_OK;
 800507c:	4b0e      	ldr	r3, [pc, #56]	@ (80050b8 <vl53l0x_read_range_single+0x1cc>)
 800507e:	2200      	movs	r2, #0
 8005080:	701a      	strb	r2, [r3, #0]
			return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e00d      	b.n	80050a2 <vl53l0x_read_range_single+0x1b6>
	while(reg_val & 0x01)
 8005086:	230e      	movs	r3, #14
 8005088:	18fb      	adds	r3, r7, r3
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	001a      	movs	r2, r3
 800508e:	2301      	movs	r3, #1
 8005090:	4013      	ands	r3, r2
 8005092:	d1d0      	bne.n	8005036 <vl53l0x_read_range_single+0x14a>
		}
	}
	return vl53l0x_read_range_continuous(extraStats, range_mm);
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	0011      	movs	r1, r2
 800509a:	0018      	movs	r0, r3
 800509c:	f7ff fe6a 	bl	8004d74 <vl53l0x_read_range_continuous>
 80050a0:	0003      	movs	r3, r0
}
 80050a2:	0018      	movs	r0, r3
 80050a4:	46bd      	mov	sp, r7
 80050a6:	b004      	add	sp, #16
 80050a8:	bdb0      	pop	{r4, r5, r7, pc}
 80050aa:	46c0      	nop			@ (mov r8, r8)
 80050ac:	20000694 	.word	0x20000694
 80050b0:	20000692 	.word	0x20000692
 80050b4:	2000068e 	.word	0x2000068e
 80050b8:	20000690 	.word	0x20000690

080050bc <vl53l0x_get_spad_info>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
int8_t vl53l0x_get_spad_info(uint8_t * count, uint8_t * type_is_aperture)
{
 80050bc:	b5b0      	push	{r4, r5, r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
	int8_t status = HAL_OK;
 80050c6:	210f      	movs	r1, #15
 80050c8:	187b      	adds	r3, r7, r1
 80050ca:	2200      	movs	r2, #0
 80050cc:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val = 0;
 80050ce:	230e      	movs	r3, #14
 80050d0:	18fb      	adds	r3, r7, r3
 80050d2:	2200      	movs	r2, #0
 80050d4:	701a      	strb	r2, [r3, #0]

	status = writeReg(0x80, 0x01);
 80050d6:	000d      	movs	r5, r1
 80050d8:	187c      	adds	r4, r7, r1
 80050da:	2101      	movs	r1, #1
 80050dc:	2080      	movs	r0, #128	@ 0x80
 80050de:	f7fd ff29 	bl	8002f34 <writeReg>
 80050e2:	0003      	movs	r3, r0
 80050e4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80050e6:	0029      	movs	r1, r5
 80050e8:	187b      	adds	r3, r7, r1
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	b25b      	sxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <vl53l0x_get_spad_info+0x3e>
 80050f2:	187b      	adds	r3, r7, r1
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	b25b      	sxtb	r3, r3
 80050f8:	e1b3      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0xFF, 0x01);
 80050fa:	250f      	movs	r5, #15
 80050fc:	197c      	adds	r4, r7, r5
 80050fe:	2101      	movs	r1, #1
 8005100:	20ff      	movs	r0, #255	@ 0xff
 8005102:	f7fd ff17 	bl	8002f34 <writeReg>
 8005106:	0003      	movs	r3, r0
 8005108:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800510a:	002a      	movs	r2, r5
 800510c:	18bb      	adds	r3, r7, r2
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	b25b      	sxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <vl53l0x_get_spad_info+0x62>
 8005116:	18bb      	adds	r3, r7, r2
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	b25b      	sxtb	r3, r3
 800511c:	e1a1      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0x00, 0x00);
 800511e:	250f      	movs	r5, #15
 8005120:	197c      	adds	r4, r7, r5
 8005122:	2100      	movs	r1, #0
 8005124:	2000      	movs	r0, #0
 8005126:	f7fd ff05 	bl	8002f34 <writeReg>
 800512a:	0003      	movs	r3, r0
 800512c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800512e:	002a      	movs	r2, r5
 8005130:	18bb      	adds	r3, r7, r2
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	b25b      	sxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <vl53l0x_get_spad_info+0x86>
 800513a:	18bb      	adds	r3, r7, r2
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	b25b      	sxtb	r3, r3
 8005140:	e18f      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>

	status = writeReg(0xFF, 0x06);
 8005142:	250f      	movs	r5, #15
 8005144:	197c      	adds	r4, r7, r5
 8005146:	2106      	movs	r1, #6
 8005148:	20ff      	movs	r0, #255	@ 0xff
 800514a:	f7fd fef3 	bl	8002f34 <writeReg>
 800514e:	0003      	movs	r3, r0
 8005150:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005152:	002a      	movs	r2, r5
 8005154:	18bb      	adds	r3, r7, r2
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	b25b      	sxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <vl53l0x_get_spad_info+0xaa>
 800515e:	18bb      	adds	r3, r7, r2
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	b25b      	sxtb	r3, r3
 8005164:	e17d      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>
	status = readReg(0x83, &reg_val);
 8005166:	250f      	movs	r5, #15
 8005168:	197c      	adds	r4, r7, r5
 800516a:	230e      	movs	r3, #14
 800516c:	18fb      	adds	r3, r7, r3
 800516e:	0019      	movs	r1, r3
 8005170:	2083      	movs	r0, #131	@ 0x83
 8005172:	f7fd ff3b 	bl	8002fec <readReg>
 8005176:	0003      	movs	r3, r0
 8005178:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800517a:	197b      	adds	r3, r7, r5
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	b25b      	sxtb	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <vl53l0x_get_spad_info+0xd0>
 8005184:	197b      	adds	r3, r7, r5
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	b25b      	sxtb	r3, r3
 800518a:	e16a      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0x83, reg_val | 0x04);
 800518c:	230e      	movs	r3, #14
 800518e:	18fb      	adds	r3, r7, r3
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2204      	movs	r2, #4
 8005194:	4313      	orrs	r3, r2
 8005196:	b2db      	uxtb	r3, r3
 8005198:	250f      	movs	r5, #15
 800519a:	197c      	adds	r4, r7, r5
 800519c:	0019      	movs	r1, r3
 800519e:	2083      	movs	r0, #131	@ 0x83
 80051a0:	f7fd fec8 	bl	8002f34 <writeReg>
 80051a4:	0003      	movs	r3, r0
 80051a6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80051a8:	197b      	adds	r3, r7, r5
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	b25b      	sxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <vl53l0x_get_spad_info+0xfe>
 80051b2:	197b      	adds	r3, r7, r5
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	b25b      	sxtb	r3, r3
 80051b8:	e153      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>
	reg_val = 0;
 80051ba:	230e      	movs	r3, #14
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	2200      	movs	r2, #0
 80051c0:	701a      	strb	r2, [r3, #0]
	status = writeReg(0xFF, 0x07);
 80051c2:	250f      	movs	r5, #15
 80051c4:	197c      	adds	r4, r7, r5
 80051c6:	2107      	movs	r1, #7
 80051c8:	20ff      	movs	r0, #255	@ 0xff
 80051ca:	f7fd feb3 	bl	8002f34 <writeReg>
 80051ce:	0003      	movs	r3, r0
 80051d0:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80051d2:	002a      	movs	r2, r5
 80051d4:	18bb      	adds	r3, r7, r2
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	b25b      	sxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <vl53l0x_get_spad_info+0x12a>
 80051de:	18bb      	adds	r3, r7, r2
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	b25b      	sxtb	r3, r3
 80051e4:	e13d      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0x81, 0x01);
 80051e6:	250f      	movs	r5, #15
 80051e8:	197c      	adds	r4, r7, r5
 80051ea:	2101      	movs	r1, #1
 80051ec:	2081      	movs	r0, #129	@ 0x81
 80051ee:	f7fd fea1 	bl	8002f34 <writeReg>
 80051f2:	0003      	movs	r3, r0
 80051f4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80051f6:	002a      	movs	r2, r5
 80051f8:	18bb      	adds	r3, r7, r2
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	b25b      	sxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <vl53l0x_get_spad_info+0x14e>
 8005202:	18bb      	adds	r3, r7, r2
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	b25b      	sxtb	r3, r3
 8005208:	e12b      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>

	status = writeReg(0x80, 0x01);
 800520a:	250f      	movs	r5, #15
 800520c:	197c      	adds	r4, r7, r5
 800520e:	2101      	movs	r1, #1
 8005210:	2080      	movs	r0, #128	@ 0x80
 8005212:	f7fd fe8f 	bl	8002f34 <writeReg>
 8005216:	0003      	movs	r3, r0
 8005218:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800521a:	002a      	movs	r2, r5
 800521c:	18bb      	adds	r3, r7, r2
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	b25b      	sxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <vl53l0x_get_spad_info+0x172>
 8005226:	18bb      	adds	r3, r7, r2
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	b25b      	sxtb	r3, r3
 800522c:	e119      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>

	status = writeReg(0x94, 0x6b);
 800522e:	250f      	movs	r5, #15
 8005230:	197c      	adds	r4, r7, r5
 8005232:	216b      	movs	r1, #107	@ 0x6b
 8005234:	2094      	movs	r0, #148	@ 0x94
 8005236:	f7fd fe7d 	bl	8002f34 <writeReg>
 800523a:	0003      	movs	r3, r0
 800523c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800523e:	002a      	movs	r2, r5
 8005240:	18bb      	adds	r3, r7, r2
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	b25b      	sxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <vl53l0x_get_spad_info+0x196>
 800524a:	18bb      	adds	r3, r7, r2
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	b25b      	sxtb	r3, r3
 8005250:	e107      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0x83, 0x00);
 8005252:	250f      	movs	r5, #15
 8005254:	197c      	adds	r4, r7, r5
 8005256:	2100      	movs	r1, #0
 8005258:	2083      	movs	r0, #131	@ 0x83
 800525a:	f7fd fe6b 	bl	8002f34 <writeReg>
 800525e:	0003      	movs	r3, r0
 8005260:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005262:	002a      	movs	r2, r5
 8005264:	18bb      	adds	r3, r7, r2
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	b25b      	sxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <vl53l0x_get_spad_info+0x1ba>
 800526e:	18bb      	adds	r3, r7, r2
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	b25b      	sxtb	r3, r3
 8005274:	e0f5      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>

	startTimeout();
 8005276:	f000 fc59 	bl	8005b2c <HAL_GetTick>
 800527a:	0003      	movs	r3, r0
 800527c:	b29a      	uxth	r2, r3
 800527e:	4b7b      	ldr	r3, [pc, #492]	@ (800546c <vl53l0x_get_spad_info+0x3b0>)
 8005280:	801a      	strh	r2, [r3, #0]
	while(reg_val == 0x00)
 8005282:	e024      	b.n	80052ce <vl53l0x_get_spad_info+0x212>
	{
		status = readReg(0x83, &reg_val);
 8005284:	250f      	movs	r5, #15
 8005286:	197c      	adds	r4, r7, r5
 8005288:	230e      	movs	r3, #14
 800528a:	18fb      	adds	r3, r7, r3
 800528c:	0019      	movs	r1, r3
 800528e:	2083      	movs	r0, #131	@ 0x83
 8005290:	f7fd feac 	bl	8002fec <readReg>
 8005294:	0003      	movs	r3, r0
 8005296:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8005298:	197b      	adds	r3, r7, r5
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	b25b      	sxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <vl53l0x_get_spad_info+0x1ee>
 80052a2:	197b      	adds	r3, r7, r5
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	b25b      	sxtb	r3, r3
 80052a8:	e0db      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>
		if (checkTimeoutExpired())
 80052aa:	4b71      	ldr	r3, [pc, #452]	@ (8005470 <vl53l0x_get_spad_info+0x3b4>)
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00d      	beq.n	80052ce <vl53l0x_get_spad_info+0x212>
 80052b2:	f000 fc3b 	bl	8005b2c <HAL_GetTick>
 80052b6:	0003      	movs	r3, r0
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	001a      	movs	r2, r3
 80052bc:	4b6b      	ldr	r3, [pc, #428]	@ (800546c <vl53l0x_get_spad_info+0x3b0>)
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	4a6b      	ldr	r2, [pc, #428]	@ (8005470 <vl53l0x_get_spad_info+0x3b4>)
 80052c4:	8812      	ldrh	r2, [r2, #0]
 80052c6:	4293      	cmp	r3, r2
 80052c8:	dd01      	ble.n	80052ce <vl53l0x_get_spad_info+0x212>
		{
			return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e0c9      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>
	while(reg_val == 0x00)
 80052ce:	230e      	movs	r3, #14
 80052d0:	18fb      	adds	r3, r7, r3
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0d5      	beq.n	8005284 <vl53l0x_get_spad_info+0x1c8>
		}
	}
	status = writeReg(0x83, 0x01);
 80052d8:	250f      	movs	r5, #15
 80052da:	197c      	adds	r4, r7, r5
 80052dc:	2101      	movs	r1, #1
 80052de:	2083      	movs	r0, #131	@ 0x83
 80052e0:	f7fd fe28 	bl	8002f34 <writeReg>
 80052e4:	0003      	movs	r3, r0
 80052e6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80052e8:	002a      	movs	r2, r5
 80052ea:	18bb      	adds	r3, r7, r2
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	b25b      	sxtb	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <vl53l0x_get_spad_info+0x240>
 80052f4:	18bb      	adds	r3, r7, r2
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	b25b      	sxtb	r3, r3
 80052fa:	e0b2      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>
	status = readReg(0x92, &reg_val);
 80052fc:	250f      	movs	r5, #15
 80052fe:	197c      	adds	r4, r7, r5
 8005300:	230e      	movs	r3, #14
 8005302:	18fb      	adds	r3, r7, r3
 8005304:	0019      	movs	r1, r3
 8005306:	2092      	movs	r0, #146	@ 0x92
 8005308:	f7fd fe70 	bl	8002fec <readReg>
 800530c:	0003      	movs	r3, r0
 800530e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005310:	197b      	adds	r3, r7, r5
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	b25b      	sxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <vl53l0x_get_spad_info+0x266>
 800531a:	197b      	adds	r3, r7, r5
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	b25b      	sxtb	r3, r3
 8005320:	e09f      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>

	*count = reg_val & 0x7f;
 8005322:	210e      	movs	r1, #14
 8005324:	187b      	adds	r3, r7, r1
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	227f      	movs	r2, #127	@ 0x7f
 800532a:	4013      	ands	r3, r2
 800532c:	b2da      	uxtb	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	701a      	strb	r2, [r3, #0]
	*type_is_aperture = (reg_val >> 7) & 0x01;
 8005332:	187b      	adds	r3, r7, r1
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	09db      	lsrs	r3, r3, #7
 8005338:	b2da      	uxtb	r2, r3
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	701a      	strb	r2, [r3, #0]
	reg_val = 0;
 800533e:	187b      	adds	r3, r7, r1
 8005340:	2200      	movs	r2, #0
 8005342:	701a      	strb	r2, [r3, #0]

	status = writeReg(0x81, 0x00);
 8005344:	250f      	movs	r5, #15
 8005346:	197c      	adds	r4, r7, r5
 8005348:	2100      	movs	r1, #0
 800534a:	2081      	movs	r0, #129	@ 0x81
 800534c:	f7fd fdf2 	bl	8002f34 <writeReg>
 8005350:	0003      	movs	r3, r0
 8005352:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005354:	002a      	movs	r2, r5
 8005356:	18bb      	adds	r3, r7, r2
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	b25b      	sxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <vl53l0x_get_spad_info+0x2ac>
 8005360:	18bb      	adds	r3, r7, r2
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	b25b      	sxtb	r3, r3
 8005366:	e07c      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0xFF, 0x06);
 8005368:	250f      	movs	r5, #15
 800536a:	197c      	adds	r4, r7, r5
 800536c:	2106      	movs	r1, #6
 800536e:	20ff      	movs	r0, #255	@ 0xff
 8005370:	f7fd fde0 	bl	8002f34 <writeReg>
 8005374:	0003      	movs	r3, r0
 8005376:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005378:	002a      	movs	r2, r5
 800537a:	18bb      	adds	r3, r7, r2
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	b25b      	sxtb	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <vl53l0x_get_spad_info+0x2d0>
 8005384:	18bb      	adds	r3, r7, r2
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	b25b      	sxtb	r3, r3
 800538a:	e06a      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>
	status = readReg(0x83, &reg_val);
 800538c:	250f      	movs	r5, #15
 800538e:	197c      	adds	r4, r7, r5
 8005390:	230e      	movs	r3, #14
 8005392:	18fb      	adds	r3, r7, r3
 8005394:	0019      	movs	r1, r3
 8005396:	2083      	movs	r0, #131	@ 0x83
 8005398:	f7fd fe28 	bl	8002fec <readReg>
 800539c:	0003      	movs	r3, r0
 800539e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80053a0:	197b      	adds	r3, r7, r5
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	b25b      	sxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <vl53l0x_get_spad_info+0x2f6>
 80053aa:	197b      	adds	r3, r7, r5
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	b25b      	sxtb	r3, r3
 80053b0:	e057      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0x83, reg_val & ~0x04);
 80053b2:	230e      	movs	r3, #14
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2204      	movs	r2, #4
 80053ba:	4393      	bics	r3, r2
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	250f      	movs	r5, #15
 80053c0:	197c      	adds	r4, r7, r5
 80053c2:	0019      	movs	r1, r3
 80053c4:	2083      	movs	r0, #131	@ 0x83
 80053c6:	f7fd fdb5 	bl	8002f34 <writeReg>
 80053ca:	0003      	movs	r3, r0
 80053cc:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80053ce:	197b      	adds	r3, r7, r5
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	b25b      	sxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <vl53l0x_get_spad_info+0x324>
 80053d8:	197b      	adds	r3, r7, r5
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	b25b      	sxtb	r3, r3
 80053de:	e040      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0xFF, 0x01);
 80053e0:	250f      	movs	r5, #15
 80053e2:	197c      	adds	r4, r7, r5
 80053e4:	2101      	movs	r1, #1
 80053e6:	20ff      	movs	r0, #255	@ 0xff
 80053e8:	f7fd fda4 	bl	8002f34 <writeReg>
 80053ec:	0003      	movs	r3, r0
 80053ee:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80053f0:	002a      	movs	r2, r5
 80053f2:	18bb      	adds	r3, r7, r2
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	b25b      	sxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <vl53l0x_get_spad_info+0x348>
 80053fc:	18bb      	adds	r3, r7, r2
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	b25b      	sxtb	r3, r3
 8005402:	e02e      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0x00, 0x01);
 8005404:	250f      	movs	r5, #15
 8005406:	197c      	adds	r4, r7, r5
 8005408:	2101      	movs	r1, #1
 800540a:	2000      	movs	r0, #0
 800540c:	f7fd fd92 	bl	8002f34 <writeReg>
 8005410:	0003      	movs	r3, r0
 8005412:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005414:	002a      	movs	r2, r5
 8005416:	18bb      	adds	r3, r7, r2
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	b25b      	sxtb	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <vl53l0x_get_spad_info+0x36c>
 8005420:	18bb      	adds	r3, r7, r2
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	b25b      	sxtb	r3, r3
 8005426:	e01c      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>

	status = writeReg(0xFF, 0x00);
 8005428:	250f      	movs	r5, #15
 800542a:	197c      	adds	r4, r7, r5
 800542c:	2100      	movs	r1, #0
 800542e:	20ff      	movs	r0, #255	@ 0xff
 8005430:	f7fd fd80 	bl	8002f34 <writeReg>
 8005434:	0003      	movs	r3, r0
 8005436:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005438:	002a      	movs	r2, r5
 800543a:	18bb      	adds	r3, r7, r2
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	b25b      	sxtb	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <vl53l0x_get_spad_info+0x390>
 8005444:	18bb      	adds	r3, r7, r2
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	b25b      	sxtb	r3, r3
 800544a:	e00a      	b.n	8005462 <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0x80, 0x00);
 800544c:	250f      	movs	r5, #15
 800544e:	197c      	adds	r4, r7, r5
 8005450:	2100      	movs	r1, #0
 8005452:	2080      	movs	r0, #128	@ 0x80
 8005454:	f7fd fd6e 	bl	8002f34 <writeReg>
 8005458:	0003      	movs	r3, r0
 800545a:	7023      	strb	r3, [r4, #0]

	return status;
 800545c:	197b      	adds	r3, r7, r5
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	b25b      	sxtb	r3, r3
}
 8005462:	0018      	movs	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	b004      	add	sp, #16
 8005468:	bdb0      	pop	{r4, r5, r7, pc}
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	20000692 	.word	0x20000692
 8005470:	2000068e 	.word	0x2000068e

08005474 <vl53l0x_get_sequence_step_enables>:

// Get sequence step enables
// based on VL53L0X_vl53l0x_get_sequence_step_enables()
int8_t vl53l0x_get_sequence_step_enables(SequenceStepEnables * enables)
{
 8005474:	b5b0      	push	{r4, r5, r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 800547c:	250f      	movs	r5, #15
 800547e:	197b      	adds	r3, r7, r5
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
	uint8_t sequence_config = 0;
 8005484:	210e      	movs	r1, #14
 8005486:	187b      	adds	r3, r7, r1
 8005488:	2200      	movs	r2, #0
 800548a:	701a      	strb	r2, [r3, #0]
	status = readReg(SYSTEM_SEQUENCE_CONFIG, &sequence_config);
 800548c:	197c      	adds	r4, r7, r5
 800548e:	187b      	adds	r3, r7, r1
 8005490:	0019      	movs	r1, r3
 8005492:	2001      	movs	r0, #1
 8005494:	f7fd fdaa 	bl	8002fec <readReg>
 8005498:	0003      	movs	r3, r0
 800549a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800549c:	197b      	adds	r3, r7, r5
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	b25b      	sxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <vl53l0x_get_sequence_step_enables+0x3a>
 80054a6:	197b      	adds	r3, r7, r5
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	b25b      	sxtb	r3, r3
 80054ac:	e02e      	b.n	800550c <vl53l0x_get_sequence_step_enables+0x98>

	enables->tcc          = (sequence_config >> 4) & 0x1;
 80054ae:	210e      	movs	r1, #14
 80054b0:	187b      	adds	r3, r7, r1
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	091b      	lsrs	r3, r3, #4
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2201      	movs	r2, #1
 80054ba:	4013      	ands	r3, r2
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	701a      	strb	r2, [r3, #0]
	enables->dss          = (sequence_config >> 3) & 0x1;
 80054c2:	187b      	adds	r3, r7, r1
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	08db      	lsrs	r3, r3, #3
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2201      	movs	r2, #1
 80054cc:	4013      	ands	r3, r2
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	709a      	strb	r2, [r3, #2]
	enables->msrc         = (sequence_config >> 2) & 0x1;
 80054d4:	187b      	adds	r3, r7, r1
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	089b      	lsrs	r3, r3, #2
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2201      	movs	r2, #1
 80054de:	4013      	ands	r3, r2
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	705a      	strb	r2, [r3, #1]
	enables->pre_range    = (sequence_config >> 6) & 0x1;
 80054e6:	187b      	adds	r3, r7, r1
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	099b      	lsrs	r3, r3, #6
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2201      	movs	r2, #1
 80054f0:	4013      	ands	r3, r2
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	70da      	strb	r2, [r3, #3]
	enables->final_range  = (sequence_config >> 7) & 0x1;
 80054f8:	187b      	adds	r3, r7, r1
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	09db      	lsrs	r3, r3, #7
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	711a      	strb	r2, [r3, #4]

	return status;
 8005504:	230f      	movs	r3, #15
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	b25b      	sxtb	r3, r3
}
 800550c:	0018      	movs	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	b004      	add	sp, #16
 8005512:	bdb0      	pop	{r4, r5, r7, pc}

08005514 <vl53l0x_get_sequence_step_timeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
int8_t vl53l0x_get_sequence_step_timeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 8005514:	b5b0      	push	{r4, r5, r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
	int8_t status = HAL_OK;
 800551e:	210f      	movs	r1, #15
 8005520:	187b      	adds	r3, r7, r1
 8005522:	2200      	movs	r2, #0
 8005524:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val_8 = 0;
 8005526:	200e      	movs	r0, #14
 8005528:	183b      	adds	r3, r7, r0
 800552a:	2200      	movs	r2, #0
 800552c:	701a      	strb	r2, [r3, #0]
	uint16_t reg_val_16 = 0;
 800552e:	230c      	movs	r3, #12
 8005530:	18fb      	adds	r3, r7, r3
 8005532:	2200      	movs	r2, #0
 8005534:	801a      	strh	r2, [r3, #0]

	status = vl53l0x_get_vcsel_pulse_period(VcselPeriodPreRange, &reg_val_8);
 8005536:	000d      	movs	r5, r1
 8005538:	187c      	adds	r4, r7, r1
 800553a:	183b      	adds	r3, r7, r0
 800553c:	0019      	movs	r1, r3
 800553e:	2000      	movs	r0, #0
 8005540:	f7ff fbbe 	bl	8004cc0 <vl53l0x_get_vcsel_pulse_period>
 8005544:	0003      	movs	r3, r0
 8005546:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005548:	197b      	adds	r3, r7, r5
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	b25b      	sxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <vl53l0x_get_sequence_step_timeouts+0x46>
 8005552:	197b      	adds	r3, r7, r5
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	b25b      	sxtb	r3, r3
 8005558:	e0a5      	b.n	80056a6 <vl53l0x_get_sequence_step_timeouts+0x192>
	timeouts->pre_range_vcsel_period_pclks = reg_val_8;
 800555a:	210e      	movs	r1, #14
 800555c:	187b      	adds	r3, r7, r1
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	001a      	movs	r2, r3
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	801a      	strh	r2, [r3, #0]

	status = readReg(MSRC_CONFIG_TIMEOUT_MACROP, &reg_val_8);
 8005566:	250f      	movs	r5, #15
 8005568:	197c      	adds	r4, r7, r5
 800556a:	187b      	adds	r3, r7, r1
 800556c:	0019      	movs	r1, r3
 800556e:	2046      	movs	r0, #70	@ 0x46
 8005570:	f7fd fd3c 	bl	8002fec <readReg>
 8005574:	0003      	movs	r3, r0
 8005576:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005578:	197b      	adds	r3, r7, r5
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	b25b      	sxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <vl53l0x_get_sequence_step_timeouts+0x76>
 8005582:	197b      	adds	r3, r7, r5
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	b25b      	sxtb	r3, r3
 8005588:	e08d      	b.n	80056a6 <vl53l0x_get_sequence_step_timeouts+0x192>
	timeouts->msrc_dss_tcc_mclks = reg_val_8 + 1;
 800558a:	230e      	movs	r3, #14
 800558c:	18fb      	adds	r3, r7, r3
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	3301      	adds	r3, #1
 8005592:	b29a      	uxth	r2, r3
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	809a      	strh	r2, [r3, #4]
	timeouts->msrc_dss_tcc_us =
	vl53l0x_timeout_mclks_to_us(timeouts->msrc_dss_tcc_mclks,
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	889a      	ldrh	r2, [r3, #4]
						   timeouts->pre_range_vcsel_period_pclks);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	881b      	ldrh	r3, [r3, #0]
	vl53l0x_timeout_mclks_to_us(timeouts->msrc_dss_tcc_mclks,
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	0019      	movs	r1, r3
 80055a4:	0010      	movs	r0, r2
 80055a6:	f000 f8cb 	bl	8005740 <vl53l0x_timeout_mclks_to_us>
 80055aa:	0002      	movs	r2, r0
	timeouts->msrc_dss_tcc_us =
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	60da      	str	r2, [r3, #12]

	status = readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, &reg_val_16);
 80055b0:	250f      	movs	r5, #15
 80055b2:	197c      	adds	r4, r7, r5
 80055b4:	230c      	movs	r3, #12
 80055b6:	18fb      	adds	r3, r7, r3
 80055b8:	0019      	movs	r1, r3
 80055ba:	2051      	movs	r0, #81	@ 0x51
 80055bc:	f7fd fd4a 	bl	8003054 <readReg16Bit>
 80055c0:	0003      	movs	r3, r0
 80055c2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80055c4:	197b      	adds	r3, r7, r5
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	b25b      	sxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <vl53l0x_get_sequence_step_timeouts+0xc2>
 80055ce:	197b      	adds	r3, r7, r5
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	b25b      	sxtb	r3, r3
 80055d4:	e067      	b.n	80056a6 <vl53l0x_get_sequence_step_timeouts+0x192>
	timeouts->pre_range_mclks = vl53l0x_decode_timeout(reg_val_16);
 80055d6:	230c      	movs	r3, #12
 80055d8:	18fb      	adds	r3, r7, r3
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	0018      	movs	r0, r3
 80055de:	f000 f866 	bl	80056ae <vl53l0x_decode_timeout>
 80055e2:	0003      	movs	r3, r0
 80055e4:	001a      	movs	r2, r3
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	80da      	strh	r2, [r3, #6]
	timeouts->pre_range_us =
	vl53l0x_timeout_mclks_to_us(timeouts->pre_range_mclks,
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	88da      	ldrh	r2, [r3, #6]
						   timeouts->pre_range_vcsel_period_pclks);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	881b      	ldrh	r3, [r3, #0]
	vl53l0x_timeout_mclks_to_us(timeouts->pre_range_mclks,
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	0019      	movs	r1, r3
 80055f6:	0010      	movs	r0, r2
 80055f8:	f000 f8a2 	bl	8005740 <vl53l0x_timeout_mclks_to_us>
 80055fc:	0002      	movs	r2, r0
	timeouts->pre_range_us =
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	611a      	str	r2, [r3, #16]

	status = vl53l0x_get_vcsel_pulse_period(VcselPeriodFinalRange, &reg_val_8);
 8005602:	250f      	movs	r5, #15
 8005604:	197c      	adds	r4, r7, r5
 8005606:	230e      	movs	r3, #14
 8005608:	18fb      	adds	r3, r7, r3
 800560a:	0019      	movs	r1, r3
 800560c:	2001      	movs	r0, #1
 800560e:	f7ff fb57 	bl	8004cc0 <vl53l0x_get_vcsel_pulse_period>
 8005612:	0003      	movs	r3, r0
 8005614:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005616:	197b      	adds	r3, r7, r5
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	b25b      	sxtb	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <vl53l0x_get_sequence_step_timeouts+0x114>
 8005620:	197b      	adds	r3, r7, r5
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	b25b      	sxtb	r3, r3
 8005626:	e03e      	b.n	80056a6 <vl53l0x_get_sequence_step_timeouts+0x192>
	timeouts->final_range_vcsel_period_pclks = reg_val_8;
 8005628:	230e      	movs	r3, #14
 800562a:	18fb      	adds	r3, r7, r3
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	001a      	movs	r2, r3
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	805a      	strh	r2, [r3, #2]

	status = readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, &reg_val_16);
 8005634:	250f      	movs	r5, #15
 8005636:	197c      	adds	r4, r7, r5
 8005638:	230c      	movs	r3, #12
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	0019      	movs	r1, r3
 800563e:	2071      	movs	r0, #113	@ 0x71
 8005640:	f7fd fd08 	bl	8003054 <readReg16Bit>
 8005644:	0003      	movs	r3, r0
 8005646:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005648:	197b      	adds	r3, r7, r5
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	b25b      	sxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <vl53l0x_get_sequence_step_timeouts+0x146>
 8005652:	197b      	adds	r3, r7, r5
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	b25b      	sxtb	r3, r3
 8005658:	e025      	b.n	80056a6 <vl53l0x_get_sequence_step_timeouts+0x192>
	timeouts->final_range_mclks = vl53l0x_decode_timeout(reg_val_16);
 800565a:	230c      	movs	r3, #12
 800565c:	18fb      	adds	r3, r7, r3
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	0018      	movs	r0, r3
 8005662:	f000 f824 	bl	80056ae <vl53l0x_decode_timeout>
 8005666:	0003      	movs	r3, r0
 8005668:	001a      	movs	r2, r3
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	811a      	strh	r2, [r3, #8]

	if (enables->pre_range)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	78db      	ldrb	r3, [r3, #3]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <vl53l0x_get_sequence_step_timeouts+0x172>
	{
		timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	891a      	ldrh	r2, [r3, #8]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	88db      	ldrh	r3, [r3, #6]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	b29a      	uxth	r2, r3
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	811a      	strh	r2, [r3, #8]
	}

	timeouts->final_range_us =
	vl53l0x_timeout_mclks_to_us(timeouts->final_range_mclks,
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	891a      	ldrh	r2, [r3, #8]
						   timeouts->final_range_vcsel_period_pclks);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	885b      	ldrh	r3, [r3, #2]
	vl53l0x_timeout_mclks_to_us(timeouts->final_range_mclks,
 800568e:	b2db      	uxtb	r3, r3
 8005690:	0019      	movs	r1, r3
 8005692:	0010      	movs	r0, r2
 8005694:	f000 f854 	bl	8005740 <vl53l0x_timeout_mclks_to_us>
 8005698:	0002      	movs	r2, r0
	timeouts->final_range_us =
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	615a      	str	r2, [r3, #20]
	return status;
 800569e:	230f      	movs	r3, #15
 80056a0:	18fb      	adds	r3, r7, r3
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	b25b      	sxtb	r3, r3
}
 80056a6:	0018      	movs	r0, r3
 80056a8:	46bd      	mov	sp, r7
 80056aa:	b004      	add	sp, #16
 80056ac:	bdb0      	pop	{r4, r5, r7, pc}

080056ae <vl53l0x_decode_timeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t vl53l0x_decode_timeout(uint16_t reg_val)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b082      	sub	sp, #8
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	0002      	movs	r2, r0
 80056b6:	1dbb      	adds	r3, r7, #6
 80056b8:	801a      	strh	r2, [r3, #0]
	// format: "(LSByte * 2^MSByte) + 1"
	return (uint16_t)((reg_val & 0x00FF) <<
 80056ba:	1dbb      	adds	r3, r7, #6
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	22ff      	movs	r2, #255	@ 0xff
 80056c0:	4013      	ands	r3, r2
		 (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80056c2:	1dba      	adds	r2, r7, #6
 80056c4:	8812      	ldrh	r2, [r2, #0]
 80056c6:	0a12      	lsrs	r2, r2, #8
 80056c8:	b292      	uxth	r2, r2
	return (uint16_t)((reg_val & 0x00FF) <<
 80056ca:	4093      	lsls	r3, r2
 80056cc:	b29b      	uxth	r3, r3
		 (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80056ce:	3301      	adds	r3, #1
 80056d0:	b29b      	uxth	r3, r3
}
 80056d2:	0018      	movs	r0, r3
 80056d4:	46bd      	mov	sp, r7
 80056d6:	b002      	add	sp, #8
 80056d8:	bd80      	pop	{r7, pc}

080056da <vl53l0x_encode_timeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t vl53l0x_encode_timeout(uint16_t timeout_mclks)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b084      	sub	sp, #16
 80056de:	af00      	add	r7, sp, #0
 80056e0:	0002      	movs	r2, r0
 80056e2:	1dbb      	adds	r3, r7, #6
 80056e4:	801a      	strh	r2, [r3, #0]
	// format: "(LSByte * 2^MSByte) + 1"
	uint32_t ls_byte = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
	uint16_t ms_byte = 0;
 80056ea:	230a      	movs	r3, #10
 80056ec:	18fb      	adds	r3, r7, r3
 80056ee:	2200      	movs	r2, #0
 80056f0:	801a      	strh	r2, [r3, #0]

	if(timeout_mclks > 0)
 80056f2:	1dbb      	adds	r3, r7, #6
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01d      	beq.n	8005736 <vl53l0x_encode_timeout+0x5c>
	{
		ls_byte = timeout_mclks - 1;
 80056fa:	1dbb      	adds	r3, r7, #6
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	3b01      	subs	r3, #1
 8005700:	60fb      	str	r3, [r7, #12]

		while((ls_byte & 0xFFFFFF00) > 0)
 8005702:	e008      	b.n	8005716 <vl53l0x_encode_timeout+0x3c>
		{
			ls_byte >>= 1;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
			ms_byte++;
 800570a:	210a      	movs	r1, #10
 800570c:	187b      	adds	r3, r7, r1
 800570e:	881a      	ldrh	r2, [r3, #0]
 8005710:	187b      	adds	r3, r7, r1
 8005712:	3201      	adds	r2, #1
 8005714:	801a      	strh	r2, [r3, #0]
		while((ls_byte & 0xFFFFFF00) > 0)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2bff      	cmp	r3, #255	@ 0xff
 800571a:	d8f3      	bhi.n	8005704 <vl53l0x_encode_timeout+0x2a>
		}

		return (ms_byte << 8) | (ls_byte & 0xFF);
 800571c:	230a      	movs	r3, #10
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	021b      	lsls	r3, r3, #8
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	b29b      	uxth	r3, r3
 800572a:	21ff      	movs	r1, #255	@ 0xff
 800572c:	400b      	ands	r3, r1
 800572e:	b29b      	uxth	r3, r3
 8005730:	4313      	orrs	r3, r2
 8005732:	b29b      	uxth	r3, r3
 8005734:	e000      	b.n	8005738 <vl53l0x_encode_timeout+0x5e>
	}
	else
	{
		return 0;
 8005736:	2300      	movs	r3, #0
	}
}
 8005738:	0018      	movs	r0, r3
 800573a:	46bd      	mov	sp, r7
 800573c:	b004      	add	sp, #16
 800573e:	bd80      	pop	{r7, pc}

08005740 <vl53l0x_timeout_mclks_to_us>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t vl53l0x_timeout_mclks_to_us(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	0002      	movs	r2, r0
 8005748:	1dbb      	adds	r3, r7, #6
 800574a:	801a      	strh	r2, [r3, #0]
 800574c:	1d7b      	adds	r3, r7, #5
 800574e:	1c0a      	adds	r2, r1, #0
 8005750:	701a      	strb	r2, [r3, #0]
	uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8005752:	1d7b      	adds	r3, r7, #5
 8005754:	781a      	ldrb	r2, [r3, #0]
 8005756:	0013      	movs	r3, r2
 8005758:	015b      	lsls	r3, r3, #5
 800575a:	1a9b      	subs	r3, r3, r2
 800575c:	015b      	lsls	r3, r3, #5
 800575e:	189b      	adds	r3, r3, r2
 8005760:	011a      	lsls	r2, r3, #4
 8005762:	1ad2      	subs	r2, r2, r3
 8005764:	0213      	lsls	r3, r2, #8
 8005766:	001a      	movs	r2, r3
 8005768:	0013      	movs	r3, r2
 800576a:	33f5      	adds	r3, #245	@ 0xf5
 800576c:	33ff      	adds	r3, #255	@ 0xff
 800576e:	22fa      	movs	r2, #250	@ 0xfa
 8005770:	0091      	lsls	r1, r2, #2
 8005772:	0018      	movs	r0, r3
 8005774:	f7fa fcc8 	bl	8000108 <__udivsi3>
 8005778:	0003      	movs	r3, r0
 800577a:	60fb      	str	r3, [r7, #12]

	return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 800577c:	1dbb      	adds	r3, r7, #6
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	435a      	muls	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	085b      	lsrs	r3, r3, #1
 8005788:	18d3      	adds	r3, r2, r3
 800578a:	22fa      	movs	r2, #250	@ 0xfa
 800578c:	0091      	lsls	r1, r2, #2
 800578e:	0018      	movs	r0, r3
 8005790:	f7fa fcba 	bl	8000108 <__udivsi3>
 8005794:	0003      	movs	r3, r0
}
 8005796:	0018      	movs	r0, r3
 8005798:	46bd      	mov	sp, r7
 800579a:	b004      	add	sp, #16
 800579c:	bd80      	pop	{r7, pc}

0800579e <vl53l0x_timeout_us_to_mclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t vl53l0x_timeout_us_to_mclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	000a      	movs	r2, r1
 80057a8:	1cfb      	adds	r3, r7, #3
 80057aa:	701a      	strb	r2, [r3, #0]
	uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80057ac:	1cfb      	adds	r3, r7, #3
 80057ae:	781a      	ldrb	r2, [r3, #0]
 80057b0:	0013      	movs	r3, r2
 80057b2:	015b      	lsls	r3, r3, #5
 80057b4:	1a9b      	subs	r3, r3, r2
 80057b6:	015b      	lsls	r3, r3, #5
 80057b8:	189b      	adds	r3, r3, r2
 80057ba:	011a      	lsls	r2, r3, #4
 80057bc:	1ad2      	subs	r2, r2, r3
 80057be:	0213      	lsls	r3, r2, #8
 80057c0:	001a      	movs	r2, r3
 80057c2:	0013      	movs	r3, r2
 80057c4:	33f5      	adds	r3, #245	@ 0xf5
 80057c6:	33ff      	adds	r3, #255	@ 0xff
 80057c8:	22fa      	movs	r2, #250	@ 0xfa
 80057ca:	0091      	lsls	r1, r2, #2
 80057cc:	0018      	movs	r0, r3
 80057ce:	f7fa fc9b 	bl	8000108 <__udivsi3>
 80057d2:	0003      	movs	r3, r0
 80057d4:	60fb      	str	r3, [r7, #12]

	return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	0013      	movs	r3, r2
 80057da:	015b      	lsls	r3, r3, #5
 80057dc:	1a9b      	subs	r3, r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	189b      	adds	r3, r3, r2
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	001a      	movs	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	085b      	lsrs	r3, r3, #1
 80057ea:	18d3      	adds	r3, r2, r3
 80057ec:	68f9      	ldr	r1, [r7, #12]
 80057ee:	0018      	movs	r0, r3
 80057f0:	f7fa fc8a 	bl	8000108 <__udivsi3>
 80057f4:	0003      	movs	r3, r0
}
 80057f6:	0018      	movs	r0, r3
 80057f8:	46bd      	mov	sp, r7
 80057fa:	b004      	add	sp, #16
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <vl53l0x_single_reference_calibration>:


// based on VL53L0X_perform_single_ref_calibration()
int8_t vl53l0x_single_reference_calibration(uint8_t vhv_init_byte)
{
 8005800:	b5b0      	push	{r4, r5, r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	0002      	movs	r2, r0
 8005808:	1dfb      	adds	r3, r7, #7
 800580a:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 800580c:	210f      	movs	r1, #15
 800580e:	187b      	adds	r3, r7, r1
 8005810:	2200      	movs	r2, #0
 8005812:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val = 0;
 8005814:	230e      	movs	r3, #14
 8005816:	18fb      	adds	r3, r7, r3
 8005818:	2200      	movs	r2, #0
 800581a:	701a      	strb	r2, [r3, #0]

	status = writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 800581c:	1dfb      	adds	r3, r7, #7
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2201      	movs	r2, #1
 8005822:	4313      	orrs	r3, r2
 8005824:	b2db      	uxtb	r3, r3
 8005826:	000d      	movs	r5, r1
 8005828:	187c      	adds	r4, r7, r1
 800582a:	0019      	movs	r1, r3
 800582c:	2000      	movs	r0, #0
 800582e:	f7fd fb81 	bl	8002f34 <writeReg>
 8005832:	0003      	movs	r3, r0
 8005834:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005836:	197b      	adds	r3, r7, r5
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	b25b      	sxtb	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <vl53l0x_single_reference_calibration+0x48>
 8005840:	197b      	adds	r3, r7, r5
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	b25b      	sxtb	r3, r3
 8005846:	e044      	b.n	80058d2 <vl53l0x_single_reference_calibration+0xd2>

	startTimeout();
 8005848:	f000 f970 	bl	8005b2c <HAL_GetTick>
 800584c:	0003      	movs	r3, r0
 800584e:	b29a      	uxth	r2, r3
 8005850:	4b22      	ldr	r3, [pc, #136]	@ (80058dc <vl53l0x_single_reference_calibration+0xdc>)
 8005852:	801a      	strh	r2, [r3, #0]
	while((reg_val & 0x07) == 0)
 8005854:	e01b      	b.n	800588e <vl53l0x_single_reference_calibration+0x8e>
	{
		status = readReg(RESULT_INTERRUPT_STATUS, &reg_val);
 8005856:	230f      	movs	r3, #15
 8005858:	18fc      	adds	r4, r7, r3
 800585a:	230e      	movs	r3, #14
 800585c:	18fb      	adds	r3, r7, r3
 800585e:	0019      	movs	r1, r3
 8005860:	2013      	movs	r0, #19
 8005862:	f7fd fbc3 	bl	8002fec <readReg>
 8005866:	0003      	movs	r3, r0
 8005868:	7023      	strb	r3, [r4, #0]
		if(checkTimeoutExpired())
 800586a:	4b1d      	ldr	r3, [pc, #116]	@ (80058e0 <vl53l0x_single_reference_calibration+0xe0>)
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00d      	beq.n	800588e <vl53l0x_single_reference_calibration+0x8e>
 8005872:	f000 f95b 	bl	8005b2c <HAL_GetTick>
 8005876:	0003      	movs	r3, r0
 8005878:	b29b      	uxth	r3, r3
 800587a:	001a      	movs	r2, r3
 800587c:	4b17      	ldr	r3, [pc, #92]	@ (80058dc <vl53l0x_single_reference_calibration+0xdc>)
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	4a17      	ldr	r2, [pc, #92]	@ (80058e0 <vl53l0x_single_reference_calibration+0xe0>)
 8005884:	8812      	ldrh	r2, [r2, #0]
 8005886:	4293      	cmp	r3, r2
 8005888:	dd01      	ble.n	800588e <vl53l0x_single_reference_calibration+0x8e>
		{
			return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e021      	b.n	80058d2 <vl53l0x_single_reference_calibration+0xd2>
	while((reg_val & 0x07) == 0)
 800588e:	230e      	movs	r3, #14
 8005890:	18fb      	adds	r3, r7, r3
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	001a      	movs	r2, r3
 8005896:	2307      	movs	r3, #7
 8005898:	4013      	ands	r3, r2
 800589a:	d0dc      	beq.n	8005856 <vl53l0x_single_reference_calibration+0x56>
		}
	}

	status = writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 800589c:	250f      	movs	r5, #15
 800589e:	197c      	adds	r4, r7, r5
 80058a0:	2101      	movs	r1, #1
 80058a2:	200b      	movs	r0, #11
 80058a4:	f7fd fb46 	bl	8002f34 <writeReg>
 80058a8:	0003      	movs	r3, r0
 80058aa:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80058ac:	002a      	movs	r2, r5
 80058ae:	18bb      	adds	r3, r7, r2
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	b25b      	sxtb	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <vl53l0x_single_reference_calibration+0xc0>
 80058b8:	18bb      	adds	r3, r7, r2
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	b25b      	sxtb	r3, r3
 80058be:	e008      	b.n	80058d2 <vl53l0x_single_reference_calibration+0xd2>

	status = writeReg(SYSRANGE_START, 0x00);
 80058c0:	230f      	movs	r3, #15
 80058c2:	18fc      	adds	r4, r7, r3
 80058c4:	2100      	movs	r1, #0
 80058c6:	2000      	movs	r0, #0
 80058c8:	f7fd fb34 	bl	8002f34 <writeReg>
 80058cc:	0003      	movs	r3, r0
 80058ce:	7023      	strb	r3, [r4, #0]

	return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	0018      	movs	r0, r3
 80058d4:	46bd      	mov	sp, r7
 80058d6:	b004      	add	sp, #16
 80058d8:	bdb0      	pop	{r4, r5, r7, pc}
 80058da:	46c0      	nop			@ (mov r8, r8)
 80058dc:	20000692 	.word	0x20000692
 80058e0:	2000068e 	.word	0x2000068e

080058e4 <handle_i2c_error>:

int8_t handle_i2c_error(int8_t status)
{
 80058e4:	b5b0      	push	{r4, r5, r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	0002      	movs	r2, r0
 80058ec:	1dfb      	adds	r3, r7, #7
 80058ee:	701a      	strb	r2, [r3, #0]

	if(status != HAL_OK)
 80058f0:	1dfb      	adds	r3, r7, #7
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	b25b      	sxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d022      	beq.n	8005940 <handle_i2c_error+0x5c>
	{
		int8_t reset_status = HAL_OK;
 80058fa:	200f      	movs	r0, #15
 80058fc:	183b      	adds	r3, r7, r0
 80058fe:	2200      	movs	r2, #0
 8005900:	701a      	strb	r2, [r3, #0]
		holding_register_database[I2C_ERRORS] |= hi2c1.ErrorCode;
 8005902:	4b13      	ldr	r3, [pc, #76]	@ (8005950 <handle_i2c_error+0x6c>)
 8005904:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005906:	4b13      	ldr	r3, [pc, #76]	@ (8005954 <handle_i2c_error+0x70>)
 8005908:	899a      	ldrh	r2, [r3, #12]
 800590a:	b28b      	uxth	r3, r1
 800590c:	4313      	orrs	r3, r2
 800590e:	b29a      	uxth	r2, r3
 8005910:	4b10      	ldr	r3, [pc, #64]	@ (8005954 <handle_i2c_error+0x70>)
 8005912:	819a      	strh	r2, [r3, #12]
		// Attempt to reset the peripheral
		reset_status = i2c_reset();
 8005914:	0005      	movs	r5, r0
 8005916:	183c      	adds	r4, r7, r0
 8005918:	f000 f81e 	bl	8005958 <i2c_reset>
 800591c:	0003      	movs	r3, r0
 800591e:	7023      	strb	r3, [r4, #0]
		if(reset_status != HAL_OK)
 8005920:	197b      	adds	r3, r7, r5
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	b25b      	sxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <handle_i2c_error+0x5c>
		{
			// I2C Fatal Error
			holding_register_database[I2C_ERRORS] |= 1U << 10U;
 800592a:	4b0a      	ldr	r3, [pc, #40]	@ (8005954 <handle_i2c_error+0x70>)
 800592c:	899b      	ldrh	r3, [r3, #12]
 800592e:	2280      	movs	r2, #128	@ 0x80
 8005930:	00d2      	lsls	r2, r2, #3
 8005932:	4313      	orrs	r3, r2
 8005934:	b29a      	uxth	r2, r3
 8005936:	4b07      	ldr	r3, [pc, #28]	@ (8005954 <handle_i2c_error+0x70>)
 8005938:	819a      	strh	r2, [r3, #12]
			holding_register_database[I2C_SHUTDOWN] = 1;
 800593a:	4b06      	ldr	r3, [pc, #24]	@ (8005954 <handle_i2c_error+0x70>)
 800593c:	2201      	movs	r2, #1
 800593e:	81da      	strh	r2, [r3, #14]
		}
	}
	return status;
 8005940:	1dfb      	adds	r3, r7, #7
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	b25b      	sxtb	r3, r3
}
 8005946:	0018      	movs	r0, r3
 8005948:	46bd      	mov	sp, r7
 800594a:	b004      	add	sp, #16
 800594c:	bdb0      	pop	{r4, r5, r7, pc}
 800594e:	46c0      	nop			@ (mov r8, r8)
 8005950:	2000010c 	.word	0x2000010c
 8005954:	20000000 	.word	0x20000000

08005958 <i2c_reset>:

int8_t i2c_reset()
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 800595e:	1dfb      	adds	r3, r7, #7
 8005960:	2200      	movs	r2, #0
 8005962:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2C_DeInit(&hi2c1);
 8005964:	4b20      	ldr	r3, [pc, #128]	@ (80059e8 <i2c_reset+0x90>)
 8005966:	0018      	movs	r0, r3
 8005968:	f002 f93c 	bl	8007be4 <HAL_I2C_DeInit>
 800596c:	0003      	movs	r3, r0
 800596e:	b259      	sxtb	r1, r3
 8005970:	1dfb      	adds	r3, r7, #7
 8005972:	1dfa      	adds	r2, r7, #7
 8005974:	7812      	ldrb	r2, [r2, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	701a      	strb	r2, [r3, #0]
	__I2C1_FORCE_RESET();
 800597a:	4b1c      	ldr	r3, [pc, #112]	@ (80059ec <i2c_reset+0x94>)
 800597c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800597e:	4b1b      	ldr	r3, [pc, #108]	@ (80059ec <i2c_reset+0x94>)
 8005980:	2180      	movs	r1, #128	@ 0x80
 8005982:	0389      	lsls	r1, r1, #14
 8005984:	430a      	orrs	r2, r1
 8005986:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_Delay(100);
 8005988:	2064      	movs	r0, #100	@ 0x64
 800598a:	f000 f8d9 	bl	8005b40 <HAL_Delay>
	__I2C1_RELEASE_RESET();
 800598e:	4b17      	ldr	r3, [pc, #92]	@ (80059ec <i2c_reset+0x94>)
 8005990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005992:	4b16      	ldr	r3, [pc, #88]	@ (80059ec <i2c_reset+0x94>)
 8005994:	4916      	ldr	r1, [pc, #88]	@ (80059f0 <i2c_reset+0x98>)
 8005996:	400a      	ands	r2, r1
 8005998:	62da      	str	r2, [r3, #44]	@ 0x2c
	status = HAL_I2C_Init(&hi2c1);
 800599a:	4b13      	ldr	r3, [pc, #76]	@ (80059e8 <i2c_reset+0x90>)
 800599c:	0018      	movs	r0, r3
 800599e:	f002 f87b 	bl	8007a98 <HAL_I2C_Init>
 80059a2:	0003      	movs	r3, r0
 80059a4:	001a      	movs	r2, r3
 80059a6:	1dfb      	adds	r3, r7, #7
 80059a8:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 80059aa:	4b0f      	ldr	r3, [pc, #60]	@ (80059e8 <i2c_reset+0x90>)
 80059ac:	2100      	movs	r1, #0
 80059ae:	0018      	movs	r0, r3
 80059b0:	f002 fea6 	bl	8008700 <HAL_I2CEx_ConfigAnalogFilter>
 80059b4:	0003      	movs	r3, r0
 80059b6:	b259      	sxtb	r1, r3
 80059b8:	1dfb      	adds	r3, r7, #7
 80059ba:	1dfa      	adds	r2, r7, #7
 80059bc:	7812      	ldrb	r2, [r2, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
 80059c2:	4b09      	ldr	r3, [pc, #36]	@ (80059e8 <i2c_reset+0x90>)
 80059c4:	2100      	movs	r1, #0
 80059c6:	0018      	movs	r0, r3
 80059c8:	f002 fee6 	bl	8008798 <HAL_I2CEx_ConfigDigitalFilter>
 80059cc:	0003      	movs	r3, r0
 80059ce:	b259      	sxtb	r1, r3
 80059d0:	1dfb      	adds	r3, r7, #7
 80059d2:	1dfa      	adds	r2, r7, #7
 80059d4:	7812      	ldrb	r2, [r2, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	701a      	strb	r2, [r3, #0]
	return status;
 80059da:	1dfb      	adds	r3, r7, #7
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	b25b      	sxtb	r3, r3
}
 80059e0:	0018      	movs	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	b002      	add	sp, #8
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	2000010c 	.word	0x2000010c
 80059ec:	40021000 	.word	0x40021000
 80059f0:	ffdfffff 	.word	0xffdfffff

080059f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80059f4:	480d      	ldr	r0, [pc, #52]	@ (8005a2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80059f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80059f8:	f7fd fa90 	bl	8002f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80059fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80059fe:	e003      	b.n	8005a08 <LoopCopyDataInit>

08005a00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005a00:	4b0b      	ldr	r3, [pc, #44]	@ (8005a30 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8005a02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005a04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005a06:	3104      	adds	r1, #4

08005a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005a08:	480a      	ldr	r0, [pc, #40]	@ (8005a34 <LoopForever+0xa>)
  ldr r3, =_edata
 8005a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a38 <LoopForever+0xe>)
  adds r2, r0, r1
 8005a0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005a0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005a10:	d3f6      	bcc.n	8005a00 <CopyDataInit>
  ldr r2, =_sbss
 8005a12:	4a0a      	ldr	r2, [pc, #40]	@ (8005a3c <LoopForever+0x12>)
  b LoopFillZerobss
 8005a14:	e002      	b.n	8005a1c <LoopFillZerobss>

08005a16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005a16:	2300      	movs	r3, #0
  str  r3, [r2]
 8005a18:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a1a:	3204      	adds	r2, #4

08005a1c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8005a1c:	4b08      	ldr	r3, [pc, #32]	@ (8005a40 <LoopForever+0x16>)
  cmp r2, r3
 8005a1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005a20:	d3f9      	bcc.n	8005a16 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8005a22:	f005 f951 	bl	800acc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005a26:	f7fb fb67 	bl	80010f8 <main>

08005a2a <LoopForever>:

LoopForever:
    b LoopForever
 8005a2a:	e7fe      	b.n	8005a2a <LoopForever>
  ldr   r0, =_estack
 8005a2c:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8005a30:	0800b034 	.word	0x0800b034
  ldr r0, =_sdata
 8005a34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005a38:	20000030 	.word	0x20000030
  ldr r2, =_sbss
 8005a3c:	20000030 	.word	0x20000030
  ldr r3, = _ebss
 8005a40:	200006a4 	.word	0x200006a4

08005a44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005a44:	e7fe      	b.n	8005a44 <ADC1_IRQHandler>

08005a46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005a4c:	1dfb      	adds	r3, r7, #7
 8005a4e:	2200      	movs	r2, #0
 8005a50:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a52:	2003      	movs	r0, #3
 8005a54:	f000 f80e 	bl	8005a74 <HAL_InitTick>
 8005a58:	1e03      	subs	r3, r0, #0
 8005a5a:	d003      	beq.n	8005a64 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8005a5c:	1dfb      	adds	r3, r7, #7
 8005a5e:	2201      	movs	r2, #1
 8005a60:	701a      	strb	r2, [r3, #0]
 8005a62:	e001      	b.n	8005a68 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005a64:	f7fc fef0 	bl	8002848 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005a68:	1dfb      	adds	r3, r7, #7
 8005a6a:	781b      	ldrb	r3, [r3, #0]
}
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b002      	add	sp, #8
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a74:	b590      	push	{r4, r7, lr}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005a7c:	230f      	movs	r3, #15
 8005a7e:	18fb      	adds	r3, r7, r3
 8005a80:	2200      	movs	r2, #0
 8005a82:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8005a84:	4b1d      	ldr	r3, [pc, #116]	@ (8005afc <HAL_InitTick+0x88>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d02b      	beq.n	8005ae4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8005a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8005b00 <HAL_InitTick+0x8c>)
 8005a8e:	681c      	ldr	r4, [r3, #0]
 8005a90:	4b1a      	ldr	r3, [pc, #104]	@ (8005afc <HAL_InitTick+0x88>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	0019      	movs	r1, r3
 8005a96:	23fa      	movs	r3, #250	@ 0xfa
 8005a98:	0098      	lsls	r0, r3, #2
 8005a9a:	f7fa fb35 	bl	8000108 <__udivsi3>
 8005a9e:	0003      	movs	r3, r0
 8005aa0:	0019      	movs	r1, r3
 8005aa2:	0020      	movs	r0, r4
 8005aa4:	f7fa fb30 	bl	8000108 <__udivsi3>
 8005aa8:	0003      	movs	r3, r0
 8005aaa:	0018      	movs	r0, r3
 8005aac:	f001 f9b1 	bl	8006e12 <HAL_SYSTICK_Config>
 8005ab0:	1e03      	subs	r3, r0, #0
 8005ab2:	d112      	bne.n	8005ada <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d80a      	bhi.n	8005ad0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	2301      	movs	r3, #1
 8005abe:	425b      	negs	r3, r3
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f001 f970 	bl	8006da8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8005b04 <HAL_InitTick+0x90>)
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	e00d      	b.n	8005aec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005ad0:	230f      	movs	r3, #15
 8005ad2:	18fb      	adds	r3, r7, r3
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	701a      	strb	r2, [r3, #0]
 8005ad8:	e008      	b.n	8005aec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005ada:	230f      	movs	r3, #15
 8005adc:	18fb      	adds	r3, r7, r3
 8005ade:	2201      	movs	r2, #1
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	e003      	b.n	8005aec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005ae4:	230f      	movs	r3, #15
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	2201      	movs	r2, #1
 8005aea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005aec:	230f      	movs	r3, #15
 8005aee:	18fb      	adds	r3, r7, r3
 8005af0:	781b      	ldrb	r3, [r3, #0]
}
 8005af2:	0018      	movs	r0, r3
 8005af4:	46bd      	mov	sp, r7
 8005af6:	b005      	add	sp, #20
 8005af8:	bd90      	pop	{r4, r7, pc}
 8005afa:	46c0      	nop			@ (mov r8, r8)
 8005afc:	2000002c 	.word	0x2000002c
 8005b00:	20000024 	.word	0x20000024
 8005b04:	20000028 	.word	0x20000028

08005b08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005b0c:	4b05      	ldr	r3, [pc, #20]	@ (8005b24 <HAL_IncTick+0x1c>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	001a      	movs	r2, r3
 8005b12:	4b05      	ldr	r3, [pc, #20]	@ (8005b28 <HAL_IncTick+0x20>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	18d2      	adds	r2, r2, r3
 8005b18:	4b03      	ldr	r3, [pc, #12]	@ (8005b28 <HAL_IncTick+0x20>)
 8005b1a:	601a      	str	r2, [r3, #0]
}
 8005b1c:	46c0      	nop			@ (mov r8, r8)
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	46c0      	nop			@ (mov r8, r8)
 8005b24:	2000002c 	.word	0x2000002c
 8005b28:	200006a0 	.word	0x200006a0

08005b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b30:	4b02      	ldr	r3, [pc, #8]	@ (8005b3c <HAL_GetTick+0x10>)
 8005b32:	681b      	ldr	r3, [r3, #0]
}
 8005b34:	0018      	movs	r0, r3
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	46c0      	nop			@ (mov r8, r8)
 8005b3c:	200006a0 	.word	0x200006a0

08005b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b48:	f7ff fff0 	bl	8005b2c <HAL_GetTick>
 8005b4c:	0003      	movs	r3, r0
 8005b4e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3301      	adds	r3, #1
 8005b58:	d005      	beq.n	8005b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b84 <HAL_Delay+0x44>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	001a      	movs	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	189b      	adds	r3, r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b66:	46c0      	nop			@ (mov r8, r8)
 8005b68:	f7ff ffe0 	bl	8005b2c <HAL_GetTick>
 8005b6c:	0002      	movs	r2, r0
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d8f7      	bhi.n	8005b68 <HAL_Delay+0x28>
  {
  }
}
 8005b78:	46c0      	nop			@ (mov r8, r8)
 8005b7a:	46c0      	nop			@ (mov r8, r8)
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	b004      	add	sp, #16
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	46c0      	nop			@ (mov r8, r8)
 8005b84:	2000002c 	.word	0x2000002c

08005b88 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a05      	ldr	r2, [pc, #20]	@ (8005bac <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005b98:	401a      	ands	r2, r3
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	601a      	str	r2, [r3, #0]
}
 8005ba2:	46c0      	nop			@ (mov r8, r8)
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	b002      	add	sp, #8
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	46c0      	nop			@ (mov r8, r8)
 8005bac:	ff3fffff 	.word	0xff3fffff

08005bb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	23c0      	movs	r3, #192	@ 0xc0
 8005bbe:	041b      	lsls	r3, r3, #16
 8005bc0:	4013      	ands	r3, r2
}
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b002      	add	sp, #8
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b084      	sub	sp, #16
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	60f8      	str	r0, [r7, #12]
 8005bd2:	60b9      	str	r1, [r7, #8]
 8005bd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	2104      	movs	r1, #4
 8005bde:	400a      	ands	r2, r1
 8005be0:	2107      	movs	r1, #7
 8005be2:	4091      	lsls	r1, r2
 8005be4:	000a      	movs	r2, r1
 8005be6:	43d2      	mvns	r2, r2
 8005be8:	401a      	ands	r2, r3
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2104      	movs	r1, #4
 8005bee:	400b      	ands	r3, r1
 8005bf0:	6879      	ldr	r1, [r7, #4]
 8005bf2:	4099      	lsls	r1, r3
 8005bf4:	000b      	movs	r3, r1
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005bfc:	46c0      	nop			@ (mov r8, r8)
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	b004      	add	sp, #16
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	2104      	movs	r1, #4
 8005c16:	400a      	ands	r2, r1
 8005c18:	2107      	movs	r1, #7
 8005c1a:	4091      	lsls	r1, r2
 8005c1c:	000a      	movs	r2, r1
 8005c1e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2104      	movs	r1, #4
 8005c24:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005c26:	40da      	lsrs	r2, r3
 8005c28:	0013      	movs	r3, r2
}
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	b002      	add	sp, #8
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b082      	sub	sp, #8
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	23c0      	movs	r3, #192	@ 0xc0
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	4013      	ands	r3, r2
 8005c44:	d101      	bne.n	8005c4a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	b002      	add	sp, #8
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	211f      	movs	r1, #31
 8005c68:	400a      	ands	r2, r1
 8005c6a:	210f      	movs	r1, #15
 8005c6c:	4091      	lsls	r1, r2
 8005c6e:	000a      	movs	r2, r1
 8005c70:	43d2      	mvns	r2, r2
 8005c72:	401a      	ands	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	0e9b      	lsrs	r3, r3, #26
 8005c78:	210f      	movs	r1, #15
 8005c7a:	4019      	ands	r1, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	201f      	movs	r0, #31
 8005c80:	4003      	ands	r3, r0
 8005c82:	4099      	lsls	r1, r3
 8005c84:	000b      	movs	r3, r1
 8005c86:	431a      	orrs	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005c8c:	46c0      	nop			@ (mov r8, r8)
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	b004      	add	sp, #16
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	025b      	lsls	r3, r3, #9
 8005ca6:	0a5b      	lsrs	r3, r3, #9
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005cae:	46c0      	nop			@ (mov r8, r8)
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b002      	add	sp, #8
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	0252      	lsls	r2, r2, #9
 8005cc8:	0a52      	lsrs	r2, r2, #9
 8005cca:	43d2      	mvns	r2, r2
 8005ccc:	401a      	ands	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005cd2:	46c0      	nop			@ (mov r8, r8)
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	b002      	add	sp, #8
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	0212      	lsls	r2, r2, #8
 8005cf0:	43d2      	mvns	r2, r2
 8005cf2:	401a      	ands	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	021b      	lsls	r3, r3, #8
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	400b      	ands	r3, r1
 8005cfc:	4904      	ldr	r1, [pc, #16]	@ (8005d10 <LL_ADC_SetChannelSamplingTime+0x34>)
 8005cfe:	400b      	ands	r3, r1
 8005d00:	431a      	orrs	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005d06:	46c0      	nop			@ (mov r8, r8)
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	b004      	add	sp, #16
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	46c0      	nop			@ (mov r8, r8)
 8005d10:	7fffff00 	.word	0x7fffff00

08005d14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	4a05      	ldr	r2, [pc, #20]	@ (8005d38 <LL_ADC_EnableInternalRegulator+0x24>)
 8005d22:	4013      	ands	r3, r2
 8005d24:	2280      	movs	r2, #128	@ 0x80
 8005d26:	0552      	lsls	r2, r2, #21
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005d2e:	46c0      	nop			@ (mov r8, r8)
 8005d30:	46bd      	mov	sp, r7
 8005d32:	b002      	add	sp, #8
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	46c0      	nop			@ (mov r8, r8)
 8005d38:	6fffffe8 	.word	0x6fffffe8

08005d3c <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	4a03      	ldr	r2, [pc, #12]	@ (8005d58 <LL_ADC_DisableInternalRegulator+0x1c>)
 8005d4a:	401a      	ands	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	609a      	str	r2, [r3, #8]
}
 8005d50:	46c0      	nop			@ (mov r8, r8)
 8005d52:	46bd      	mov	sp, r7
 8005d54:	b002      	add	sp, #8
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	6fffffe8 	.word	0x6fffffe8

08005d5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	2380      	movs	r3, #128	@ 0x80
 8005d6a:	055b      	lsls	r3, r3, #21
 8005d6c:	401a      	ands	r2, r3
 8005d6e:	2380      	movs	r3, #128	@ 0x80
 8005d70:	055b      	lsls	r3, r3, #21
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d101      	bne.n	8005d7a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005d76:	2301      	movs	r3, #1
 8005d78:	e000      	b.n	8005d7c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	b002      	add	sp, #8
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	4a04      	ldr	r2, [pc, #16]	@ (8005da4 <LL_ADC_Enable+0x20>)
 8005d92:	4013      	ands	r3, r2
 8005d94:	2201      	movs	r2, #1
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005d9c:	46c0      	nop			@ (mov r8, r8)
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	b002      	add	sp, #8
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	7fffffe8 	.word	0x7fffffe8

08005da8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	4a04      	ldr	r2, [pc, #16]	@ (8005dc8 <LL_ADC_Disable+0x20>)
 8005db6:	4013      	ands	r3, r2
 8005db8:	2202      	movs	r2, #2
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005dc0:	46c0      	nop			@ (mov r8, r8)
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b002      	add	sp, #8
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	7fffffe8 	.word	0x7fffffe8

08005dcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	4013      	ands	r3, r2
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <LL_ADC_IsEnabled+0x18>
 8005de0:	2301      	movs	r3, #1
 8005de2:	e000      	b.n	8005de6 <LL_ADC_IsEnabled+0x1a>
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	0018      	movs	r0, r3
 8005de8:	46bd      	mov	sp, r7
 8005dea:	b002      	add	sp, #8
 8005dec:	bd80      	pop	{r7, pc}

08005dee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b082      	sub	sp, #8
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d101      	bne.n	8005e06 <LL_ADC_IsDisableOngoing+0x18>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <LL_ADC_IsDisableOngoing+0x1a>
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	0018      	movs	r0, r3
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	b002      	add	sp, #8
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	4a04      	ldr	r2, [pc, #16]	@ (8005e30 <LL_ADC_REG_StartConversion+0x20>)
 8005e1e:	4013      	ands	r3, r2
 8005e20:	2204      	movs	r2, #4
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005e28:	46c0      	nop			@ (mov r8, r8)
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b002      	add	sp, #8
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	7fffffe8 	.word	0x7fffffe8

08005e34 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	4a04      	ldr	r2, [pc, #16]	@ (8005e54 <LL_ADC_REG_StopConversion+0x20>)
 8005e42:	4013      	ands	r3, r2
 8005e44:	2210      	movs	r2, #16
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005e4c:	46c0      	nop			@ (mov r8, r8)
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	b002      	add	sp, #8
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	7fffffe8 	.word	0x7fffffe8

08005e58 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	2204      	movs	r2, #4
 8005e66:	4013      	ands	r3, r2
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d101      	bne.n	8005e70 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	0018      	movs	r0, r3
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b002      	add	sp, #8
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e84:	231f      	movs	r3, #31
 8005e86:	18fb      	adds	r3, r7, r3
 8005e88:	2200      	movs	r2, #0
 8005e8a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005e94:	2300      	movs	r3, #0
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e17e      	b.n	80061a0 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10a      	bne.n	8005ec0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	0018      	movs	r0, r3
 8005eae:	f7fc fcef 	bl	8002890 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2254      	movs	r2, #84	@ 0x54
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f7ff ff49 	bl	8005d5c <LL_ADC_IsInternalRegulatorEnabled>
 8005eca:	1e03      	subs	r3, r0, #0
 8005ecc:	d114      	bne.n	8005ef8 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f7ff ff1e 	bl	8005d14 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005ed8:	4bb3      	ldr	r3, [pc, #716]	@ (80061a8 <HAL_ADC_Init+0x32c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	49b3      	ldr	r1, [pc, #716]	@ (80061ac <HAL_ADC_Init+0x330>)
 8005ede:	0018      	movs	r0, r3
 8005ee0:	f7fa f912 	bl	8000108 <__udivsi3>
 8005ee4:	0003      	movs	r3, r0
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005eea:	e002      	b.n	8005ef2 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1f9      	bne.n	8005eec <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	0018      	movs	r0, r3
 8005efe:	f7ff ff2d 	bl	8005d5c <LL_ADC_IsInternalRegulatorEnabled>
 8005f02:	1e03      	subs	r3, r0, #0
 8005f04:	d10f      	bne.n	8005f26 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f0a:	2210      	movs	r2, #16
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f16:	2201      	movs	r2, #1
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005f1e:	231f      	movs	r3, #31
 8005f20:	18fb      	adds	r3, r7, r3
 8005f22:	2201      	movs	r2, #1
 8005f24:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	f7ff ff94 	bl	8005e58 <LL_ADC_REG_IsConversionOngoing>
 8005f30:	0003      	movs	r3, r0
 8005f32:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f38:	2210      	movs	r2, #16
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	d000      	beq.n	8005f40 <HAL_ADC_Init+0xc4>
 8005f3e:	e122      	b.n	8006186 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d000      	beq.n	8005f48 <HAL_ADC_Init+0xcc>
 8005f46:	e11e      	b.n	8006186 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f4c:	4a98      	ldr	r2, [pc, #608]	@ (80061b0 <HAL_ADC_Init+0x334>)
 8005f4e:	4013      	ands	r3, r2
 8005f50:	2202      	movs	r2, #2
 8005f52:	431a      	orrs	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f7ff ff35 	bl	8005dcc <LL_ADC_IsEnabled>
 8005f62:	1e03      	subs	r3, r0, #0
 8005f64:	d000      	beq.n	8005f68 <HAL_ADC_Init+0xec>
 8005f66:	e0ad      	b.n	80060c4 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	7e1b      	ldrb	r3, [r3, #24]
 8005f70:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005f72:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	7e5b      	ldrb	r3, [r3, #25]
 8005f78:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005f7a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	7e9b      	ldrb	r3, [r3, #26]
 8005f80:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005f82:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <HAL_ADC_Init+0x116>
 8005f8c:	2380      	movs	r3, #128	@ 0x80
 8005f8e:	015b      	lsls	r3, r3, #5
 8005f90:	e000      	b.n	8005f94 <HAL_ADC_Init+0x118>
 8005f92:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005f94:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005f9a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	da04      	bge.n	8005fae <HAL_ADC_Init+0x132>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	e001      	b.n	8005fb2 <HAL_ADC_Init+0x136>
 8005fae:	2380      	movs	r3, #128	@ 0x80
 8005fb0:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8005fb2:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	212c      	movs	r1, #44	@ 0x2c
 8005fb8:	5c5b      	ldrb	r3, [r3, r1]
 8005fba:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005fbc:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	5c9b      	ldrb	r3, [r3, r2]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d115      	bne.n	8005ffa <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	7e9b      	ldrb	r3, [r3, #26]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d105      	bne.n	8005fe2 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2280      	movs	r2, #128	@ 0x80
 8005fda:	0252      	lsls	r2, r2, #9
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	61bb      	str	r3, [r7, #24]
 8005fe0:	e00b      	b.n	8005ffa <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006006:	23e0      	movs	r3, #224	@ 0xe0
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8006010:	4313      	orrs	r3, r2
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	4313      	orrs	r3, r2
 8006016:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	4a65      	ldr	r2, [pc, #404]	@ (80061b4 <HAL_ADC_Init+0x338>)
 8006020:	4013      	ands	r3, r2
 8006022:	0019      	movs	r1, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	430a      	orrs	r2, r1
 800602c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	0f9b      	lsrs	r3, r3, #30
 8006034:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800603a:	4313      	orrs	r3, r2
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	4313      	orrs	r3, r2
 8006040:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	223c      	movs	r2, #60	@ 0x3c
 8006046:	5c9b      	ldrb	r3, [r3, r2]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d111      	bne.n	8006070 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	0f9b      	lsrs	r3, r3, #30
 8006052:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006058:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 800605e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8006064:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	2201      	movs	r2, #1
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	4a50      	ldr	r2, [pc, #320]	@ (80061b8 <HAL_ADC_Init+0x33c>)
 8006078:	4013      	ands	r3, r2
 800607a:	0019      	movs	r1, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	430a      	orrs	r2, r1
 8006084:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	23c0      	movs	r3, #192	@ 0xc0
 800608c:	061b      	lsls	r3, r3, #24
 800608e:	429a      	cmp	r2, r3
 8006090:	d018      	beq.n	80060c4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006096:	2380      	movs	r3, #128	@ 0x80
 8006098:	05db      	lsls	r3, r3, #23
 800609a:	429a      	cmp	r2, r3
 800609c:	d012      	beq.n	80060c4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80060a2:	2380      	movs	r3, #128	@ 0x80
 80060a4:	061b      	lsls	r3, r3, #24
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d00c      	beq.n	80060c4 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80060aa:	4b44      	ldr	r3, [pc, #272]	@ (80061bc <HAL_ADC_Init+0x340>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a44      	ldr	r2, [pc, #272]	@ (80061c0 <HAL_ADC_Init+0x344>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	0019      	movs	r1, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	23f0      	movs	r3, #240	@ 0xf0
 80060ba:	039b      	lsls	r3, r3, #14
 80060bc:	401a      	ands	r2, r3
 80060be:	4b3f      	ldr	r3, [pc, #252]	@ (80061bc <HAL_ADC_Init+0x340>)
 80060c0:	430a      	orrs	r2, r1
 80060c2:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060cc:	001a      	movs	r2, r3
 80060ce:	2100      	movs	r1, #0
 80060d0:	f7ff fd7b 	bl	8005bca <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060dc:	4939      	ldr	r1, [pc, #228]	@ (80061c4 <HAL_ADC_Init+0x348>)
 80060de:	001a      	movs	r2, r3
 80060e0:	f7ff fd73 	bl	8005bca <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d109      	bne.n	8006100 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2110      	movs	r1, #16
 80060f8:	4249      	negs	r1, r1
 80060fa:	430a      	orrs	r2, r1
 80060fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80060fe:	e018      	b.n	8006132 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	2380      	movs	r3, #128	@ 0x80
 8006106:	039b      	lsls	r3, r3, #14
 8006108:	429a      	cmp	r2, r3
 800610a:	d112      	bne.n	8006132 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	3b01      	subs	r3, #1
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	221c      	movs	r2, #28
 800611c:	4013      	ands	r3, r2
 800611e:	2210      	movs	r2, #16
 8006120:	4252      	negs	r2, r2
 8006122:	409a      	lsls	r2, r3
 8006124:	0011      	movs	r1, r2
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2100      	movs	r1, #0
 8006138:	0018      	movs	r0, r3
 800613a:	f7ff fd63 	bl	8005c04 <LL_ADC_GetSamplingTimeCommonChannels>
 800613e:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006144:	429a      	cmp	r2, r3
 8006146:	d10b      	bne.n	8006160 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006152:	2203      	movs	r2, #3
 8006154:	4393      	bics	r3, r2
 8006156:	2201      	movs	r2, #1
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800615e:	e01c      	b.n	800619a <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006164:	2212      	movs	r2, #18
 8006166:	4393      	bics	r3, r2
 8006168:	2210      	movs	r2, #16
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006174:	2201      	movs	r2, #1
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800617c:	231f      	movs	r3, #31
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	2201      	movs	r2, #1
 8006182:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006184:	e009      	b.n	800619a <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800618a:	2210      	movs	r2, #16
 800618c:	431a      	orrs	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006192:	231f      	movs	r3, #31
 8006194:	18fb      	adds	r3, r7, r3
 8006196:	2201      	movs	r2, #1
 8006198:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800619a:	231f      	movs	r3, #31
 800619c:	18fb      	adds	r3, r7, r3
 800619e:	781b      	ldrb	r3, [r3, #0]
}
 80061a0:	0018      	movs	r0, r3
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b008      	add	sp, #32
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	20000024 	.word	0x20000024
 80061ac:	00030d40 	.word	0x00030d40
 80061b0:	fffffefd 	.word	0xfffffefd
 80061b4:	ffde0201 	.word	0xffde0201
 80061b8:	1ffffc02 	.word	0x1ffffc02
 80061bc:	40012708 	.word	0x40012708
 80061c0:	ffc3ffff 	.word	0xffc3ffff
 80061c4:	7fffff04 	.word	0x7fffff04

080061c8 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80061c8:	b5b0      	push	{r4, r5, r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e081      	b.n	80062de <HAL_ADC_DeInit+0x116>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061de:	2202      	movs	r2, #2
 80061e0:	431a      	orrs	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80061e6:	250f      	movs	r5, #15
 80061e8:	197c      	adds	r4, r7, r5
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	0018      	movs	r0, r3
 80061ee:	f000 fb6d 	bl	80068cc <ADC_ConversionStop>
 80061f2:	0003      	movs	r3, r0
 80061f4:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80061f6:	197b      	adds	r3, r7, r5
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d112      	bne.n	8006224 <HAL_ADC_DeInit+0x5c>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80061fe:	197c      	adds	r4, r7, r5
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	0018      	movs	r0, r3
 8006204:	f000 fc1c 	bl	8006a40 <ADC_Disable>
 8006208:	0003      	movs	r3, r0
 800620a:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800620c:	197b      	adds	r3, r7, r5
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d102      	bne.n	800621a <HAL_ADC_DeInit+0x52>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	0018      	movs	r0, r3
 8006220:	f7ff fd8c 	bl	8005d3c <LL_ADC_DisableInternalRegulator>
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */

  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	492e      	ldr	r1, [pc, #184]	@ (80062e8 <HAL_ADC_DeInit+0x120>)
 8006230:	400a      	ands	r2, r1
 8006232:	605a      	str	r2, [r3, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOCAL | ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a2c      	ldr	r2, [pc, #176]	@ (80062ec <HAL_ADC_DeInit+0x124>)
 800623a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH  | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	492a      	ldr	r1, [pc, #168]	@ (80062f0 <HAL_ADC_DeInit+0x128>)
 8006248:	400a      	ands	r2, r1
 800624a:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691a      	ldr	r2, [r3, #16]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	0092      	lsls	r2, r2, #2
 8006258:	0892      	lsrs	r2, r2, #2
 800625a:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695a      	ldr	r2, [r3, #20]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2107      	movs	r1, #7
 8006268:	438a      	bics	r2, r1
 800626a:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6a1a      	ldr	r2, [r3, #32]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	491f      	ldr	r1, [pc, #124]	@ (80062f4 <HAL_ADC_DeInit+0x12c>)
 8006278:	400a      	ands	r2, r1
 800627a:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	491b      	ldr	r1, [pc, #108]	@ (80062f4 <HAL_ADC_DeInit+0x12c>)
 8006288:	400a      	ands	r2, r1
 800628a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4917      	ldr	r1, [pc, #92]	@ (80062f4 <HAL_ADC_DeInit+0x12c>)
 8006298:	400a      	ands	r2, r1
 800629a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2200      	movs	r2, #0
 80062a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC1_COMMON->CCR &= ~(ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80062aa:	4b13      	ldr	r3, [pc, #76]	@ (80062f8 <HAL_ADC_DeInit+0x130>)
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	4b12      	ldr	r3, [pc, #72]	@ (80062f8 <HAL_ADC_DeInit+0x130>)
 80062b0:	4912      	ldr	r1, [pc, #72]	@ (80062fc <HAL_ADC_DeInit+0x134>)
 80062b2:	400a      	ands	r2, r1
 80062b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	0018      	movs	r0, r3
 80062ba:	f7fc fb73 	bl	80029a4 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2254      	movs	r2, #84	@ 0x54
 80062d4:	2100      	movs	r1, #0
 80062d6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80062d8:	230f      	movs	r3, #15
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	781b      	ldrb	r3, [r3, #0]
}
 80062de:	0018      	movs	r0, r3
 80062e0:	46bd      	mov	sp, r7
 80062e2:	b004      	add	sp, #16
 80062e4:	bdb0      	pop	{r4, r5, r7, pc}
 80062e6:	46c0      	nop			@ (mov r8, r8)
 80062e8:	fffff460 	.word	0xfffff460
 80062ec:	00000b9f 	.word	0x00000b9f
 80062f0:	831e0200 	.word	0x831e0200
 80062f4:	f000f000 	.word	0xf000f000
 80062f8:	40012708 	.word	0x40012708
 80062fc:	ff03ffff 	.word	0xff03ffff

08006300 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006300:	b5b0      	push	{r4, r5, r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	0018      	movs	r0, r3
 8006312:	f7ff fda1 	bl	8005e58 <LL_ADC_REG_IsConversionOngoing>
 8006316:	1e03      	subs	r3, r0, #0
 8006318:	d16c      	bne.n	80063f4 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2254      	movs	r2, #84	@ 0x54
 800631e:	5c9b      	ldrb	r3, [r3, r2]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_ADC_Start_DMA+0x28>
 8006324:	2302      	movs	r3, #2
 8006326:	e06c      	b.n	8006402 <HAL_ADC_Start_DMA+0x102>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2254      	movs	r2, #84	@ 0x54
 800632c:	2101      	movs	r1, #1
 800632e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	2201      	movs	r2, #1
 8006338:	4013      	ands	r3, r2
 800633a:	d113      	bne.n	8006364 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	0018      	movs	r0, r3
 8006342:	f7ff fd43 	bl	8005dcc <LL_ADC_IsEnabled>
 8006346:	1e03      	subs	r3, r0, #0
 8006348:	d004      	beq.n	8006354 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	0018      	movs	r0, r3
 8006350:	f7ff fd2a 	bl	8005da8 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2101      	movs	r1, #1
 8006360:	430a      	orrs	r2, r1
 8006362:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006364:	2517      	movs	r5, #23
 8006366:	197c      	adds	r4, r7, r5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	0018      	movs	r0, r3
 800636c:	f000 faea 	bl	8006944 <ADC_Enable>
 8006370:	0003      	movs	r3, r0
 8006372:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006374:	002c      	movs	r4, r5
 8006376:	193b      	adds	r3, r7, r4
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d13e      	bne.n	80063fc <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006382:	4a22      	ldr	r2, [pc, #136]	@ (800640c <HAL_ADC_Start_DMA+0x10c>)
 8006384:	4013      	ands	r3, r2
 8006386:	2280      	movs	r2, #128	@ 0x80
 8006388:	0052      	lsls	r2, r2, #1
 800638a:	431a      	orrs	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800639a:	4a1d      	ldr	r2, [pc, #116]	@ (8006410 <HAL_ADC_Start_DMA+0x110>)
 800639c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006414 <HAL_ADC_Start_DMA+0x114>)
 80063a4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006418 <HAL_ADC_Start_DMA+0x118>)
 80063ac:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	221c      	movs	r2, #28
 80063b4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2254      	movs	r2, #84	@ 0x54
 80063ba:	2100      	movs	r1, #0
 80063bc:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2110      	movs	r1, #16
 80063ca:	430a      	orrs	r2, r1
 80063cc:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3340      	adds	r3, #64	@ 0x40
 80063d8:	0019      	movs	r1, r3
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	193c      	adds	r4, r7, r4
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f000 fe26 	bl	8007030 <HAL_DMA_Start_IT>
 80063e4:	0003      	movs	r3, r0
 80063e6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	0018      	movs	r0, r3
 80063ee:	f7ff fd0f 	bl	8005e10 <LL_ADC_REG_StartConversion>
 80063f2:	e003      	b.n	80063fc <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80063f4:	2317      	movs	r3, #23
 80063f6:	18fb      	adds	r3, r7, r3
 80063f8:	2202      	movs	r2, #2
 80063fa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80063fc:	2317      	movs	r3, #23
 80063fe:	18fb      	adds	r3, r7, r3
 8006400:	781b      	ldrb	r3, [r3, #0]
}
 8006402:	0018      	movs	r0, r3
 8006404:	46bd      	mov	sp, r7
 8006406:	b006      	add	sp, #24
 8006408:	bdb0      	pop	{r4, r5, r7, pc}
 800640a:	46c0      	nop			@ (mov r8, r8)
 800640c:	fffff0fe 	.word	0xfffff0fe
 8006410:	08006af1 	.word	0x08006af1
 8006414:	08006bb9 	.word	0x08006bb9
 8006418:	08006bd7 	.word	0x08006bd7

0800641c <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800641c:	b5b0      	push	{r4, r5, r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2254      	movs	r2, #84	@ 0x54
 8006428:	5c9b      	ldrb	r3, [r3, r2]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d101      	bne.n	8006432 <HAL_ADC_Stop_DMA+0x16>
 800642e:	2302      	movs	r3, #2
 8006430:	e05f      	b.n	80064f2 <HAL_ADC_Stop_DMA+0xd6>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2254      	movs	r2, #84	@ 0x54
 8006436:	2101      	movs	r1, #1
 8006438:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800643a:	250f      	movs	r5, #15
 800643c:	197c      	adds	r4, r7, r5
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	0018      	movs	r0, r3
 8006442:	f000 fa43 	bl	80068cc <ADC_ConversionStop>
 8006446:	0003      	movs	r3, r0
 8006448:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800644a:	0029      	movs	r1, r5
 800644c:	187b      	adds	r3, r7, r1
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d147      	bne.n	80064e4 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006458:	2225      	movs	r2, #37	@ 0x25
 800645a:	5c9b      	ldrb	r3, [r3, r2]
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d112      	bne.n	8006488 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006466:	000d      	movs	r5, r1
 8006468:	187c      	adds	r4, r7, r1
 800646a:	0018      	movs	r0, r3
 800646c:	f000 fe68 	bl	8007140 <HAL_DMA_Abort>
 8006470:	0003      	movs	r3, r0
 8006472:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006474:	197b      	adds	r3, r7, r5
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d005      	beq.n	8006488 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006480:	2240      	movs	r2, #64	@ 0x40
 8006482:	431a      	orrs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2110      	movs	r1, #16
 8006494:	438a      	bics	r2, r1
 8006496:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006498:	220f      	movs	r2, #15
 800649a:	18bb      	adds	r3, r7, r2
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d107      	bne.n	80064b2 <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80064a2:	18bc      	adds	r4, r7, r2
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	0018      	movs	r0, r3
 80064a8:	f000 faca 	bl	8006a40 <ADC_Disable>
 80064ac:	0003      	movs	r3, r0
 80064ae:	7023      	strb	r3, [r4, #0]
 80064b0:	e003      	b.n	80064ba <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	0018      	movs	r0, r3
 80064b6:	f000 fac3 	bl	8006a40 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80064ba:	230f      	movs	r3, #15
 80064bc:	18fb      	adds	r3, r7, r3
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d107      	bne.n	80064d4 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064c8:	4a0c      	ldr	r2, [pc, #48]	@ (80064fc <HAL_ADC_Stop_DMA+0xe0>)
 80064ca:	4013      	ands	r3, r2
 80064cc:	2201      	movs	r2, #1
 80064ce:	431a      	orrs	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2101      	movs	r1, #1
 80064e0:	438a      	bics	r2, r1
 80064e2:	60da      	str	r2, [r3, #12]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2254      	movs	r2, #84	@ 0x54
 80064e8:	2100      	movs	r1, #0
 80064ea:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80064ec:	230f      	movs	r3, #15
 80064ee:	18fb      	adds	r3, r7, r3
 80064f0:	781b      	ldrb	r3, [r3, #0]
}
 80064f2:	0018      	movs	r0, r3
 80064f4:	46bd      	mov	sp, r7
 80064f6:	b004      	add	sp, #16
 80064f8:	bdb0      	pop	{r4, r5, r7, pc}
 80064fa:	46c0      	nop			@ (mov r8, r8)
 80064fc:	fffffefe 	.word	0xfffffefe

08006500 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006508:	46c0      	nop			@ (mov r8, r8)
 800650a:	46bd      	mov	sp, r7
 800650c:	b002      	add	sp, #8
 800650e:	bd80      	pop	{r7, pc}

08006510 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006518:	46c0      	nop			@ (mov r8, r8)
 800651a:	46bd      	mov	sp, r7
 800651c:	b002      	add	sp, #8
 800651e:	bd80      	pop	{r7, pc}

08006520 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800652a:	2317      	movs	r3, #23
 800652c:	18fb      	adds	r3, r7, r3
 800652e:	2200      	movs	r2, #0
 8006530:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006532:	2300      	movs	r3, #0
 8006534:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2254      	movs	r2, #84	@ 0x54
 800653a:	5c9b      	ldrb	r3, [r3, r2]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d101      	bne.n	8006544 <HAL_ADC_ConfigChannel+0x24>
 8006540:	2302      	movs	r3, #2
 8006542:	e1be      	b.n	80068c2 <HAL_ADC_ConfigChannel+0x3a2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2254      	movs	r2, #84	@ 0x54
 8006548:	2101      	movs	r1, #1
 800654a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	0018      	movs	r0, r3
 8006552:	f7ff fc81 	bl	8005e58 <LL_ADC_REG_IsConversionOngoing>
 8006556:	1e03      	subs	r3, r0, #0
 8006558:	d000      	beq.n	800655c <HAL_ADC_ConfigChannel+0x3c>
 800655a:	e1a1      	b.n	80068a0 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2b02      	cmp	r3, #2
 8006562:	d100      	bne.n	8006566 <HAL_ADC_ConfigChannel+0x46>
 8006564:	e152      	b.n	800680c <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	691a      	ldr	r2, [r3, #16]
 800656a:	2380      	movs	r3, #128	@ 0x80
 800656c:	061b      	lsls	r3, r3, #24
 800656e:	429a      	cmp	r2, r3
 8006570:	d004      	beq.n	800657c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006576:	4ac2      	ldr	r2, [pc, #776]	@ (8006880 <HAL_ADC_ConfigChannel+0x360>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d108      	bne.n	800658e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	0019      	movs	r1, r3
 8006586:	0010      	movs	r0, r2
 8006588:	f7ff fb84 	bl	8005c94 <LL_ADC_REG_SetSequencerChAdd>
 800658c:	e0ed      	b.n	800676a <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	211f      	movs	r1, #31
 8006598:	400b      	ands	r3, r1
 800659a:	210f      	movs	r1, #15
 800659c:	4099      	lsls	r1, r3
 800659e:	000b      	movs	r3, r1
 80065a0:	43db      	mvns	r3, r3
 80065a2:	4013      	ands	r3, r2
 80065a4:	0019      	movs	r1, r3
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	025b      	lsls	r3, r3, #9
 80065ac:	0a5b      	lsrs	r3, r3, #9
 80065ae:	d105      	bne.n	80065bc <HAL_ADC_ConfigChannel+0x9c>
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	0e9b      	lsrs	r3, r3, #26
 80065b6:	221f      	movs	r2, #31
 80065b8:	4013      	ands	r3, r2
 80065ba:	e0bc      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2201      	movs	r2, #1
 80065c2:	4013      	ands	r3, r2
 80065c4:	d000      	beq.n	80065c8 <HAL_ADC_ConfigChannel+0xa8>
 80065c6:	e0b5      	b.n	8006734 <HAL_ADC_ConfigChannel+0x214>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2202      	movs	r2, #2
 80065ce:	4013      	ands	r3, r2
 80065d0:	d000      	beq.n	80065d4 <HAL_ADC_ConfigChannel+0xb4>
 80065d2:	e0ad      	b.n	8006730 <HAL_ADC_ConfigChannel+0x210>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2204      	movs	r2, #4
 80065da:	4013      	ands	r3, r2
 80065dc:	d000      	beq.n	80065e0 <HAL_ADC_ConfigChannel+0xc0>
 80065de:	e0a5      	b.n	800672c <HAL_ADC_ConfigChannel+0x20c>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2208      	movs	r2, #8
 80065e6:	4013      	ands	r3, r2
 80065e8:	d000      	beq.n	80065ec <HAL_ADC_ConfigChannel+0xcc>
 80065ea:	e09d      	b.n	8006728 <HAL_ADC_ConfigChannel+0x208>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2210      	movs	r2, #16
 80065f2:	4013      	ands	r3, r2
 80065f4:	d000      	beq.n	80065f8 <HAL_ADC_ConfigChannel+0xd8>
 80065f6:	e095      	b.n	8006724 <HAL_ADC_ConfigChannel+0x204>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2220      	movs	r2, #32
 80065fe:	4013      	ands	r3, r2
 8006600:	d000      	beq.n	8006604 <HAL_ADC_ConfigChannel+0xe4>
 8006602:	e08d      	b.n	8006720 <HAL_ADC_ConfigChannel+0x200>
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2240      	movs	r2, #64	@ 0x40
 800660a:	4013      	ands	r3, r2
 800660c:	d000      	beq.n	8006610 <HAL_ADC_ConfigChannel+0xf0>
 800660e:	e085      	b.n	800671c <HAL_ADC_ConfigChannel+0x1fc>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2280      	movs	r2, #128	@ 0x80
 8006616:	4013      	ands	r3, r2
 8006618:	d000      	beq.n	800661c <HAL_ADC_ConfigChannel+0xfc>
 800661a:	e07d      	b.n	8006718 <HAL_ADC_ConfigChannel+0x1f8>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	2380      	movs	r3, #128	@ 0x80
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	4013      	ands	r3, r2
 8006626:	d000      	beq.n	800662a <HAL_ADC_ConfigChannel+0x10a>
 8006628:	e074      	b.n	8006714 <HAL_ADC_ConfigChannel+0x1f4>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	2380      	movs	r3, #128	@ 0x80
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4013      	ands	r3, r2
 8006634:	d000      	beq.n	8006638 <HAL_ADC_ConfigChannel+0x118>
 8006636:	e06b      	b.n	8006710 <HAL_ADC_ConfigChannel+0x1f0>
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	2380      	movs	r3, #128	@ 0x80
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	4013      	ands	r3, r2
 8006642:	d000      	beq.n	8006646 <HAL_ADC_ConfigChannel+0x126>
 8006644:	e062      	b.n	800670c <HAL_ADC_ConfigChannel+0x1ec>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	2380      	movs	r3, #128	@ 0x80
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	4013      	ands	r3, r2
 8006650:	d000      	beq.n	8006654 <HAL_ADC_ConfigChannel+0x134>
 8006652:	e059      	b.n	8006708 <HAL_ADC_ConfigChannel+0x1e8>
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	2380      	movs	r3, #128	@ 0x80
 800665a:	015b      	lsls	r3, r3, #5
 800665c:	4013      	ands	r3, r2
 800665e:	d151      	bne.n	8006704 <HAL_ADC_ConfigChannel+0x1e4>
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	2380      	movs	r3, #128	@ 0x80
 8006666:	019b      	lsls	r3, r3, #6
 8006668:	4013      	ands	r3, r2
 800666a:	d149      	bne.n	8006700 <HAL_ADC_ConfigChannel+0x1e0>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	2380      	movs	r3, #128	@ 0x80
 8006672:	01db      	lsls	r3, r3, #7
 8006674:	4013      	ands	r3, r2
 8006676:	d141      	bne.n	80066fc <HAL_ADC_ConfigChannel+0x1dc>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	2380      	movs	r3, #128	@ 0x80
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	4013      	ands	r3, r2
 8006682:	d139      	bne.n	80066f8 <HAL_ADC_ConfigChannel+0x1d8>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	2380      	movs	r3, #128	@ 0x80
 800668a:	025b      	lsls	r3, r3, #9
 800668c:	4013      	ands	r3, r2
 800668e:	d131      	bne.n	80066f4 <HAL_ADC_ConfigChannel+0x1d4>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	2380      	movs	r3, #128	@ 0x80
 8006696:	029b      	lsls	r3, r3, #10
 8006698:	4013      	ands	r3, r2
 800669a:	d129      	bne.n	80066f0 <HAL_ADC_ConfigChannel+0x1d0>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	2380      	movs	r3, #128	@ 0x80
 80066a2:	02db      	lsls	r3, r3, #11
 80066a4:	4013      	ands	r3, r2
 80066a6:	d121      	bne.n	80066ec <HAL_ADC_ConfigChannel+0x1cc>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	2380      	movs	r3, #128	@ 0x80
 80066ae:	031b      	lsls	r3, r3, #12
 80066b0:	4013      	ands	r3, r2
 80066b2:	d119      	bne.n	80066e8 <HAL_ADC_ConfigChannel+0x1c8>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	2380      	movs	r3, #128	@ 0x80
 80066ba:	035b      	lsls	r3, r3, #13
 80066bc:	4013      	ands	r3, r2
 80066be:	d111      	bne.n	80066e4 <HAL_ADC_ConfigChannel+0x1c4>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	2380      	movs	r3, #128	@ 0x80
 80066c6:	039b      	lsls	r3, r3, #14
 80066c8:	4013      	ands	r3, r2
 80066ca:	d109      	bne.n	80066e0 <HAL_ADC_ConfigChannel+0x1c0>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	2380      	movs	r3, #128	@ 0x80
 80066d2:	03db      	lsls	r3, r3, #15
 80066d4:	4013      	ands	r3, r2
 80066d6:	d001      	beq.n	80066dc <HAL_ADC_ConfigChannel+0x1bc>
 80066d8:	2316      	movs	r3, #22
 80066da:	e02c      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 80066dc:	2300      	movs	r3, #0
 80066de:	e02a      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 80066e0:	2315      	movs	r3, #21
 80066e2:	e028      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 80066e4:	2314      	movs	r3, #20
 80066e6:	e026      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 80066e8:	2313      	movs	r3, #19
 80066ea:	e024      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 80066ec:	2312      	movs	r3, #18
 80066ee:	e022      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 80066f0:	2311      	movs	r3, #17
 80066f2:	e020      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 80066f4:	2310      	movs	r3, #16
 80066f6:	e01e      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 80066f8:	230f      	movs	r3, #15
 80066fa:	e01c      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 80066fc:	230e      	movs	r3, #14
 80066fe:	e01a      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 8006700:	230d      	movs	r3, #13
 8006702:	e018      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 8006704:	230c      	movs	r3, #12
 8006706:	e016      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 8006708:	230b      	movs	r3, #11
 800670a:	e014      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 800670c:	230a      	movs	r3, #10
 800670e:	e012      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 8006710:	2309      	movs	r3, #9
 8006712:	e010      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 8006714:	2308      	movs	r3, #8
 8006716:	e00e      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 8006718:	2307      	movs	r3, #7
 800671a:	e00c      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 800671c:	2306      	movs	r3, #6
 800671e:	e00a      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 8006720:	2305      	movs	r3, #5
 8006722:	e008      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 8006724:	2304      	movs	r3, #4
 8006726:	e006      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 8006728:	2303      	movs	r3, #3
 800672a:	e004      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 800672c:	2302      	movs	r3, #2
 800672e:	e002      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 8006730:	2301      	movs	r3, #1
 8006732:	e000      	b.n	8006736 <HAL_ADC_ConfigChannel+0x216>
 8006734:	2300      	movs	r3, #0
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	6852      	ldr	r2, [r2, #4]
 800673a:	201f      	movs	r0, #31
 800673c:	4002      	ands	r2, r0
 800673e:	4093      	lsls	r3, r2
 8006740:	000a      	movs	r2, r1
 8006742:	431a      	orrs	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	089b      	lsrs	r3, r3, #2
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	429a      	cmp	r2, r3
 8006756:	d808      	bhi.n	800676a <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	6859      	ldr	r1, [r3, #4]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	001a      	movs	r2, r3
 8006766:	f7ff fa75 	bl	8005c54 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6818      	ldr	r0, [r3, #0]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	6819      	ldr	r1, [r3, #0]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	001a      	movs	r2, r3
 8006778:	f7ff fab0 	bl	8005cdc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	db00      	blt.n	8006786 <HAL_ADC_ConfigChannel+0x266>
 8006784:	e096      	b.n	80068b4 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006786:	4b3f      	ldr	r3, [pc, #252]	@ (8006884 <HAL_ADC_ConfigChannel+0x364>)
 8006788:	0018      	movs	r0, r3
 800678a:	f7ff fa11 	bl	8005bb0 <LL_ADC_GetCommonPathInternalCh>
 800678e:	0003      	movs	r3, r0
 8006790:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a3c      	ldr	r2, [pc, #240]	@ (8006888 <HAL_ADC_ConfigChannel+0x368>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d123      	bne.n	80067e4 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	2380      	movs	r3, #128	@ 0x80
 80067a0:	041b      	lsls	r3, r3, #16
 80067a2:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80067a4:	d11e      	bne.n	80067e4 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	2280      	movs	r2, #128	@ 0x80
 80067aa:	0412      	lsls	r2, r2, #16
 80067ac:	4313      	orrs	r3, r2
 80067ae:	4a35      	ldr	r2, [pc, #212]	@ (8006884 <HAL_ADC_ConfigChannel+0x364>)
 80067b0:	0019      	movs	r1, r3
 80067b2:	0010      	movs	r0, r2
 80067b4:	f7ff f9e8 	bl	8005b88 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80067b8:	4b34      	ldr	r3, [pc, #208]	@ (800688c <HAL_ADC_ConfigChannel+0x36c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4934      	ldr	r1, [pc, #208]	@ (8006890 <HAL_ADC_ConfigChannel+0x370>)
 80067be:	0018      	movs	r0, r3
 80067c0:	f7f9 fca2 	bl	8000108 <__udivsi3>
 80067c4:	0003      	movs	r3, r0
 80067c6:	001a      	movs	r2, r3
 80067c8:	0013      	movs	r3, r2
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	189b      	adds	r3, r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	3301      	adds	r3, #1
 80067d2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80067d4:	e002      	b.n	80067dc <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3b01      	subs	r3, #1
 80067da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1f9      	bne.n	80067d6 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80067e2:	e067      	b.n	80068b4 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a2a      	ldr	r2, [pc, #168]	@ (8006894 <HAL_ADC_ConfigChannel+0x374>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d162      	bne.n	80068b4 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	2380      	movs	r3, #128	@ 0x80
 80067f2:	03db      	lsls	r3, r3, #15
 80067f4:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80067f6:	d15d      	bne.n	80068b4 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	2280      	movs	r2, #128	@ 0x80
 80067fc:	03d2      	lsls	r2, r2, #15
 80067fe:	4313      	orrs	r3, r2
 8006800:	4a20      	ldr	r2, [pc, #128]	@ (8006884 <HAL_ADC_ConfigChannel+0x364>)
 8006802:	0019      	movs	r1, r3
 8006804:	0010      	movs	r0, r2
 8006806:	f7ff f9bf 	bl	8005b88 <LL_ADC_SetCommonPathInternalCh>
 800680a:	e053      	b.n	80068b4 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691a      	ldr	r2, [r3, #16]
 8006810:	2380      	movs	r3, #128	@ 0x80
 8006812:	061b      	lsls	r3, r3, #24
 8006814:	429a      	cmp	r2, r3
 8006816:	d004      	beq.n	8006822 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800681c:	4a18      	ldr	r2, [pc, #96]	@ (8006880 <HAL_ADC_ConfigChannel+0x360>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d107      	bne.n	8006832 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	0019      	movs	r1, r3
 800682c:	0010      	movs	r0, r2
 800682e:	f7ff fa42 	bl	8005cb6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	da3c      	bge.n	80068b4 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800683a:	4b12      	ldr	r3, [pc, #72]	@ (8006884 <HAL_ADC_ConfigChannel+0x364>)
 800683c:	0018      	movs	r0, r3
 800683e:	f7ff f9b7 	bl	8005bb0 <LL_ADC_GetCommonPathInternalCh>
 8006842:	0003      	movs	r3, r0
 8006844:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a0f      	ldr	r2, [pc, #60]	@ (8006888 <HAL_ADC_ConfigChannel+0x368>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d108      	bne.n	8006862 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	4a11      	ldr	r2, [pc, #68]	@ (8006898 <HAL_ADC_ConfigChannel+0x378>)
 8006854:	4013      	ands	r3, r2
 8006856:	4a0b      	ldr	r2, [pc, #44]	@ (8006884 <HAL_ADC_ConfigChannel+0x364>)
 8006858:	0019      	movs	r1, r3
 800685a:	0010      	movs	r0, r2
 800685c:	f7ff f994 	bl	8005b88 <LL_ADC_SetCommonPathInternalCh>
 8006860:	e028      	b.n	80068b4 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a0b      	ldr	r2, [pc, #44]	@ (8006894 <HAL_ADC_ConfigChannel+0x374>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d123      	bne.n	80068b4 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	4a0b      	ldr	r2, [pc, #44]	@ (800689c <HAL_ADC_ConfigChannel+0x37c>)
 8006870:	4013      	ands	r3, r2
 8006872:	4a04      	ldr	r2, [pc, #16]	@ (8006884 <HAL_ADC_ConfigChannel+0x364>)
 8006874:	0019      	movs	r1, r3
 8006876:	0010      	movs	r0, r2
 8006878:	f7ff f986 	bl	8005b88 <LL_ADC_SetCommonPathInternalCh>
 800687c:	e01a      	b.n	80068b4 <HAL_ADC_ConfigChannel+0x394>
 800687e:	46c0      	nop			@ (mov r8, r8)
 8006880:	80000004 	.word	0x80000004
 8006884:	40012708 	.word	0x40012708
 8006888:	a4000200 	.word	0xa4000200
 800688c:	20000024 	.word	0x20000024
 8006890:	00030d40 	.word	0x00030d40
 8006894:	a8000400 	.word	0xa8000400
 8006898:	ff7fffff 	.word	0xff7fffff
 800689c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a4:	2220      	movs	r2, #32
 80068a6:	431a      	orrs	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80068ac:	2317      	movs	r3, #23
 80068ae:	18fb      	adds	r3, r7, r3
 80068b0:	2201      	movs	r2, #1
 80068b2:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2254      	movs	r2, #84	@ 0x54
 80068b8:	2100      	movs	r1, #0
 80068ba:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80068bc:	2317      	movs	r3, #23
 80068be:	18fb      	adds	r3, r7, r3
 80068c0:	781b      	ldrb	r3, [r3, #0]
}
 80068c2:	0018      	movs	r0, r3
 80068c4:	46bd      	mov	sp, r7
 80068c6:	b006      	add	sp, #24
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	46c0      	nop			@ (mov r8, r8)

080068cc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	0018      	movs	r0, r3
 80068da:	f7ff fabd 	bl	8005e58 <LL_ADC_REG_IsConversionOngoing>
 80068de:	1e03      	subs	r3, r0, #0
 80068e0:	d02b      	beq.n	800693a <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	0018      	movs	r0, r3
 80068e8:	f7ff fa81 	bl	8005dee <LL_ADC_IsDisableOngoing>
 80068ec:	1e03      	subs	r3, r0, #0
 80068ee:	d104      	bne.n	80068fa <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	0018      	movs	r0, r3
 80068f6:	f7ff fa9d 	bl	8005e34 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80068fa:	f7ff f917 	bl	8005b2c <HAL_GetTick>
 80068fe:	0003      	movs	r3, r0
 8006900:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006902:	e014      	b.n	800692e <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006904:	f7ff f912 	bl	8005b2c <HAL_GetTick>
 8006908:	0002      	movs	r2, r0
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d90d      	bls.n	800692e <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006916:	2210      	movs	r2, #16
 8006918:	431a      	orrs	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006922:	2201      	movs	r2, #1
 8006924:	431a      	orrs	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e006      	b.n	800693c <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2204      	movs	r2, #4
 8006936:	4013      	ands	r3, r2
 8006938:	d1e4      	bne.n	8006904 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	0018      	movs	r0, r3
 800693e:	46bd      	mov	sp, r7
 8006940:	b004      	add	sp, #16
 8006942:	bd80      	pop	{r7, pc}

08006944 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800694c:	2300      	movs	r3, #0
 800694e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	0018      	movs	r0, r3
 8006956:	f7ff fa39 	bl	8005dcc <LL_ADC_IsEnabled>
 800695a:	1e03      	subs	r3, r0, #0
 800695c:	d162      	bne.n	8006a24 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	4a32      	ldr	r2, [pc, #200]	@ (8006a30 <ADC_Enable+0xec>)
 8006966:	4013      	ands	r3, r2
 8006968:	d00d      	beq.n	8006986 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800696e:	2210      	movs	r2, #16
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800697a:	2201      	movs	r2, #1
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e04f      	b.n	8006a26 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	0018      	movs	r0, r3
 800698c:	f7ff f9fa 	bl	8005d84 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8006990:	4b28      	ldr	r3, [pc, #160]	@ (8006a34 <ADC_Enable+0xf0>)
 8006992:	0018      	movs	r0, r3
 8006994:	f7ff f90c 	bl	8005bb0 <LL_ADC_GetCommonPathInternalCh>
 8006998:	0002      	movs	r2, r0
 800699a:	2380      	movs	r3, #128	@ 0x80
 800699c:	041b      	lsls	r3, r3, #16
 800699e:	4013      	ands	r3, r2
 80069a0:	d00f      	beq.n	80069c2 <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80069a2:	4b25      	ldr	r3, [pc, #148]	@ (8006a38 <ADC_Enable+0xf4>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4925      	ldr	r1, [pc, #148]	@ (8006a3c <ADC_Enable+0xf8>)
 80069a8:	0018      	movs	r0, r3
 80069aa:	f7f9 fbad 	bl	8000108 <__udivsi3>
 80069ae:	0003      	movs	r3, r0
 80069b0:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80069b2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80069b4:	e002      	b.n	80069bc <ADC_Enable+0x78>
      {
        wait_loop_index--;
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f9      	bne.n	80069b6 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	7e5b      	ldrb	r3, [r3, #25]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d02c      	beq.n	8006a24 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80069ca:	f7ff f8af 	bl	8005b2c <HAL_GetTick>
 80069ce:	0003      	movs	r3, r0
 80069d0:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069d2:	e020      	b.n	8006a16 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	0018      	movs	r0, r3
 80069da:	f7ff f9f7 	bl	8005dcc <LL_ADC_IsEnabled>
 80069de:	1e03      	subs	r3, r0, #0
 80069e0:	d104      	bne.n	80069ec <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	0018      	movs	r0, r3
 80069e8:	f7ff f9cc 	bl	8005d84 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80069ec:	f7ff f89e 	bl	8005b2c <HAL_GetTick>
 80069f0:	0002      	movs	r2, r0
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d90d      	bls.n	8006a16 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069fe:	2210      	movs	r2, #16
 8006a00:	431a      	orrs	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e007      	b.n	8006a26 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	4013      	ands	r3, r2
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d1d7      	bne.n	80069d4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	0018      	movs	r0, r3
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	b004      	add	sp, #16
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	46c0      	nop			@ (mov r8, r8)
 8006a30:	80000017 	.word	0x80000017
 8006a34:	40012708 	.word	0x40012708
 8006a38:	20000024 	.word	0x20000024
 8006a3c:	00030d40 	.word	0x00030d40

08006a40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	f7ff f9ce 	bl	8005dee <LL_ADC_IsDisableOngoing>
 8006a52:	0003      	movs	r3, r0
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f7ff f9b6 	bl	8005dcc <LL_ADC_IsEnabled>
 8006a60:	1e03      	subs	r3, r0, #0
 8006a62:	d040      	beq.n	8006ae6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d13d      	bne.n	8006ae6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	2205      	movs	r2, #5
 8006a72:	4013      	ands	r3, r2
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d10d      	bne.n	8006a94 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f7ff f993 	bl	8005da8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2203      	movs	r2, #3
 8006a88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006a8a:	f7ff f84f 	bl	8005b2c <HAL_GetTick>
 8006a8e:	0003      	movs	r3, r0
 8006a90:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a92:	e022      	b.n	8006ada <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a98:	2210      	movs	r2, #16
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e01b      	b.n	8006ae8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006ab0:	f7ff f83c 	bl	8005b2c <HAL_GetTick>
 8006ab4:	0002      	movs	r2, r0
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d90d      	bls.n	8006ada <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ac2:	2210      	movs	r2, #16
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ace:	2201      	movs	r2, #1
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e006      	b.n	8006ae8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	d1e4      	bne.n	8006ab0 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	0018      	movs	r0, r3
 8006aea:	46bd      	mov	sp, r7
 8006aec:	b004      	add	sp, #16
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b02:	2250      	movs	r2, #80	@ 0x50
 8006b04:	4013      	ands	r3, r2
 8006b06:	d141      	bne.n	8006b8c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b0c:	2280      	movs	r2, #128	@ 0x80
 8006b0e:	0092      	lsls	r2, r2, #2
 8006b10:	431a      	orrs	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f7ff f889 	bl	8005c32 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006b20:	1e03      	subs	r3, r0, #0
 8006b22:	d02e      	beq.n	8006b82 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	7e9b      	ldrb	r3, [r3, #26]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d12a      	bne.n	8006b82 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2208      	movs	r2, #8
 8006b34:	4013      	ands	r3, r2
 8006b36:	2b08      	cmp	r3, #8
 8006b38:	d123      	bne.n	8006b82 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	0018      	movs	r0, r3
 8006b40:	f7ff f98a 	bl	8005e58 <LL_ADC_REG_IsConversionOngoing>
 8006b44:	1e03      	subs	r3, r0, #0
 8006b46:	d110      	bne.n	8006b6a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	210c      	movs	r1, #12
 8006b54:	438a      	bics	r2, r1
 8006b56:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b5c:	4a15      	ldr	r2, [pc, #84]	@ (8006bb4 <ADC_DMAConvCplt+0xc4>)
 8006b5e:	4013      	ands	r3, r2
 8006b60:	2201      	movs	r2, #1
 8006b62:	431a      	orrs	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	659a      	str	r2, [r3, #88]	@ 0x58
 8006b68:	e00b      	b.n	8006b82 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b6e:	2220      	movs	r2, #32
 8006b70:	431a      	orrs	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	431a      	orrs	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	0018      	movs	r0, r3
 8006b86:	f7ff fcbb 	bl	8006500 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006b8a:	e00f      	b.n	8006bac <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b90:	2210      	movs	r2, #16
 8006b92:	4013      	ands	r3, r2
 8006b94:	d004      	beq.n	8006ba0 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f7fa fa9f 	bl	80010dc <HAL_ADC_ErrorCallback>
}
 8006b9e:	e005      	b.n	8006bac <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	0010      	movs	r0, r2
 8006baa:	4798      	blx	r3
}
 8006bac:	46c0      	nop			@ (mov r8, r8)
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	b004      	add	sp, #16
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	fffffefe 	.word	0xfffffefe

08006bb8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f7ff fca1 	bl	8006510 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006bce:	46c0      	nop			@ (mov r8, r8)
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	b004      	add	sp, #16
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006be8:	2240      	movs	r2, #64	@ 0x40
 8006bea:	431a      	orrs	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bf4:	2204      	movs	r2, #4
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	0018      	movs	r0, r3
 8006c00:	f7fa fa6c 	bl	80010dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c04:	46c0      	nop			@ (mov r8, r8)
 8006c06:	46bd      	mov	sp, r7
 8006c08:	b004      	add	sp, #16
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	0002      	movs	r2, r0
 8006c14:	1dfb      	adds	r3, r7, #7
 8006c16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006c18:	1dfb      	adds	r3, r7, #7
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c1e:	d809      	bhi.n	8006c34 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c20:	1dfb      	adds	r3, r7, #7
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	001a      	movs	r2, r3
 8006c26:	231f      	movs	r3, #31
 8006c28:	401a      	ands	r2, r3
 8006c2a:	4b04      	ldr	r3, [pc, #16]	@ (8006c3c <__NVIC_EnableIRQ+0x30>)
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	4091      	lsls	r1, r2
 8006c30:	000a      	movs	r2, r1
 8006c32:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006c34:	46c0      	nop			@ (mov r8, r8)
 8006c36:	46bd      	mov	sp, r7
 8006c38:	b002      	add	sp, #8
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	e000e100 	.word	0xe000e100

08006c40 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	0002      	movs	r2, r0
 8006c48:	1dfb      	adds	r3, r7, #7
 8006c4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006c4c:	1dfb      	adds	r3, r7, #7
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c52:	d810      	bhi.n	8006c76 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c54:	1dfb      	adds	r3, r7, #7
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	001a      	movs	r2, r3
 8006c5a:	231f      	movs	r3, #31
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	4908      	ldr	r1, [pc, #32]	@ (8006c80 <__NVIC_DisableIRQ+0x40>)
 8006c60:	2201      	movs	r2, #1
 8006c62:	409a      	lsls	r2, r3
 8006c64:	0013      	movs	r3, r2
 8006c66:	2280      	movs	r2, #128	@ 0x80
 8006c68:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006c6a:	f3bf 8f4f 	dsb	sy
}
 8006c6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8006c70:	f3bf 8f6f 	isb	sy
}
 8006c74:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8006c76:	46c0      	nop			@ (mov r8, r8)
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	b002      	add	sp, #8
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	46c0      	nop			@ (mov r8, r8)
 8006c80:	e000e100 	.word	0xe000e100

08006c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c84:	b590      	push	{r4, r7, lr}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	0002      	movs	r2, r0
 8006c8c:	6039      	str	r1, [r7, #0]
 8006c8e:	1dfb      	adds	r3, r7, #7
 8006c90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006c92:	1dfb      	adds	r3, r7, #7
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c98:	d828      	bhi.n	8006cec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006c9a:	4a2f      	ldr	r2, [pc, #188]	@ (8006d58 <__NVIC_SetPriority+0xd4>)
 8006c9c:	1dfb      	adds	r3, r7, #7
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	b25b      	sxtb	r3, r3
 8006ca2:	089b      	lsrs	r3, r3, #2
 8006ca4:	33c0      	adds	r3, #192	@ 0xc0
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	589b      	ldr	r3, [r3, r2]
 8006caa:	1dfa      	adds	r2, r7, #7
 8006cac:	7812      	ldrb	r2, [r2, #0]
 8006cae:	0011      	movs	r1, r2
 8006cb0:	2203      	movs	r2, #3
 8006cb2:	400a      	ands	r2, r1
 8006cb4:	00d2      	lsls	r2, r2, #3
 8006cb6:	21ff      	movs	r1, #255	@ 0xff
 8006cb8:	4091      	lsls	r1, r2
 8006cba:	000a      	movs	r2, r1
 8006cbc:	43d2      	mvns	r2, r2
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	019b      	lsls	r3, r3, #6
 8006cc6:	22ff      	movs	r2, #255	@ 0xff
 8006cc8:	401a      	ands	r2, r3
 8006cca:	1dfb      	adds	r3, r7, #7
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	0018      	movs	r0, r3
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	4003      	ands	r3, r0
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006cd8:	481f      	ldr	r0, [pc, #124]	@ (8006d58 <__NVIC_SetPriority+0xd4>)
 8006cda:	1dfb      	adds	r3, r7, #7
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	b25b      	sxtb	r3, r3
 8006ce0:	089b      	lsrs	r3, r3, #2
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	33c0      	adds	r3, #192	@ 0xc0
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006cea:	e031      	b.n	8006d50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006cec:	4a1b      	ldr	r2, [pc, #108]	@ (8006d5c <__NVIC_SetPriority+0xd8>)
 8006cee:	1dfb      	adds	r3, r7, #7
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	0019      	movs	r1, r3
 8006cf4:	230f      	movs	r3, #15
 8006cf6:	400b      	ands	r3, r1
 8006cf8:	3b08      	subs	r3, #8
 8006cfa:	089b      	lsrs	r3, r3, #2
 8006cfc:	3306      	adds	r3, #6
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	18d3      	adds	r3, r2, r3
 8006d02:	3304      	adds	r3, #4
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	1dfa      	adds	r2, r7, #7
 8006d08:	7812      	ldrb	r2, [r2, #0]
 8006d0a:	0011      	movs	r1, r2
 8006d0c:	2203      	movs	r2, #3
 8006d0e:	400a      	ands	r2, r1
 8006d10:	00d2      	lsls	r2, r2, #3
 8006d12:	21ff      	movs	r1, #255	@ 0xff
 8006d14:	4091      	lsls	r1, r2
 8006d16:	000a      	movs	r2, r1
 8006d18:	43d2      	mvns	r2, r2
 8006d1a:	401a      	ands	r2, r3
 8006d1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	019b      	lsls	r3, r3, #6
 8006d22:	22ff      	movs	r2, #255	@ 0xff
 8006d24:	401a      	ands	r2, r3
 8006d26:	1dfb      	adds	r3, r7, #7
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	4003      	ands	r3, r0
 8006d30:	00db      	lsls	r3, r3, #3
 8006d32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006d34:	4809      	ldr	r0, [pc, #36]	@ (8006d5c <__NVIC_SetPriority+0xd8>)
 8006d36:	1dfb      	adds	r3, r7, #7
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	001c      	movs	r4, r3
 8006d3c:	230f      	movs	r3, #15
 8006d3e:	4023      	ands	r3, r4
 8006d40:	3b08      	subs	r3, #8
 8006d42:	089b      	lsrs	r3, r3, #2
 8006d44:	430a      	orrs	r2, r1
 8006d46:	3306      	adds	r3, #6
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	18c3      	adds	r3, r0, r3
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	601a      	str	r2, [r3, #0]
}
 8006d50:	46c0      	nop			@ (mov r8, r8)
 8006d52:	46bd      	mov	sp, r7
 8006d54:	b003      	add	sp, #12
 8006d56:	bd90      	pop	{r4, r7, pc}
 8006d58:	e000e100 	.word	0xe000e100
 8006d5c:	e000ed00 	.word	0xe000ed00

08006d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	1e5a      	subs	r2, r3, #1
 8006d6c:	2380      	movs	r3, #128	@ 0x80
 8006d6e:	045b      	lsls	r3, r3, #17
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d301      	bcc.n	8006d78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d74:	2301      	movs	r3, #1
 8006d76:	e010      	b.n	8006d9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d78:	4b0a      	ldr	r3, [pc, #40]	@ (8006da4 <SysTick_Config+0x44>)
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	3a01      	subs	r2, #1
 8006d7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d80:	2301      	movs	r3, #1
 8006d82:	425b      	negs	r3, r3
 8006d84:	2103      	movs	r1, #3
 8006d86:	0018      	movs	r0, r3
 8006d88:	f7ff ff7c 	bl	8006c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d8c:	4b05      	ldr	r3, [pc, #20]	@ (8006da4 <SysTick_Config+0x44>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d92:	4b04      	ldr	r3, [pc, #16]	@ (8006da4 <SysTick_Config+0x44>)
 8006d94:	2207      	movs	r2, #7
 8006d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	b002      	add	sp, #8
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	46c0      	nop			@ (mov r8, r8)
 8006da4:	e000e010 	.word	0xe000e010

08006da8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60b9      	str	r1, [r7, #8]
 8006db0:	607a      	str	r2, [r7, #4]
 8006db2:	210f      	movs	r1, #15
 8006db4:	187b      	adds	r3, r7, r1
 8006db6:	1c02      	adds	r2, r0, #0
 8006db8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	187b      	adds	r3, r7, r1
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	b25b      	sxtb	r3, r3
 8006dc2:	0011      	movs	r1, r2
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	f7ff ff5d 	bl	8006c84 <__NVIC_SetPriority>
}
 8006dca:	46c0      	nop			@ (mov r8, r8)
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	b004      	add	sp, #16
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b082      	sub	sp, #8
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	0002      	movs	r2, r0
 8006dda:	1dfb      	adds	r3, r7, #7
 8006ddc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006dde:	1dfb      	adds	r3, r7, #7
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	b25b      	sxtb	r3, r3
 8006de4:	0018      	movs	r0, r3
 8006de6:	f7ff ff11 	bl	8006c0c <__NVIC_EnableIRQ>
}
 8006dea:	46c0      	nop			@ (mov r8, r8)
 8006dec:	46bd      	mov	sp, r7
 8006dee:	b002      	add	sp, #8
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b082      	sub	sp, #8
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	0002      	movs	r2, r0
 8006dfa:	1dfb      	adds	r3, r7, #7
 8006dfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006dfe:	1dfb      	adds	r3, r7, #7
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	b25b      	sxtb	r3, r3
 8006e04:	0018      	movs	r0, r3
 8006e06:	f7ff ff1b 	bl	8006c40 <__NVIC_DisableIRQ>
}
 8006e0a:	46c0      	nop			@ (mov r8, r8)
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	b002      	add	sp, #8
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f7ff ff9f 	bl	8006d60 <SysTick_Config>
 8006e22:	0003      	movs	r3, r0
}
 8006e24:	0018      	movs	r0, r3
 8006e26:	46bd      	mov	sp, r7
 8006e28:	b002      	add	sp, #8
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e077      	b.n	8006f2e <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a3d      	ldr	r2, [pc, #244]	@ (8006f38 <HAL_DMA_Init+0x10c>)
 8006e44:	4694      	mov	ip, r2
 8006e46:	4463      	add	r3, ip
 8006e48:	2114      	movs	r1, #20
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	f7f9 f95c 	bl	8000108 <__udivsi3>
 8006e50:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8006e52:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2225      	movs	r2, #37	@ 0x25
 8006e5c:	2102      	movs	r1, #2
 8006e5e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4934      	ldr	r1, [pc, #208]	@ (8006f3c <HAL_DMA_Init+0x110>)
 8006e6c:	400a      	ands	r2, r1
 8006e6e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6819      	ldr	r1, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689a      	ldr	r2, [r3, #8]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	431a      	orrs	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f000 fb21 	bl	80074f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	2380      	movs	r3, #128	@ 0x80
 8006eb4:	01db      	lsls	r3, r3, #7
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d102      	bne.n	8006ec0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ec8:	21ff      	movs	r1, #255	@ 0xff
 8006eca:	400a      	ands	r2, r1
 8006ecc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006ed6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d011      	beq.n	8006f04 <HAL_DMA_Init+0xd8>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d80d      	bhi.n	8006f04 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	0018      	movs	r0, r3
 8006eec:	f000 fb2c 	bl	8007548 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006f00:	605a      	str	r2, [r3, #4]
 8006f02:	e008      	b.n	8006f16 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2225      	movs	r2, #37	@ 0x25
 8006f20:	2101      	movs	r1, #1
 8006f22:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2224      	movs	r2, #36	@ 0x24
 8006f28:	2100      	movs	r1, #0
 8006f2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	0018      	movs	r0, r3
 8006f30:	46bd      	mov	sp, r7
 8006f32:	b002      	add	sp, #8
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	46c0      	nop			@ (mov r8, r8)
 8006f38:	bffdfff8 	.word	0xbffdfff8
 8006f3c:	ffff800f 	.word	0xffff800f

08006f40 <HAL_DMA_DeInit>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e066      	b.n	8007020 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	438a      	bics	r2, r1
 8006f60:	601a      	str	r2, [r3, #0]

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a30      	ldr	r2, [pc, #192]	@ (8007028 <HAL_DMA_DeInit+0xe8>)
 8006f68:	4694      	mov	ip, r2
 8006f6a:	4463      	add	r3, ip
 8006f6c:	2114      	movs	r1, #20
 8006f6e:	0018      	movs	r0, r3
 8006f70:	f7f9 f8ca 	bl	8000108 <__udivsi3>
 8006f74:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8006f76:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8006f84:	4b29      	ldr	r3, [pc, #164]	@ (800702c <HAL_DMA_DeInit+0xec>)
 8006f86:	6859      	ldr	r1, [r3, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8c:	221c      	movs	r2, #28
 8006f8e:	4013      	ands	r3, r2
 8006f90:	2201      	movs	r2, #1
 8006f92:	409a      	lsls	r2, r3
 8006f94:	4b25      	ldr	r3, [pc, #148]	@ (800702c <HAL_DMA_DeInit+0xec>)
 8006f96:	430a      	orrs	r2, r1
 8006f98:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f000 faa7 	bl	80074f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006fb2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d010      	beq.n	8006fde <HAL_DMA_DeInit+0x9e>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	2b04      	cmp	r3, #4
 8006fc2:	d80c      	bhi.n	8006fde <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	0018      	movs	r0, r3
 8006fc8:	f000 fabe 	bl	8007548 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006fdc:	605a      	str	r2, [r3, #4]
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	639a      	str	r2, [r3, #56]	@ 0x38

  hdma->DMAmuxRequestGen = 0U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2225      	movs	r2, #37	@ 0x25
 8007012:	2100      	movs	r1, #0
 8007014:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2224      	movs	r2, #36	@ 0x24
 800701a:	2100      	movs	r1, #0
 800701c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	0018      	movs	r0, r3
 8007022:	46bd      	mov	sp, r7
 8007024:	b002      	add	sp, #8
 8007026:	bd80      	pop	{r7, pc}
 8007028:	bffdfff8 	.word	0xbffdfff8
 800702c:	40020000 	.word	0x40020000

08007030 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800703e:	2317      	movs	r3, #23
 8007040:	18fb      	adds	r3, r7, r3
 8007042:	2200      	movs	r2, #0
 8007044:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2224      	movs	r2, #36	@ 0x24
 800704a:	5c9b      	ldrb	r3, [r3, r2]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d101      	bne.n	8007054 <HAL_DMA_Start_IT+0x24>
 8007050:	2302      	movs	r3, #2
 8007052:	e070      	b.n	8007136 <HAL_DMA_Start_IT+0x106>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2224      	movs	r2, #36	@ 0x24
 8007058:	2101      	movs	r1, #1
 800705a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2225      	movs	r2, #37	@ 0x25
 8007060:	5c9b      	ldrb	r3, [r3, r2]
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b01      	cmp	r3, #1
 8007066:	d157      	bne.n	8007118 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2225      	movs	r2, #37	@ 0x25
 800706c:	2102      	movs	r1, #2
 800706e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2101      	movs	r1, #1
 8007082:	438a      	bics	r2, r1
 8007084:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	68b9      	ldr	r1, [r7, #8]
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 f9ef 	bl	8007470 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007096:	2b00      	cmp	r3, #0
 8007098:	d008      	beq.n	80070ac <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	210e      	movs	r1, #14
 80070a6:	430a      	orrs	r2, r1
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	e00f      	b.n	80070cc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2104      	movs	r1, #4
 80070b8:	438a      	bics	r2, r1
 80070ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	210a      	movs	r1, #10
 80070c8:	430a      	orrs	r2, r1
 80070ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	2380      	movs	r3, #128	@ 0x80
 80070d4:	025b      	lsls	r3, r3, #9
 80070d6:	4013      	ands	r3, r2
 80070d8:	d008      	beq.n	80070ec <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070e4:	2180      	movs	r1, #128	@ 0x80
 80070e6:	0049      	lsls	r1, r1, #1
 80070e8:	430a      	orrs	r2, r1
 80070ea:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d008      	beq.n	8007106 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070fe:	2180      	movs	r1, #128	@ 0x80
 8007100:	0049      	lsls	r1, r1, #1
 8007102:	430a      	orrs	r2, r1
 8007104:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2101      	movs	r1, #1
 8007112:	430a      	orrs	r2, r1
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	e007      	b.n	8007128 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2224      	movs	r2, #36	@ 0x24
 800711c:	2100      	movs	r1, #0
 800711e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007120:	2317      	movs	r3, #23
 8007122:	18fb      	adds	r3, r7, r3
 8007124:	2202      	movs	r2, #2
 8007126:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2224      	movs	r2, #36	@ 0x24
 800712c:	2100      	movs	r1, #0
 800712e:	5499      	strb	r1, [r3, r2]

  return status;
 8007130:	2317      	movs	r3, #23
 8007132:	18fb      	adds	r3, r7, r3
 8007134:	781b      	ldrb	r3, [r3, #0]
}
 8007136:	0018      	movs	r0, r3
 8007138:	46bd      	mov	sp, r7
 800713a:	b006      	add	sp, #24
 800713c:	bd80      	pop	{r7, pc}
	...

08007140 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e050      	b.n	80071f4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2225      	movs	r2, #37	@ 0x25
 8007156:	5c9b      	ldrb	r3, [r3, r2]
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d008      	beq.n	8007170 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2204      	movs	r2, #4
 8007162:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2224      	movs	r2, #36	@ 0x24
 8007168:	2100      	movs	r1, #0
 800716a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e041      	b.n	80071f4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	210e      	movs	r1, #14
 800717c:	438a      	bics	r2, r1
 800717e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800718a:	491c      	ldr	r1, [pc, #112]	@ (80071fc <HAL_DMA_Abort+0xbc>)
 800718c:	400a      	ands	r2, r1
 800718e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2101      	movs	r1, #1
 800719c:	438a      	bics	r2, r1
 800719e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80071a0:	4b17      	ldr	r3, [pc, #92]	@ (8007200 <HAL_DMA_Abort+0xc0>)
 80071a2:	6859      	ldr	r1, [r3, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a8:	221c      	movs	r2, #28
 80071aa:	4013      	ands	r3, r2
 80071ac:	2201      	movs	r2, #1
 80071ae:	409a      	lsls	r2, r3
 80071b0:	4b13      	ldr	r3, [pc, #76]	@ (8007200 <HAL_DMA_Abort+0xc0>)
 80071b2:	430a      	orrs	r2, r1
 80071b4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80071be:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00c      	beq.n	80071e2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071d2:	490a      	ldr	r1, [pc, #40]	@ (80071fc <HAL_DMA_Abort+0xbc>)
 80071d4:	400a      	ands	r2, r1
 80071d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80071e0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2225      	movs	r2, #37	@ 0x25
 80071e6:	2101      	movs	r1, #1
 80071e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2224      	movs	r2, #36	@ 0x24
 80071ee:	2100      	movs	r1, #0
 80071f0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	0018      	movs	r0, r3
 80071f6:	46bd      	mov	sp, r7
 80071f8:	b002      	add	sp, #8
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	fffffeff 	.word	0xfffffeff
 8007200:	40020000 	.word	0x40020000

08007204 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800720c:	230f      	movs	r3, #15
 800720e:	18fb      	adds	r3, r7, r3
 8007210:	2200      	movs	r2, #0
 8007212:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2224      	movs	r2, #36	@ 0x24
 8007218:	2100      	movs	r1, #0
 800721a:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2224      	movs	r2, #36	@ 0x24
 8007220:	5c9b      	ldrb	r3, [r3, r2]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d101      	bne.n	800722a <HAL_DMA_Abort_IT+0x26>
 8007226:	2302      	movs	r3, #2
 8007228:	e05e      	b.n	80072e8 <HAL_DMA_Abort_IT+0xe4>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2224      	movs	r2, #36	@ 0x24
 800722e:	2101      	movs	r1, #1
 8007230:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2225      	movs	r2, #37	@ 0x25
 8007236:	5c9b      	ldrb	r3, [r3, r2]
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b02      	cmp	r3, #2
 800723c:	d007      	beq.n	800724e <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2204      	movs	r2, #4
 8007242:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007244:	230f      	movs	r3, #15
 8007246:	18fb      	adds	r3, r7, r3
 8007248:	2201      	movs	r2, #1
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	e049      	b.n	80072e2 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	210e      	movs	r1, #14
 800725a:	438a      	bics	r2, r1
 800725c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2101      	movs	r1, #1
 800726a:	438a      	bics	r2, r1
 800726c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007278:	491d      	ldr	r1, [pc, #116]	@ (80072f0 <HAL_DMA_Abort_IT+0xec>)
 800727a:	400a      	ands	r2, r1
 800727c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800727e:	4b1d      	ldr	r3, [pc, #116]	@ (80072f4 <HAL_DMA_Abort_IT+0xf0>)
 8007280:	6859      	ldr	r1, [r3, #4]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007286:	221c      	movs	r2, #28
 8007288:	4013      	ands	r3, r2
 800728a:	2201      	movs	r2, #1
 800728c:	409a      	lsls	r2, r3
 800728e:	4b19      	ldr	r3, [pc, #100]	@ (80072f4 <HAL_DMA_Abort_IT+0xf0>)
 8007290:	430a      	orrs	r2, r1
 8007292:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800729c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00c      	beq.n	80072c0 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b0:	490f      	ldr	r1, [pc, #60]	@ (80072f0 <HAL_DMA_Abort_IT+0xec>)
 80072b2:	400a      	ands	r2, r1
 80072b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80072be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2225      	movs	r2, #37	@ 0x25
 80072c4:	2101      	movs	r1, #1
 80072c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2224      	movs	r2, #36	@ 0x24
 80072cc:	2100      	movs	r1, #0
 80072ce:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d004      	beq.n	80072e2 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	0010      	movs	r0, r2
 80072e0:	4798      	blx	r3
    }
  }
  return status;
 80072e2:	230f      	movs	r3, #15
 80072e4:	18fb      	adds	r3, r7, r3
 80072e6:	781b      	ldrb	r3, [r3, #0]
}
 80072e8:	0018      	movs	r0, r3
 80072ea:	46bd      	mov	sp, r7
 80072ec:	b004      	add	sp, #16
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	fffffeff 	.word	0xfffffeff
 80072f4:	40020000 	.word	0x40020000

080072f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8007300:	4b55      	ldr	r3, [pc, #340]	@ (8007458 <HAL_DMA_IRQHandler+0x160>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007312:	221c      	movs	r2, #28
 8007314:	4013      	ands	r3, r2
 8007316:	2204      	movs	r2, #4
 8007318:	409a      	lsls	r2, r3
 800731a:	0013      	movs	r3, r2
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	4013      	ands	r3, r2
 8007320:	d027      	beq.n	8007372 <HAL_DMA_IRQHandler+0x7a>
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2204      	movs	r2, #4
 8007326:	4013      	ands	r3, r2
 8007328:	d023      	beq.n	8007372 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2220      	movs	r2, #32
 8007332:	4013      	ands	r3, r2
 8007334:	d107      	bne.n	8007346 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2104      	movs	r1, #4
 8007342:	438a      	bics	r2, r1
 8007344:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8007346:	4b44      	ldr	r3, [pc, #272]	@ (8007458 <HAL_DMA_IRQHandler+0x160>)
 8007348:	6859      	ldr	r1, [r3, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734e:	221c      	movs	r2, #28
 8007350:	4013      	ands	r3, r2
 8007352:	2204      	movs	r2, #4
 8007354:	409a      	lsls	r2, r3
 8007356:	4b40      	ldr	r3, [pc, #256]	@ (8007458 <HAL_DMA_IRQHandler+0x160>)
 8007358:	430a      	orrs	r2, r1
 800735a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007360:	2b00      	cmp	r3, #0
 8007362:	d100      	bne.n	8007366 <HAL_DMA_IRQHandler+0x6e>
 8007364:	e073      	b.n	800744e <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	0010      	movs	r0, r2
 800736e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007370:	e06d      	b.n	800744e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007376:	221c      	movs	r2, #28
 8007378:	4013      	ands	r3, r2
 800737a:	2202      	movs	r2, #2
 800737c:	409a      	lsls	r2, r3
 800737e:	0013      	movs	r3, r2
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4013      	ands	r3, r2
 8007384:	d02e      	beq.n	80073e4 <HAL_DMA_IRQHandler+0xec>
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2202      	movs	r2, #2
 800738a:	4013      	ands	r3, r2
 800738c:	d02a      	beq.n	80073e4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2220      	movs	r2, #32
 8007396:	4013      	ands	r3, r2
 8007398:	d10b      	bne.n	80073b2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	210a      	movs	r1, #10
 80073a6:	438a      	bics	r2, r1
 80073a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2225      	movs	r2, #37	@ 0x25
 80073ae:	2101      	movs	r1, #1
 80073b0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80073b2:	4b29      	ldr	r3, [pc, #164]	@ (8007458 <HAL_DMA_IRQHandler+0x160>)
 80073b4:	6859      	ldr	r1, [r3, #4]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ba:	221c      	movs	r2, #28
 80073bc:	4013      	ands	r3, r2
 80073be:	2202      	movs	r2, #2
 80073c0:	409a      	lsls	r2, r3
 80073c2:	4b25      	ldr	r3, [pc, #148]	@ (8007458 <HAL_DMA_IRQHandler+0x160>)
 80073c4:	430a      	orrs	r2, r1
 80073c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2224      	movs	r2, #36	@ 0x24
 80073cc:	2100      	movs	r1, #0
 80073ce:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d03a      	beq.n	800744e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	0010      	movs	r0, r2
 80073e0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80073e2:	e034      	b.n	800744e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e8:	221c      	movs	r2, #28
 80073ea:	4013      	ands	r3, r2
 80073ec:	2208      	movs	r2, #8
 80073ee:	409a      	lsls	r2, r3
 80073f0:	0013      	movs	r3, r2
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4013      	ands	r3, r2
 80073f6:	d02b      	beq.n	8007450 <HAL_DMA_IRQHandler+0x158>
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2208      	movs	r2, #8
 80073fc:	4013      	ands	r3, r2
 80073fe:	d027      	beq.n	8007450 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	210e      	movs	r1, #14
 800740c:	438a      	bics	r2, r1
 800740e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8007410:	4b11      	ldr	r3, [pc, #68]	@ (8007458 <HAL_DMA_IRQHandler+0x160>)
 8007412:	6859      	ldr	r1, [r3, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007418:	221c      	movs	r2, #28
 800741a:	4013      	ands	r3, r2
 800741c:	2201      	movs	r2, #1
 800741e:	409a      	lsls	r2, r3
 8007420:	4b0d      	ldr	r3, [pc, #52]	@ (8007458 <HAL_DMA_IRQHandler+0x160>)
 8007422:	430a      	orrs	r2, r1
 8007424:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2225      	movs	r2, #37	@ 0x25
 8007430:	2101      	movs	r1, #1
 8007432:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2224      	movs	r2, #36	@ 0x24
 8007438:	2100      	movs	r1, #0
 800743a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007440:	2b00      	cmp	r3, #0
 8007442:	d005      	beq.n	8007450 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	0010      	movs	r0, r2
 800744c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800744e:	46c0      	nop			@ (mov r8, r8)
 8007450:	46c0      	nop			@ (mov r8, r8)
}
 8007452:	46bd      	mov	sp, r7
 8007454:	b004      	add	sp, #16
 8007456:	bd80      	pop	{r7, pc}
 8007458:	40020000 	.word	0x40020000

0800745c <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8007468:	0018      	movs	r0, r3
 800746a:	46bd      	mov	sp, r7
 800746c:	b002      	add	sp, #8
 800746e:	bd80      	pop	{r7, pc}

08007470 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007486:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800748c:	2b00      	cmp	r3, #0
 800748e:	d004      	beq.n	800749a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007498:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800749a:	4b14      	ldr	r3, [pc, #80]	@ (80074ec <DMA_SetConfig+0x7c>)
 800749c:	6859      	ldr	r1, [r3, #4]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a2:	221c      	movs	r2, #28
 80074a4:	4013      	ands	r3, r2
 80074a6:	2201      	movs	r2, #1
 80074a8:	409a      	lsls	r2, r3
 80074aa:	4b10      	ldr	r3, [pc, #64]	@ (80074ec <DMA_SetConfig+0x7c>)
 80074ac:	430a      	orrs	r2, r1
 80074ae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	2b10      	cmp	r3, #16
 80074be:	d108      	bne.n	80074d2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80074d0:	e007      	b.n	80074e2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	60da      	str	r2, [r3, #12]
}
 80074e2:	46c0      	nop			@ (mov r8, r8)
 80074e4:	46bd      	mov	sp, r7
 80074e6:	b004      	add	sp, #16
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	46c0      	nop			@ (mov r8, r8)
 80074ec:	40020000 	.word	0x40020000

080074f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	001a      	movs	r2, r3
 80074fe:	23ff      	movs	r3, #255	@ 0xff
 8007500:	4013      	ands	r3, r2
 8007502:	3b08      	subs	r3, #8
 8007504:	2114      	movs	r1, #20
 8007506:	0018      	movs	r0, r3
 8007508:	f7f8 fdfe 	bl	8000108 <__udivsi3>
 800750c:	0003      	movs	r3, r0
 800750e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007514:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8007516:	4a0a      	ldr	r2, [pc, #40]	@ (8007540 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8007518:	4694      	mov	ip, r2
 800751a:	4463      	add	r3, ip
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	001a      	movs	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a07      	ldr	r2, [pc, #28]	@ (8007544 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8007528:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	221c      	movs	r2, #28
 800752e:	4013      	ands	r3, r2
 8007530:	2201      	movs	r2, #1
 8007532:	409a      	lsls	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8007538:	46c0      	nop			@ (mov r8, r8)
 800753a:	46bd      	mov	sp, r7
 800753c:	b004      	add	sp, #16
 800753e:	bd80      	pop	{r7, pc}
 8007540:	10008200 	.word	0x10008200
 8007544:	40020880 	.word	0x40020880

08007548 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	22ff      	movs	r2, #255	@ 0xff
 8007556:	4013      	ands	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4a0a      	ldr	r2, [pc, #40]	@ (8007588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800755e:	4694      	mov	ip, r2
 8007560:	4463      	add	r3, ip
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	001a      	movs	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a07      	ldr	r2, [pc, #28]	@ (800758c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800756e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	3b01      	subs	r3, #1
 8007574:	2203      	movs	r2, #3
 8007576:	4013      	ands	r3, r2
 8007578:	2201      	movs	r2, #1
 800757a:	409a      	lsls	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8007580:	46c0      	nop			@ (mov r8, r8)
 8007582:	46bd      	mov	sp, r7
 8007584:	b004      	add	sp, #16
 8007586:	bd80      	pop	{r7, pc}
 8007588:	1000823f 	.word	0x1000823f
 800758c:	40020940 	.word	0x40020940

08007590 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800759e:	e153      	b.n	8007848 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2101      	movs	r1, #1
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	4091      	lsls	r1, r2
 80075aa:	000a      	movs	r2, r1
 80075ac:	4013      	ands	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d100      	bne.n	80075b8 <HAL_GPIO_Init+0x28>
 80075b6:	e144      	b.n	8007842 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d003      	beq.n	80075c8 <HAL_GPIO_Init+0x38>
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	2b12      	cmp	r3, #18
 80075c6:	d125      	bne.n	8007614 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	08da      	lsrs	r2, r3, #3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3208      	adds	r2, #8
 80075d0:	0092      	lsls	r2, r2, #2
 80075d2:	58d3      	ldr	r3, [r2, r3]
 80075d4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	2207      	movs	r2, #7
 80075da:	4013      	ands	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	220f      	movs	r2, #15
 80075e0:	409a      	lsls	r2, r3
 80075e2:	0013      	movs	r3, r2
 80075e4:	43da      	mvns	r2, r3
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	4013      	ands	r3, r2
 80075ea:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	220f      	movs	r2, #15
 80075f2:	401a      	ands	r2, r3
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	2107      	movs	r1, #7
 80075f8:	400b      	ands	r3, r1
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	409a      	lsls	r2, r3
 80075fe:	0013      	movs	r3, r2
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	4313      	orrs	r3, r2
 8007604:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	08da      	lsrs	r2, r3, #3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3208      	adds	r2, #8
 800760e:	0092      	lsls	r2, r2, #2
 8007610:	6979      	ldr	r1, [r7, #20]
 8007612:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	2203      	movs	r2, #3
 8007620:	409a      	lsls	r2, r3
 8007622:	0013      	movs	r3, r2
 8007624:	43da      	mvns	r2, r3
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	4013      	ands	r3, r2
 800762a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	2203      	movs	r2, #3
 8007632:	401a      	ands	r2, r3
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	409a      	lsls	r2, r3
 800763a:	0013      	movs	r3, r2
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	4313      	orrs	r3, r2
 8007640:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d00b      	beq.n	8007668 <HAL_GPIO_Init+0xd8>
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	2b02      	cmp	r3, #2
 8007656:	d007      	beq.n	8007668 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800765c:	2b11      	cmp	r3, #17
 800765e:	d003      	beq.n	8007668 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	2b12      	cmp	r3, #18
 8007666:	d130      	bne.n	80076ca <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	2203      	movs	r2, #3
 8007674:	409a      	lsls	r2, r3
 8007676:	0013      	movs	r3, r2
 8007678:	43da      	mvns	r2, r3
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	4013      	ands	r3, r2
 800767e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	68da      	ldr	r2, [r3, #12]
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	409a      	lsls	r2, r3
 800768a:	0013      	movs	r3, r2
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	4313      	orrs	r3, r2
 8007690:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800769e:	2201      	movs	r2, #1
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	409a      	lsls	r2, r3
 80076a4:	0013      	movs	r3, r2
 80076a6:	43da      	mvns	r2, r3
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	4013      	ands	r3, r2
 80076ac:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	091b      	lsrs	r3, r3, #4
 80076b4:	2201      	movs	r2, #1
 80076b6:	401a      	ands	r2, r3
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	409a      	lsls	r2, r3
 80076bc:	0013      	movs	r3, r2
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d017      	beq.n	8007702 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	2203      	movs	r2, #3
 80076de:	409a      	lsls	r2, r3
 80076e0:	0013      	movs	r3, r2
 80076e2:	43da      	mvns	r2, r3
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	4013      	ands	r3, r2
 80076e8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	409a      	lsls	r2, r3
 80076f4:	0013      	movs	r3, r2
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	685a      	ldr	r2, [r3, #4]
 8007706:	2380      	movs	r3, #128	@ 0x80
 8007708:	055b      	lsls	r3, r3, #21
 800770a:	4013      	ands	r3, r2
 800770c:	d100      	bne.n	8007710 <HAL_GPIO_Init+0x180>
 800770e:	e098      	b.n	8007842 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007710:	4a53      	ldr	r2, [pc, #332]	@ (8007860 <HAL_GPIO_Init+0x2d0>)
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	089b      	lsrs	r3, r3, #2
 8007716:	3318      	adds	r3, #24
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	589b      	ldr	r3, [r3, r2]
 800771c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	2203      	movs	r2, #3
 8007722:	4013      	ands	r3, r2
 8007724:	00db      	lsls	r3, r3, #3
 8007726:	220f      	movs	r2, #15
 8007728:	409a      	lsls	r2, r3
 800772a:	0013      	movs	r3, r2
 800772c:	43da      	mvns	r2, r3
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	4013      	ands	r3, r2
 8007732:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	23a0      	movs	r3, #160	@ 0xa0
 8007738:	05db      	lsls	r3, r3, #23
 800773a:	429a      	cmp	r2, r3
 800773c:	d019      	beq.n	8007772 <HAL_GPIO_Init+0x1e2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a48      	ldr	r2, [pc, #288]	@ (8007864 <HAL_GPIO_Init+0x2d4>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d013      	beq.n	800776e <HAL_GPIO_Init+0x1de>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a47      	ldr	r2, [pc, #284]	@ (8007868 <HAL_GPIO_Init+0x2d8>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d00d      	beq.n	800776a <HAL_GPIO_Init+0x1da>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a46      	ldr	r2, [pc, #280]	@ (800786c <HAL_GPIO_Init+0x2dc>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d007      	beq.n	8007766 <HAL_GPIO_Init+0x1d6>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a45      	ldr	r2, [pc, #276]	@ (8007870 <HAL_GPIO_Init+0x2e0>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d101      	bne.n	8007762 <HAL_GPIO_Init+0x1d2>
 800775e:	2305      	movs	r3, #5
 8007760:	e008      	b.n	8007774 <HAL_GPIO_Init+0x1e4>
 8007762:	2306      	movs	r3, #6
 8007764:	e006      	b.n	8007774 <HAL_GPIO_Init+0x1e4>
 8007766:	2303      	movs	r3, #3
 8007768:	e004      	b.n	8007774 <HAL_GPIO_Init+0x1e4>
 800776a:	2302      	movs	r3, #2
 800776c:	e002      	b.n	8007774 <HAL_GPIO_Init+0x1e4>
 800776e:	2301      	movs	r3, #1
 8007770:	e000      	b.n	8007774 <HAL_GPIO_Init+0x1e4>
 8007772:	2300      	movs	r3, #0
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	2103      	movs	r1, #3
 8007778:	400a      	ands	r2, r1
 800777a:	00d2      	lsls	r2, r2, #3
 800777c:	4093      	lsls	r3, r2
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	4313      	orrs	r3, r2
 8007782:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007784:	4936      	ldr	r1, [pc, #216]	@ (8007860 <HAL_GPIO_Init+0x2d0>)
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	089b      	lsrs	r3, r3, #2
 800778a:	3318      	adds	r3, #24
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8007792:	4a33      	ldr	r2, [pc, #204]	@ (8007860 <HAL_GPIO_Init+0x2d0>)
 8007794:	2380      	movs	r3, #128	@ 0x80
 8007796:	58d3      	ldr	r3, [r2, r3]
 8007798:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	43da      	mvns	r2, r3
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	4013      	ands	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	2380      	movs	r3, #128	@ 0x80
 80077aa:	025b      	lsls	r3, r3, #9
 80077ac:	4013      	ands	r3, r2
 80077ae:	d003      	beq.n	80077b8 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80077b8:	4929      	ldr	r1, [pc, #164]	@ (8007860 <HAL_GPIO_Init+0x2d0>)
 80077ba:	2280      	movs	r2, #128	@ 0x80
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80077c0:	4a27      	ldr	r2, [pc, #156]	@ (8007860 <HAL_GPIO_Init+0x2d0>)
 80077c2:	2384      	movs	r3, #132	@ 0x84
 80077c4:	58d3      	ldr	r3, [r2, r3]
 80077c6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	43da      	mvns	r2, r3
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	4013      	ands	r3, r2
 80077d0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	2380      	movs	r3, #128	@ 0x80
 80077d8:	029b      	lsls	r3, r3, #10
 80077da:	4013      	ands	r3, r2
 80077dc:	d003      	beq.n	80077e6 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80077e6:	491e      	ldr	r1, [pc, #120]	@ (8007860 <HAL_GPIO_Init+0x2d0>)
 80077e8:	2284      	movs	r2, #132	@ 0x84
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80077ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007860 <HAL_GPIO_Init+0x2d0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	43da      	mvns	r2, r3
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	4013      	ands	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	2380      	movs	r3, #128	@ 0x80
 8007804:	035b      	lsls	r3, r3, #13
 8007806:	4013      	ands	r3, r2
 8007808:	d003      	beq.n	8007812 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4313      	orrs	r3, r2
 8007810:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8007812:	4b13      	ldr	r3, [pc, #76]	@ (8007860 <HAL_GPIO_Init+0x2d0>)
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8007818:	4b11      	ldr	r3, [pc, #68]	@ (8007860 <HAL_GPIO_Init+0x2d0>)
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	43da      	mvns	r2, r3
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	4013      	ands	r3, r2
 8007826:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	2380      	movs	r3, #128	@ 0x80
 800782e:	039b      	lsls	r3, r3, #14
 8007830:	4013      	ands	r3, r2
 8007832:	d003      	beq.n	800783c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	4313      	orrs	r3, r2
 800783a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800783c:	4b08      	ldr	r3, [pc, #32]	@ (8007860 <HAL_GPIO_Init+0x2d0>)
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	3301      	adds	r3, #1
 8007846:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	40da      	lsrs	r2, r3
 8007850:	1e13      	subs	r3, r2, #0
 8007852:	d000      	beq.n	8007856 <HAL_GPIO_Init+0x2c6>
 8007854:	e6a4      	b.n	80075a0 <HAL_GPIO_Init+0x10>
  }
}
 8007856:	46c0      	nop			@ (mov r8, r8)
 8007858:	46c0      	nop			@ (mov r8, r8)
 800785a:	46bd      	mov	sp, r7
 800785c:	b006      	add	sp, #24
 800785e:	bd80      	pop	{r7, pc}
 8007860:	40021800 	.word	0x40021800
 8007864:	50000400 	.word	0x50000400
 8007868:	50000800 	.word	0x50000800
 800786c:	50000c00 	.word	0x50000c00
 8007870:	50001400 	.word	0x50001400

08007874 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8007882:	e0ba      	b.n	80079fa <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8007884:	2201      	movs	r2, #1
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	409a      	lsls	r2, r3
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	4013      	ands	r3, r2
 800788e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d100      	bne.n	8007898 <HAL_GPIO_DeInit+0x24>
 8007896:	e0ad      	b.n	80079f4 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 8007898:	4a5d      	ldr	r2, [pc, #372]	@ (8007a10 <HAL_GPIO_DeInit+0x19c>)
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	089b      	lsrs	r3, r3, #2
 800789e:	3318      	adds	r3, #24
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	589b      	ldr	r3, [r3, r2]
 80078a4:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2203      	movs	r2, #3
 80078aa:	4013      	ands	r3, r2
 80078ac:	00db      	lsls	r3, r3, #3
 80078ae:	220f      	movs	r2, #15
 80078b0:	409a      	lsls	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	4013      	ands	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	23a0      	movs	r3, #160	@ 0xa0
 80078bc:	05db      	lsls	r3, r3, #23
 80078be:	429a      	cmp	r2, r3
 80078c0:	d019      	beq.n	80078f6 <HAL_GPIO_DeInit+0x82>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a53      	ldr	r2, [pc, #332]	@ (8007a14 <HAL_GPIO_DeInit+0x1a0>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d013      	beq.n	80078f2 <HAL_GPIO_DeInit+0x7e>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a52      	ldr	r2, [pc, #328]	@ (8007a18 <HAL_GPIO_DeInit+0x1a4>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00d      	beq.n	80078ee <HAL_GPIO_DeInit+0x7a>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a51      	ldr	r2, [pc, #324]	@ (8007a1c <HAL_GPIO_DeInit+0x1a8>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d007      	beq.n	80078ea <HAL_GPIO_DeInit+0x76>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a50      	ldr	r2, [pc, #320]	@ (8007a20 <HAL_GPIO_DeInit+0x1ac>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d101      	bne.n	80078e6 <HAL_GPIO_DeInit+0x72>
 80078e2:	2305      	movs	r3, #5
 80078e4:	e008      	b.n	80078f8 <HAL_GPIO_DeInit+0x84>
 80078e6:	2306      	movs	r3, #6
 80078e8:	e006      	b.n	80078f8 <HAL_GPIO_DeInit+0x84>
 80078ea:	2303      	movs	r3, #3
 80078ec:	e004      	b.n	80078f8 <HAL_GPIO_DeInit+0x84>
 80078ee:	2302      	movs	r3, #2
 80078f0:	e002      	b.n	80078f8 <HAL_GPIO_DeInit+0x84>
 80078f2:	2301      	movs	r3, #1
 80078f4:	e000      	b.n	80078f8 <HAL_GPIO_DeInit+0x84>
 80078f6:	2300      	movs	r3, #0
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	2103      	movs	r1, #3
 80078fc:	400a      	ands	r2, r1
 80078fe:	00d2      	lsls	r2, r2, #3
 8007900:	4093      	lsls	r3, r2
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	429a      	cmp	r2, r3
 8007906:	d136      	bne.n	8007976 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007908:	4a41      	ldr	r2, [pc, #260]	@ (8007a10 <HAL_GPIO_DeInit+0x19c>)
 800790a:	2380      	movs	r3, #128	@ 0x80
 800790c:	58d3      	ldr	r3, [r2, r3]
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	43d2      	mvns	r2, r2
 8007912:	493f      	ldr	r1, [pc, #252]	@ (8007a10 <HAL_GPIO_DeInit+0x19c>)
 8007914:	4013      	ands	r3, r2
 8007916:	2280      	movs	r2, #128	@ 0x80
 8007918:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800791a:	4a3d      	ldr	r2, [pc, #244]	@ (8007a10 <HAL_GPIO_DeInit+0x19c>)
 800791c:	2384      	movs	r3, #132	@ 0x84
 800791e:	58d3      	ldr	r3, [r2, r3]
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	43d2      	mvns	r2, r2
 8007924:	493a      	ldr	r1, [pc, #232]	@ (8007a10 <HAL_GPIO_DeInit+0x19c>)
 8007926:	4013      	ands	r3, r2
 8007928:	2284      	movs	r2, #132	@ 0x84
 800792a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800792c:	4b38      	ldr	r3, [pc, #224]	@ (8007a10 <HAL_GPIO_DeInit+0x19c>)
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	43d9      	mvns	r1, r3
 8007934:	4b36      	ldr	r3, [pc, #216]	@ (8007a10 <HAL_GPIO_DeInit+0x19c>)
 8007936:	400a      	ands	r2, r1
 8007938:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800793a:	4b35      	ldr	r3, [pc, #212]	@ (8007a10 <HAL_GPIO_DeInit+0x19c>)
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	43d9      	mvns	r1, r3
 8007942:	4b33      	ldr	r3, [pc, #204]	@ (8007a10 <HAL_GPIO_DeInit+0x19c>)
 8007944:	400a      	ands	r2, r1
 8007946:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2203      	movs	r2, #3
 800794c:	4013      	ands	r3, r2
 800794e:	00db      	lsls	r3, r3, #3
 8007950:	220f      	movs	r2, #15
 8007952:	409a      	lsls	r2, r3
 8007954:	0013      	movs	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8007958:	4a2d      	ldr	r2, [pc, #180]	@ (8007a10 <HAL_GPIO_DeInit+0x19c>)
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	089b      	lsrs	r3, r3, #2
 800795e:	3318      	adds	r3, #24
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	589a      	ldr	r2, [r3, r2]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	43d9      	mvns	r1, r3
 8007968:	4829      	ldr	r0, [pc, #164]	@ (8007a10 <HAL_GPIO_DeInit+0x19c>)
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	089b      	lsrs	r3, r3, #2
 800796e:	400a      	ands	r2, r1
 8007970:	3318      	adds	r3, #24
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	2103      	movs	r1, #3
 8007980:	4099      	lsls	r1, r3
 8007982:	000b      	movs	r3, r1
 8007984:	431a      	orrs	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	08da      	lsrs	r2, r3, #3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	3208      	adds	r2, #8
 8007992:	0092      	lsls	r2, r2, #2
 8007994:	58d3      	ldr	r3, [r2, r3]
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	2107      	movs	r1, #7
 800799a:	400a      	ands	r2, r1
 800799c:	0092      	lsls	r2, r2, #2
 800799e:	210f      	movs	r1, #15
 80079a0:	4091      	lsls	r1, r2
 80079a2:	000a      	movs	r2, r1
 80079a4:	43d1      	mvns	r1, r2
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	08d2      	lsrs	r2, r2, #3
 80079aa:	4019      	ands	r1, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	3208      	adds	r2, #8
 80079b0:	0092      	lsls	r2, r2, #2
 80079b2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	0052      	lsls	r2, r2, #1
 80079bc:	2103      	movs	r1, #3
 80079be:	4091      	lsls	r1, r2
 80079c0:	000a      	movs	r2, r1
 80079c2:	43d2      	mvns	r2, r2
 80079c4:	401a      	ands	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	2101      	movs	r1, #1
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	4091      	lsls	r1, r2
 80079d4:	000a      	movs	r2, r1
 80079d6:	43d2      	mvns	r2, r2
 80079d8:	401a      	ands	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	0052      	lsls	r2, r2, #1
 80079e6:	2103      	movs	r1, #3
 80079e8:	4091      	lsls	r1, r2
 80079ea:	000a      	movs	r2, r1
 80079ec:	43d2      	mvns	r2, r2
 80079ee:	401a      	ands	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	3301      	adds	r3, #1
 80079f8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	40da      	lsrs	r2, r3
 8007a00:	1e13      	subs	r3, r2, #0
 8007a02:	d000      	beq.n	8007a06 <HAL_GPIO_DeInit+0x192>
 8007a04:	e73e      	b.n	8007884 <HAL_GPIO_DeInit+0x10>
  }
}
 8007a06:	46c0      	nop			@ (mov r8, r8)
 8007a08:	46c0      	nop			@ (mov r8, r8)
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	b006      	add	sp, #24
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	40021800 	.word	0x40021800
 8007a14:	50000400 	.word	0x50000400
 8007a18:	50000800 	.word	0x50000800
 8007a1c:	50000c00 	.word	0x50000c00
 8007a20:	50001400 	.word	0x50001400

08007a24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	000a      	movs	r2, r1
 8007a2e:	1cbb      	adds	r3, r7, #2
 8007a30:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	1cba      	adds	r2, r7, #2
 8007a38:	8812      	ldrh	r2, [r2, #0]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	d004      	beq.n	8007a48 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007a3e:	230f      	movs	r3, #15
 8007a40:	18fb      	adds	r3, r7, r3
 8007a42:	2201      	movs	r2, #1
 8007a44:	701a      	strb	r2, [r3, #0]
 8007a46:	e003      	b.n	8007a50 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a48:	230f      	movs	r3, #15
 8007a4a:	18fb      	adds	r3, r7, r3
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007a50:	230f      	movs	r3, #15
 8007a52:	18fb      	adds	r3, r7, r3
 8007a54:	781b      	ldrb	r3, [r3, #0]
}
 8007a56:	0018      	movs	r0, r3
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	b004      	add	sp, #16
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b082      	sub	sp, #8
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	0008      	movs	r0, r1
 8007a68:	0011      	movs	r1, r2
 8007a6a:	1cbb      	adds	r3, r7, #2
 8007a6c:	1c02      	adds	r2, r0, #0
 8007a6e:	801a      	strh	r2, [r3, #0]
 8007a70:	1c7b      	adds	r3, r7, #1
 8007a72:	1c0a      	adds	r2, r1, #0
 8007a74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a76:	1c7b      	adds	r3, r7, #1
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d004      	beq.n	8007a88 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007a7e:	1cbb      	adds	r3, r7, #2
 8007a80:	881a      	ldrh	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007a86:	e003      	b.n	8007a90 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007a88:	1cbb      	adds	r3, r7, #2
 8007a8a:	881a      	ldrh	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007a90:	46c0      	nop			@ (mov r8, r8)
 8007a92:	46bd      	mov	sp, r7
 8007a94:	b002      	add	sp, #8
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e08f      	b.n	8007bca <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2241      	movs	r2, #65	@ 0x41
 8007aae:	5c9b      	ldrb	r3, [r3, r2]
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d107      	bne.n	8007ac6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2240      	movs	r2, #64	@ 0x40
 8007aba:	2100      	movs	r1, #0
 8007abc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	0018      	movs	r0, r3
 8007ac2:	f7fa ff93 	bl	80029ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2241      	movs	r2, #65	@ 0x41
 8007aca:	2124      	movs	r1, #36	@ 0x24
 8007acc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2101      	movs	r1, #1
 8007ada:	438a      	bics	r2, r1
 8007adc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	493b      	ldr	r1, [pc, #236]	@ (8007bd4 <HAL_I2C_Init+0x13c>)
 8007ae8:	400a      	ands	r2, r1
 8007aea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4938      	ldr	r1, [pc, #224]	@ (8007bd8 <HAL_I2C_Init+0x140>)
 8007af8:	400a      	ands	r2, r1
 8007afa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d108      	bne.n	8007b16 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689a      	ldr	r2, [r3, #8]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2180      	movs	r1, #128	@ 0x80
 8007b0e:	0209      	lsls	r1, r1, #8
 8007b10:	430a      	orrs	r2, r1
 8007b12:	609a      	str	r2, [r3, #8]
 8007b14:	e007      	b.n	8007b26 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	689a      	ldr	r2, [r3, #8]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2184      	movs	r1, #132	@ 0x84
 8007b20:	0209      	lsls	r1, r1, #8
 8007b22:	430a      	orrs	r2, r1
 8007b24:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d109      	bne.n	8007b42 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2180      	movs	r1, #128	@ 0x80
 8007b3a:	0109      	lsls	r1, r1, #4
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	605a      	str	r2, [r3, #4]
 8007b40:	e007      	b.n	8007b52 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4923      	ldr	r1, [pc, #140]	@ (8007bdc <HAL_I2C_Init+0x144>)
 8007b4e:	400a      	ands	r2, r1
 8007b50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4920      	ldr	r1, [pc, #128]	@ (8007be0 <HAL_I2C_Init+0x148>)
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	491a      	ldr	r1, [pc, #104]	@ (8007bd8 <HAL_I2C_Init+0x140>)
 8007b6e:	400a      	ands	r2, r1
 8007b70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	691a      	ldr	r2, [r3, #16]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	69d9      	ldr	r1, [r3, #28]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a1a      	ldr	r2, [r3, #32]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2241      	movs	r2, #65	@ 0x41
 8007bb6:	2120      	movs	r1, #32
 8007bb8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2242      	movs	r2, #66	@ 0x42
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	0018      	movs	r0, r3
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	b002      	add	sp, #8
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	46c0      	nop			@ (mov r8, r8)
 8007bd4:	f0ffffff 	.word	0xf0ffffff
 8007bd8:	ffff7fff 	.word	0xffff7fff
 8007bdc:	fffff7ff 	.word	0xfffff7ff
 8007be0:	02008000 	.word	0x02008000

08007be4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e022      	b.n	8007c3c <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2241      	movs	r2, #65	@ 0x41
 8007bfa:	2124      	movs	r1, #36	@ 0x24
 8007bfc:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2101      	movs	r1, #1
 8007c0a:	438a      	bics	r2, r1
 8007c0c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	0018      	movs	r0, r3
 8007c12:	f7fa ffa9 	bl	8002b68 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2241      	movs	r2, #65	@ 0x41
 8007c20:	2100      	movs	r1, #0
 8007c22:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2242      	movs	r2, #66	@ 0x42
 8007c2e:	2100      	movs	r1, #0
 8007c30:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2240      	movs	r2, #64	@ 0x40
 8007c36:	2100      	movs	r1, #0
 8007c38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	0018      	movs	r0, r3
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	b002      	add	sp, #8
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c44:	b590      	push	{r4, r7, lr}
 8007c46:	b089      	sub	sp, #36	@ 0x24
 8007c48:	af02      	add	r7, sp, #8
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	000c      	movs	r4, r1
 8007c4e:	0010      	movs	r0, r2
 8007c50:	0019      	movs	r1, r3
 8007c52:	230a      	movs	r3, #10
 8007c54:	18fb      	adds	r3, r7, r3
 8007c56:	1c22      	adds	r2, r4, #0
 8007c58:	801a      	strh	r2, [r3, #0]
 8007c5a:	2308      	movs	r3, #8
 8007c5c:	18fb      	adds	r3, r7, r3
 8007c5e:	1c02      	adds	r2, r0, #0
 8007c60:	801a      	strh	r2, [r3, #0]
 8007c62:	1dbb      	adds	r3, r7, #6
 8007c64:	1c0a      	adds	r2, r1, #0
 8007c66:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2241      	movs	r2, #65	@ 0x41
 8007c6c:	5c9b      	ldrb	r3, [r3, r2]
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b20      	cmp	r3, #32
 8007c72:	d000      	beq.n	8007c76 <HAL_I2C_Mem_Write+0x32>
 8007c74:	e10c      	b.n	8007e90 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d004      	beq.n	8007c86 <HAL_I2C_Mem_Write+0x42>
 8007c7c:	232c      	movs	r3, #44	@ 0x2c
 8007c7e:	18fb      	adds	r3, r7, r3
 8007c80:	881b      	ldrh	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d105      	bne.n	8007c92 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2280      	movs	r2, #128	@ 0x80
 8007c8a:	0092      	lsls	r2, r2, #2
 8007c8c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e0ff      	b.n	8007e92 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2240      	movs	r2, #64	@ 0x40
 8007c96:	5c9b      	ldrb	r3, [r3, r2]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d101      	bne.n	8007ca0 <HAL_I2C_Mem_Write+0x5c>
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	e0f8      	b.n	8007e92 <HAL_I2C_Mem_Write+0x24e>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2240      	movs	r2, #64	@ 0x40
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ca8:	f7fd ff40 	bl	8005b2c <HAL_GetTick>
 8007cac:	0003      	movs	r3, r0
 8007cae:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007cb0:	2380      	movs	r3, #128	@ 0x80
 8007cb2:	0219      	lsls	r1, r3, #8
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	2319      	movs	r3, #25
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f000 fb0b 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 8007cc2:	1e03      	subs	r3, r0, #0
 8007cc4:	d001      	beq.n	8007cca <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e0e3      	b.n	8007e92 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2241      	movs	r2, #65	@ 0x41
 8007cce:	2121      	movs	r1, #33	@ 0x21
 8007cd0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2242      	movs	r2, #66	@ 0x42
 8007cd6:	2140      	movs	r1, #64	@ 0x40
 8007cd8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ce4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	222c      	movs	r2, #44	@ 0x2c
 8007cea:	18ba      	adds	r2, r7, r2
 8007cec:	8812      	ldrh	r2, [r2, #0]
 8007cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007cf6:	1dbb      	adds	r3, r7, #6
 8007cf8:	881c      	ldrh	r4, [r3, #0]
 8007cfa:	2308      	movs	r3, #8
 8007cfc:	18fb      	adds	r3, r7, r3
 8007cfe:	881a      	ldrh	r2, [r3, #0]
 8007d00:	230a      	movs	r3, #10
 8007d02:	18fb      	adds	r3, r7, r3
 8007d04:	8819      	ldrh	r1, [r3, #0]
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	9301      	str	r3, [sp, #4]
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	0023      	movs	r3, r4
 8007d12:	f000 f9f9 	bl	8008108 <I2C_RequestMemoryWrite>
 8007d16:	1e03      	subs	r3, r0, #0
 8007d18:	d005      	beq.n	8007d26 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2240      	movs	r2, #64	@ 0x40
 8007d1e:	2100      	movs	r1, #0
 8007d20:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e0b5      	b.n	8007e92 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	2bff      	cmp	r3, #255	@ 0xff
 8007d2e:	d911      	bls.n	8007d54 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	22ff      	movs	r2, #255	@ 0xff
 8007d34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d3a:	b2da      	uxtb	r2, r3
 8007d3c:	2380      	movs	r3, #128	@ 0x80
 8007d3e:	045c      	lsls	r4, r3, #17
 8007d40:	230a      	movs	r3, #10
 8007d42:	18fb      	adds	r3, r7, r3
 8007d44:	8819      	ldrh	r1, [r3, #0]
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	2300      	movs	r3, #0
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	0023      	movs	r3, r4
 8007d4e:	f000 fc9d 	bl	800868c <I2C_TransferConfig>
 8007d52:	e012      	b.n	8007d7a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	2380      	movs	r3, #128	@ 0x80
 8007d66:	049c      	lsls	r4, r3, #18
 8007d68:	230a      	movs	r3, #10
 8007d6a:	18fb      	adds	r3, r7, r3
 8007d6c:	8819      	ldrh	r1, [r3, #0]
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	2300      	movs	r3, #0
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	0023      	movs	r3, r4
 8007d76:	f000 fc89 	bl	800868c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	0018      	movs	r0, r3
 8007d82:	f000 fb01 	bl	8008388 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d86:	1e03      	subs	r3, r0, #0
 8007d88:	d001      	beq.n	8007d8e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e081      	b.n	8007e92 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d92:	781a      	ldrb	r2, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	3b01      	subs	r3, #1
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007db6:	3b01      	subs	r3, #1
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d03a      	beq.n	8007e3e <HAL_I2C_Mem_Write+0x1fa>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d136      	bne.n	8007e3e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	0013      	movs	r3, r2
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2180      	movs	r1, #128	@ 0x80
 8007dde:	f000 fa7b 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 8007de2:	1e03      	subs	r3, r0, #0
 8007de4:	d001      	beq.n	8007dea <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e053      	b.n	8007e92 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	2bff      	cmp	r3, #255	@ 0xff
 8007df2:	d911      	bls.n	8007e18 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	22ff      	movs	r2, #255	@ 0xff
 8007df8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	2380      	movs	r3, #128	@ 0x80
 8007e02:	045c      	lsls	r4, r3, #17
 8007e04:	230a      	movs	r3, #10
 8007e06:	18fb      	adds	r3, r7, r3
 8007e08:	8819      	ldrh	r1, [r3, #0]
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	0023      	movs	r3, r4
 8007e12:	f000 fc3b 	bl	800868c <I2C_TransferConfig>
 8007e16:	e012      	b.n	8007e3e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	2380      	movs	r3, #128	@ 0x80
 8007e2a:	049c      	lsls	r4, r3, #18
 8007e2c:	230a      	movs	r3, #10
 8007e2e:	18fb      	adds	r3, r7, r3
 8007e30:	8819      	ldrh	r1, [r3, #0]
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	2300      	movs	r3, #0
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	0023      	movs	r3, r4
 8007e3a:	f000 fc27 	bl	800868c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d198      	bne.n	8007d7a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	0018      	movs	r0, r3
 8007e50:	f000 fae0 	bl	8008414 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e54:	1e03      	subs	r3, r0, #0
 8007e56:	d001      	beq.n	8007e5c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e01a      	b.n	8007e92 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2220      	movs	r2, #32
 8007e62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	490b      	ldr	r1, [pc, #44]	@ (8007e9c <HAL_I2C_Mem_Write+0x258>)
 8007e70:	400a      	ands	r2, r1
 8007e72:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2241      	movs	r2, #65	@ 0x41
 8007e78:	2120      	movs	r1, #32
 8007e7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2242      	movs	r2, #66	@ 0x42
 8007e80:	2100      	movs	r1, #0
 8007e82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2240      	movs	r2, #64	@ 0x40
 8007e88:	2100      	movs	r1, #0
 8007e8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	e000      	b.n	8007e92 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8007e90:	2302      	movs	r3, #2
  }
}
 8007e92:	0018      	movs	r0, r3
 8007e94:	46bd      	mov	sp, r7
 8007e96:	b007      	add	sp, #28
 8007e98:	bd90      	pop	{r4, r7, pc}
 8007e9a:	46c0      	nop			@ (mov r8, r8)
 8007e9c:	fe00e800 	.word	0xfe00e800

08007ea0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ea0:	b590      	push	{r4, r7, lr}
 8007ea2:	b089      	sub	sp, #36	@ 0x24
 8007ea4:	af02      	add	r7, sp, #8
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	000c      	movs	r4, r1
 8007eaa:	0010      	movs	r0, r2
 8007eac:	0019      	movs	r1, r3
 8007eae:	230a      	movs	r3, #10
 8007eb0:	18fb      	adds	r3, r7, r3
 8007eb2:	1c22      	adds	r2, r4, #0
 8007eb4:	801a      	strh	r2, [r3, #0]
 8007eb6:	2308      	movs	r3, #8
 8007eb8:	18fb      	adds	r3, r7, r3
 8007eba:	1c02      	adds	r2, r0, #0
 8007ebc:	801a      	strh	r2, [r3, #0]
 8007ebe:	1dbb      	adds	r3, r7, #6
 8007ec0:	1c0a      	adds	r2, r1, #0
 8007ec2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2241      	movs	r2, #65	@ 0x41
 8007ec8:	5c9b      	ldrb	r3, [r3, r2]
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b20      	cmp	r3, #32
 8007ece:	d000      	beq.n	8007ed2 <HAL_I2C_Mem_Read+0x32>
 8007ed0:	e110      	b.n	80080f4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d004      	beq.n	8007ee2 <HAL_I2C_Mem_Read+0x42>
 8007ed8:	232c      	movs	r3, #44	@ 0x2c
 8007eda:	18fb      	adds	r3, r7, r3
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d105      	bne.n	8007eee <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2280      	movs	r2, #128	@ 0x80
 8007ee6:	0092      	lsls	r2, r2, #2
 8007ee8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e103      	b.n	80080f6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2240      	movs	r2, #64	@ 0x40
 8007ef2:	5c9b      	ldrb	r3, [r3, r2]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d101      	bne.n	8007efc <HAL_I2C_Mem_Read+0x5c>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	e0fc      	b.n	80080f6 <HAL_I2C_Mem_Read+0x256>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2240      	movs	r2, #64	@ 0x40
 8007f00:	2101      	movs	r1, #1
 8007f02:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007f04:	f7fd fe12 	bl	8005b2c <HAL_GetTick>
 8007f08:	0003      	movs	r3, r0
 8007f0a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007f0c:	2380      	movs	r3, #128	@ 0x80
 8007f0e:	0219      	lsls	r1, r3, #8
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	2319      	movs	r3, #25
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f000 f9dd 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 8007f1e:	1e03      	subs	r3, r0, #0
 8007f20:	d001      	beq.n	8007f26 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e0e7      	b.n	80080f6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2241      	movs	r2, #65	@ 0x41
 8007f2a:	2122      	movs	r1, #34	@ 0x22
 8007f2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2242      	movs	r2, #66	@ 0x42
 8007f32:	2140      	movs	r1, #64	@ 0x40
 8007f34:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	222c      	movs	r2, #44	@ 0x2c
 8007f46:	18ba      	adds	r2, r7, r2
 8007f48:	8812      	ldrh	r2, [r2, #0]
 8007f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f52:	1dbb      	adds	r3, r7, #6
 8007f54:	881c      	ldrh	r4, [r3, #0]
 8007f56:	2308      	movs	r3, #8
 8007f58:	18fb      	adds	r3, r7, r3
 8007f5a:	881a      	ldrh	r2, [r3, #0]
 8007f5c:	230a      	movs	r3, #10
 8007f5e:	18fb      	adds	r3, r7, r3
 8007f60:	8819      	ldrh	r1, [r3, #0]
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	9301      	str	r3, [sp, #4]
 8007f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	0023      	movs	r3, r4
 8007f6e:	f000 f92f 	bl	80081d0 <I2C_RequestMemoryRead>
 8007f72:	1e03      	subs	r3, r0, #0
 8007f74:	d005      	beq.n	8007f82 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2240      	movs	r2, #64	@ 0x40
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e0b9      	b.n	80080f6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	2bff      	cmp	r3, #255	@ 0xff
 8007f8a:	d911      	bls.n	8007fb0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	22ff      	movs	r2, #255	@ 0xff
 8007f90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	2380      	movs	r3, #128	@ 0x80
 8007f9a:	045c      	lsls	r4, r3, #17
 8007f9c:	230a      	movs	r3, #10
 8007f9e:	18fb      	adds	r3, r7, r3
 8007fa0:	8819      	ldrh	r1, [r3, #0]
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	4b56      	ldr	r3, [pc, #344]	@ (8008100 <HAL_I2C_Mem_Read+0x260>)
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	0023      	movs	r3, r4
 8007faa:	f000 fb6f 	bl	800868c <I2C_TransferConfig>
 8007fae:	e012      	b.n	8007fd6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	2380      	movs	r3, #128	@ 0x80
 8007fc2:	049c      	lsls	r4, r3, #18
 8007fc4:	230a      	movs	r3, #10
 8007fc6:	18fb      	adds	r3, r7, r3
 8007fc8:	8819      	ldrh	r1, [r3, #0]
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	4b4c      	ldr	r3, [pc, #304]	@ (8008100 <HAL_I2C_Mem_Read+0x260>)
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	0023      	movs	r3, r4
 8007fd2:	f000 fb5b 	bl	800868c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007fd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	0013      	movs	r3, r2
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2104      	movs	r1, #4
 8007fe4:	f000 f978 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 8007fe8:	1e03      	subs	r3, r0, #0
 8007fea:	d001      	beq.n	8007ff0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e082      	b.n	80080f6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ffa:	b2d2      	uxtb	r2, r2
 8007ffc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008002:	1c5a      	adds	r2, r3, #1
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800800c:	3b01      	subs	r3, #1
 800800e:	b29a      	uxth	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008026:	b29b      	uxth	r3, r3
 8008028:	2b00      	cmp	r3, #0
 800802a:	d03a      	beq.n	80080a2 <HAL_I2C_Mem_Read+0x202>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008030:	2b00      	cmp	r3, #0
 8008032:	d136      	bne.n	80080a2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008034:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	0013      	movs	r3, r2
 800803e:	2200      	movs	r2, #0
 8008040:	2180      	movs	r1, #128	@ 0x80
 8008042:	f000 f949 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 8008046:	1e03      	subs	r3, r0, #0
 8008048:	d001      	beq.n	800804e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e053      	b.n	80080f6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008052:	b29b      	uxth	r3, r3
 8008054:	2bff      	cmp	r3, #255	@ 0xff
 8008056:	d911      	bls.n	800807c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	22ff      	movs	r2, #255	@ 0xff
 800805c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008062:	b2da      	uxtb	r2, r3
 8008064:	2380      	movs	r3, #128	@ 0x80
 8008066:	045c      	lsls	r4, r3, #17
 8008068:	230a      	movs	r3, #10
 800806a:	18fb      	adds	r3, r7, r3
 800806c:	8819      	ldrh	r1, [r3, #0]
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	2300      	movs	r3, #0
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	0023      	movs	r3, r4
 8008076:	f000 fb09 	bl	800868c <I2C_TransferConfig>
 800807a:	e012      	b.n	80080a2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008080:	b29a      	uxth	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800808a:	b2da      	uxtb	r2, r3
 800808c:	2380      	movs	r3, #128	@ 0x80
 800808e:	049c      	lsls	r4, r3, #18
 8008090:	230a      	movs	r3, #10
 8008092:	18fb      	adds	r3, r7, r3
 8008094:	8819      	ldrh	r1, [r3, #0]
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	2300      	movs	r3, #0
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	0023      	movs	r3, r4
 800809e:	f000 faf5 	bl	800868c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d194      	bne.n	8007fd6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	0018      	movs	r0, r3
 80080b4:	f000 f9ae 	bl	8008414 <I2C_WaitOnSTOPFlagUntilTimeout>
 80080b8:	1e03      	subs	r3, r0, #0
 80080ba:	d001      	beq.n	80080c0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e01a      	b.n	80080f6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2220      	movs	r2, #32
 80080c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	490c      	ldr	r1, [pc, #48]	@ (8008104 <HAL_I2C_Mem_Read+0x264>)
 80080d4:	400a      	ands	r2, r1
 80080d6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2241      	movs	r2, #65	@ 0x41
 80080dc:	2120      	movs	r1, #32
 80080de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2242      	movs	r2, #66	@ 0x42
 80080e4:	2100      	movs	r1, #0
 80080e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2240      	movs	r2, #64	@ 0x40
 80080ec:	2100      	movs	r1, #0
 80080ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	e000      	b.n	80080f6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80080f4:	2302      	movs	r3, #2
  }
}
 80080f6:	0018      	movs	r0, r3
 80080f8:	46bd      	mov	sp, r7
 80080fa:	b007      	add	sp, #28
 80080fc:	bd90      	pop	{r4, r7, pc}
 80080fe:	46c0      	nop			@ (mov r8, r8)
 8008100:	80002400 	.word	0x80002400
 8008104:	fe00e800 	.word	0xfe00e800

08008108 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008108:	b5b0      	push	{r4, r5, r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af02      	add	r7, sp, #8
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	000c      	movs	r4, r1
 8008112:	0010      	movs	r0, r2
 8008114:	0019      	movs	r1, r3
 8008116:	250a      	movs	r5, #10
 8008118:	197b      	adds	r3, r7, r5
 800811a:	1c22      	adds	r2, r4, #0
 800811c:	801a      	strh	r2, [r3, #0]
 800811e:	2308      	movs	r3, #8
 8008120:	18fb      	adds	r3, r7, r3
 8008122:	1c02      	adds	r2, r0, #0
 8008124:	801a      	strh	r2, [r3, #0]
 8008126:	1dbb      	adds	r3, r7, #6
 8008128:	1c0a      	adds	r2, r1, #0
 800812a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800812c:	1dbb      	adds	r3, r7, #6
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	b2da      	uxtb	r2, r3
 8008132:	2380      	movs	r3, #128	@ 0x80
 8008134:	045c      	lsls	r4, r3, #17
 8008136:	197b      	adds	r3, r7, r5
 8008138:	8819      	ldrh	r1, [r3, #0]
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	4b23      	ldr	r3, [pc, #140]	@ (80081cc <I2C_RequestMemoryWrite+0xc4>)
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	0023      	movs	r3, r4
 8008142:	f000 faa3 	bl	800868c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008148:	6a39      	ldr	r1, [r7, #32]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	0018      	movs	r0, r3
 800814e:	f000 f91b 	bl	8008388 <I2C_WaitOnTXISFlagUntilTimeout>
 8008152:	1e03      	subs	r3, r0, #0
 8008154:	d001      	beq.n	800815a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e033      	b.n	80081c2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800815a:	1dbb      	adds	r3, r7, #6
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	2b01      	cmp	r3, #1
 8008160:	d107      	bne.n	8008172 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008162:	2308      	movs	r3, #8
 8008164:	18fb      	adds	r3, r7, r3
 8008166:	881b      	ldrh	r3, [r3, #0]
 8008168:	b2da      	uxtb	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008170:	e019      	b.n	80081a6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008172:	2308      	movs	r3, #8
 8008174:	18fb      	adds	r3, r7, r3
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	0a1b      	lsrs	r3, r3, #8
 800817a:	b29b      	uxth	r3, r3
 800817c:	b2da      	uxtb	r2, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008186:	6a39      	ldr	r1, [r7, #32]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	0018      	movs	r0, r3
 800818c:	f000 f8fc 	bl	8008388 <I2C_WaitOnTXISFlagUntilTimeout>
 8008190:	1e03      	subs	r3, r0, #0
 8008192:	d001      	beq.n	8008198 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e014      	b.n	80081c2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008198:	2308      	movs	r3, #8
 800819a:	18fb      	adds	r3, r7, r3
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80081a6:	6a3a      	ldr	r2, [r7, #32]
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	0013      	movs	r3, r2
 80081b0:	2200      	movs	r2, #0
 80081b2:	2180      	movs	r1, #128	@ 0x80
 80081b4:	f000 f890 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 80081b8:	1e03      	subs	r3, r0, #0
 80081ba:	d001      	beq.n	80081c0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e000      	b.n	80081c2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	0018      	movs	r0, r3
 80081c4:	46bd      	mov	sp, r7
 80081c6:	b004      	add	sp, #16
 80081c8:	bdb0      	pop	{r4, r5, r7, pc}
 80081ca:	46c0      	nop			@ (mov r8, r8)
 80081cc:	80002000 	.word	0x80002000

080081d0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80081d0:	b5b0      	push	{r4, r5, r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af02      	add	r7, sp, #8
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	000c      	movs	r4, r1
 80081da:	0010      	movs	r0, r2
 80081dc:	0019      	movs	r1, r3
 80081de:	250a      	movs	r5, #10
 80081e0:	197b      	adds	r3, r7, r5
 80081e2:	1c22      	adds	r2, r4, #0
 80081e4:	801a      	strh	r2, [r3, #0]
 80081e6:	2308      	movs	r3, #8
 80081e8:	18fb      	adds	r3, r7, r3
 80081ea:	1c02      	adds	r2, r0, #0
 80081ec:	801a      	strh	r2, [r3, #0]
 80081ee:	1dbb      	adds	r3, r7, #6
 80081f0:	1c0a      	adds	r2, r1, #0
 80081f2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80081f4:	1dbb      	adds	r3, r7, #6
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	197b      	adds	r3, r7, r5
 80081fc:	8819      	ldrh	r1, [r3, #0]
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	4b23      	ldr	r3, [pc, #140]	@ (8008290 <I2C_RequestMemoryRead+0xc0>)
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	2300      	movs	r3, #0
 8008206:	f000 fa41 	bl	800868c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800820a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800820c:	6a39      	ldr	r1, [r7, #32]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	0018      	movs	r0, r3
 8008212:	f000 f8b9 	bl	8008388 <I2C_WaitOnTXISFlagUntilTimeout>
 8008216:	1e03      	subs	r3, r0, #0
 8008218:	d001      	beq.n	800821e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e033      	b.n	8008286 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800821e:	1dbb      	adds	r3, r7, #6
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d107      	bne.n	8008236 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008226:	2308      	movs	r3, #8
 8008228:	18fb      	adds	r3, r7, r3
 800822a:	881b      	ldrh	r3, [r3, #0]
 800822c:	b2da      	uxtb	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	629a      	str	r2, [r3, #40]	@ 0x28
 8008234:	e019      	b.n	800826a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008236:	2308      	movs	r3, #8
 8008238:	18fb      	adds	r3, r7, r3
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	0a1b      	lsrs	r3, r3, #8
 800823e:	b29b      	uxth	r3, r3
 8008240:	b2da      	uxtb	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800824a:	6a39      	ldr	r1, [r7, #32]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	0018      	movs	r0, r3
 8008250:	f000 f89a 	bl	8008388 <I2C_WaitOnTXISFlagUntilTimeout>
 8008254:	1e03      	subs	r3, r0, #0
 8008256:	d001      	beq.n	800825c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e014      	b.n	8008286 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800825c:	2308      	movs	r3, #8
 800825e:	18fb      	adds	r3, r7, r3
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	b2da      	uxtb	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800826a:	6a3a      	ldr	r2, [r7, #32]
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	0013      	movs	r3, r2
 8008274:	2200      	movs	r2, #0
 8008276:	2140      	movs	r1, #64	@ 0x40
 8008278:	f000 f82e 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 800827c:	1e03      	subs	r3, r0, #0
 800827e:	d001      	beq.n	8008284 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e000      	b.n	8008286 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	0018      	movs	r0, r3
 8008288:	46bd      	mov	sp, r7
 800828a:	b004      	add	sp, #16
 800828c:	bdb0      	pop	{r4, r5, r7, pc}
 800828e:	46c0      	nop			@ (mov r8, r8)
 8008290:	80002000 	.word	0x80002000

08008294 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	2202      	movs	r2, #2
 80082a4:	4013      	ands	r3, r2
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d103      	bne.n	80082b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2200      	movs	r2, #0
 80082b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	2201      	movs	r2, #1
 80082ba:	4013      	ands	r3, r2
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d007      	beq.n	80082d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	699a      	ldr	r2, [r3, #24]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2101      	movs	r1, #1
 80082cc:	430a      	orrs	r2, r1
 80082ce:	619a      	str	r2, [r3, #24]
  }
}
 80082d0:	46c0      	nop			@ (mov r8, r8)
 80082d2:	46bd      	mov	sp, r7
 80082d4:	b002      	add	sp, #8
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	603b      	str	r3, [r7, #0]
 80082e4:	1dfb      	adds	r3, r7, #7
 80082e6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082e8:	e03a      	b.n	8008360 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80082ea:	69ba      	ldr	r2, [r7, #24]
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	0018      	movs	r0, r3
 80082f2:	f000 f8d3 	bl	800849c <I2C_IsErrorOccurred>
 80082f6:	1e03      	subs	r3, r0, #0
 80082f8:	d001      	beq.n	80082fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e040      	b.n	8008380 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	3301      	adds	r3, #1
 8008302:	d02d      	beq.n	8008360 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008304:	f7fd fc12 	bl	8005b2c <HAL_GetTick>
 8008308:	0002      	movs	r2, r0
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d302      	bcc.n	800831a <I2C_WaitOnFlagUntilTimeout+0x42>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d122      	bne.n	8008360 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	4013      	ands	r3, r2
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	425a      	negs	r2, r3
 800832a:	4153      	adcs	r3, r2
 800832c:	b2db      	uxtb	r3, r3
 800832e:	001a      	movs	r2, r3
 8008330:	1dfb      	adds	r3, r7, #7
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d113      	bne.n	8008360 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800833c:	2220      	movs	r2, #32
 800833e:	431a      	orrs	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2241      	movs	r2, #65	@ 0x41
 8008348:	2120      	movs	r1, #32
 800834a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2242      	movs	r2, #66	@ 0x42
 8008350:	2100      	movs	r1, #0
 8008352:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2240      	movs	r2, #64	@ 0x40
 8008358:	2100      	movs	r1, #0
 800835a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e00f      	b.n	8008380 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	4013      	ands	r3, r2
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	425a      	negs	r2, r3
 8008370:	4153      	adcs	r3, r2
 8008372:	b2db      	uxtb	r3, r3
 8008374:	001a      	movs	r2, r3
 8008376:	1dfb      	adds	r3, r7, #7
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	429a      	cmp	r2, r3
 800837c:	d0b5      	beq.n	80082ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	0018      	movs	r0, r3
 8008382:	46bd      	mov	sp, r7
 8008384:	b004      	add	sp, #16
 8008386:	bd80      	pop	{r7, pc}

08008388 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008394:	e032      	b.n	80083fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	68b9      	ldr	r1, [r7, #8]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	0018      	movs	r0, r3
 800839e:	f000 f87d 	bl	800849c <I2C_IsErrorOccurred>
 80083a2:	1e03      	subs	r3, r0, #0
 80083a4:	d001      	beq.n	80083aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e030      	b.n	800840c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	3301      	adds	r3, #1
 80083ae:	d025      	beq.n	80083fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083b0:	f7fd fbbc 	bl	8005b2c <HAL_GetTick>
 80083b4:	0002      	movs	r2, r0
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d302      	bcc.n	80083c6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d11a      	bne.n	80083fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	2202      	movs	r2, #2
 80083ce:	4013      	ands	r3, r2
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d013      	beq.n	80083fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083d8:	2220      	movs	r2, #32
 80083da:	431a      	orrs	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2241      	movs	r2, #65	@ 0x41
 80083e4:	2120      	movs	r1, #32
 80083e6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2242      	movs	r2, #66	@ 0x42
 80083ec:	2100      	movs	r1, #0
 80083ee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2240      	movs	r2, #64	@ 0x40
 80083f4:	2100      	movs	r1, #0
 80083f6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e007      	b.n	800840c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	2202      	movs	r2, #2
 8008404:	4013      	ands	r3, r2
 8008406:	2b02      	cmp	r3, #2
 8008408:	d1c5      	bne.n	8008396 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	0018      	movs	r0, r3
 800840e:	46bd      	mov	sp, r7
 8008410:	b004      	add	sp, #16
 8008412:	bd80      	pop	{r7, pc}

08008414 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008420:	e02f      	b.n	8008482 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	68b9      	ldr	r1, [r7, #8]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	0018      	movs	r0, r3
 800842a:	f000 f837 	bl	800849c <I2C_IsErrorOccurred>
 800842e:	1e03      	subs	r3, r0, #0
 8008430:	d001      	beq.n	8008436 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e02d      	b.n	8008492 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008436:	f7fd fb79 	bl	8005b2c <HAL_GetTick>
 800843a:	0002      	movs	r2, r0
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	429a      	cmp	r2, r3
 8008444:	d302      	bcc.n	800844c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d11a      	bne.n	8008482 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	2220      	movs	r2, #32
 8008454:	4013      	ands	r3, r2
 8008456:	2b20      	cmp	r3, #32
 8008458:	d013      	beq.n	8008482 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800845e:	2220      	movs	r2, #32
 8008460:	431a      	orrs	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2241      	movs	r2, #65	@ 0x41
 800846a:	2120      	movs	r1, #32
 800846c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2242      	movs	r2, #66	@ 0x42
 8008472:	2100      	movs	r1, #0
 8008474:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2240      	movs	r2, #64	@ 0x40
 800847a:	2100      	movs	r1, #0
 800847c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e007      	b.n	8008492 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	2220      	movs	r2, #32
 800848a:	4013      	ands	r3, r2
 800848c:	2b20      	cmp	r3, #32
 800848e:	d1c8      	bne.n	8008422 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	0018      	movs	r0, r3
 8008494:	46bd      	mov	sp, r7
 8008496:	b004      	add	sp, #16
 8008498:	bd80      	pop	{r7, pc}
	...

0800849c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b08a      	sub	sp, #40	@ 0x28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084a8:	2327      	movs	r3, #39	@ 0x27
 80084aa:	18fb      	adds	r3, r7, r3
 80084ac:	2200      	movs	r2, #0
 80084ae:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80084b8:	2300      	movs	r3, #0
 80084ba:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	2210      	movs	r2, #16
 80084c4:	4013      	ands	r3, r2
 80084c6:	d100      	bne.n	80084ca <I2C_IsErrorOccurred+0x2e>
 80084c8:	e079      	b.n	80085be <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2210      	movs	r2, #16
 80084d0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80084d2:	e057      	b.n	8008584 <I2C_IsErrorOccurred+0xe8>
 80084d4:	2227      	movs	r2, #39	@ 0x27
 80084d6:	18bb      	adds	r3, r7, r2
 80084d8:	18ba      	adds	r2, r7, r2
 80084da:	7812      	ldrb	r2, [r2, #0]
 80084dc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	3301      	adds	r3, #1
 80084e2:	d04f      	beq.n	8008584 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80084e4:	f7fd fb22 	bl	8005b2c <HAL_GetTick>
 80084e8:	0002      	movs	r2, r0
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d302      	bcc.n	80084fa <I2C_IsErrorOccurred+0x5e>
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d144      	bne.n	8008584 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	2380      	movs	r3, #128	@ 0x80
 8008502:	01db      	lsls	r3, r3, #7
 8008504:	4013      	ands	r3, r2
 8008506:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008508:	2013      	movs	r0, #19
 800850a:	183b      	adds	r3, r7, r0
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	2142      	movs	r1, #66	@ 0x42
 8008510:	5c52      	ldrb	r2, [r2, r1]
 8008512:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	699a      	ldr	r2, [r3, #24]
 800851a:	2380      	movs	r3, #128	@ 0x80
 800851c:	021b      	lsls	r3, r3, #8
 800851e:	401a      	ands	r2, r3
 8008520:	2380      	movs	r3, #128	@ 0x80
 8008522:	021b      	lsls	r3, r3, #8
 8008524:	429a      	cmp	r2, r3
 8008526:	d126      	bne.n	8008576 <I2C_IsErrorOccurred+0xda>
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	2380      	movs	r3, #128	@ 0x80
 800852c:	01db      	lsls	r3, r3, #7
 800852e:	429a      	cmp	r2, r3
 8008530:	d021      	beq.n	8008576 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8008532:	183b      	adds	r3, r7, r0
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	2b20      	cmp	r3, #32
 8008538:	d01d      	beq.n	8008576 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2180      	movs	r1, #128	@ 0x80
 8008546:	01c9      	lsls	r1, r1, #7
 8008548:	430a      	orrs	r2, r1
 800854a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800854c:	f7fd faee 	bl	8005b2c <HAL_GetTick>
 8008550:	0003      	movs	r3, r0
 8008552:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008554:	e00f      	b.n	8008576 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008556:	f7fd fae9 	bl	8005b2c <HAL_GetTick>
 800855a:	0002      	movs	r2, r0
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b19      	cmp	r3, #25
 8008562:	d908      	bls.n	8008576 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	2220      	movs	r2, #32
 8008568:	4313      	orrs	r3, r2
 800856a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800856c:	2327      	movs	r3, #39	@ 0x27
 800856e:	18fb      	adds	r3, r7, r3
 8008570:	2201      	movs	r2, #1
 8008572:	701a      	strb	r2, [r3, #0]

              break;
 8008574:	e006      	b.n	8008584 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	2220      	movs	r2, #32
 800857e:	4013      	ands	r3, r2
 8008580:	2b20      	cmp	r3, #32
 8008582:	d1e8      	bne.n	8008556 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	2220      	movs	r2, #32
 800858c:	4013      	ands	r3, r2
 800858e:	2b20      	cmp	r3, #32
 8008590:	d004      	beq.n	800859c <I2C_IsErrorOccurred+0x100>
 8008592:	2327      	movs	r3, #39	@ 0x27
 8008594:	18fb      	adds	r3, r7, r3
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d09b      	beq.n	80084d4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800859c:	2327      	movs	r3, #39	@ 0x27
 800859e:	18fb      	adds	r3, r7, r3
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d103      	bne.n	80085ae <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2220      	movs	r2, #32
 80085ac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	2204      	movs	r2, #4
 80085b2:	4313      	orrs	r3, r2
 80085b4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80085b6:	2327      	movs	r3, #39	@ 0x27
 80085b8:	18fb      	adds	r3, r7, r3
 80085ba:	2201      	movs	r2, #1
 80085bc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	2380      	movs	r3, #128	@ 0x80
 80085ca:	005b      	lsls	r3, r3, #1
 80085cc:	4013      	ands	r3, r2
 80085ce:	d00c      	beq.n	80085ea <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	2201      	movs	r2, #1
 80085d4:	4313      	orrs	r3, r2
 80085d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2280      	movs	r2, #128	@ 0x80
 80085de:	0052      	lsls	r2, r2, #1
 80085e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80085e2:	2327      	movs	r3, #39	@ 0x27
 80085e4:	18fb      	adds	r3, r7, r3
 80085e6:	2201      	movs	r2, #1
 80085e8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80085ea:	69ba      	ldr	r2, [r7, #24]
 80085ec:	2380      	movs	r3, #128	@ 0x80
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	4013      	ands	r3, r2
 80085f2:	d00c      	beq.n	800860e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80085f4:	6a3b      	ldr	r3, [r7, #32]
 80085f6:	2208      	movs	r2, #8
 80085f8:	4313      	orrs	r3, r2
 80085fa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2280      	movs	r2, #128	@ 0x80
 8008602:	00d2      	lsls	r2, r2, #3
 8008604:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008606:	2327      	movs	r3, #39	@ 0x27
 8008608:	18fb      	adds	r3, r7, r3
 800860a:	2201      	movs	r2, #1
 800860c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	2380      	movs	r3, #128	@ 0x80
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4013      	ands	r3, r2
 8008616:	d00c      	beq.n	8008632 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	2202      	movs	r2, #2
 800861c:	4313      	orrs	r3, r2
 800861e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2280      	movs	r2, #128	@ 0x80
 8008626:	0092      	lsls	r2, r2, #2
 8008628:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800862a:	2327      	movs	r3, #39	@ 0x27
 800862c:	18fb      	adds	r3, r7, r3
 800862e:	2201      	movs	r2, #1
 8008630:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8008632:	2327      	movs	r3, #39	@ 0x27
 8008634:	18fb      	adds	r3, r7, r3
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d01d      	beq.n	8008678 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	0018      	movs	r0, r3
 8008640:	f7ff fe28 	bl	8008294 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685a      	ldr	r2, [r3, #4]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	490e      	ldr	r1, [pc, #56]	@ (8008688 <I2C_IsErrorOccurred+0x1ec>)
 8008650:	400a      	ands	r2, r1
 8008652:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	431a      	orrs	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2241      	movs	r2, #65	@ 0x41
 8008664:	2120      	movs	r1, #32
 8008666:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2242      	movs	r2, #66	@ 0x42
 800866c:	2100      	movs	r1, #0
 800866e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2240      	movs	r2, #64	@ 0x40
 8008674:	2100      	movs	r1, #0
 8008676:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8008678:	2327      	movs	r3, #39	@ 0x27
 800867a:	18fb      	adds	r3, r7, r3
 800867c:	781b      	ldrb	r3, [r3, #0]
}
 800867e:	0018      	movs	r0, r3
 8008680:	46bd      	mov	sp, r7
 8008682:	b00a      	add	sp, #40	@ 0x28
 8008684:	bd80      	pop	{r7, pc}
 8008686:	46c0      	nop			@ (mov r8, r8)
 8008688:	fe00e800 	.word	0xfe00e800

0800868c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800868c:	b590      	push	{r4, r7, lr}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	0008      	movs	r0, r1
 8008696:	0011      	movs	r1, r2
 8008698:	607b      	str	r3, [r7, #4]
 800869a:	240a      	movs	r4, #10
 800869c:	193b      	adds	r3, r7, r4
 800869e:	1c02      	adds	r2, r0, #0
 80086a0:	801a      	strh	r2, [r3, #0]
 80086a2:	2009      	movs	r0, #9
 80086a4:	183b      	adds	r3, r7, r0
 80086a6:	1c0a      	adds	r2, r1, #0
 80086a8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086aa:	193b      	adds	r3, r7, r4
 80086ac:	881b      	ldrh	r3, [r3, #0]
 80086ae:	059b      	lsls	r3, r3, #22
 80086b0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80086b2:	183b      	adds	r3, r7, r0
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	0419      	lsls	r1, r3, #16
 80086b8:	23ff      	movs	r3, #255	@ 0xff
 80086ba:	041b      	lsls	r3, r3, #16
 80086bc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086be:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c6:	4313      	orrs	r3, r2
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	085b      	lsrs	r3, r3, #1
 80086cc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086d6:	0d51      	lsrs	r1, r2, #21
 80086d8:	2280      	movs	r2, #128	@ 0x80
 80086da:	00d2      	lsls	r2, r2, #3
 80086dc:	400a      	ands	r2, r1
 80086de:	4907      	ldr	r1, [pc, #28]	@ (80086fc <I2C_TransferConfig+0x70>)
 80086e0:	430a      	orrs	r2, r1
 80086e2:	43d2      	mvns	r2, r2
 80086e4:	401a      	ands	r2, r3
 80086e6:	0011      	movs	r1, r2
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	430a      	orrs	r2, r1
 80086f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80086f2:	46c0      	nop			@ (mov r8, r8)
 80086f4:	46bd      	mov	sp, r7
 80086f6:	b007      	add	sp, #28
 80086f8:	bd90      	pop	{r4, r7, pc}
 80086fa:	46c0      	nop			@ (mov r8, r8)
 80086fc:	03ff63ff 	.word	0x03ff63ff

08008700 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2241      	movs	r2, #65	@ 0x41
 800870e:	5c9b      	ldrb	r3, [r3, r2]
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b20      	cmp	r3, #32
 8008714:	d138      	bne.n	8008788 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2240      	movs	r2, #64	@ 0x40
 800871a:	5c9b      	ldrb	r3, [r3, r2]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d101      	bne.n	8008724 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008720:	2302      	movs	r3, #2
 8008722:	e032      	b.n	800878a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2240      	movs	r2, #64	@ 0x40
 8008728:	2101      	movs	r1, #1
 800872a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2241      	movs	r2, #65	@ 0x41
 8008730:	2124      	movs	r1, #36	@ 0x24
 8008732:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2101      	movs	r1, #1
 8008740:	438a      	bics	r2, r1
 8008742:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4911      	ldr	r1, [pc, #68]	@ (8008794 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8008750:	400a      	ands	r2, r1
 8008752:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6819      	ldr	r1, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	430a      	orrs	r2, r1
 8008762:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2101      	movs	r1, #1
 8008770:	430a      	orrs	r2, r1
 8008772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2241      	movs	r2, #65	@ 0x41
 8008778:	2120      	movs	r1, #32
 800877a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2240      	movs	r2, #64	@ 0x40
 8008780:	2100      	movs	r1, #0
 8008782:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	e000      	b.n	800878a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008788:	2302      	movs	r3, #2
  }
}
 800878a:	0018      	movs	r0, r3
 800878c:	46bd      	mov	sp, r7
 800878e:	b002      	add	sp, #8
 8008790:	bd80      	pop	{r7, pc}
 8008792:	46c0      	nop			@ (mov r8, r8)
 8008794:	ffffefff 	.word	0xffffefff

08008798 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2241      	movs	r2, #65	@ 0x41
 80087a6:	5c9b      	ldrb	r3, [r3, r2]
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b20      	cmp	r3, #32
 80087ac:	d139      	bne.n	8008822 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2240      	movs	r2, #64	@ 0x40
 80087b2:	5c9b      	ldrb	r3, [r3, r2]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d101      	bne.n	80087bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80087b8:	2302      	movs	r3, #2
 80087ba:	e033      	b.n	8008824 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2240      	movs	r2, #64	@ 0x40
 80087c0:	2101      	movs	r1, #1
 80087c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2241      	movs	r2, #65	@ 0x41
 80087c8:	2124      	movs	r1, #36	@ 0x24
 80087ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2101      	movs	r1, #1
 80087d8:	438a      	bics	r2, r1
 80087da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	4a11      	ldr	r2, [pc, #68]	@ (800882c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80087e8:	4013      	ands	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	021b      	lsls	r3, r3, #8
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2101      	movs	r1, #1
 800880a:	430a      	orrs	r2, r1
 800880c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2241      	movs	r2, #65	@ 0x41
 8008812:	2120      	movs	r1, #32
 8008814:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2240      	movs	r2, #64	@ 0x40
 800881a:	2100      	movs	r1, #0
 800881c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	e000      	b.n	8008824 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008822:	2302      	movs	r3, #2
  }
}
 8008824:	0018      	movs	r0, r3
 8008826:	46bd      	mov	sp, r7
 8008828:	b004      	add	sp, #16
 800882a:	bd80      	pop	{r7, pc}
 800882c:	fffff0ff 	.word	0xfffff0ff

08008830 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b086      	sub	sp, #24
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e20f      	b.n	8008c62 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2201      	movs	r2, #1
 8008848:	4013      	ands	r3, r2
 800884a:	d100      	bne.n	800884e <HAL_RCC_OscConfig+0x1e>
 800884c:	e069      	b.n	8008922 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800884e:	4bc8      	ldr	r3, [pc, #800]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	2238      	movs	r2, #56	@ 0x38
 8008854:	4013      	ands	r3, r2
 8008856:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	2b08      	cmp	r3, #8
 800885c:	d105      	bne.n	800886a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d15d      	bne.n	8008922 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e1fb      	b.n	8008c62 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	2380      	movs	r3, #128	@ 0x80
 8008870:	025b      	lsls	r3, r3, #9
 8008872:	429a      	cmp	r2, r3
 8008874:	d107      	bne.n	8008886 <HAL_RCC_OscConfig+0x56>
 8008876:	4bbe      	ldr	r3, [pc, #760]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	4bbd      	ldr	r3, [pc, #756]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 800887c:	2180      	movs	r1, #128	@ 0x80
 800887e:	0249      	lsls	r1, r1, #9
 8008880:	430a      	orrs	r2, r1
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	e020      	b.n	80088c8 <HAL_RCC_OscConfig+0x98>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685a      	ldr	r2, [r3, #4]
 800888a:	23a0      	movs	r3, #160	@ 0xa0
 800888c:	02db      	lsls	r3, r3, #11
 800888e:	429a      	cmp	r2, r3
 8008890:	d10e      	bne.n	80088b0 <HAL_RCC_OscConfig+0x80>
 8008892:	4bb7      	ldr	r3, [pc, #732]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	4bb6      	ldr	r3, [pc, #728]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008898:	2180      	movs	r1, #128	@ 0x80
 800889a:	02c9      	lsls	r1, r1, #11
 800889c:	430a      	orrs	r2, r1
 800889e:	601a      	str	r2, [r3, #0]
 80088a0:	4bb3      	ldr	r3, [pc, #716]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	4bb2      	ldr	r3, [pc, #712]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 80088a6:	2180      	movs	r1, #128	@ 0x80
 80088a8:	0249      	lsls	r1, r1, #9
 80088aa:	430a      	orrs	r2, r1
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	e00b      	b.n	80088c8 <HAL_RCC_OscConfig+0x98>
 80088b0:	4baf      	ldr	r3, [pc, #700]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	4bae      	ldr	r3, [pc, #696]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 80088b6:	49af      	ldr	r1, [pc, #700]	@ (8008b74 <HAL_RCC_OscConfig+0x344>)
 80088b8:	400a      	ands	r2, r1
 80088ba:	601a      	str	r2, [r3, #0]
 80088bc:	4bac      	ldr	r3, [pc, #688]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	4bab      	ldr	r3, [pc, #684]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 80088c2:	49ad      	ldr	r1, [pc, #692]	@ (8008b78 <HAL_RCC_OscConfig+0x348>)
 80088c4:	400a      	ands	r2, r1
 80088c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d014      	beq.n	80088fa <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088d0:	f7fd f92c 	bl	8005b2c <HAL_GetTick>
 80088d4:	0003      	movs	r3, r0
 80088d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80088d8:	e008      	b.n	80088ec <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80088da:	f7fd f927 	bl	8005b2c <HAL_GetTick>
 80088de:	0002      	movs	r2, r0
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	2b64      	cmp	r3, #100	@ 0x64
 80088e6:	d901      	bls.n	80088ec <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80088e8:	2303      	movs	r3, #3
 80088ea:	e1ba      	b.n	8008c62 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80088ec:	4ba0      	ldr	r3, [pc, #640]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	2380      	movs	r3, #128	@ 0x80
 80088f2:	029b      	lsls	r3, r3, #10
 80088f4:	4013      	ands	r3, r2
 80088f6:	d0f0      	beq.n	80088da <HAL_RCC_OscConfig+0xaa>
 80088f8:	e013      	b.n	8008922 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088fa:	f7fd f917 	bl	8005b2c <HAL_GetTick>
 80088fe:	0003      	movs	r3, r0
 8008900:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008902:	e008      	b.n	8008916 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8008904:	f7fd f912 	bl	8005b2c <HAL_GetTick>
 8008908:	0002      	movs	r2, r0
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	2b64      	cmp	r3, #100	@ 0x64
 8008910:	d901      	bls.n	8008916 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e1a5      	b.n	8008c62 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008916:	4b96      	ldr	r3, [pc, #600]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	2380      	movs	r3, #128	@ 0x80
 800891c:	029b      	lsls	r3, r3, #10
 800891e:	4013      	ands	r3, r2
 8008920:	d1f0      	bne.n	8008904 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2202      	movs	r2, #2
 8008928:	4013      	ands	r3, r2
 800892a:	d100      	bne.n	800892e <HAL_RCC_OscConfig+0xfe>
 800892c:	e086      	b.n	8008a3c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800892e:	4b90      	ldr	r3, [pc, #576]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	2238      	movs	r2, #56	@ 0x38
 8008934:	4013      	ands	r3, r2
 8008936:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d12f      	bne.n	800899e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d101      	bne.n	800894a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e18b      	b.n	8008c62 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800894a:	4b89      	ldr	r3, [pc, #548]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	4a8b      	ldr	r2, [pc, #556]	@ (8008b7c <HAL_RCC_OscConfig+0x34c>)
 8008950:	4013      	ands	r3, r2
 8008952:	0019      	movs	r1, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	695b      	ldr	r3, [r3, #20]
 8008958:	021a      	lsls	r2, r3, #8
 800895a:	4b85      	ldr	r3, [pc, #532]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 800895c:	430a      	orrs	r2, r1
 800895e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d112      	bne.n	800898c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008966:	4b82      	ldr	r3, [pc, #520]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a85      	ldr	r2, [pc, #532]	@ (8008b80 <HAL_RCC_OscConfig+0x350>)
 800896c:	4013      	ands	r3, r2
 800896e:	0019      	movs	r1, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	691a      	ldr	r2, [r3, #16]
 8008974:	4b7e      	ldr	r3, [pc, #504]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008976:	430a      	orrs	r2, r1
 8008978:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800897a:	4b7d      	ldr	r3, [pc, #500]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	0adb      	lsrs	r3, r3, #11
 8008980:	2207      	movs	r2, #7
 8008982:	4013      	ands	r3, r2
 8008984:	4a7f      	ldr	r2, [pc, #508]	@ (8008b84 <HAL_RCC_OscConfig+0x354>)
 8008986:	40da      	lsrs	r2, r3
 8008988:	4b7f      	ldr	r3, [pc, #508]	@ (8008b88 <HAL_RCC_OscConfig+0x358>)
 800898a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800898c:	4b7f      	ldr	r3, [pc, #508]	@ (8008b8c <HAL_RCC_OscConfig+0x35c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	0018      	movs	r0, r3
 8008992:	f7fd f86f 	bl	8005a74 <HAL_InitTick>
 8008996:	1e03      	subs	r3, r0, #0
 8008998:	d050      	beq.n	8008a3c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e161      	b.n	8008c62 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d030      	beq.n	8008a08 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80089a6:	4b72      	ldr	r3, [pc, #456]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a75      	ldr	r2, [pc, #468]	@ (8008b80 <HAL_RCC_OscConfig+0x350>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	0019      	movs	r1, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	691a      	ldr	r2, [r3, #16]
 80089b4:	4b6e      	ldr	r3, [pc, #440]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 80089b6:	430a      	orrs	r2, r1
 80089b8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80089ba:	4b6d      	ldr	r3, [pc, #436]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	4b6c      	ldr	r3, [pc, #432]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 80089c0:	2180      	movs	r1, #128	@ 0x80
 80089c2:	0049      	lsls	r1, r1, #1
 80089c4:	430a      	orrs	r2, r1
 80089c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c8:	f7fd f8b0 	bl	8005b2c <HAL_GetTick>
 80089cc:	0003      	movs	r3, r0
 80089ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089d0:	e008      	b.n	80089e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80089d2:	f7fd f8ab 	bl	8005b2c <HAL_GetTick>
 80089d6:	0002      	movs	r2, r0
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d901      	bls.n	80089e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e13e      	b.n	8008c62 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089e4:	4b62      	ldr	r3, [pc, #392]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	2380      	movs	r3, #128	@ 0x80
 80089ea:	00db      	lsls	r3, r3, #3
 80089ec:	4013      	ands	r3, r2
 80089ee:	d0f0      	beq.n	80089d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089f0:	4b5f      	ldr	r3, [pc, #380]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	4a61      	ldr	r2, [pc, #388]	@ (8008b7c <HAL_RCC_OscConfig+0x34c>)
 80089f6:	4013      	ands	r3, r2
 80089f8:	0019      	movs	r1, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	021a      	lsls	r2, r3, #8
 8008a00:	4b5b      	ldr	r3, [pc, #364]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008a02:	430a      	orrs	r2, r1
 8008a04:	605a      	str	r2, [r3, #4]
 8008a06:	e019      	b.n	8008a3c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8008a08:	4b59      	ldr	r3, [pc, #356]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	4b58      	ldr	r3, [pc, #352]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008a0e:	4960      	ldr	r1, [pc, #384]	@ (8008b90 <HAL_RCC_OscConfig+0x360>)
 8008a10:	400a      	ands	r2, r1
 8008a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a14:	f7fd f88a 	bl	8005b2c <HAL_GetTick>
 8008a18:	0003      	movs	r3, r0
 8008a1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a1c:	e008      	b.n	8008a30 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8008a1e:	f7fd f885 	bl	8005b2c <HAL_GetTick>
 8008a22:	0002      	movs	r2, r0
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d901      	bls.n	8008a30 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e118      	b.n	8008c62 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a30:	4b4f      	ldr	r3, [pc, #316]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	2380      	movs	r3, #128	@ 0x80
 8008a36:	00db      	lsls	r3, r3, #3
 8008a38:	4013      	ands	r3, r2
 8008a3a:	d1f0      	bne.n	8008a1e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2208      	movs	r2, #8
 8008a42:	4013      	ands	r3, r2
 8008a44:	d042      	beq.n	8008acc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8008a46:	4b4a      	ldr	r3, [pc, #296]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	2238      	movs	r2, #56	@ 0x38
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	2b18      	cmp	r3, #24
 8008a50:	d105      	bne.n	8008a5e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d138      	bne.n	8008acc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e101      	b.n	8008c62 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d019      	beq.n	8008a9a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008a66:	4b42      	ldr	r3, [pc, #264]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008a68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008a6a:	4b41      	ldr	r3, [pc, #260]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	430a      	orrs	r2, r1
 8008a70:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a72:	f7fd f85b 	bl	8005b2c <HAL_GetTick>
 8008a76:	0003      	movs	r3, r0
 8008a78:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8008a7a:	e008      	b.n	8008a8e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8008a7c:	f7fd f856 	bl	8005b2c <HAL_GetTick>
 8008a80:	0002      	movs	r2, r0
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d901      	bls.n	8008a8e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e0e9      	b.n	8008c62 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8008a8e:	4b38      	ldr	r3, [pc, #224]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a92:	2202      	movs	r2, #2
 8008a94:	4013      	ands	r3, r2
 8008a96:	d0f1      	beq.n	8008a7c <HAL_RCC_OscConfig+0x24c>
 8008a98:	e018      	b.n	8008acc <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008a9a:	4b35      	ldr	r3, [pc, #212]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008a9c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008a9e:	4b34      	ldr	r3, [pc, #208]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	438a      	bics	r2, r1
 8008aa4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa6:	f7fd f841 	bl	8005b2c <HAL_GetTick>
 8008aaa:	0003      	movs	r3, r0
 8008aac:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8008aae:	e008      	b.n	8008ac2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8008ab0:	f7fd f83c 	bl	8005b2c <HAL_GetTick>
 8008ab4:	0002      	movs	r2, r0
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d901      	bls.n	8008ac2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e0cf      	b.n	8008c62 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8008ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	4013      	ands	r3, r2
 8008aca:	d1f1      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2204      	movs	r2, #4
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	d100      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x2a8>
 8008ad6:	e084      	b.n	8008be2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ad8:	230f      	movs	r3, #15
 8008ada:	18fb      	adds	r3, r7, r3
 8008adc:	2200      	movs	r2, #0
 8008ade:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8008ae0:	4b23      	ldr	r3, [pc, #140]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	2238      	movs	r2, #56	@ 0x38
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	2b20      	cmp	r3, #32
 8008aea:	d106      	bne.n	8008afa <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d000      	beq.n	8008af6 <HAL_RCC_OscConfig+0x2c6>
 8008af4:	e075      	b.n	8008be2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e0b3      	b.n	8008c62 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d106      	bne.n	8008b10 <HAL_RCC_OscConfig+0x2e0>
 8008b02:	4b1b      	ldr	r3, [pc, #108]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008b04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008b06:	4b1a      	ldr	r3, [pc, #104]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008b08:	2101      	movs	r1, #1
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008b0e:	e01c      	b.n	8008b4a <HAL_RCC_OscConfig+0x31a>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	2b05      	cmp	r3, #5
 8008b16:	d10c      	bne.n	8008b32 <HAL_RCC_OscConfig+0x302>
 8008b18:	4b15      	ldr	r3, [pc, #84]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008b1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008b1c:	4b14      	ldr	r3, [pc, #80]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008b1e:	2104      	movs	r1, #4
 8008b20:	430a      	orrs	r2, r1
 8008b22:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008b24:	4b12      	ldr	r3, [pc, #72]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008b26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008b28:	4b11      	ldr	r3, [pc, #68]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	430a      	orrs	r2, r1
 8008b2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008b30:	e00b      	b.n	8008b4a <HAL_RCC_OscConfig+0x31a>
 8008b32:	4b0f      	ldr	r3, [pc, #60]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008b34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008b36:	4b0e      	ldr	r3, [pc, #56]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008b38:	2101      	movs	r1, #1
 8008b3a:	438a      	bics	r2, r1
 8008b3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008b40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008b42:	4b0b      	ldr	r3, [pc, #44]	@ (8008b70 <HAL_RCC_OscConfig+0x340>)
 8008b44:	2104      	movs	r1, #4
 8008b46:	438a      	bics	r2, r1
 8008b48:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d028      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b52:	f7fc ffeb 	bl	8005b2c <HAL_GetTick>
 8008b56:	0003      	movs	r3, r0
 8008b58:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8008b5a:	e01d      	b.n	8008b98 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b5c:	f7fc ffe6 	bl	8005b2c <HAL_GetTick>
 8008b60:	0002      	movs	r2, r0
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	4a0b      	ldr	r2, [pc, #44]	@ (8008b94 <HAL_RCC_OscConfig+0x364>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d915      	bls.n	8008b98 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e078      	b.n	8008c62 <HAL_RCC_OscConfig+0x432>
 8008b70:	40021000 	.word	0x40021000
 8008b74:	fffeffff 	.word	0xfffeffff
 8008b78:	fffbffff 	.word	0xfffbffff
 8008b7c:	ffff80ff 	.word	0xffff80ff
 8008b80:	ffffc7ff 	.word	0xffffc7ff
 8008b84:	02dc6c00 	.word	0x02dc6c00
 8008b88:	20000024 	.word	0x20000024
 8008b8c:	20000028 	.word	0x20000028
 8008b90:	fffffeff 	.word	0xfffffeff
 8008b94:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8008b98:	4b34      	ldr	r3, [pc, #208]	@ (8008c6c <HAL_RCC_OscConfig+0x43c>)
 8008b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	d0dc      	beq.n	8008b5c <HAL_RCC_OscConfig+0x32c>
 8008ba2:	e013      	b.n	8008bcc <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ba4:	f7fc ffc2 	bl	8005b2c <HAL_GetTick>
 8008ba8:	0003      	movs	r3, r0
 8008baa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8008bac:	e009      	b.n	8008bc2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bae:	f7fc ffbd 	bl	8005b2c <HAL_GetTick>
 8008bb2:	0002      	movs	r2, r0
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8008c70 <HAL_RCC_OscConfig+0x440>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d901      	bls.n	8008bc2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e04f      	b.n	8008c62 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8008bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8008c6c <HAL_RCC_OscConfig+0x43c>)
 8008bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	4013      	ands	r3, r2
 8008bca:	d1f0      	bne.n	8008bae <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008bcc:	230f      	movs	r3, #15
 8008bce:	18fb      	adds	r3, r7, r3
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d105      	bne.n	8008be2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008bd6:	4b25      	ldr	r3, [pc, #148]	@ (8008c6c <HAL_RCC_OscConfig+0x43c>)
 8008bd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bda:	4b24      	ldr	r3, [pc, #144]	@ (8008c6c <HAL_RCC_OscConfig+0x43c>)
 8008bdc:	4925      	ldr	r1, [pc, #148]	@ (8008c74 <HAL_RCC_OscConfig+0x444>)
 8008bde:	400a      	ands	r2, r1
 8008be0:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2210      	movs	r2, #16
 8008be8:	4013      	ands	r3, r2
 8008bea:	d039      	beq.n	8008c60 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	69db      	ldr	r3, [r3, #28]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d01b      	beq.n	8008c2c <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8008c6c <HAL_RCC_OscConfig+0x43c>)
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8008c6c <HAL_RCC_OscConfig+0x43c>)
 8008bfa:	2180      	movs	r1, #128	@ 0x80
 8008bfc:	03c9      	lsls	r1, r1, #15
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c02:	f7fc ff93 	bl	8005b2c <HAL_GetTick>
 8008c06:	0003      	movs	r3, r0
 8008c08:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8008c0a:	e008      	b.n	8008c1e <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c0c:	f7fc ff8e 	bl	8005b2c <HAL_GetTick>
 8008c10:	0002      	movs	r2, r0
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d901      	bls.n	8008c1e <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e021      	b.n	8008c62 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8008c1e:	4b13      	ldr	r3, [pc, #76]	@ (8008c6c <HAL_RCC_OscConfig+0x43c>)
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	2380      	movs	r3, #128	@ 0x80
 8008c24:	041b      	lsls	r3, r3, #16
 8008c26:	4013      	ands	r3, r2
 8008c28:	d0f0      	beq.n	8008c0c <HAL_RCC_OscConfig+0x3dc>
 8008c2a:	e019      	b.n	8008c60 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8008c6c <HAL_RCC_OscConfig+0x43c>)
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	4b0e      	ldr	r3, [pc, #56]	@ (8008c6c <HAL_RCC_OscConfig+0x43c>)
 8008c32:	4911      	ldr	r1, [pc, #68]	@ (8008c78 <HAL_RCC_OscConfig+0x448>)
 8008c34:	400a      	ands	r2, r1
 8008c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c38:	f7fc ff78 	bl	8005b2c <HAL_GetTick>
 8008c3c:	0003      	movs	r3, r0
 8008c3e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8008c40:	e008      	b.n	8008c54 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c42:	f7fc ff73 	bl	8005b2c <HAL_GetTick>
 8008c46:	0002      	movs	r2, r0
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d901      	bls.n	8008c54 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e006      	b.n	8008c62 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8008c54:	4b05      	ldr	r3, [pc, #20]	@ (8008c6c <HAL_RCC_OscConfig+0x43c>)
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	2380      	movs	r3, #128	@ 0x80
 8008c5a:	041b      	lsls	r3, r3, #16
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	d1f0      	bne.n	8008c42 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	0018      	movs	r0, r3
 8008c64:	46bd      	mov	sp, r7
 8008c66:	b006      	add	sp, #24
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	46c0      	nop			@ (mov r8, r8)
 8008c6c:	40021000 	.word	0x40021000
 8008c70:	00001388 	.word	0x00001388
 8008c74:	efffffff 	.word	0xefffffff
 8008c78:	ffbfffff 	.word	0xffbfffff

08008c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e0f6      	b.n	8008e7e <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c90:	4b7d      	ldr	r3, [pc, #500]	@ (8008e88 <HAL_RCC_ClockConfig+0x20c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2207      	movs	r2, #7
 8008c96:	4013      	ands	r3, r2
 8008c98:	683a      	ldr	r2, [r7, #0]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d91e      	bls.n	8008cdc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c9e:	4b7a      	ldr	r3, [pc, #488]	@ (8008e88 <HAL_RCC_ClockConfig+0x20c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2207      	movs	r2, #7
 8008ca4:	4393      	bics	r3, r2
 8008ca6:	0019      	movs	r1, r3
 8008ca8:	4b77      	ldr	r3, [pc, #476]	@ (8008e88 <HAL_RCC_ClockConfig+0x20c>)
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	430a      	orrs	r2, r1
 8008cae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008cb0:	f7fc ff3c 	bl	8005b2c <HAL_GetTick>
 8008cb4:	0003      	movs	r3, r0
 8008cb6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008cb8:	e009      	b.n	8008cce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008cba:	f7fc ff37 	bl	8005b2c <HAL_GetTick>
 8008cbe:	0002      	movs	r2, r0
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	4a71      	ldr	r2, [pc, #452]	@ (8008e8c <HAL_RCC_ClockConfig+0x210>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d901      	bls.n	8008cce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e0d7      	b.n	8008e7e <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008cce:	4b6e      	ldr	r3, [pc, #440]	@ (8008e88 <HAL_RCC_ClockConfig+0x20c>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2207      	movs	r2, #7
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	683a      	ldr	r2, [r7, #0]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d1ee      	bne.n	8008cba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	d017      	beq.n	8008d16 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2204      	movs	r2, #4
 8008cec:	4013      	ands	r3, r2
 8008cee:	d008      	beq.n	8008d02 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008cf0:	4b67      	ldr	r3, [pc, #412]	@ (8008e90 <HAL_RCC_ClockConfig+0x214>)
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	4a67      	ldr	r2, [pc, #412]	@ (8008e94 <HAL_RCC_ClockConfig+0x218>)
 8008cf6:	401a      	ands	r2, r3
 8008cf8:	4b65      	ldr	r3, [pc, #404]	@ (8008e90 <HAL_RCC_ClockConfig+0x214>)
 8008cfa:	21b0      	movs	r1, #176	@ 0xb0
 8008cfc:	0109      	lsls	r1, r1, #4
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d02:	4b63      	ldr	r3, [pc, #396]	@ (8008e90 <HAL_RCC_ClockConfig+0x214>)
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	4a64      	ldr	r2, [pc, #400]	@ (8008e98 <HAL_RCC_ClockConfig+0x21c>)
 8008d08:	4013      	ands	r3, r2
 8008d0a:	0019      	movs	r1, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68da      	ldr	r2, [r3, #12]
 8008d10:	4b5f      	ldr	r3, [pc, #380]	@ (8008e90 <HAL_RCC_ClockConfig+0x214>)
 8008d12:	430a      	orrs	r2, r1
 8008d14:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	d100      	bne.n	8008d22 <HAL_RCC_ClockConfig+0xa6>
 8008d20:	e061      	b.n	8008de6 <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8008d22:	4b5b      	ldr	r3, [pc, #364]	@ (8008e90 <HAL_RCC_ClockConfig+0x214>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	221c      	movs	r2, #28
 8008d28:	4393      	bics	r3, r2
 8008d2a:	0019      	movs	r1, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	689a      	ldr	r2, [r3, #8]
 8008d30:	4b57      	ldr	r3, [pc, #348]	@ (8008e90 <HAL_RCC_ClockConfig+0x214>)
 8008d32:	430a      	orrs	r2, r1
 8008d34:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d107      	bne.n	8008d4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d3e:	4b54      	ldr	r3, [pc, #336]	@ (8008e90 <HAL_RCC_ClockConfig+0x214>)
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	2380      	movs	r3, #128	@ 0x80
 8008d44:	029b      	lsls	r3, r3, #10
 8008d46:	4013      	ands	r3, r2
 8008d48:	d12b      	bne.n	8008da2 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e097      	b.n	8008e7e <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d107      	bne.n	8008d66 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d56:	4b4e      	ldr	r3, [pc, #312]	@ (8008e90 <HAL_RCC_ClockConfig+0x214>)
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	2380      	movs	r3, #128	@ 0x80
 8008d5c:	00db      	lsls	r3, r3, #3
 8008d5e:	4013      	ands	r3, r2
 8008d60:	d11f      	bne.n	8008da2 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e08b      	b.n	8008e7e <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d107      	bne.n	8008d7e <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8008d6e:	4b48      	ldr	r3, [pc, #288]	@ (8008e90 <HAL_RCC_ClockConfig+0x214>)
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	2380      	movs	r3, #128	@ 0x80
 8008d74:	041b      	lsls	r3, r3, #16
 8008d76:	4013      	ands	r3, r2
 8008d78:	d113      	bne.n	8008da2 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e07f      	b.n	8008e7e <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	d106      	bne.n	8008d94 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8008d86:	4b42      	ldr	r3, [pc, #264]	@ (8008e90 <HAL_RCC_ClockConfig+0x214>)
 8008d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	d108      	bne.n	8008da2 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e074      	b.n	8008e7e <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8008d94:	4b3e      	ldr	r3, [pc, #248]	@ (8008e90 <HAL_RCC_ClockConfig+0x214>)
 8008d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d98:	2202      	movs	r2, #2
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	d101      	bne.n	8008da2 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e06d      	b.n	8008e7e <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008da2:	4b3b      	ldr	r3, [pc, #236]	@ (8008e90 <HAL_RCC_ClockConfig+0x214>)
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	2207      	movs	r2, #7
 8008da8:	4393      	bics	r3, r2
 8008daa:	0019      	movs	r1, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685a      	ldr	r2, [r3, #4]
 8008db0:	4b37      	ldr	r3, [pc, #220]	@ (8008e90 <HAL_RCC_ClockConfig+0x214>)
 8008db2:	430a      	orrs	r2, r1
 8008db4:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008db6:	f7fc feb9 	bl	8005b2c <HAL_GetTick>
 8008dba:	0003      	movs	r3, r0
 8008dbc:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dbe:	e009      	b.n	8008dd4 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008dc0:	f7fc feb4 	bl	8005b2c <HAL_GetTick>
 8008dc4:	0002      	movs	r2, r0
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	4a30      	ldr	r2, [pc, #192]	@ (8008e8c <HAL_RCC_ClockConfig+0x210>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d901      	bls.n	8008dd4 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e054      	b.n	8008e7e <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8008e90 <HAL_RCC_ClockConfig+0x214>)
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	2238      	movs	r2, #56	@ 0x38
 8008dda:	401a      	ands	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	00db      	lsls	r3, r3, #3
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d1ec      	bne.n	8008dc0 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008de6:	4b28      	ldr	r3, [pc, #160]	@ (8008e88 <HAL_RCC_ClockConfig+0x20c>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2207      	movs	r2, #7
 8008dec:	4013      	ands	r3, r2
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d21e      	bcs.n	8008e32 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008df4:	4b24      	ldr	r3, [pc, #144]	@ (8008e88 <HAL_RCC_ClockConfig+0x20c>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2207      	movs	r2, #7
 8008dfa:	4393      	bics	r3, r2
 8008dfc:	0019      	movs	r1, r3
 8008dfe:	4b22      	ldr	r3, [pc, #136]	@ (8008e88 <HAL_RCC_ClockConfig+0x20c>)
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	430a      	orrs	r2, r1
 8008e04:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008e06:	f7fc fe91 	bl	8005b2c <HAL_GetTick>
 8008e0a:	0003      	movs	r3, r0
 8008e0c:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008e0e:	e009      	b.n	8008e24 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008e10:	f7fc fe8c 	bl	8005b2c <HAL_GetTick>
 8008e14:	0002      	movs	r2, r0
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8008e8c <HAL_RCC_ClockConfig+0x210>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d901      	bls.n	8008e24 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e02c      	b.n	8008e7e <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008e24:	4b18      	ldr	r3, [pc, #96]	@ (8008e88 <HAL_RCC_ClockConfig+0x20c>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2207      	movs	r2, #7
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	683a      	ldr	r2, [r7, #0]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d1ee      	bne.n	8008e10 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2204      	movs	r2, #4
 8008e38:	4013      	ands	r3, r2
 8008e3a:	d009      	beq.n	8008e50 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008e3c:	4b14      	ldr	r3, [pc, #80]	@ (8008e90 <HAL_RCC_ClockConfig+0x214>)
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	4a16      	ldr	r2, [pc, #88]	@ (8008e9c <HAL_RCC_ClockConfig+0x220>)
 8008e42:	4013      	ands	r3, r2
 8008e44:	0019      	movs	r1, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	691a      	ldr	r2, [r3, #16]
 8008e4a:	4b11      	ldr	r3, [pc, #68]	@ (8008e90 <HAL_RCC_ClockConfig+0x214>)
 8008e4c:	430a      	orrs	r2, r1
 8008e4e:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008e50:	f000 f82c 	bl	8008eac <HAL_RCC_GetSysClockFreq>
 8008e54:	0001      	movs	r1, r0
 8008e56:	4b0e      	ldr	r3, [pc, #56]	@ (8008e90 <HAL_RCC_ClockConfig+0x214>)
 8008e58:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008e5a:	0a1b      	lsrs	r3, r3, #8
 8008e5c:	220f      	movs	r2, #15
 8008e5e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008e60:	4b0f      	ldr	r3, [pc, #60]	@ (8008ea0 <HAL_RCC_ClockConfig+0x224>)
 8008e62:	0092      	lsls	r2, r2, #2
 8008e64:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008e66:	221f      	movs	r2, #31
 8008e68:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008e6a:	000a      	movs	r2, r1
 8008e6c:	40da      	lsrs	r2, r3
 8008e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ea4 <HAL_RCC_ClockConfig+0x228>)
 8008e70:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008e72:	4b0d      	ldr	r3, [pc, #52]	@ (8008ea8 <HAL_RCC_ClockConfig+0x22c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	0018      	movs	r0, r3
 8008e78:	f7fc fdfc 	bl	8005a74 <HAL_InitTick>
 8008e7c:	0003      	movs	r3, r0
}
 8008e7e:	0018      	movs	r0, r3
 8008e80:	46bd      	mov	sp, r7
 8008e82:	b004      	add	sp, #16
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	46c0      	nop			@ (mov r8, r8)
 8008e88:	40022000 	.word	0x40022000
 8008e8c:	00001388 	.word	0x00001388
 8008e90:	40021000 	.word	0x40021000
 8008e94:	ffff84ff 	.word	0xffff84ff
 8008e98:	fffff0ff 	.word	0xfffff0ff
 8008e9c:	ffff8fff 	.word	0xffff8fff
 8008ea0:	0800afa4 	.word	0x0800afa4
 8008ea4:	20000024 	.word	0x20000024
 8008ea8:	20000028 	.word	0x20000028

08008eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8008eb2:	4b27      	ldr	r3, [pc, #156]	@ (8008f50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	089b      	lsrs	r3, r3, #2
 8008eb8:	2207      	movs	r2, #7
 8008eba:	4013      	ands	r3, r2
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008ec0:	4b23      	ldr	r3, [pc, #140]	@ (8008f50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	2238      	movs	r2, #56	@ 0x38
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	d10f      	bne.n	8008eea <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008eca:	4b21      	ldr	r3, [pc, #132]	@ (8008f50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	0adb      	lsrs	r3, r3, #11
 8008ed0:	2207      	movs	r2, #7
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	409a      	lsls	r2, r3
 8008ed8:	0013      	movs	r3, r2
 8008eda:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008edc:	6879      	ldr	r1, [r7, #4]
 8008ede:	481d      	ldr	r0, [pc, #116]	@ (8008f54 <HAL_RCC_GetSysClockFreq+0xa8>)
 8008ee0:	f7f7 f912 	bl	8000108 <__udivsi3>
 8008ee4:	0003      	movs	r3, r0
 8008ee6:	60fb      	str	r3, [r7, #12]
 8008ee8:	e027      	b.n	8008f3a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008eea:	4b19      	ldr	r3, [pc, #100]	@ (8008f50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	2238      	movs	r2, #56	@ 0x38
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	2b08      	cmp	r3, #8
 8008ef4:	d102      	bne.n	8008efc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008ef6:	4b18      	ldr	r3, [pc, #96]	@ (8008f58 <HAL_RCC_GetSysClockFreq+0xac>)
 8008ef8:	60fb      	str	r3, [r7, #12]
 8008efa:	e01e      	b.n	8008f3a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8008efc:	4b14      	ldr	r3, [pc, #80]	@ (8008f50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	2238      	movs	r2, #56	@ 0x38
 8008f02:	4013      	ands	r3, r2
 8008f04:	2b20      	cmp	r3, #32
 8008f06:	d103      	bne.n	8008f10 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008f08:	2380      	movs	r3, #128	@ 0x80
 8008f0a:	021b      	lsls	r3, r3, #8
 8008f0c:	60fb      	str	r3, [r7, #12]
 8008f0e:	e014      	b.n	8008f3a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8008f10:	4b0f      	ldr	r3, [pc, #60]	@ (8008f50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	2238      	movs	r2, #56	@ 0x38
 8008f16:	4013      	ands	r3, r2
 8008f18:	2b18      	cmp	r3, #24
 8008f1a:	d103      	bne.n	8008f24 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008f1c:	23fa      	movs	r3, #250	@ 0xfa
 8008f1e:	01db      	lsls	r3, r3, #7
 8008f20:	60fb      	str	r3, [r7, #12]
 8008f22:	e00a      	b.n	8008f3a <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8008f24:	4b0a      	ldr	r3, [pc, #40]	@ (8008f50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	2238      	movs	r2, #56	@ 0x38
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	2b10      	cmp	r3, #16
 8008f2e:	d102      	bne.n	8008f36 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8008f30:	4b08      	ldr	r3, [pc, #32]	@ (8008f54 <HAL_RCC_GetSysClockFreq+0xa8>)
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	e001      	b.n	8008f3a <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8008f3a:	68b9      	ldr	r1, [r7, #8]
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f7f7 f8e3 	bl	8000108 <__udivsi3>
 8008f42:	0003      	movs	r3, r0
 8008f44:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8008f46:	68fb      	ldr	r3, [r7, #12]
}
 8008f48:	0018      	movs	r0, r3
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	b004      	add	sp, #16
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	40021000 	.word	0x40021000
 8008f54:	02dc6c00 	.word	0x02dc6c00
 8008f58:	007a1200 	.word	0x007a1200

08008f5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008f60:	f7ff ffa4 	bl	8008eac <HAL_RCC_GetSysClockFreq>
 8008f64:	0001      	movs	r1, r0
 8008f66:	4b09      	ldr	r3, [pc, #36]	@ (8008f8c <HAL_RCC_GetHCLKFreq+0x30>)
 8008f68:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008f6a:	0a1b      	lsrs	r3, r3, #8
 8008f6c:	220f      	movs	r2, #15
 8008f6e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008f70:	4b07      	ldr	r3, [pc, #28]	@ (8008f90 <HAL_RCC_GetHCLKFreq+0x34>)
 8008f72:	0092      	lsls	r2, r2, #2
 8008f74:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008f76:	221f      	movs	r2, #31
 8008f78:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008f7a:	000a      	movs	r2, r1
 8008f7c:	40da      	lsrs	r2, r3
 8008f7e:	4b05      	ldr	r3, [pc, #20]	@ (8008f94 <HAL_RCC_GetHCLKFreq+0x38>)
 8008f80:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8008f82:	4b04      	ldr	r3, [pc, #16]	@ (8008f94 <HAL_RCC_GetHCLKFreq+0x38>)
 8008f84:	681b      	ldr	r3, [r3, #0]
}
 8008f86:	0018      	movs	r0, r3
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	40021000 	.word	0x40021000
 8008f90:	0800afa4 	.word	0x0800afa4
 8008f94:	20000024 	.word	0x20000024

08008f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8008f9c:	f7ff ffde 	bl	8008f5c <HAL_RCC_GetHCLKFreq>
 8008fa0:	0001      	movs	r1, r0
 8008fa2:	4b07      	ldr	r3, [pc, #28]	@ (8008fc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	0b1b      	lsrs	r3, r3, #12
 8008fa8:	2207      	movs	r2, #7
 8008faa:	401a      	ands	r2, r3
 8008fac:	4b05      	ldr	r3, [pc, #20]	@ (8008fc4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8008fae:	0092      	lsls	r2, r2, #2
 8008fb0:	58d3      	ldr	r3, [r2, r3]
 8008fb2:	221f      	movs	r2, #31
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	40d9      	lsrs	r1, r3
 8008fb8:	000b      	movs	r3, r1
}
 8008fba:	0018      	movs	r0, r3
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	40021000 	.word	0x40021000
 8008fc4:	0800afe4 	.word	0x0800afe4

08008fc8 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008fd0:	2313      	movs	r3, #19
 8008fd2:	18fb      	adds	r3, r7, r3
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008fd8:	2312      	movs	r3, #18
 8008fda:	18fb      	adds	r3, r7, r3
 8008fdc:	2200      	movs	r2, #0
 8008fde:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2240      	movs	r2, #64	@ 0x40
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	d100      	bne.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x24>
 8008fea:	e079      	b.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008fec:	2011      	movs	r0, #17
 8008fee:	183b      	adds	r3, r7, r0
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ff4:	4b6a      	ldr	r3, [pc, #424]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008ff6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ff8:	2380      	movs	r3, #128	@ 0x80
 8008ffa:	055b      	lsls	r3, r3, #21
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	d110      	bne.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009000:	4b67      	ldr	r3, [pc, #412]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009002:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009004:	4b66      	ldr	r3, [pc, #408]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009006:	2180      	movs	r1, #128	@ 0x80
 8009008:	0549      	lsls	r1, r1, #21
 800900a:	430a      	orrs	r2, r1
 800900c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800900e:	4b64      	ldr	r3, [pc, #400]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009010:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009012:	2380      	movs	r3, #128	@ 0x80
 8009014:	055b      	lsls	r3, r3, #21
 8009016:	4013      	ands	r3, r2
 8009018:	60bb      	str	r3, [r7, #8]
 800901a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800901c:	183b      	adds	r3, r7, r0
 800901e:	2201      	movs	r2, #1
 8009020:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8009022:	4b5f      	ldr	r3, [pc, #380]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009024:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009026:	23c0      	movs	r3, #192	@ 0xc0
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	4013      	ands	r3, r2
 800902c:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d019      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	69db      	ldr	r3, [r3, #28]
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	429a      	cmp	r2, r3
 800903c:	d014      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800903e:	4b58      	ldr	r3, [pc, #352]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009042:	4a58      	ldr	r2, [pc, #352]	@ (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009044:	4013      	ands	r3, r2
 8009046:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009048:	4b55      	ldr	r3, [pc, #340]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800904a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800904c:	4b54      	ldr	r3, [pc, #336]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800904e:	2180      	movs	r1, #128	@ 0x80
 8009050:	0249      	lsls	r1, r1, #9
 8009052:	430a      	orrs	r2, r1
 8009054:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009056:	4b52      	ldr	r3, [pc, #328]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009058:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800905a:	4b51      	ldr	r3, [pc, #324]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800905c:	4952      	ldr	r1, [pc, #328]	@ (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800905e:	400a      	ands	r2, r1
 8009060:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8009062:	4b4f      	ldr	r3, [pc, #316]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	2201      	movs	r2, #1
 800906c:	4013      	ands	r3, r2
 800906e:	d016      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009070:	f7fc fd5c 	bl	8005b2c <HAL_GetTick>
 8009074:	0003      	movs	r3, r0
 8009076:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8009078:	e00c      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800907a:	f7fc fd57 	bl	8005b2c <HAL_GetTick>
 800907e:	0002      	movs	r2, r0
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	4a49      	ldr	r2, [pc, #292]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d904      	bls.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800908a:	2313      	movs	r3, #19
 800908c:	18fb      	adds	r3, r7, r3
 800908e:	2203      	movs	r2, #3
 8009090:	701a      	strb	r2, [r3, #0]
          break;
 8009092:	e004      	b.n	800909e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8009094:	4b42      	ldr	r3, [pc, #264]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009098:	2202      	movs	r2, #2
 800909a:	4013      	ands	r3, r2
 800909c:	d0ed      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800909e:	2313      	movs	r3, #19
 80090a0:	18fb      	adds	r3, r7, r3
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10a      	bne.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090a8:	4b3d      	ldr	r3, [pc, #244]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80090aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090ac:	4a3d      	ldr	r2, [pc, #244]	@ (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80090ae:	4013      	ands	r3, r2
 80090b0:	0019      	movs	r1, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	69da      	ldr	r2, [r3, #28]
 80090b6:	4b3a      	ldr	r3, [pc, #232]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80090b8:	430a      	orrs	r2, r1
 80090ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80090bc:	e005      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090be:	2312      	movs	r3, #18
 80090c0:	18fb      	adds	r3, r7, r3
 80090c2:	2213      	movs	r2, #19
 80090c4:	18ba      	adds	r2, r7, r2
 80090c6:	7812      	ldrb	r2, [r2, #0]
 80090c8:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80090ca:	2311      	movs	r3, #17
 80090cc:	18fb      	adds	r3, r7, r3
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d105      	bne.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090d4:	4b32      	ldr	r3, [pc, #200]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80090d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090d8:	4b31      	ldr	r3, [pc, #196]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80090da:	4935      	ldr	r1, [pc, #212]	@ (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80090dc:	400a      	ands	r2, r1
 80090de:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2201      	movs	r2, #1
 80090e6:	4013      	ands	r3, r2
 80090e8:	d009      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80090ea:	4b2d      	ldr	r3, [pc, #180]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80090ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ee:	2203      	movs	r2, #3
 80090f0:	4393      	bics	r3, r2
 80090f2:	0019      	movs	r1, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	4b29      	ldr	r3, [pc, #164]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80090fa:	430a      	orrs	r2, r1
 80090fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2202      	movs	r2, #2
 8009104:	4013      	ands	r3, r2
 8009106:	d009      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009108:	4b25      	ldr	r3, [pc, #148]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800910a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800910c:	4a29      	ldr	r2, [pc, #164]	@ (80091b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800910e:	4013      	ands	r3, r2
 8009110:	0019      	movs	r1, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	68da      	ldr	r2, [r3, #12]
 8009116:	4b22      	ldr	r3, [pc, #136]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009118:	430a      	orrs	r2, r1
 800911a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2220      	movs	r2, #32
 8009122:	4013      	ands	r3, r2
 8009124:	d008      	beq.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009126:	4b1e      	ldr	r3, [pc, #120]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	0899      	lsrs	r1, r3, #2
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	699a      	ldr	r2, [r3, #24]
 8009132:	4b1b      	ldr	r3, [pc, #108]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009134:	430a      	orrs	r2, r1
 8009136:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2208      	movs	r2, #8
 800913e:	4013      	ands	r3, r2
 8009140:	d009      	beq.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009142:	4b17      	ldr	r3, [pc, #92]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009146:	4a1c      	ldr	r2, [pc, #112]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8009148:	4013      	ands	r3, r2
 800914a:	0019      	movs	r1, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	695a      	ldr	r2, [r3, #20]
 8009150:	4b13      	ldr	r3, [pc, #76]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009152:	430a      	orrs	r2, r1
 8009154:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2204      	movs	r2, #4
 800915c:	4013      	ands	r3, r2
 800915e:	d009      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8009160:	4b0f      	ldr	r3, [pc, #60]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009164:	4a15      	ldr	r2, [pc, #84]	@ (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8009166:	4013      	ands	r3, r2
 8009168:	0019      	movs	r1, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	691a      	ldr	r2, [r3, #16]
 800916e:	4b0c      	ldr	r3, [pc, #48]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009170:	430a      	orrs	r2, r1
 8009172:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2280      	movs	r2, #128	@ 0x80
 800917a:	4013      	ands	r3, r2
 800917c:	d009      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800917e:	4b08      	ldr	r3, [pc, #32]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	22e0      	movs	r2, #224	@ 0xe0
 8009184:	4393      	bics	r3, r2
 8009186:	0019      	movs	r1, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	4b04      	ldr	r3, [pc, #16]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800918e:	430a      	orrs	r2, r1
 8009190:	601a      	str	r2, [r3, #0]
  }
  return status;
 8009192:	2312      	movs	r3, #18
 8009194:	18fb      	adds	r3, r7, r3
 8009196:	781b      	ldrb	r3, [r3, #0]
}
 8009198:	0018      	movs	r0, r3
 800919a:	46bd      	mov	sp, r7
 800919c:	b006      	add	sp, #24
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	40021000 	.word	0x40021000
 80091a4:	fffffcff 	.word	0xfffffcff
 80091a8:	fffeffff 	.word	0xfffeffff
 80091ac:	00001388 	.word	0x00001388
 80091b0:	efffffff 	.word	0xefffffff
 80091b4:	ffffcfff 	.word	0xffffcfff
 80091b8:	ffffefff 	.word	0xffffefff
 80091bc:	ffff3fff 	.word	0xffff3fff

080091c0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e032      	b.n	8009238 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2288      	movs	r2, #136	@ 0x88
 80091d6:	2124      	movs	r1, #36	@ 0x24
 80091d8:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2101      	movs	r1, #1
 80091e6:	438a      	bics	r2, r1
 80091e8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2200      	movs	r2, #0
 80091f0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2200      	movs	r2, #0
 80091f8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2200      	movs	r2, #0
 8009200:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	0018      	movs	r0, r3
 8009206:	f7f9 fdf3 	bl	8002df0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2290      	movs	r2, #144	@ 0x90
 800920e:	2100      	movs	r1, #0
 8009210:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2288      	movs	r2, #136	@ 0x88
 8009216:	2100      	movs	r1, #0
 8009218:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	228c      	movs	r2, #140	@ 0x8c
 800921e:	2100      	movs	r1, #0
 8009220:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2284      	movs	r2, #132	@ 0x84
 8009232:	2100      	movs	r1, #0
 8009234:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	0018      	movs	r0, r3
 800923a:	46bd      	mov	sp, r7
 800923c:	b002      	add	sp, #8
 800923e:	bd80      	pop	{r7, pc}

08009240 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b088      	sub	sp, #32
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	1dbb      	adds	r3, r7, #6
 800924c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2288      	movs	r2, #136	@ 0x88
 8009252:	589b      	ldr	r3, [r3, r2]
 8009254:	2b20      	cmp	r3, #32
 8009256:	d000      	beq.n	800925a <HAL_UART_Transmit_DMA+0x1a>
 8009258:	e079      	b.n	800934e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d003      	beq.n	8009268 <HAL_UART_Transmit_DMA+0x28>
 8009260:	1dbb      	adds	r3, r7, #6
 8009262:	881b      	ldrh	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e071      	b.n	8009350 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	689a      	ldr	r2, [r3, #8]
 8009270:	2380      	movs	r3, #128	@ 0x80
 8009272:	015b      	lsls	r3, r3, #5
 8009274:	429a      	cmp	r2, r3
 8009276:	d109      	bne.n	800928c <HAL_UART_Transmit_DMA+0x4c>
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d105      	bne.n	800928c <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	2201      	movs	r2, #1
 8009284:	4013      	ands	r3, r2
 8009286:	d001      	beq.n	800928c <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	e061      	b.n	8009350 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	1dba      	adds	r2, r7, #6
 8009296:	2154      	movs	r1, #84	@ 0x54
 8009298:	8812      	ldrh	r2, [r2, #0]
 800929a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	1dba      	adds	r2, r7, #6
 80092a0:	2156      	movs	r1, #86	@ 0x56
 80092a2:	8812      	ldrh	r2, [r2, #0]
 80092a4:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2290      	movs	r2, #144	@ 0x90
 80092aa:	2100      	movs	r1, #0
 80092ac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2288      	movs	r2, #136	@ 0x88
 80092b2:	2121      	movs	r1, #33	@ 0x21
 80092b4:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d028      	beq.n	8009310 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092c2:	4a25      	ldr	r2, [pc, #148]	@ (8009358 <HAL_UART_Transmit_DMA+0x118>)
 80092c4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092ca:	4a24      	ldr	r2, [pc, #144]	@ (800935c <HAL_UART_Transmit_DMA+0x11c>)
 80092cc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092d2:	4a23      	ldr	r2, [pc, #140]	@ (8009360 <HAL_UART_Transmit_DMA+0x120>)
 80092d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092da:	2200      	movs	r2, #0
 80092dc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092e6:	0019      	movs	r1, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	3328      	adds	r3, #40	@ 0x28
 80092ee:	001a      	movs	r2, r3
 80092f0:	1dbb      	adds	r3, r7, #6
 80092f2:	881b      	ldrh	r3, [r3, #0]
 80092f4:	f7fd fe9c 	bl	8007030 <HAL_DMA_Start_IT>
 80092f8:	1e03      	subs	r3, r0, #0
 80092fa:	d009      	beq.n	8009310 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2290      	movs	r2, #144	@ 0x90
 8009300:	2110      	movs	r1, #16
 8009302:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2288      	movs	r2, #136	@ 0x88
 8009308:	2120      	movs	r1, #32
 800930a:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e01f      	b.n	8009350 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2240      	movs	r2, #64	@ 0x40
 8009316:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009318:	f3ef 8310 	mrs	r3, PRIMASK
 800931c:	613b      	str	r3, [r7, #16]
  return(result);
 800931e:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009320:	61fb      	str	r3, [r7, #28]
 8009322:	2301      	movs	r3, #1
 8009324:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f383 8810 	msr	PRIMASK, r3
}
 800932c:	46c0      	nop			@ (mov r8, r8)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	689a      	ldr	r2, [r3, #8]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2180      	movs	r1, #128	@ 0x80
 800933a:	430a      	orrs	r2, r1
 800933c:	609a      	str	r2, [r3, #8]
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	f383 8810 	msr	PRIMASK, r3
}
 8009348:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800934a:	2300      	movs	r3, #0
 800934c:	e000      	b.n	8009350 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800934e:	2302      	movs	r3, #2
  }
}
 8009350:	0018      	movs	r0, r3
 8009352:	46bd      	mov	sp, r7
 8009354:	b008      	add	sp, #32
 8009356:	bd80      	pop	{r7, pc}
 8009358:	0800a569 	.word	0x0800a569
 800935c:	0800a601 	.word	0x0800a601
 8009360:	0800a793 	.word	0x0800a793

08009364 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b096      	sub	sp, #88	@ 0x58
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800936c:	f3ef 8310 	mrs	r3, PRIMASK
 8009370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8009372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009374:	657b      	str	r3, [r7, #84]	@ 0x54
 8009376:	2301      	movs	r3, #1
 8009378:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800937a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937c:	f383 8810 	msr	PRIMASK, r3
}
 8009380:	46c0      	nop			@ (mov r8, r8)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4979      	ldr	r1, [pc, #484]	@ (8009574 <HAL_UART_Abort+0x210>)
 800938e:	400a      	ands	r2, r1
 8009390:	601a      	str	r2, [r3, #0]
 8009392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009394:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009398:	f383 8810 	msr	PRIMASK, r3
}
 800939c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800939e:	f3ef 8310 	mrs	r3, PRIMASK
 80093a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80093a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 80093a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80093a8:	2301      	movs	r3, #1
 80093aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ae:	f383 8810 	msr	PRIMASK, r3
}
 80093b2:	46c0      	nop			@ (mov r8, r8)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	689a      	ldr	r2, [r3, #8]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	496e      	ldr	r1, [pc, #440]	@ (8009578 <HAL_UART_Abort+0x214>)
 80093c0:	400a      	ands	r2, r1
 80093c2:	609a      	str	r2, [r3, #8]
 80093c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093c6:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093ca:	f383 8810 	msr	PRIMASK, r3
}
 80093ce:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d118      	bne.n	800940a <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80093d8:	f3ef 8310 	mrs	r3, PRIMASK
 80093dc:	623b      	str	r3, [r7, #32]
  return(result);
 80093de:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80093e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093e2:	2301      	movs	r3, #1
 80093e4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e8:	f383 8810 	msr	PRIMASK, r3
}
 80093ec:	46c0      	nop			@ (mov r8, r8)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2110      	movs	r1, #16
 80093fa:	438a      	bics	r2, r1
 80093fc:	601a      	str	r2, [r3, #0]
 80093fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009400:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009404:	f383 8810 	msr	PRIMASK, r3
}
 8009408:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	2280      	movs	r2, #128	@ 0x80
 8009412:	4013      	ands	r3, r2
 8009414:	2b80      	cmp	r3, #128	@ 0x80
 8009416:	d135      	bne.n	8009484 <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009418:	f3ef 8310 	mrs	r3, PRIMASK
 800941c:	617b      	str	r3, [r7, #20]
  return(result);
 800941e:	697b      	ldr	r3, [r7, #20]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009420:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009422:	2301      	movs	r3, #1
 8009424:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	f383 8810 	msr	PRIMASK, r3
}
 800942c:	46c0      	nop			@ (mov r8, r8)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	689a      	ldr	r2, [r3, #8]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2180      	movs	r1, #128	@ 0x80
 800943a:	438a      	bics	r2, r1
 800943c:	609a      	str	r2, [r3, #8]
 800943e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009440:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	f383 8810 	msr	PRIMASK, r3
}
 8009448:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800944e:	2b00      	cmp	r3, #0
 8009450:	d018      	beq.n	8009484 <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009456:	2200      	movs	r2, #0
 8009458:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800945e:	0018      	movs	r0, r3
 8009460:	f7fd fe6e 	bl	8007140 <HAL_DMA_Abort>
 8009464:	1e03      	subs	r3, r0, #0
 8009466:	d00d      	beq.n	8009484 <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800946c:	0018      	movs	r0, r3
 800946e:	f7fd fff5 	bl	800745c <HAL_DMA_GetError>
 8009472:	0003      	movs	r3, r0
 8009474:	2b20      	cmp	r3, #32
 8009476:	d105      	bne.n	8009484 <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2290      	movs	r2, #144	@ 0x90
 800947c:	2110      	movs	r1, #16
 800947e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	e072      	b.n	800956a <HAL_UART_Abort+0x206>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	2240      	movs	r2, #64	@ 0x40
 800948c:	4013      	ands	r3, r2
 800948e:	2b40      	cmp	r3, #64	@ 0x40
 8009490:	d139      	bne.n	8009506 <HAL_UART_Abort+0x1a2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009492:	f3ef 8310 	mrs	r3, PRIMASK
 8009496:	60bb      	str	r3, [r7, #8]
  return(result);
 8009498:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800949a:	647b      	str	r3, [r7, #68]	@ 0x44
 800949c:	2301      	movs	r3, #1
 800949e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f383 8810 	msr	PRIMASK, r3
}
 80094a6:	46c0      	nop			@ (mov r8, r8)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	689a      	ldr	r2, [r3, #8]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2140      	movs	r1, #64	@ 0x40
 80094b4:	438a      	bics	r2, r1
 80094b6:	609a      	str	r2, [r3, #8]
 80094b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	f383 8810 	msr	PRIMASK, r3
}
 80094c2:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2280      	movs	r2, #128	@ 0x80
 80094c8:	589b      	ldr	r3, [r3, r2]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d01b      	beq.n	8009506 <HAL_UART_Abort+0x1a2>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2280      	movs	r2, #128	@ 0x80
 80094d2:	589b      	ldr	r3, [r3, r2]
 80094d4:	2200      	movs	r2, #0
 80094d6:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2280      	movs	r2, #128	@ 0x80
 80094dc:	589b      	ldr	r3, [r3, r2]
 80094de:	0018      	movs	r0, r3
 80094e0:	f7fd fe2e 	bl	8007140 <HAL_DMA_Abort>
 80094e4:	1e03      	subs	r3, r0, #0
 80094e6:	d00e      	beq.n	8009506 <HAL_UART_Abort+0x1a2>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2280      	movs	r2, #128	@ 0x80
 80094ec:	589b      	ldr	r3, [r3, r2]
 80094ee:	0018      	movs	r0, r3
 80094f0:	f7fd ffb4 	bl	800745c <HAL_DMA_GetError>
 80094f4:	0003      	movs	r3, r0
 80094f6:	2b20      	cmp	r3, #32
 80094f8:	d105      	bne.n	8009506 <HAL_UART_Abort+0x1a2>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2290      	movs	r2, #144	@ 0x90
 80094fe:	2110      	movs	r1, #16
 8009500:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e031      	b.n	800956a <HAL_UART_Abort+0x206>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2256      	movs	r2, #86	@ 0x56
 800950a:	2100      	movs	r1, #0
 800950c:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	225e      	movs	r2, #94	@ 0x5e
 8009512:	2100      	movs	r1, #0
 8009514:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	220f      	movs	r2, #15
 800951c:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009522:	2380      	movs	r3, #128	@ 0x80
 8009524:	059b      	lsls	r3, r3, #22
 8009526:	429a      	cmp	r2, r3
 8009528:	d107      	bne.n	800953a <HAL_UART_Abort+0x1d6>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	699a      	ldr	r2, [r3, #24]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2110      	movs	r1, #16
 8009536:	430a      	orrs	r2, r1
 8009538:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	699a      	ldr	r2, [r3, #24]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2108      	movs	r1, #8
 8009546:	430a      	orrs	r2, r1
 8009548:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2288      	movs	r2, #136	@ 0x88
 800954e:	2120      	movs	r1, #32
 8009550:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	228c      	movs	r2, #140	@ 0x8c
 8009556:	2120      	movs	r1, #32
 8009558:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2290      	movs	r2, #144	@ 0x90
 8009564:	2100      	movs	r1, #0
 8009566:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	0018      	movs	r0, r3
 800956c:	46bd      	mov	sp, r7
 800956e:	b016      	add	sp, #88	@ 0x58
 8009570:	bd80      	pop	{r7, pc}
 8009572:	46c0      	nop			@ (mov r8, r8)
 8009574:	fffffe1f 	.word	0xfffffe1f
 8009578:	ef7ffffe 	.word	0xef7ffffe

0800957c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800957c:	b5b0      	push	{r4, r5, r7, lr}
 800957e:	b0aa      	sub	sp, #168	@ 0xa8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	22a4      	movs	r2, #164	@ 0xa4
 800958c:	18b9      	adds	r1, r7, r2
 800958e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	20a0      	movs	r0, #160	@ 0xa0
 8009598:	1839      	adds	r1, r7, r0
 800959a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	249c      	movs	r4, #156	@ 0x9c
 80095a4:	1939      	adds	r1, r7, r4
 80095a6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80095a8:	0011      	movs	r1, r2
 80095aa:	18bb      	adds	r3, r7, r2
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4aa2      	ldr	r2, [pc, #648]	@ (8009838 <HAL_UART_IRQHandler+0x2bc>)
 80095b0:	4013      	ands	r3, r2
 80095b2:	2298      	movs	r2, #152	@ 0x98
 80095b4:	18bd      	adds	r5, r7, r2
 80095b6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80095b8:	18bb      	adds	r3, r7, r2
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d11a      	bne.n	80095f6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80095c0:	187b      	adds	r3, r7, r1
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2220      	movs	r2, #32
 80095c6:	4013      	ands	r3, r2
 80095c8:	d015      	beq.n	80095f6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80095ca:	183b      	adds	r3, r7, r0
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2220      	movs	r2, #32
 80095d0:	4013      	ands	r3, r2
 80095d2:	d105      	bne.n	80095e0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80095d4:	193b      	adds	r3, r7, r4
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	2380      	movs	r3, #128	@ 0x80
 80095da:	055b      	lsls	r3, r3, #21
 80095dc:	4013      	ands	r3, r2
 80095de:	d00a      	beq.n	80095f6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d100      	bne.n	80095ea <HAL_UART_IRQHandler+0x6e>
 80095e8:	e2fb      	b.n	8009be2 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	0010      	movs	r0, r2
 80095f2:	4798      	blx	r3
      }
      return;
 80095f4:	e2f5      	b.n	8009be2 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80095f6:	2398      	movs	r3, #152	@ 0x98
 80095f8:	18fb      	adds	r3, r7, r3
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d100      	bne.n	8009602 <HAL_UART_IRQHandler+0x86>
 8009600:	e122      	b.n	8009848 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009602:	239c      	movs	r3, #156	@ 0x9c
 8009604:	18fb      	adds	r3, r7, r3
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a8c      	ldr	r2, [pc, #560]	@ (800983c <HAL_UART_IRQHandler+0x2c0>)
 800960a:	4013      	ands	r3, r2
 800960c:	d106      	bne.n	800961c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800960e:	23a0      	movs	r3, #160	@ 0xa0
 8009610:	18fb      	adds	r3, r7, r3
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a8a      	ldr	r2, [pc, #552]	@ (8009840 <HAL_UART_IRQHandler+0x2c4>)
 8009616:	4013      	ands	r3, r2
 8009618:	d100      	bne.n	800961c <HAL_UART_IRQHandler+0xa0>
 800961a:	e115      	b.n	8009848 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800961c:	23a4      	movs	r3, #164	@ 0xa4
 800961e:	18fb      	adds	r3, r7, r3
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2201      	movs	r2, #1
 8009624:	4013      	ands	r3, r2
 8009626:	d012      	beq.n	800964e <HAL_UART_IRQHandler+0xd2>
 8009628:	23a0      	movs	r3, #160	@ 0xa0
 800962a:	18fb      	adds	r3, r7, r3
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	2380      	movs	r3, #128	@ 0x80
 8009630:	005b      	lsls	r3, r3, #1
 8009632:	4013      	ands	r3, r2
 8009634:	d00b      	beq.n	800964e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2201      	movs	r2, #1
 800963c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2290      	movs	r2, #144	@ 0x90
 8009642:	589b      	ldr	r3, [r3, r2]
 8009644:	2201      	movs	r2, #1
 8009646:	431a      	orrs	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2190      	movs	r1, #144	@ 0x90
 800964c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800964e:	23a4      	movs	r3, #164	@ 0xa4
 8009650:	18fb      	adds	r3, r7, r3
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2202      	movs	r2, #2
 8009656:	4013      	ands	r3, r2
 8009658:	d011      	beq.n	800967e <HAL_UART_IRQHandler+0x102>
 800965a:	239c      	movs	r3, #156	@ 0x9c
 800965c:	18fb      	adds	r3, r7, r3
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2201      	movs	r2, #1
 8009662:	4013      	ands	r3, r2
 8009664:	d00b      	beq.n	800967e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2202      	movs	r2, #2
 800966c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2290      	movs	r2, #144	@ 0x90
 8009672:	589b      	ldr	r3, [r3, r2]
 8009674:	2204      	movs	r2, #4
 8009676:	431a      	orrs	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2190      	movs	r1, #144	@ 0x90
 800967c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800967e:	23a4      	movs	r3, #164	@ 0xa4
 8009680:	18fb      	adds	r3, r7, r3
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2204      	movs	r2, #4
 8009686:	4013      	ands	r3, r2
 8009688:	d011      	beq.n	80096ae <HAL_UART_IRQHandler+0x132>
 800968a:	239c      	movs	r3, #156	@ 0x9c
 800968c:	18fb      	adds	r3, r7, r3
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2201      	movs	r2, #1
 8009692:	4013      	ands	r3, r2
 8009694:	d00b      	beq.n	80096ae <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2204      	movs	r2, #4
 800969c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2290      	movs	r2, #144	@ 0x90
 80096a2:	589b      	ldr	r3, [r3, r2]
 80096a4:	2202      	movs	r2, #2
 80096a6:	431a      	orrs	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2190      	movs	r1, #144	@ 0x90
 80096ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80096ae:	23a4      	movs	r3, #164	@ 0xa4
 80096b0:	18fb      	adds	r3, r7, r3
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2208      	movs	r2, #8
 80096b6:	4013      	ands	r3, r2
 80096b8:	d017      	beq.n	80096ea <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80096ba:	23a0      	movs	r3, #160	@ 0xa0
 80096bc:	18fb      	adds	r3, r7, r3
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2220      	movs	r2, #32
 80096c2:	4013      	ands	r3, r2
 80096c4:	d105      	bne.n	80096d2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80096c6:	239c      	movs	r3, #156	@ 0x9c
 80096c8:	18fb      	adds	r3, r7, r3
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a5b      	ldr	r2, [pc, #364]	@ (800983c <HAL_UART_IRQHandler+0x2c0>)
 80096ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80096d0:	d00b      	beq.n	80096ea <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2208      	movs	r2, #8
 80096d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2290      	movs	r2, #144	@ 0x90
 80096de:	589b      	ldr	r3, [r3, r2]
 80096e0:	2208      	movs	r2, #8
 80096e2:	431a      	orrs	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2190      	movs	r1, #144	@ 0x90
 80096e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80096ea:	23a4      	movs	r3, #164	@ 0xa4
 80096ec:	18fb      	adds	r3, r7, r3
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	2380      	movs	r3, #128	@ 0x80
 80096f2:	011b      	lsls	r3, r3, #4
 80096f4:	4013      	ands	r3, r2
 80096f6:	d013      	beq.n	8009720 <HAL_UART_IRQHandler+0x1a4>
 80096f8:	23a0      	movs	r3, #160	@ 0xa0
 80096fa:	18fb      	adds	r3, r7, r3
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	2380      	movs	r3, #128	@ 0x80
 8009700:	04db      	lsls	r3, r3, #19
 8009702:	4013      	ands	r3, r2
 8009704:	d00c      	beq.n	8009720 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2280      	movs	r2, #128	@ 0x80
 800970c:	0112      	lsls	r2, r2, #4
 800970e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2290      	movs	r2, #144	@ 0x90
 8009714:	589b      	ldr	r3, [r3, r2]
 8009716:	2220      	movs	r2, #32
 8009718:	431a      	orrs	r2, r3
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2190      	movs	r1, #144	@ 0x90
 800971e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2290      	movs	r2, #144	@ 0x90
 8009724:	589b      	ldr	r3, [r3, r2]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d100      	bne.n	800972c <HAL_UART_IRQHandler+0x1b0>
 800972a:	e25c      	b.n	8009be6 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800972c:	23a4      	movs	r3, #164	@ 0xa4
 800972e:	18fb      	adds	r3, r7, r3
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2220      	movs	r2, #32
 8009734:	4013      	ands	r3, r2
 8009736:	d015      	beq.n	8009764 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009738:	23a0      	movs	r3, #160	@ 0xa0
 800973a:	18fb      	adds	r3, r7, r3
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2220      	movs	r2, #32
 8009740:	4013      	ands	r3, r2
 8009742:	d106      	bne.n	8009752 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009744:	239c      	movs	r3, #156	@ 0x9c
 8009746:	18fb      	adds	r3, r7, r3
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	2380      	movs	r3, #128	@ 0x80
 800974c:	055b      	lsls	r3, r3, #21
 800974e:	4013      	ands	r3, r2
 8009750:	d008      	beq.n	8009764 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009756:	2b00      	cmp	r3, #0
 8009758:	d004      	beq.n	8009764 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	0010      	movs	r0, r2
 8009762:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2290      	movs	r2, #144	@ 0x90
 8009768:	589b      	ldr	r3, [r3, r2]
 800976a:	2194      	movs	r1, #148	@ 0x94
 800976c:	187a      	adds	r2, r7, r1
 800976e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	2240      	movs	r2, #64	@ 0x40
 8009778:	4013      	ands	r3, r2
 800977a:	2b40      	cmp	r3, #64	@ 0x40
 800977c:	d004      	beq.n	8009788 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800977e:	187b      	adds	r3, r7, r1
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2228      	movs	r2, #40	@ 0x28
 8009784:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009786:	d04c      	beq.n	8009822 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	0018      	movs	r0, r3
 800978c:	f000 fe86 	bl	800a49c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	2240      	movs	r2, #64	@ 0x40
 8009798:	4013      	ands	r3, r2
 800979a:	2b40      	cmp	r3, #64	@ 0x40
 800979c:	d13c      	bne.n	8009818 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800979e:	f3ef 8310 	mrs	r3, PRIMASK
 80097a2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80097a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097a6:	2090      	movs	r0, #144	@ 0x90
 80097a8:	183a      	adds	r2, r7, r0
 80097aa:	6013      	str	r3, [r2, #0]
 80097ac:	2301      	movs	r3, #1
 80097ae:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097b2:	f383 8810 	msr	PRIMASK, r3
}
 80097b6:	46c0      	nop			@ (mov r8, r8)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	689a      	ldr	r2, [r3, #8]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2140      	movs	r1, #64	@ 0x40
 80097c4:	438a      	bics	r2, r1
 80097c6:	609a      	str	r2, [r3, #8]
 80097c8:	183b      	adds	r3, r7, r0
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80097d0:	f383 8810 	msr	PRIMASK, r3
}
 80097d4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2280      	movs	r2, #128	@ 0x80
 80097da:	589b      	ldr	r3, [r3, r2]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d016      	beq.n	800980e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2280      	movs	r2, #128	@ 0x80
 80097e4:	589b      	ldr	r3, [r3, r2]
 80097e6:	4a17      	ldr	r2, [pc, #92]	@ (8009844 <HAL_UART_IRQHandler+0x2c8>)
 80097e8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2280      	movs	r2, #128	@ 0x80
 80097ee:	589b      	ldr	r3, [r3, r2]
 80097f0:	0018      	movs	r0, r3
 80097f2:	f7fd fd07 	bl	8007204 <HAL_DMA_Abort_IT>
 80097f6:	1e03      	subs	r3, r0, #0
 80097f8:	d01c      	beq.n	8009834 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2280      	movs	r2, #128	@ 0x80
 80097fe:	589b      	ldr	r3, [r3, r2]
 8009800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	2180      	movs	r1, #128	@ 0x80
 8009806:	5852      	ldr	r2, [r2, r1]
 8009808:	0010      	movs	r0, r2
 800980a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800980c:	e012      	b.n	8009834 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	0018      	movs	r0, r3
 8009812:	f7f8 fac3 	bl	8001d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009816:	e00d      	b.n	8009834 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	0018      	movs	r0, r3
 800981c:	f7f8 fabe 	bl	8001d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009820:	e008      	b.n	8009834 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	0018      	movs	r0, r3
 8009826:	f7f8 fab9 	bl	8001d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2290      	movs	r2, #144	@ 0x90
 800982e:	2100      	movs	r1, #0
 8009830:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8009832:	e1d8      	b.n	8009be6 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009834:	46c0      	nop			@ (mov r8, r8)
    return;
 8009836:	e1d6      	b.n	8009be6 <HAL_UART_IRQHandler+0x66a>
 8009838:	0000080f 	.word	0x0000080f
 800983c:	10000001 	.word	0x10000001
 8009840:	04000120 	.word	0x04000120
 8009844:	0800a819 	.word	0x0800a819

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800984c:	2b01      	cmp	r3, #1
 800984e:	d000      	beq.n	8009852 <HAL_UART_IRQHandler+0x2d6>
 8009850:	e15d      	b.n	8009b0e <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009852:	23a4      	movs	r3, #164	@ 0xa4
 8009854:	18fb      	adds	r3, r7, r3
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2210      	movs	r2, #16
 800985a:	4013      	ands	r3, r2
 800985c:	d100      	bne.n	8009860 <HAL_UART_IRQHandler+0x2e4>
 800985e:	e156      	b.n	8009b0e <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009860:	23a0      	movs	r3, #160	@ 0xa0
 8009862:	18fb      	adds	r3, r7, r3
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2210      	movs	r2, #16
 8009868:	4013      	ands	r3, r2
 800986a:	d100      	bne.n	800986e <HAL_UART_IRQHandler+0x2f2>
 800986c:	e14f      	b.n	8009b0e <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2210      	movs	r2, #16
 8009874:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	2240      	movs	r2, #64	@ 0x40
 800987e:	4013      	ands	r3, r2
 8009880:	2b40      	cmp	r3, #64	@ 0x40
 8009882:	d000      	beq.n	8009886 <HAL_UART_IRQHandler+0x30a>
 8009884:	e0c3      	b.n	8009a0e <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2280      	movs	r2, #128	@ 0x80
 800988a:	589b      	ldr	r3, [r3, r2]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	685a      	ldr	r2, [r3, #4]
 8009890:	217e      	movs	r1, #126	@ 0x7e
 8009892:	187b      	adds	r3, r7, r1
 8009894:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8009896:	187b      	adds	r3, r7, r1
 8009898:	881b      	ldrh	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d100      	bne.n	80098a0 <HAL_UART_IRQHandler+0x324>
 800989e:	e097      	b.n	80099d0 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	225c      	movs	r2, #92	@ 0x5c
 80098a4:	5a9b      	ldrh	r3, [r3, r2]
 80098a6:	187a      	adds	r2, r7, r1
 80098a8:	8812      	ldrh	r2, [r2, #0]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d300      	bcc.n	80098b0 <HAL_UART_IRQHandler+0x334>
 80098ae:	e08f      	b.n	80099d0 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	187a      	adds	r2, r7, r1
 80098b4:	215e      	movs	r1, #94	@ 0x5e
 80098b6:	8812      	ldrh	r2, [r2, #0]
 80098b8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2280      	movs	r2, #128	@ 0x80
 80098be:	589b      	ldr	r3, [r3, r2]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2220      	movs	r2, #32
 80098c6:	4013      	ands	r3, r2
 80098c8:	d170      	bne.n	80099ac <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80098ca:	f3ef 8310 	mrs	r3, PRIMASK
 80098ce:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80098d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80098d4:	2301      	movs	r3, #1
 80098d6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098da:	f383 8810 	msr	PRIMASK, r3
}
 80098de:	46c0      	nop			@ (mov r8, r8)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	49c4      	ldr	r1, [pc, #784]	@ (8009bfc <HAL_UART_IRQHandler+0x680>)
 80098ec:	400a      	ands	r2, r1
 80098ee:	601a      	str	r2, [r3, #0]
 80098f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f6:	f383 8810 	msr	PRIMASK, r3
}
 80098fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80098fc:	f3ef 8310 	mrs	r3, PRIMASK
 8009900:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8009902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009904:	677b      	str	r3, [r7, #116]	@ 0x74
 8009906:	2301      	movs	r3, #1
 8009908:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800990a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800990c:	f383 8810 	msr	PRIMASK, r3
}
 8009910:	46c0      	nop			@ (mov r8, r8)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	689a      	ldr	r2, [r3, #8]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2101      	movs	r1, #1
 800991e:	438a      	bics	r2, r1
 8009920:	609a      	str	r2, [r3, #8]
 8009922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009924:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009928:	f383 8810 	msr	PRIMASK, r3
}
 800992c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800992e:	f3ef 8310 	mrs	r3, PRIMASK
 8009932:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8009934:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009936:	673b      	str	r3, [r7, #112]	@ 0x70
 8009938:	2301      	movs	r3, #1
 800993a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800993c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800993e:	f383 8810 	msr	PRIMASK, r3
}
 8009942:	46c0      	nop			@ (mov r8, r8)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	689a      	ldr	r2, [r3, #8]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2140      	movs	r1, #64	@ 0x40
 8009950:	438a      	bics	r2, r1
 8009952:	609a      	str	r2, [r3, #8]
 8009954:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009956:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800995a:	f383 8810 	msr	PRIMASK, r3
}
 800995e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	228c      	movs	r2, #140	@ 0x8c
 8009964:	2120      	movs	r1, #32
 8009966:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800996e:	f3ef 8310 	mrs	r3, PRIMASK
 8009972:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8009974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009976:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009978:	2301      	movs	r3, #1
 800997a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800997c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800997e:	f383 8810 	msr	PRIMASK, r3
}
 8009982:	46c0      	nop			@ (mov r8, r8)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2110      	movs	r1, #16
 8009990:	438a      	bics	r2, r1
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009996:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009998:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800999a:	f383 8810 	msr	PRIMASK, r3
}
 800999e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2280      	movs	r2, #128	@ 0x80
 80099a4:	589b      	ldr	r3, [r3, r2]
 80099a6:	0018      	movs	r0, r3
 80099a8:	f7fd fbca 	bl	8007140 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2202      	movs	r2, #2
 80099b0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	225c      	movs	r2, #92	@ 0x5c
 80099b6:	5a9a      	ldrh	r2, [r3, r2]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	215e      	movs	r1, #94	@ 0x5e
 80099bc:	5a5b      	ldrh	r3, [r3, r1]
 80099be:	b29b      	uxth	r3, r3
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	0011      	movs	r1, r2
 80099c8:	0018      	movs	r0, r3
 80099ca:	f7f8 f92f 	bl	8001c2c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80099ce:	e10c      	b.n	8009bea <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	225c      	movs	r2, #92	@ 0x5c
 80099d4:	5a9b      	ldrh	r3, [r3, r2]
 80099d6:	227e      	movs	r2, #126	@ 0x7e
 80099d8:	18ba      	adds	r2, r7, r2
 80099da:	8812      	ldrh	r2, [r2, #0]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d000      	beq.n	80099e2 <HAL_UART_IRQHandler+0x466>
 80099e0:	e103      	b.n	8009bea <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2280      	movs	r2, #128	@ 0x80
 80099e6:	589b      	ldr	r3, [r3, r2]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2220      	movs	r2, #32
 80099ee:	4013      	ands	r3, r2
 80099f0:	2b20      	cmp	r3, #32
 80099f2:	d000      	beq.n	80099f6 <HAL_UART_IRQHandler+0x47a>
 80099f4:	e0f9      	b.n	8009bea <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2202      	movs	r2, #2
 80099fa:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	225c      	movs	r2, #92	@ 0x5c
 8009a00:	5a9a      	ldrh	r2, [r3, r2]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	0011      	movs	r1, r2
 8009a06:	0018      	movs	r0, r3
 8009a08:	f7f8 f910 	bl	8001c2c <HAL_UARTEx_RxEventCallback>
      return;
 8009a0c:	e0ed      	b.n	8009bea <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	225c      	movs	r2, #92	@ 0x5c
 8009a12:	5a99      	ldrh	r1, [r3, r2]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	225e      	movs	r2, #94	@ 0x5e
 8009a18:	5a9b      	ldrh	r3, [r3, r2]
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	208e      	movs	r0, #142	@ 0x8e
 8009a1e:	183b      	adds	r3, r7, r0
 8009a20:	1a8a      	subs	r2, r1, r2
 8009a22:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	225e      	movs	r2, #94	@ 0x5e
 8009a28:	5a9b      	ldrh	r3, [r3, r2]
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d100      	bne.n	8009a32 <HAL_UART_IRQHandler+0x4b6>
 8009a30:	e0dd      	b.n	8009bee <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8009a32:	183b      	adds	r3, r7, r0
 8009a34:	881b      	ldrh	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d100      	bne.n	8009a3c <HAL_UART_IRQHandler+0x4c0>
 8009a3a:	e0d8      	b.n	8009bee <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8009a40:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a42:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a44:	2488      	movs	r4, #136	@ 0x88
 8009a46:	193a      	adds	r2, r7, r4
 8009a48:	6013      	str	r3, [r2, #0]
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f383 8810 	msr	PRIMASK, r3
}
 8009a54:	46c0      	nop			@ (mov r8, r8)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4967      	ldr	r1, [pc, #412]	@ (8009c00 <HAL_UART_IRQHandler+0x684>)
 8009a62:	400a      	ands	r2, r1
 8009a64:	601a      	str	r2, [r3, #0]
 8009a66:	193b      	adds	r3, r7, r4
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	f383 8810 	msr	PRIMASK, r3
}
 8009a72:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009a74:	f3ef 8310 	mrs	r3, PRIMASK
 8009a78:	61bb      	str	r3, [r7, #24]
  return(result);
 8009a7a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a7c:	2484      	movs	r4, #132	@ 0x84
 8009a7e:	193a      	adds	r2, r7, r4
 8009a80:	6013      	str	r3, [r2, #0]
 8009a82:	2301      	movs	r3, #1
 8009a84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	f383 8810 	msr	PRIMASK, r3
}
 8009a8c:	46c0      	nop			@ (mov r8, r8)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	689a      	ldr	r2, [r3, #8]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	495a      	ldr	r1, [pc, #360]	@ (8009c04 <HAL_UART_IRQHandler+0x688>)
 8009a9a:	400a      	ands	r2, r1
 8009a9c:	609a      	str	r2, [r3, #8]
 8009a9e:	193b      	adds	r3, r7, r4
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	f383 8810 	msr	PRIMASK, r3
}
 8009aaa:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	228c      	movs	r2, #140	@ 0x8c
 8009ab0:	2120      	movs	r1, #32
 8009ab2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ac8:	2480      	movs	r4, #128	@ 0x80
 8009aca:	193a      	adds	r2, r7, r4
 8009acc:	6013      	str	r3, [r2, #0]
 8009ace:	2301      	movs	r3, #1
 8009ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad4:	f383 8810 	msr	PRIMASK, r3
}
 8009ad8:	46c0      	nop			@ (mov r8, r8)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2110      	movs	r1, #16
 8009ae6:	438a      	bics	r2, r1
 8009ae8:	601a      	str	r2, [r3, #0]
 8009aea:	193b      	adds	r3, r7, r4
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009af2:	f383 8810 	msr	PRIMASK, r3
}
 8009af6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2202      	movs	r2, #2
 8009afc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009afe:	183b      	adds	r3, r7, r0
 8009b00:	881a      	ldrh	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	0011      	movs	r1, r2
 8009b06:	0018      	movs	r0, r3
 8009b08:	f7f8 f890 	bl	8001c2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b0c:	e06f      	b.n	8009bee <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009b0e:	23a4      	movs	r3, #164	@ 0xa4
 8009b10:	18fb      	adds	r3, r7, r3
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	2380      	movs	r3, #128	@ 0x80
 8009b16:	035b      	lsls	r3, r3, #13
 8009b18:	4013      	ands	r3, r2
 8009b1a:	d010      	beq.n	8009b3e <HAL_UART_IRQHandler+0x5c2>
 8009b1c:	239c      	movs	r3, #156	@ 0x9c
 8009b1e:	18fb      	adds	r3, r7, r3
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	2380      	movs	r3, #128	@ 0x80
 8009b24:	03db      	lsls	r3, r3, #15
 8009b26:	4013      	ands	r3, r2
 8009b28:	d009      	beq.n	8009b3e <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2280      	movs	r2, #128	@ 0x80
 8009b30:	0352      	lsls	r2, r2, #13
 8009b32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	0018      	movs	r0, r3
 8009b38:	f000 ff24 	bl	800a984 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b3c:	e05a      	b.n	8009bf4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009b3e:	23a4      	movs	r3, #164	@ 0xa4
 8009b40:	18fb      	adds	r3, r7, r3
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2280      	movs	r2, #128	@ 0x80
 8009b46:	4013      	ands	r3, r2
 8009b48:	d016      	beq.n	8009b78 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009b4a:	23a0      	movs	r3, #160	@ 0xa0
 8009b4c:	18fb      	adds	r3, r7, r3
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2280      	movs	r2, #128	@ 0x80
 8009b52:	4013      	ands	r3, r2
 8009b54:	d106      	bne.n	8009b64 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009b56:	239c      	movs	r3, #156	@ 0x9c
 8009b58:	18fb      	adds	r3, r7, r3
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	2380      	movs	r3, #128	@ 0x80
 8009b5e:	041b      	lsls	r3, r3, #16
 8009b60:	4013      	ands	r3, r2
 8009b62:	d009      	beq.n	8009b78 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d042      	beq.n	8009bf2 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	0010      	movs	r0, r2
 8009b74:	4798      	blx	r3
    }
    return;
 8009b76:	e03c      	b.n	8009bf2 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b78:	23a4      	movs	r3, #164	@ 0xa4
 8009b7a:	18fb      	adds	r3, r7, r3
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2240      	movs	r2, #64	@ 0x40
 8009b80:	4013      	ands	r3, r2
 8009b82:	d00a      	beq.n	8009b9a <HAL_UART_IRQHandler+0x61e>
 8009b84:	23a0      	movs	r3, #160	@ 0xa0
 8009b86:	18fb      	adds	r3, r7, r3
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2240      	movs	r2, #64	@ 0x40
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	d004      	beq.n	8009b9a <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	0018      	movs	r0, r3
 8009b94:	f000 fe57 	bl	800a846 <UART_EndTransmit_IT>
    return;
 8009b98:	e02c      	b.n	8009bf4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b9a:	23a4      	movs	r3, #164	@ 0xa4
 8009b9c:	18fb      	adds	r3, r7, r3
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	2380      	movs	r3, #128	@ 0x80
 8009ba2:	041b      	lsls	r3, r3, #16
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	d00b      	beq.n	8009bc0 <HAL_UART_IRQHandler+0x644>
 8009ba8:	23a0      	movs	r3, #160	@ 0xa0
 8009baa:	18fb      	adds	r3, r7, r3
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	2380      	movs	r3, #128	@ 0x80
 8009bb0:	05db      	lsls	r3, r3, #23
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	d004      	beq.n	8009bc0 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	0018      	movs	r0, r3
 8009bba:	f000 fef3 	bl	800a9a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bbe:	e019      	b.n	8009bf4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009bc0:	23a4      	movs	r3, #164	@ 0xa4
 8009bc2:	18fb      	adds	r3, r7, r3
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	2380      	movs	r3, #128	@ 0x80
 8009bc8:	045b      	lsls	r3, r3, #17
 8009bca:	4013      	ands	r3, r2
 8009bcc:	d012      	beq.n	8009bf4 <HAL_UART_IRQHandler+0x678>
 8009bce:	23a0      	movs	r3, #160	@ 0xa0
 8009bd0:	18fb      	adds	r3, r7, r3
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	da0d      	bge.n	8009bf4 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	0018      	movs	r0, r3
 8009bdc:	f000 feda 	bl	800a994 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009be0:	e008      	b.n	8009bf4 <HAL_UART_IRQHandler+0x678>
      return;
 8009be2:	46c0      	nop			@ (mov r8, r8)
 8009be4:	e006      	b.n	8009bf4 <HAL_UART_IRQHandler+0x678>
    return;
 8009be6:	46c0      	nop			@ (mov r8, r8)
 8009be8:	e004      	b.n	8009bf4 <HAL_UART_IRQHandler+0x678>
      return;
 8009bea:	46c0      	nop			@ (mov r8, r8)
 8009bec:	e002      	b.n	8009bf4 <HAL_UART_IRQHandler+0x678>
      return;
 8009bee:	46c0      	nop			@ (mov r8, r8)
 8009bf0:	e000      	b.n	8009bf4 <HAL_UART_IRQHandler+0x678>
    return;
 8009bf2:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	b02a      	add	sp, #168	@ 0xa8
 8009bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8009bfa:	46c0      	nop			@ (mov r8, r8)
 8009bfc:	fffffeff 	.word	0xfffffeff
 8009c00:	fffffedf 	.word	0xfffffedf
 8009c04:	effffffe 	.word	0xeffffffe

08009c08 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009c10:	46c0      	nop			@ (mov r8, r8)
 8009c12:	46bd      	mov	sp, r7
 8009c14:	b002      	add	sp, #8
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009c20:	46c0      	nop			@ (mov r8, r8)
 8009c22:	46bd      	mov	sp, r7
 8009c24:	b002      	add	sp, #8
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009c30:	46c0      	nop			@ (mov r8, r8)
 8009c32:	46bd      	mov	sp, r7
 8009c34:	b002      	add	sp, #8
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b088      	sub	sp, #32
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c40:	231e      	movs	r3, #30
 8009c42:	18fb      	adds	r3, r7, r3
 8009c44:	2200      	movs	r2, #0
 8009c46:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	689a      	ldr	r2, [r3, #8]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	431a      	orrs	r2, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	431a      	orrs	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	69db      	ldr	r3, [r3, #28]
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4aab      	ldr	r2, [pc, #684]	@ (8009f14 <UART_SetConfig+0x2dc>)
 8009c68:	4013      	ands	r3, r2
 8009c6a:	0019      	movs	r1, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	697a      	ldr	r2, [r7, #20]
 8009c72:	430a      	orrs	r2, r1
 8009c74:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	4aa6      	ldr	r2, [pc, #664]	@ (8009f18 <UART_SetConfig+0x2e0>)
 8009c7e:	4013      	ands	r3, r2
 8009c80:	0019      	movs	r1, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	68da      	ldr	r2, [r3, #12]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	430a      	orrs	r2, r1
 8009c8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	697a      	ldr	r2, [r7, #20]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	4a9d      	ldr	r2, [pc, #628]	@ (8009f1c <UART_SetConfig+0x2e4>)
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	0019      	movs	r1, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cba:	220f      	movs	r2, #15
 8009cbc:	4393      	bics	r3, r2
 8009cbe:	0019      	movs	r1, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a93      	ldr	r2, [pc, #588]	@ (8009f20 <UART_SetConfig+0x2e8>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d127      	bne.n	8009d26 <UART_SetConfig+0xee>
 8009cd6:	4b93      	ldr	r3, [pc, #588]	@ (8009f24 <UART_SetConfig+0x2ec>)
 8009cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cda:	2203      	movs	r2, #3
 8009cdc:	4013      	ands	r3, r2
 8009cde:	2b03      	cmp	r3, #3
 8009ce0:	d017      	beq.n	8009d12 <UART_SetConfig+0xda>
 8009ce2:	d81b      	bhi.n	8009d1c <UART_SetConfig+0xe4>
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d00a      	beq.n	8009cfe <UART_SetConfig+0xc6>
 8009ce8:	d818      	bhi.n	8009d1c <UART_SetConfig+0xe4>
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d002      	beq.n	8009cf4 <UART_SetConfig+0xbc>
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d00a      	beq.n	8009d08 <UART_SetConfig+0xd0>
 8009cf2:	e013      	b.n	8009d1c <UART_SetConfig+0xe4>
 8009cf4:	231f      	movs	r3, #31
 8009cf6:	18fb      	adds	r3, r7, r3
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	701a      	strb	r2, [r3, #0]
 8009cfc:	e021      	b.n	8009d42 <UART_SetConfig+0x10a>
 8009cfe:	231f      	movs	r3, #31
 8009d00:	18fb      	adds	r3, r7, r3
 8009d02:	2202      	movs	r2, #2
 8009d04:	701a      	strb	r2, [r3, #0]
 8009d06:	e01c      	b.n	8009d42 <UART_SetConfig+0x10a>
 8009d08:	231f      	movs	r3, #31
 8009d0a:	18fb      	adds	r3, r7, r3
 8009d0c:	2204      	movs	r2, #4
 8009d0e:	701a      	strb	r2, [r3, #0]
 8009d10:	e017      	b.n	8009d42 <UART_SetConfig+0x10a>
 8009d12:	231f      	movs	r3, #31
 8009d14:	18fb      	adds	r3, r7, r3
 8009d16:	2208      	movs	r2, #8
 8009d18:	701a      	strb	r2, [r3, #0]
 8009d1a:	e012      	b.n	8009d42 <UART_SetConfig+0x10a>
 8009d1c:	231f      	movs	r3, #31
 8009d1e:	18fb      	adds	r3, r7, r3
 8009d20:	2210      	movs	r2, #16
 8009d22:	701a      	strb	r2, [r3, #0]
 8009d24:	e00d      	b.n	8009d42 <UART_SetConfig+0x10a>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a7f      	ldr	r2, [pc, #508]	@ (8009f28 <UART_SetConfig+0x2f0>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d104      	bne.n	8009d3a <UART_SetConfig+0x102>
 8009d30:	231f      	movs	r3, #31
 8009d32:	18fb      	adds	r3, r7, r3
 8009d34:	2200      	movs	r2, #0
 8009d36:	701a      	strb	r2, [r3, #0]
 8009d38:	e003      	b.n	8009d42 <UART_SetConfig+0x10a>
 8009d3a:	231f      	movs	r3, #31
 8009d3c:	18fb      	adds	r3, r7, r3
 8009d3e:	2210      	movs	r2, #16
 8009d40:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	69da      	ldr	r2, [r3, #28]
 8009d46:	2380      	movs	r3, #128	@ 0x80
 8009d48:	021b      	lsls	r3, r3, #8
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d000      	beq.n	8009d50 <UART_SetConfig+0x118>
 8009d4e:	e06f      	b.n	8009e30 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8009d50:	231f      	movs	r3, #31
 8009d52:	18fb      	adds	r3, r7, r3
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	2b08      	cmp	r3, #8
 8009d58:	d01f      	beq.n	8009d9a <UART_SetConfig+0x162>
 8009d5a:	dc22      	bgt.n	8009da2 <UART_SetConfig+0x16a>
 8009d5c:	2b04      	cmp	r3, #4
 8009d5e:	d017      	beq.n	8009d90 <UART_SetConfig+0x158>
 8009d60:	dc1f      	bgt.n	8009da2 <UART_SetConfig+0x16a>
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d002      	beq.n	8009d6c <UART_SetConfig+0x134>
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d005      	beq.n	8009d76 <UART_SetConfig+0x13e>
 8009d6a:	e01a      	b.n	8009da2 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d6c:	f7ff f914 	bl	8008f98 <HAL_RCC_GetPCLK1Freq>
 8009d70:	0003      	movs	r3, r0
 8009d72:	61bb      	str	r3, [r7, #24]
        break;
 8009d74:	e01c      	b.n	8009db0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8009d76:	4b6b      	ldr	r3, [pc, #428]	@ (8009f24 <UART_SetConfig+0x2ec>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	095b      	lsrs	r3, r3, #5
 8009d7c:	2207      	movs	r2, #7
 8009d7e:	4013      	ands	r3, r2
 8009d80:	3301      	adds	r3, #1
 8009d82:	0019      	movs	r1, r3
 8009d84:	4869      	ldr	r0, [pc, #420]	@ (8009f2c <UART_SetConfig+0x2f4>)
 8009d86:	f7f6 f9bf 	bl	8000108 <__udivsi3>
 8009d8a:	0003      	movs	r3, r0
 8009d8c:	61bb      	str	r3, [r7, #24]
        break;
 8009d8e:	e00f      	b.n	8009db0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d90:	f7ff f88c 	bl	8008eac <HAL_RCC_GetSysClockFreq>
 8009d94:	0003      	movs	r3, r0
 8009d96:	61bb      	str	r3, [r7, #24]
        break;
 8009d98:	e00a      	b.n	8009db0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d9a:	2380      	movs	r3, #128	@ 0x80
 8009d9c:	021b      	lsls	r3, r3, #8
 8009d9e:	61bb      	str	r3, [r7, #24]
        break;
 8009da0:	e006      	b.n	8009db0 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8009da2:	2300      	movs	r3, #0
 8009da4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009da6:	231e      	movs	r3, #30
 8009da8:	18fb      	adds	r3, r7, r3
 8009daa:	2201      	movs	r2, #1
 8009dac:	701a      	strb	r2, [r3, #0]
        break;
 8009dae:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d100      	bne.n	8009db8 <UART_SetConfig+0x180>
 8009db6:	e097      	b.n	8009ee8 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009dbc:	4b5c      	ldr	r3, [pc, #368]	@ (8009f30 <UART_SetConfig+0x2f8>)
 8009dbe:	0052      	lsls	r2, r2, #1
 8009dc0:	5ad3      	ldrh	r3, [r2, r3]
 8009dc2:	0019      	movs	r1, r3
 8009dc4:	69b8      	ldr	r0, [r7, #24]
 8009dc6:	f7f6 f99f 	bl	8000108 <__udivsi3>
 8009dca:	0003      	movs	r3, r0
 8009dcc:	005a      	lsls	r2, r3, #1
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	085b      	lsrs	r3, r3, #1
 8009dd4:	18d2      	adds	r2, r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	0019      	movs	r1, r3
 8009ddc:	0010      	movs	r0, r2
 8009dde:	f7f6 f993 	bl	8000108 <__udivsi3>
 8009de2:	0003      	movs	r3, r0
 8009de4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	2b0f      	cmp	r3, #15
 8009dea:	d91c      	bls.n	8009e26 <UART_SetConfig+0x1ee>
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	2380      	movs	r3, #128	@ 0x80
 8009df0:	025b      	lsls	r3, r3, #9
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d217      	bcs.n	8009e26 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	200e      	movs	r0, #14
 8009dfc:	183b      	adds	r3, r7, r0
 8009dfe:	210f      	movs	r1, #15
 8009e00:	438a      	bics	r2, r1
 8009e02:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	085b      	lsrs	r3, r3, #1
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	2207      	movs	r2, #7
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	b299      	uxth	r1, r3
 8009e10:	183b      	adds	r3, r7, r0
 8009e12:	183a      	adds	r2, r7, r0
 8009e14:	8812      	ldrh	r2, [r2, #0]
 8009e16:	430a      	orrs	r2, r1
 8009e18:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	183a      	adds	r2, r7, r0
 8009e20:	8812      	ldrh	r2, [r2, #0]
 8009e22:	60da      	str	r2, [r3, #12]
 8009e24:	e060      	b.n	8009ee8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8009e26:	231e      	movs	r3, #30
 8009e28:	18fb      	adds	r3, r7, r3
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	701a      	strb	r2, [r3, #0]
 8009e2e:	e05b      	b.n	8009ee8 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e30:	231f      	movs	r3, #31
 8009e32:	18fb      	adds	r3, r7, r3
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	2b08      	cmp	r3, #8
 8009e38:	d01f      	beq.n	8009e7a <UART_SetConfig+0x242>
 8009e3a:	dc22      	bgt.n	8009e82 <UART_SetConfig+0x24a>
 8009e3c:	2b04      	cmp	r3, #4
 8009e3e:	d017      	beq.n	8009e70 <UART_SetConfig+0x238>
 8009e40:	dc1f      	bgt.n	8009e82 <UART_SetConfig+0x24a>
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d002      	beq.n	8009e4c <UART_SetConfig+0x214>
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d005      	beq.n	8009e56 <UART_SetConfig+0x21e>
 8009e4a:	e01a      	b.n	8009e82 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e4c:	f7ff f8a4 	bl	8008f98 <HAL_RCC_GetPCLK1Freq>
 8009e50:	0003      	movs	r3, r0
 8009e52:	61bb      	str	r3, [r7, #24]
        break;
 8009e54:	e01c      	b.n	8009e90 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8009e56:	4b33      	ldr	r3, [pc, #204]	@ (8009f24 <UART_SetConfig+0x2ec>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	095b      	lsrs	r3, r3, #5
 8009e5c:	2207      	movs	r2, #7
 8009e5e:	4013      	ands	r3, r2
 8009e60:	3301      	adds	r3, #1
 8009e62:	0019      	movs	r1, r3
 8009e64:	4831      	ldr	r0, [pc, #196]	@ (8009f2c <UART_SetConfig+0x2f4>)
 8009e66:	f7f6 f94f 	bl	8000108 <__udivsi3>
 8009e6a:	0003      	movs	r3, r0
 8009e6c:	61bb      	str	r3, [r7, #24]
        break;
 8009e6e:	e00f      	b.n	8009e90 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e70:	f7ff f81c 	bl	8008eac <HAL_RCC_GetSysClockFreq>
 8009e74:	0003      	movs	r3, r0
 8009e76:	61bb      	str	r3, [r7, #24]
        break;
 8009e78:	e00a      	b.n	8009e90 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e7a:	2380      	movs	r3, #128	@ 0x80
 8009e7c:	021b      	lsls	r3, r3, #8
 8009e7e:	61bb      	str	r3, [r7, #24]
        break;
 8009e80:	e006      	b.n	8009e90 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8009e82:	2300      	movs	r3, #0
 8009e84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e86:	231e      	movs	r3, #30
 8009e88:	18fb      	adds	r3, r7, r3
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	701a      	strb	r2, [r3, #0]
        break;
 8009e8e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d028      	beq.n	8009ee8 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e9a:	4b25      	ldr	r3, [pc, #148]	@ (8009f30 <UART_SetConfig+0x2f8>)
 8009e9c:	0052      	lsls	r2, r2, #1
 8009e9e:	5ad3      	ldrh	r3, [r2, r3]
 8009ea0:	0019      	movs	r1, r3
 8009ea2:	69b8      	ldr	r0, [r7, #24]
 8009ea4:	f7f6 f930 	bl	8000108 <__udivsi3>
 8009ea8:	0003      	movs	r3, r0
 8009eaa:	001a      	movs	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	085b      	lsrs	r3, r3, #1
 8009eb2:	18d2      	adds	r2, r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	0019      	movs	r1, r3
 8009eba:	0010      	movs	r0, r2
 8009ebc:	f7f6 f924 	bl	8000108 <__udivsi3>
 8009ec0:	0003      	movs	r3, r0
 8009ec2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	2b0f      	cmp	r3, #15
 8009ec8:	d90a      	bls.n	8009ee0 <UART_SetConfig+0x2a8>
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	2380      	movs	r3, #128	@ 0x80
 8009ece:	025b      	lsls	r3, r3, #9
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d205      	bcs.n	8009ee0 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	60da      	str	r2, [r3, #12]
 8009ede:	e003      	b.n	8009ee8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8009ee0:	231e      	movs	r3, #30
 8009ee2:	18fb      	adds	r3, r7, r3
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	226a      	movs	r2, #106	@ 0x6a
 8009eec:	2101      	movs	r1, #1
 8009eee:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2268      	movs	r2, #104	@ 0x68
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009f04:	231e      	movs	r3, #30
 8009f06:	18fb      	adds	r3, r7, r3
 8009f08:	781b      	ldrb	r3, [r3, #0]
}
 8009f0a:	0018      	movs	r0, r3
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	b008      	add	sp, #32
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	46c0      	nop			@ (mov r8, r8)
 8009f14:	cfff69f3 	.word	0xcfff69f3
 8009f18:	ffffcfff 	.word	0xffffcfff
 8009f1c:	11fff4ff 	.word	0x11fff4ff
 8009f20:	40013800 	.word	0x40013800
 8009f24:	40021000 	.word	0x40021000
 8009f28:	40004400 	.word	0x40004400
 8009f2c:	02dc6c00 	.word	0x02dc6c00
 8009f30:	0800b004 	.word	0x0800b004

08009f34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f40:	2208      	movs	r2, #8
 8009f42:	4013      	ands	r3, r2
 8009f44:	d00b      	beq.n	8009f5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	4a4a      	ldr	r2, [pc, #296]	@ (800a078 <UART_AdvFeatureConfig+0x144>)
 8009f4e:	4013      	ands	r3, r2
 8009f50:	0019      	movs	r1, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	430a      	orrs	r2, r1
 8009f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f62:	2201      	movs	r2, #1
 8009f64:	4013      	ands	r3, r2
 8009f66:	d00b      	beq.n	8009f80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	4a43      	ldr	r2, [pc, #268]	@ (800a07c <UART_AdvFeatureConfig+0x148>)
 8009f70:	4013      	ands	r3, r2
 8009f72:	0019      	movs	r1, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f84:	2202      	movs	r2, #2
 8009f86:	4013      	ands	r3, r2
 8009f88:	d00b      	beq.n	8009fa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	4a3b      	ldr	r2, [pc, #236]	@ (800a080 <UART_AdvFeatureConfig+0x14c>)
 8009f92:	4013      	ands	r3, r2
 8009f94:	0019      	movs	r1, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa6:	2204      	movs	r2, #4
 8009fa8:	4013      	ands	r3, r2
 8009faa:	d00b      	beq.n	8009fc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	4a34      	ldr	r2, [pc, #208]	@ (800a084 <UART_AdvFeatureConfig+0x150>)
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	0019      	movs	r1, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc8:	2210      	movs	r2, #16
 8009fca:	4013      	ands	r3, r2
 8009fcc:	d00b      	beq.n	8009fe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	4a2c      	ldr	r2, [pc, #176]	@ (800a088 <UART_AdvFeatureConfig+0x154>)
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	0019      	movs	r1, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fea:	2220      	movs	r2, #32
 8009fec:	4013      	ands	r3, r2
 8009fee:	d00b      	beq.n	800a008 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	4a25      	ldr	r2, [pc, #148]	@ (800a08c <UART_AdvFeatureConfig+0x158>)
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	0019      	movs	r1, r3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	430a      	orrs	r2, r1
 800a006:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a00c:	2240      	movs	r2, #64	@ 0x40
 800a00e:	4013      	ands	r3, r2
 800a010:	d01d      	beq.n	800a04e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	4a1d      	ldr	r2, [pc, #116]	@ (800a090 <UART_AdvFeatureConfig+0x15c>)
 800a01a:	4013      	ands	r3, r2
 800a01c:	0019      	movs	r1, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	430a      	orrs	r2, r1
 800a028:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a02e:	2380      	movs	r3, #128	@ 0x80
 800a030:	035b      	lsls	r3, r3, #13
 800a032:	429a      	cmp	r2, r3
 800a034:	d10b      	bne.n	800a04e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	4a15      	ldr	r2, [pc, #84]	@ (800a094 <UART_AdvFeatureConfig+0x160>)
 800a03e:	4013      	ands	r3, r2
 800a040:	0019      	movs	r1, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	430a      	orrs	r2, r1
 800a04c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a052:	2280      	movs	r2, #128	@ 0x80
 800a054:	4013      	ands	r3, r2
 800a056:	d00b      	beq.n	800a070 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	4a0e      	ldr	r2, [pc, #56]	@ (800a098 <UART_AdvFeatureConfig+0x164>)
 800a060:	4013      	ands	r3, r2
 800a062:	0019      	movs	r1, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	430a      	orrs	r2, r1
 800a06e:	605a      	str	r2, [r3, #4]
  }
}
 800a070:	46c0      	nop			@ (mov r8, r8)
 800a072:	46bd      	mov	sp, r7
 800a074:	b002      	add	sp, #8
 800a076:	bd80      	pop	{r7, pc}
 800a078:	ffff7fff 	.word	0xffff7fff
 800a07c:	fffdffff 	.word	0xfffdffff
 800a080:	fffeffff 	.word	0xfffeffff
 800a084:	fffbffff 	.word	0xfffbffff
 800a088:	ffffefff 	.word	0xffffefff
 800a08c:	ffffdfff 	.word	0xffffdfff
 800a090:	ffefffff 	.word	0xffefffff
 800a094:	ff9fffff 	.word	0xff9fffff
 800a098:	fff7ffff 	.word	0xfff7ffff

0800a09c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b092      	sub	sp, #72	@ 0x48
 800a0a0:	af02      	add	r7, sp, #8
 800a0a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2290      	movs	r2, #144	@ 0x90
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a0ac:	f7fb fd3e 	bl	8005b2c <HAL_GetTick>
 800a0b0:	0003      	movs	r3, r0
 800a0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2208      	movs	r2, #8
 800a0bc:	4013      	ands	r3, r2
 800a0be:	2b08      	cmp	r3, #8
 800a0c0:	d12d      	bne.n	800a11e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0c4:	2280      	movs	r2, #128	@ 0x80
 800a0c6:	0391      	lsls	r1, r2, #14
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	4a47      	ldr	r2, [pc, #284]	@ (800a1e8 <UART_CheckIdleState+0x14c>)
 800a0cc:	9200      	str	r2, [sp, #0]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f000 f88e 	bl	800a1f0 <UART_WaitOnFlagUntilTimeout>
 800a0d4:	1e03      	subs	r3, r0, #0
 800a0d6:	d022      	beq.n	800a11e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a0d8:	f3ef 8310 	mrs	r3, PRIMASK
 800a0dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a0e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e8:	f383 8810 	msr	PRIMASK, r3
}
 800a0ec:	46c0      	nop			@ (mov r8, r8)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2180      	movs	r1, #128	@ 0x80
 800a0fa:	438a      	bics	r2, r1
 800a0fc:	601a      	str	r2, [r3, #0]
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a100:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a104:	f383 8810 	msr	PRIMASK, r3
}
 800a108:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2288      	movs	r2, #136	@ 0x88
 800a10e:	2120      	movs	r1, #32
 800a110:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2284      	movs	r2, #132	@ 0x84
 800a116:	2100      	movs	r1, #0
 800a118:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e060      	b.n	800a1e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2204      	movs	r2, #4
 800a126:	4013      	ands	r3, r2
 800a128:	2b04      	cmp	r3, #4
 800a12a:	d146      	bne.n	800a1ba <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a12c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a12e:	2280      	movs	r2, #128	@ 0x80
 800a130:	03d1      	lsls	r1, r2, #15
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	4a2c      	ldr	r2, [pc, #176]	@ (800a1e8 <UART_CheckIdleState+0x14c>)
 800a136:	9200      	str	r2, [sp, #0]
 800a138:	2200      	movs	r2, #0
 800a13a:	f000 f859 	bl	800a1f0 <UART_WaitOnFlagUntilTimeout>
 800a13e:	1e03      	subs	r3, r0, #0
 800a140:	d03b      	beq.n	800a1ba <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a142:	f3ef 8310 	mrs	r3, PRIMASK
 800a146:	60fb      	str	r3, [r7, #12]
  return(result);
 800a148:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a14a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a14c:	2301      	movs	r3, #1
 800a14e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	f383 8810 	msr	PRIMASK, r3
}
 800a156:	46c0      	nop			@ (mov r8, r8)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4922      	ldr	r1, [pc, #136]	@ (800a1ec <UART_CheckIdleState+0x150>)
 800a164:	400a      	ands	r2, r1
 800a166:	601a      	str	r2, [r3, #0]
 800a168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a16a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	f383 8810 	msr	PRIMASK, r3
}
 800a172:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a174:	f3ef 8310 	mrs	r3, PRIMASK
 800a178:	61bb      	str	r3, [r7, #24]
  return(result);
 800a17a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a17c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a17e:	2301      	movs	r3, #1
 800a180:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	f383 8810 	msr	PRIMASK, r3
}
 800a188:	46c0      	nop			@ (mov r8, r8)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	689a      	ldr	r2, [r3, #8]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2101      	movs	r1, #1
 800a196:	438a      	bics	r2, r1
 800a198:	609a      	str	r2, [r3, #8]
 800a19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a19e:	6a3b      	ldr	r3, [r7, #32]
 800a1a0:	f383 8810 	msr	PRIMASK, r3
}
 800a1a4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	228c      	movs	r2, #140	@ 0x8c
 800a1aa:	2120      	movs	r1, #32
 800a1ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2284      	movs	r2, #132	@ 0x84
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1b6:	2303      	movs	r3, #3
 800a1b8:	e012      	b.n	800a1e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2288      	movs	r2, #136	@ 0x88
 800a1be:	2120      	movs	r1, #32
 800a1c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	228c      	movs	r2, #140	@ 0x8c
 800a1c6:	2120      	movs	r1, #32
 800a1c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2284      	movs	r2, #132	@ 0x84
 800a1da:	2100      	movs	r1, #0
 800a1dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	0018      	movs	r0, r3
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	b010      	add	sp, #64	@ 0x40
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	01ffffff 	.word	0x01ffffff
 800a1ec:	fffffedf 	.word	0xfffffedf

0800a1f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	603b      	str	r3, [r7, #0]
 800a1fc:	1dfb      	adds	r3, r7, #7
 800a1fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a200:	e051      	b.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	3301      	adds	r3, #1
 800a206:	d04e      	beq.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a208:	f7fb fc90 	bl	8005b2c <HAL_GetTick>
 800a20c:	0002      	movs	r2, r0
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	1ad3      	subs	r3, r2, r3
 800a212:	69ba      	ldr	r2, [r7, #24]
 800a214:	429a      	cmp	r2, r3
 800a216:	d302      	bcc.n	800a21e <UART_WaitOnFlagUntilTimeout+0x2e>
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d101      	bne.n	800a222 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800a21e:	2303      	movs	r3, #3
 800a220:	e051      	b.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2204      	movs	r2, #4
 800a22a:	4013      	ands	r3, r2
 800a22c:	d03b      	beq.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	2b80      	cmp	r3, #128	@ 0x80
 800a232:	d038      	beq.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2b40      	cmp	r3, #64	@ 0x40
 800a238:	d035      	beq.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	69db      	ldr	r3, [r3, #28]
 800a240:	2208      	movs	r2, #8
 800a242:	4013      	ands	r3, r2
 800a244:	2b08      	cmp	r3, #8
 800a246:	d111      	bne.n	800a26c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2208      	movs	r2, #8
 800a24e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	0018      	movs	r0, r3
 800a254:	f000 f922 	bl	800a49c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2290      	movs	r2, #144	@ 0x90
 800a25c:	2108      	movs	r1, #8
 800a25e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2284      	movs	r2, #132	@ 0x84
 800a264:	2100      	movs	r1, #0
 800a266:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	e02c      	b.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	69da      	ldr	r2, [r3, #28]
 800a272:	2380      	movs	r3, #128	@ 0x80
 800a274:	011b      	lsls	r3, r3, #4
 800a276:	401a      	ands	r2, r3
 800a278:	2380      	movs	r3, #128	@ 0x80
 800a27a:	011b      	lsls	r3, r3, #4
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d112      	bne.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2280      	movs	r2, #128	@ 0x80
 800a286:	0112      	lsls	r2, r2, #4
 800a288:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	0018      	movs	r0, r3
 800a28e:	f000 f905 	bl	800a49c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2290      	movs	r2, #144	@ 0x90
 800a296:	2120      	movs	r1, #32
 800a298:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2284      	movs	r2, #132	@ 0x84
 800a29e:	2100      	movs	r1, #0
 800a2a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e00f      	b.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	69db      	ldr	r3, [r3, #28]
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	68ba      	ldr	r2, [r7, #8]
 800a2b2:	1ad3      	subs	r3, r2, r3
 800a2b4:	425a      	negs	r2, r3
 800a2b6:	4153      	adcs	r3, r2
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	001a      	movs	r2, r3
 800a2bc:	1dfb      	adds	r3, r7, #7
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d09e      	beq.n	800a202 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	0018      	movs	r0, r3
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	b004      	add	sp, #16
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b090      	sub	sp, #64	@ 0x40
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	1dbb      	adds	r3, r7, #6
 800a2dc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	1dba      	adds	r2, r7, #6
 800a2e8:	215c      	movs	r1, #92	@ 0x5c
 800a2ea:	8812      	ldrh	r2, [r2, #0]
 800a2ec:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2290      	movs	r2, #144	@ 0x90
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	228c      	movs	r2, #140	@ 0x8c
 800a2fa:	2122      	movs	r1, #34	@ 0x22
 800a2fc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2280      	movs	r2, #128	@ 0x80
 800a302:	589b      	ldr	r3, [r3, r2]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d02d      	beq.n	800a364 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2280      	movs	r2, #128	@ 0x80
 800a30c:	589b      	ldr	r3, [r3, r2]
 800a30e:	4a40      	ldr	r2, [pc, #256]	@ (800a410 <UART_Start_Receive_DMA+0x140>)
 800a310:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2280      	movs	r2, #128	@ 0x80
 800a316:	589b      	ldr	r3, [r3, r2]
 800a318:	4a3e      	ldr	r2, [pc, #248]	@ (800a414 <UART_Start_Receive_DMA+0x144>)
 800a31a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2280      	movs	r2, #128	@ 0x80
 800a320:	589b      	ldr	r3, [r3, r2]
 800a322:	4a3d      	ldr	r2, [pc, #244]	@ (800a418 <UART_Start_Receive_DMA+0x148>)
 800a324:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2280      	movs	r2, #128	@ 0x80
 800a32a:	589b      	ldr	r3, [r3, r2]
 800a32c:	2200      	movs	r2, #0
 800a32e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2280      	movs	r2, #128	@ 0x80
 800a334:	5898      	ldr	r0, [r3, r2]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3324      	adds	r3, #36	@ 0x24
 800a33c:	0019      	movs	r1, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a342:	001a      	movs	r2, r3
 800a344:	1dbb      	adds	r3, r7, #6
 800a346:	881b      	ldrh	r3, [r3, #0]
 800a348:	f7fc fe72 	bl	8007030 <HAL_DMA_Start_IT>
 800a34c:	1e03      	subs	r3, r0, #0
 800a34e:	d009      	beq.n	800a364 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2290      	movs	r2, #144	@ 0x90
 800a354:	2110      	movs	r1, #16
 800a356:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	228c      	movs	r2, #140	@ 0x8c
 800a35c:	2120      	movs	r1, #32
 800a35e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	e050      	b.n	800a406 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d019      	beq.n	800a3a0 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a36c:	f3ef 8310 	mrs	r3, PRIMASK
 800a370:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800a372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a374:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a376:	2301      	movs	r3, #1
 800a378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a37c:	f383 8810 	msr	PRIMASK, r3
}
 800a380:	46c0      	nop			@ (mov r8, r8)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2180      	movs	r1, #128	@ 0x80
 800a38e:	0049      	lsls	r1, r1, #1
 800a390:	430a      	orrs	r2, r1
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a396:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39a:	f383 8810 	msr	PRIMASK, r3
}
 800a39e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a3a0:	f3ef 8310 	mrs	r3, PRIMASK
 800a3a4:	613b      	str	r3, [r7, #16]
  return(result);
 800a3a6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f383 8810 	msr	PRIMASK, r3
}
 800a3b4:	46c0      	nop			@ (mov r8, r8)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	689a      	ldr	r2, [r3, #8]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	609a      	str	r2, [r3, #8]
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	f383 8810 	msr	PRIMASK, r3
}
 800a3d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a3d2:	f3ef 8310 	mrs	r3, PRIMASK
 800a3d6:	61fb      	str	r3, [r7, #28]
  return(result);
 800a3d8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3dc:	2301      	movs	r3, #1
 800a3de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	f383 8810 	msr	PRIMASK, r3
}
 800a3e6:	46c0      	nop			@ (mov r8, r8)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	689a      	ldr	r2, [r3, #8]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2140      	movs	r1, #64	@ 0x40
 800a3f4:	430a      	orrs	r2, r1
 800a3f6:	609a      	str	r2, [r3, #8]
 800a3f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fe:	f383 8810 	msr	PRIMASK, r3
}
 800a402:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	0018      	movs	r0, r3
 800a408:	46bd      	mov	sp, r7
 800a40a:	b010      	add	sp, #64	@ 0x40
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	46c0      	nop			@ (mov r8, r8)
 800a410:	0800a621 	.word	0x0800a621
 800a414:	0800a751 	.word	0x0800a751
 800a418:	0800a793 	.word	0x0800a793

0800a41c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b08a      	sub	sp, #40	@ 0x28
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a424:	f3ef 8310 	mrs	r3, PRIMASK
 800a428:	60bb      	str	r3, [r7, #8]
  return(result);
 800a42a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a42c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a42e:	2301      	movs	r3, #1
 800a430:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f383 8810 	msr	PRIMASK, r3
}
 800a438:	46c0      	nop			@ (mov r8, r8)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	21c0      	movs	r1, #192	@ 0xc0
 800a446:	438a      	bics	r2, r1
 800a448:	601a      	str	r2, [r3, #0]
 800a44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a44c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	f383 8810 	msr	PRIMASK, r3
}
 800a454:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a456:	f3ef 8310 	mrs	r3, PRIMASK
 800a45a:	617b      	str	r3, [r7, #20]
  return(result);
 800a45c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a45e:	623b      	str	r3, [r7, #32]
 800a460:	2301      	movs	r3, #1
 800a462:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	f383 8810 	msr	PRIMASK, r3
}
 800a46a:	46c0      	nop			@ (mov r8, r8)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	689a      	ldr	r2, [r3, #8]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4908      	ldr	r1, [pc, #32]	@ (800a498 <UART_EndTxTransfer+0x7c>)
 800a478:	400a      	ands	r2, r1
 800a47a:	609a      	str	r2, [r3, #8]
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	f383 8810 	msr	PRIMASK, r3
}
 800a486:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2288      	movs	r2, #136	@ 0x88
 800a48c:	2120      	movs	r1, #32
 800a48e:	5099      	str	r1, [r3, r2]
}
 800a490:	46c0      	nop			@ (mov r8, r8)
 800a492:	46bd      	mov	sp, r7
 800a494:	b00a      	add	sp, #40	@ 0x28
 800a496:	bd80      	pop	{r7, pc}
 800a498:	ff7fffff 	.word	0xff7fffff

0800a49c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b08e      	sub	sp, #56	@ 0x38
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a4a4:	f3ef 8310 	mrs	r3, PRIMASK
 800a4a8:	617b      	str	r3, [r7, #20]
  return(result);
 800a4aa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	f383 8810 	msr	PRIMASK, r3
}
 800a4b8:	46c0      	nop			@ (mov r8, r8)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4926      	ldr	r1, [pc, #152]	@ (800a560 <UART_EndRxTransfer+0xc4>)
 800a4c6:	400a      	ands	r2, r1
 800a4c8:	601a      	str	r2, [r3, #0]
 800a4ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	f383 8810 	msr	PRIMASK, r3
}
 800a4d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a4d6:	f3ef 8310 	mrs	r3, PRIMASK
 800a4da:	623b      	str	r3, [r7, #32]
  return(result);
 800a4dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4de:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e6:	f383 8810 	msr	PRIMASK, r3
}
 800a4ea:	46c0      	nop			@ (mov r8, r8)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	689a      	ldr	r2, [r3, #8]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	491b      	ldr	r1, [pc, #108]	@ (800a564 <UART_EndRxTransfer+0xc8>)
 800a4f8:	400a      	ands	r2, r1
 800a4fa:	609a      	str	r2, [r3, #8]
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a502:	f383 8810 	msr	PRIMASK, r3
}
 800a506:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d118      	bne.n	800a542 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a510:	f3ef 8310 	mrs	r3, PRIMASK
 800a514:	60bb      	str	r3, [r7, #8]
  return(result);
 800a516:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a518:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a51a:	2301      	movs	r3, #1
 800a51c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f383 8810 	msr	PRIMASK, r3
}
 800a524:	46c0      	nop			@ (mov r8, r8)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2110      	movs	r1, #16
 800a532:	438a      	bics	r2, r1
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a538:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	f383 8810 	msr	PRIMASK, r3
}
 800a540:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	228c      	movs	r2, #140	@ 0x8c
 800a546:	2120      	movs	r1, #32
 800a548:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a556:	46c0      	nop			@ (mov r8, r8)
 800a558:	46bd      	mov	sp, r7
 800a55a:	b00e      	add	sp, #56	@ 0x38
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	46c0      	nop			@ (mov r8, r8)
 800a560:	fffffedf 	.word	0xfffffedf
 800a564:	effffffe 	.word	0xeffffffe

0800a568 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b08c      	sub	sp, #48	@ 0x30
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a574:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2220      	movs	r2, #32
 800a57e:	4013      	ands	r3, r2
 800a580:	d135      	bne.n	800a5ee <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800a582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a584:	2256      	movs	r2, #86	@ 0x56
 800a586:	2100      	movs	r1, #0
 800a588:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a58a:	f3ef 8310 	mrs	r3, PRIMASK
 800a58e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a590:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a592:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a594:	2301      	movs	r3, #1
 800a596:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	f383 8810 	msr	PRIMASK, r3
}
 800a59e:	46c0      	nop			@ (mov r8, r8)
 800a5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	689a      	ldr	r2, [r3, #8]
 800a5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2180      	movs	r1, #128	@ 0x80
 800a5ac:	438a      	bics	r2, r1
 800a5ae:	609a      	str	r2, [r3, #8]
 800a5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	f383 8810 	msr	PRIMASK, r3
}
 800a5ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a5bc:	f3ef 8310 	mrs	r3, PRIMASK
 800a5c0:	61bb      	str	r3, [r7, #24]
  return(result);
 800a5c2:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	f383 8810 	msr	PRIMASK, r3
}
 800a5d0:	46c0      	nop			@ (mov r8, r8)
 800a5d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2140      	movs	r1, #64	@ 0x40
 800a5de:	430a      	orrs	r2, r1
 800a5e0:	601a      	str	r2, [r3, #0]
 800a5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5e6:	6a3b      	ldr	r3, [r7, #32]
 800a5e8:	f383 8810 	msr	PRIMASK, r3
}
 800a5ec:	e004      	b.n	800a5f8 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800a5ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5f0:	0018      	movs	r0, r3
 800a5f2:	f7f7 fbc5 	bl	8001d80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5f6:	46c0      	nop			@ (mov r8, r8)
 800a5f8:	46c0      	nop			@ (mov r8, r8)
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	b00c      	add	sp, #48	@ 0x30
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a60c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	0018      	movs	r0, r3
 800a612:	f7ff faf9 	bl	8009c08 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a616:	46c0      	nop			@ (mov r8, r8)
 800a618:	46bd      	mov	sp, r7
 800a61a:	b004      	add	sp, #16
 800a61c:	bd80      	pop	{r7, pc}
	...

0800a620 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b094      	sub	sp, #80	@ 0x50
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a62c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2220      	movs	r2, #32
 800a636:	4013      	ands	r3, r2
 800a638:	d16f      	bne.n	800a71a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800a63a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a63c:	225e      	movs	r2, #94	@ 0x5e
 800a63e:	2100      	movs	r1, #0
 800a640:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a642:	f3ef 8310 	mrs	r3, PRIMASK
 800a646:	61bb      	str	r3, [r7, #24]
  return(result);
 800a648:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a64a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a64c:	2301      	movs	r3, #1
 800a64e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	f383 8810 	msr	PRIMASK, r3
}
 800a656:	46c0      	nop			@ (mov r8, r8)
 800a658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	493a      	ldr	r1, [pc, #232]	@ (800a74c <UART_DMAReceiveCplt+0x12c>)
 800a664:	400a      	ands	r2, r1
 800a666:	601a      	str	r2, [r3, #0]
 800a668:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a66a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a66c:	6a3b      	ldr	r3, [r7, #32]
 800a66e:	f383 8810 	msr	PRIMASK, r3
}
 800a672:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a674:	f3ef 8310 	mrs	r3, PRIMASK
 800a678:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a67c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a67e:	2301      	movs	r3, #1
 800a680:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a684:	f383 8810 	msr	PRIMASK, r3
}
 800a688:	46c0      	nop			@ (mov r8, r8)
 800a68a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	689a      	ldr	r2, [r3, #8]
 800a690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2101      	movs	r1, #1
 800a696:	438a      	bics	r2, r1
 800a698:	609a      	str	r2, [r3, #8]
 800a69a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a69c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a69e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6a0:	f383 8810 	msr	PRIMASK, r3
}
 800a6a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a6a6:	f3ef 8310 	mrs	r3, PRIMASK
 800a6aa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6ae:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b6:	f383 8810 	msr	PRIMASK, r3
}
 800a6ba:	46c0      	nop			@ (mov r8, r8)
 800a6bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	689a      	ldr	r2, [r3, #8]
 800a6c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2140      	movs	r1, #64	@ 0x40
 800a6c8:	438a      	bics	r2, r1
 800a6ca:	609a      	str	r2, [r3, #8]
 800a6cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d2:	f383 8810 	msr	PRIMASK, r3
}
 800a6d6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a6d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6da:	228c      	movs	r2, #140	@ 0x8c
 800a6dc:	2120      	movs	r1, #32
 800a6de:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d118      	bne.n	800a71a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a6e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a6ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	f383 8810 	msr	PRIMASK, r3
}
 800a6fc:	46c0      	nop			@ (mov r8, r8)
 800a6fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2110      	movs	r1, #16
 800a70a:	438a      	bics	r2, r1
 800a70c:	601a      	str	r2, [r3, #0]
 800a70e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a710:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f383 8810 	msr	PRIMASK, r3
}
 800a718:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a71a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a71c:	2200      	movs	r2, #0
 800a71e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a724:	2b01      	cmp	r3, #1
 800a726:	d108      	bne.n	800a73a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a72a:	225c      	movs	r2, #92	@ 0x5c
 800a72c:	5a9a      	ldrh	r2, [r3, r2]
 800a72e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a730:	0011      	movs	r1, r2
 800a732:	0018      	movs	r0, r3
 800a734:	f7f7 fa7a 	bl	8001c2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a738:	e003      	b.n	800a742 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800a73a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a73c:	0018      	movs	r0, r3
 800a73e:	f7ff fa6b 	bl	8009c18 <HAL_UART_RxCpltCallback>
}
 800a742:	46c0      	nop			@ (mov r8, r8)
 800a744:	46bd      	mov	sp, r7
 800a746:	b014      	add	sp, #80	@ 0x50
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	46c0      	nop			@ (mov r8, r8)
 800a74c:	fffffeff 	.word	0xfffffeff

0800a750 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a75c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2201      	movs	r2, #1
 800a762:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d10a      	bne.n	800a782 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	225c      	movs	r2, #92	@ 0x5c
 800a770:	5a9b      	ldrh	r3, [r3, r2]
 800a772:	085b      	lsrs	r3, r3, #1
 800a774:	b29a      	uxth	r2, r3
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	0011      	movs	r1, r2
 800a77a:	0018      	movs	r0, r3
 800a77c:	f7f7 fa56 	bl	8001c2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a780:	e003      	b.n	800a78a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	0018      	movs	r0, r3
 800a786:	f7ff fa4f 	bl	8009c28 <HAL_UART_RxHalfCpltCallback>
}
 800a78a:	46c0      	nop			@ (mov r8, r8)
 800a78c:	46bd      	mov	sp, r7
 800a78e:	b004      	add	sp, #16
 800a790:	bd80      	pop	{r7, pc}

0800a792 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b086      	sub	sp, #24
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a79e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	2288      	movs	r2, #136	@ 0x88
 800a7a4:	589b      	ldr	r3, [r3, r2]
 800a7a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	228c      	movs	r2, #140	@ 0x8c
 800a7ac:	589b      	ldr	r3, [r3, r2]
 800a7ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	2280      	movs	r2, #128	@ 0x80
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	2b80      	cmp	r3, #128	@ 0x80
 800a7bc:	d10a      	bne.n	800a7d4 <UART_DMAError+0x42>
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	2b21      	cmp	r3, #33	@ 0x21
 800a7c2:	d107      	bne.n	800a7d4 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	2256      	movs	r2, #86	@ 0x56
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	0018      	movs	r0, r3
 800a7d0:	f7ff fe24 	bl	800a41c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	2240      	movs	r2, #64	@ 0x40
 800a7dc:	4013      	ands	r3, r2
 800a7de:	2b40      	cmp	r3, #64	@ 0x40
 800a7e0:	d10a      	bne.n	800a7f8 <UART_DMAError+0x66>
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2b22      	cmp	r3, #34	@ 0x22
 800a7e6:	d107      	bne.n	800a7f8 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	225e      	movs	r2, #94	@ 0x5e
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	0018      	movs	r0, r3
 800a7f4:	f7ff fe52 	bl	800a49c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	2290      	movs	r2, #144	@ 0x90
 800a7fc:	589b      	ldr	r3, [r3, r2]
 800a7fe:	2210      	movs	r2, #16
 800a800:	431a      	orrs	r2, r3
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	2190      	movs	r1, #144	@ 0x90
 800a806:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	0018      	movs	r0, r3
 800a80c:	f7f7 fac6 	bl	8001d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a810:	46c0      	nop			@ (mov r8, r8)
 800a812:	46bd      	mov	sp, r7
 800a814:	b006      	add	sp, #24
 800a816:	bd80      	pop	{r7, pc}

0800a818 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a824:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	225e      	movs	r2, #94	@ 0x5e
 800a82a:	2100      	movs	r1, #0
 800a82c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2256      	movs	r2, #86	@ 0x56
 800a832:	2100      	movs	r1, #0
 800a834:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	0018      	movs	r0, r3
 800a83a:	f7f7 faaf 	bl	8001d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a83e:	46c0      	nop			@ (mov r8, r8)
 800a840:	46bd      	mov	sp, r7
 800a842:	b004      	add	sp, #16
 800a844:	bd80      	pop	{r7, pc}

0800a846 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a846:	b580      	push	{r7, lr}
 800a848:	b086      	sub	sp, #24
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a84e:	f3ef 8310 	mrs	r3, PRIMASK
 800a852:	60bb      	str	r3, [r7, #8]
  return(result);
 800a854:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a856:	617b      	str	r3, [r7, #20]
 800a858:	2301      	movs	r3, #1
 800a85a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f383 8810 	msr	PRIMASK, r3
}
 800a862:	46c0      	nop			@ (mov r8, r8)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2140      	movs	r1, #64	@ 0x40
 800a870:	438a      	bics	r2, r1
 800a872:	601a      	str	r2, [r3, #0]
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	f383 8810 	msr	PRIMASK, r3
}
 800a87e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2288      	movs	r2, #136	@ 0x88
 800a884:	2120      	movs	r1, #32
 800a886:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	0018      	movs	r0, r3
 800a892:	f7f7 fa75 	bl	8001d80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a896:	46c0      	nop			@ (mov r8, r8)
 800a898:	46bd      	mov	sp, r7
 800a89a:	b006      	add	sp, #24
 800a89c:	bd80      	pop	{r7, pc}
	...

0800a8a0 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d101      	bne.n	800a8b8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e05d      	b.n	800a974 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2288      	movs	r2, #136	@ 0x88
 800a8bc:	589b      	ldr	r3, [r3, r2]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d107      	bne.n	800a8d2 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2284      	movs	r2, #132	@ 0x84
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	0018      	movs	r0, r3
 800a8ce:	f7f8 f97f 	bl	8002bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2288      	movs	r2, #136	@ 0x88
 800a8d6:	2124      	movs	r1, #36	@ 0x24
 800a8d8:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2101      	movs	r1, #1
 800a8e6:	438a      	bics	r2, r1
 800a8e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d003      	beq.n	800a8fa <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	0018      	movs	r0, r3
 800a8f6:	f7ff fb1d 	bl	8009f34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	0018      	movs	r0, r3
 800a8fe:	f7ff f99b 	bl	8009c38 <UART_SetConfig>
 800a902:	0003      	movs	r3, r0
 800a904:	2b01      	cmp	r3, #1
 800a906:	d101      	bne.n	800a90c <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e033      	b.n	800a974 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	689a      	ldr	r2, [r3, #8]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2180      	movs	r1, #128	@ 0x80
 800a918:	01c9      	lsls	r1, r1, #7
 800a91a:	430a      	orrs	r2, r1
 800a91c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	4a15      	ldr	r2, [pc, #84]	@ (800a97c <HAL_RS485Ex_Init+0xdc>)
 800a926:	4013      	ands	r3, r2
 800a928:	0019      	movs	r1, r3
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	430a      	orrs	r2, r1
 800a932:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	055b      	lsls	r3, r3, #21
 800a938:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	041b      	lsls	r3, r3, #16
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	4313      	orrs	r3, r2
 800a942:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a0d      	ldr	r2, [pc, #52]	@ (800a980 <HAL_RS485Ex_Init+0xe0>)
 800a94c:	4013      	ands	r3, r2
 800a94e:	0019      	movs	r1, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	697a      	ldr	r2, [r7, #20]
 800a956:	430a      	orrs	r2, r1
 800a958:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2101      	movs	r1, #1
 800a966:	430a      	orrs	r2, r1
 800a968:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	0018      	movs	r0, r3
 800a96e:	f7ff fb95 	bl	800a09c <UART_CheckIdleState>
 800a972:	0003      	movs	r3, r0
}
 800a974:	0018      	movs	r0, r3
 800a976:	46bd      	mov	sp, r7
 800a978:	b006      	add	sp, #24
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	ffff7fff 	.word	0xffff7fff
 800a980:	fc00ffff 	.word	0xfc00ffff

0800a984 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a98c:	46c0      	nop			@ (mov r8, r8)
 800a98e:	46bd      	mov	sp, r7
 800a990:	b002      	add	sp, #8
 800a992:	bd80      	pop	{r7, pc}

0800a994 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a99c:	46c0      	nop			@ (mov r8, r8)
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	b002      	add	sp, #8
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a9ac:	46c0      	nop			@ (mov r8, r8)
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	b002      	add	sp, #8
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2284      	movs	r2, #132	@ 0x84
 800a9c0:	5c9b      	ldrb	r3, [r3, r2]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d101      	bne.n	800a9ca <HAL_UARTEx_DisableFifoMode+0x16>
 800a9c6:	2302      	movs	r3, #2
 800a9c8:	e027      	b.n	800aa1a <HAL_UARTEx_DisableFifoMode+0x66>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2284      	movs	r2, #132	@ 0x84
 800a9ce:	2101      	movs	r1, #1
 800a9d0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2288      	movs	r2, #136	@ 0x88
 800a9d6:	2124      	movs	r1, #36	@ 0x24
 800a9d8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2101      	movs	r1, #1
 800a9ee:	438a      	bics	r2, r1
 800a9f0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	4a0b      	ldr	r2, [pc, #44]	@ (800aa24 <HAL_UARTEx_DisableFifoMode+0x70>)
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2288      	movs	r2, #136	@ 0x88
 800aa0c:	2120      	movs	r1, #32
 800aa0e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2284      	movs	r2, #132	@ 0x84
 800aa14:	2100      	movs	r1, #0
 800aa16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	0018      	movs	r0, r3
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	b004      	add	sp, #16
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	46c0      	nop			@ (mov r8, r8)
 800aa24:	dfffffff 	.word	0xdfffffff

0800aa28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2284      	movs	r2, #132	@ 0x84
 800aa36:	5c9b      	ldrb	r3, [r3, r2]
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d101      	bne.n	800aa40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aa3c:	2302      	movs	r3, #2
 800aa3e:	e02e      	b.n	800aa9e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2284      	movs	r2, #132	@ 0x84
 800aa44:	2101      	movs	r1, #1
 800aa46:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2288      	movs	r2, #136	@ 0x88
 800aa4c:	2124      	movs	r1, #36	@ 0x24
 800aa4e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2101      	movs	r1, #1
 800aa64:	438a      	bics	r2, r1
 800aa66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	00db      	lsls	r3, r3, #3
 800aa70:	08d9      	lsrs	r1, r3, #3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	683a      	ldr	r2, [r7, #0]
 800aa78:	430a      	orrs	r2, r1
 800aa7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	0018      	movs	r0, r3
 800aa80:	f000 f8bc 	bl	800abfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2288      	movs	r2, #136	@ 0x88
 800aa90:	2120      	movs	r1, #32
 800aa92:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2284      	movs	r2, #132	@ 0x84
 800aa98:	2100      	movs	r1, #0
 800aa9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	0018      	movs	r0, r3
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	b004      	add	sp, #16
 800aaa4:	bd80      	pop	{r7, pc}
	...

0800aaa8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2284      	movs	r2, #132	@ 0x84
 800aab6:	5c9b      	ldrb	r3, [r3, r2]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d101      	bne.n	800aac0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aabc:	2302      	movs	r3, #2
 800aabe:	e02f      	b.n	800ab20 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2284      	movs	r2, #132	@ 0x84
 800aac4:	2101      	movs	r1, #1
 800aac6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2288      	movs	r2, #136	@ 0x88
 800aacc:	2124      	movs	r1, #36	@ 0x24
 800aace:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2101      	movs	r1, #1
 800aae4:	438a      	bics	r2, r1
 800aae6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	4a0e      	ldr	r2, [pc, #56]	@ (800ab28 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	0019      	movs	r1, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	683a      	ldr	r2, [r7, #0]
 800aafa:	430a      	orrs	r2, r1
 800aafc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	0018      	movs	r0, r3
 800ab02:	f000 f87b 	bl	800abfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2288      	movs	r2, #136	@ 0x88
 800ab12:	2120      	movs	r1, #32
 800ab14:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2284      	movs	r2, #132	@ 0x84
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab1e:	2300      	movs	r3, #0
}
 800ab20:	0018      	movs	r0, r3
 800ab22:	46bd      	mov	sp, r7
 800ab24:	b004      	add	sp, #16
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	f1ffffff 	.word	0xf1ffffff

0800ab2c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab2c:	b5b0      	push	{r4, r5, r7, lr}
 800ab2e:	b08a      	sub	sp, #40	@ 0x28
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	1dbb      	adds	r3, r7, #6
 800ab38:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	228c      	movs	r2, #140	@ 0x8c
 800ab3e:	589b      	ldr	r3, [r3, r2]
 800ab40:	2b20      	cmp	r3, #32
 800ab42:	d156      	bne.n	800abf2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d003      	beq.n	800ab52 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800ab4a:	1dbb      	adds	r3, r7, #6
 800ab4c:	881b      	ldrh	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d101      	bne.n	800ab56 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e04e      	b.n	800abf4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	689a      	ldr	r2, [r3, #8]
 800ab5a:	2380      	movs	r3, #128	@ 0x80
 800ab5c:	015b      	lsls	r3, r3, #5
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d109      	bne.n	800ab76 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d105      	bne.n	800ab76 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	4013      	ands	r3, r2
 800ab70:	d001      	beq.n	800ab76 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	e03e      	b.n	800abf4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800ab82:	2527      	movs	r5, #39	@ 0x27
 800ab84:	197c      	adds	r4, r7, r5
 800ab86:	1dbb      	adds	r3, r7, #6
 800ab88:	881a      	ldrh	r2, [r3, #0]
 800ab8a:	68b9      	ldr	r1, [r7, #8]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	0018      	movs	r0, r3
 800ab90:	f7ff fb9e 	bl	800a2d0 <UART_Start_Receive_DMA>
 800ab94:	0003      	movs	r3, r0
 800ab96:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800ab98:	197b      	adds	r3, r7, r5
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d124      	bne.n	800abea <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d11c      	bne.n	800abe2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2210      	movs	r2, #16
 800abae:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800abb0:	f3ef 8310 	mrs	r3, PRIMASK
 800abb4:	617b      	str	r3, [r7, #20]
  return(result);
 800abb6:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abb8:	623b      	str	r3, [r7, #32]
 800abba:	2301      	movs	r3, #1
 800abbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	f383 8810 	msr	PRIMASK, r3
}
 800abc4:	46c0      	nop			@ (mov r8, r8)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2110      	movs	r1, #16
 800abd2:	430a      	orrs	r2, r1
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	6a3b      	ldr	r3, [r7, #32]
 800abd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	f383 8810 	msr	PRIMASK, r3
}
 800abe0:	e003      	b.n	800abea <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800abe2:	2327      	movs	r3, #39	@ 0x27
 800abe4:	18fb      	adds	r3, r7, r3
 800abe6:	2201      	movs	r2, #1
 800abe8:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800abea:	2327      	movs	r3, #39	@ 0x27
 800abec:	18fb      	adds	r3, r7, r3
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	e000      	b.n	800abf4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800abf2:	2302      	movs	r3, #2
  }
}
 800abf4:	0018      	movs	r0, r3
 800abf6:	46bd      	mov	sp, r7
 800abf8:	b00a      	add	sp, #40	@ 0x28
 800abfa:	bdb0      	pop	{r4, r5, r7, pc}

0800abfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800abfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d108      	bne.n	800ac1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	226a      	movs	r2, #106	@ 0x6a
 800ac10:	2101      	movs	r1, #1
 800ac12:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2268      	movs	r2, #104	@ 0x68
 800ac18:	2101      	movs	r1, #1
 800ac1a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ac1c:	e043      	b.n	800aca6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ac1e:	260f      	movs	r6, #15
 800ac20:	19bb      	adds	r3, r7, r6
 800ac22:	2208      	movs	r2, #8
 800ac24:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac26:	200e      	movs	r0, #14
 800ac28:	183b      	adds	r3, r7, r0
 800ac2a:	2208      	movs	r2, #8
 800ac2c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	0e5b      	lsrs	r3, r3, #25
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	240d      	movs	r4, #13
 800ac3a:	193b      	adds	r3, r7, r4
 800ac3c:	2107      	movs	r1, #7
 800ac3e:	400a      	ands	r2, r1
 800ac40:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	0f5b      	lsrs	r3, r3, #29
 800ac4a:	b2da      	uxtb	r2, r3
 800ac4c:	250c      	movs	r5, #12
 800ac4e:	197b      	adds	r3, r7, r5
 800ac50:	2107      	movs	r1, #7
 800ac52:	400a      	ands	r2, r1
 800ac54:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac56:	183b      	adds	r3, r7, r0
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	197a      	adds	r2, r7, r5
 800ac5c:	7812      	ldrb	r2, [r2, #0]
 800ac5e:	4914      	ldr	r1, [pc, #80]	@ (800acb0 <UARTEx_SetNbDataToProcess+0xb4>)
 800ac60:	5c8a      	ldrb	r2, [r1, r2]
 800ac62:	435a      	muls	r2, r3
 800ac64:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac66:	197b      	adds	r3, r7, r5
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	4a12      	ldr	r2, [pc, #72]	@ (800acb4 <UARTEx_SetNbDataToProcess+0xb8>)
 800ac6c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac6e:	0019      	movs	r1, r3
 800ac70:	f7f5 fad4 	bl	800021c <__divsi3>
 800ac74:	0003      	movs	r3, r0
 800ac76:	b299      	uxth	r1, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	226a      	movs	r2, #106	@ 0x6a
 800ac7c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac7e:	19bb      	adds	r3, r7, r6
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	193a      	adds	r2, r7, r4
 800ac84:	7812      	ldrb	r2, [r2, #0]
 800ac86:	490a      	ldr	r1, [pc, #40]	@ (800acb0 <UARTEx_SetNbDataToProcess+0xb4>)
 800ac88:	5c8a      	ldrb	r2, [r1, r2]
 800ac8a:	435a      	muls	r2, r3
 800ac8c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac8e:	193b      	adds	r3, r7, r4
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	4a08      	ldr	r2, [pc, #32]	@ (800acb4 <UARTEx_SetNbDataToProcess+0xb8>)
 800ac94:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac96:	0019      	movs	r1, r3
 800ac98:	f7f5 fac0 	bl	800021c <__divsi3>
 800ac9c:	0003      	movs	r3, r0
 800ac9e:	b299      	uxth	r1, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2268      	movs	r2, #104	@ 0x68
 800aca4:	5299      	strh	r1, [r3, r2]
}
 800aca6:	46c0      	nop			@ (mov r8, r8)
 800aca8:	46bd      	mov	sp, r7
 800acaa:	b005      	add	sp, #20
 800acac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acae:	46c0      	nop			@ (mov r8, r8)
 800acb0:	0800b01c 	.word	0x0800b01c
 800acb4:	0800b024 	.word	0x0800b024

0800acb8 <memset>:
 800acb8:	0003      	movs	r3, r0
 800acba:	1882      	adds	r2, r0, r2
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d100      	bne.n	800acc2 <memset+0xa>
 800acc0:	4770      	bx	lr
 800acc2:	7019      	strb	r1, [r3, #0]
 800acc4:	3301      	adds	r3, #1
 800acc6:	e7f9      	b.n	800acbc <memset+0x4>

0800acc8 <__libc_init_array>:
 800acc8:	b570      	push	{r4, r5, r6, lr}
 800acca:	2600      	movs	r6, #0
 800accc:	4c0c      	ldr	r4, [pc, #48]	@ (800ad00 <__libc_init_array+0x38>)
 800acce:	4d0d      	ldr	r5, [pc, #52]	@ (800ad04 <__libc_init_array+0x3c>)
 800acd0:	1b64      	subs	r4, r4, r5
 800acd2:	10a4      	asrs	r4, r4, #2
 800acd4:	42a6      	cmp	r6, r4
 800acd6:	d109      	bne.n	800acec <__libc_init_array+0x24>
 800acd8:	2600      	movs	r6, #0
 800acda:	f000 f823 	bl	800ad24 <_init>
 800acde:	4c0a      	ldr	r4, [pc, #40]	@ (800ad08 <__libc_init_array+0x40>)
 800ace0:	4d0a      	ldr	r5, [pc, #40]	@ (800ad0c <__libc_init_array+0x44>)
 800ace2:	1b64      	subs	r4, r4, r5
 800ace4:	10a4      	asrs	r4, r4, #2
 800ace6:	42a6      	cmp	r6, r4
 800ace8:	d105      	bne.n	800acf6 <__libc_init_array+0x2e>
 800acea:	bd70      	pop	{r4, r5, r6, pc}
 800acec:	00b3      	lsls	r3, r6, #2
 800acee:	58eb      	ldr	r3, [r5, r3]
 800acf0:	4798      	blx	r3
 800acf2:	3601      	adds	r6, #1
 800acf4:	e7ee      	b.n	800acd4 <__libc_init_array+0xc>
 800acf6:	00b3      	lsls	r3, r6, #2
 800acf8:	58eb      	ldr	r3, [r5, r3]
 800acfa:	4798      	blx	r3
 800acfc:	3601      	adds	r6, #1
 800acfe:	e7f2      	b.n	800ace6 <__libc_init_array+0x1e>
 800ad00:	0800b02c 	.word	0x0800b02c
 800ad04:	0800b02c 	.word	0x0800b02c
 800ad08:	0800b030 	.word	0x0800b030
 800ad0c:	0800b02c 	.word	0x0800b02c

0800ad10 <memcpy>:
 800ad10:	2300      	movs	r3, #0
 800ad12:	b510      	push	{r4, lr}
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d100      	bne.n	800ad1a <memcpy+0xa>
 800ad18:	bd10      	pop	{r4, pc}
 800ad1a:	5ccc      	ldrb	r4, [r1, r3]
 800ad1c:	54c4      	strb	r4, [r0, r3]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	e7f8      	b.n	800ad14 <memcpy+0x4>
	...

0800ad24 <_init>:
 800ad24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad26:	46c0      	nop			@ (mov r8, r8)
 800ad28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad2a:	bc08      	pop	{r3}
 800ad2c:	469e      	mov	lr, r3
 800ad2e:	4770      	bx	lr

0800ad30 <_fini>:
 800ad30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad32:	46c0      	nop			@ (mov r8, r8)
 800ad34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad36:	bc08      	pop	{r3}
 800ad38:	469e      	mov	lr, r3
 800ad3a:	4770      	bx	lr
