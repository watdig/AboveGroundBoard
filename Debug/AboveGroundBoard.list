
AboveGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000593c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  080059fc  080059fc  000069fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ce0  08005ce0  0000702c  2**0
                  CONTENTS
  4 .ARM          00000000  08005ce0  08005ce0  0000702c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ce0  08005ce0  0000702c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ce0  08005ce0  00006ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ce4  08005ce4  00006ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08005ce8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  2000002c  08005d14  0000702c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  08005d14  00007674  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ce5  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255f  00000000  00000000  00017d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0001a298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af9  00000000  00000000  0001b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001687c  00000000  00000000  0001bb99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012375  00000000  00000000  00032415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008df78  00000000  00000000  0004478a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2702  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032e4  00000000  00000000  000d2748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000d5a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000002c 	.word	0x2000002c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080059e4 	.word	0x080059e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000030 	.word	0x20000030
 8000104:	080059e4 	.word	0x080059e4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]

}
 80003fc:	46c0      	nop			@ (mov r8, r8)
 80003fe:	46bd      	mov	sp, r7
 8000400:	b002      	add	sp, #8
 8000402:	bd80      	pop	{r7, pc}

08000404 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]

}
 800040c:	46c0      	nop			@ (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b002      	add	sp, #8
 8000412:	bd80      	pop	{r7, pc}

08000414 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]

}
 800041c:	46c0      	nop			@ (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b002      	add	sp, #8
 8000422:	bd80      	pop	{r7, pc}

08000424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int8_t modbus_status = HAL_OK;
 800042a:	1dfb      	adds	r3, r7, #7
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
	uint8_t modbus_tx_len = 0;
 8000430:	1cbb      	adds	r3, r7, #2
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000436:	f001 fd26 	bl	8001e86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043a:	f000 f9b5 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800043e:	f000 fb3b 	bl	8000ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000442:	f000 fb0b 	bl	8000a5c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000446:	f000 fab9 	bl	80009bc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800044a:	f000 f9eb 	bl	8000824 <MX_ADC1_Init>
  MX_I2C1_Init();
 800044e:	f000 fa75 	bl	800093c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)(&holding_register_database[ADC_0]), 3) != HAL_OK)
 8000452:	49ce      	ldr	r1, [pc, #824]	@ (800078c <main+0x368>)
 8000454:	4bce      	ldr	r3, [pc, #824]	@ (8000790 <main+0x36c>)
 8000456:	2203      	movs	r2, #3
 8000458:	0018      	movs	r0, r3
 800045a:	f002 f8a3 	bl	80025a4 <HAL_ADC_Start_DMA>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <main+0x42>
  {
	  Error_Handler();
 8000462:	f000 fbcd 	bl	8000c00 <Error_Handler>
	  	// uint16_t distance is the distance in millimeters.
		// statInfo_t_VL53L0X distanceStr is the statistics read from the sensor.
//		distance = readRangeSingleMillimeters(&distanceStr);

	    // Update the GPIO_READ register
		GPIO_PinState oil_high = HAL_GPIO_ReadPin(Oil_High_GPIO_Port, Oil_High_Pin);
 8000466:	1d7c      	adds	r4, r7, #5
 8000468:	2380      	movs	r3, #128	@ 0x80
 800046a:	021a      	lsls	r2, r3, #8
 800046c:	23a0      	movs	r3, #160	@ 0xa0
 800046e:	05db      	lsls	r3, r3, #23
 8000470:	0011      	movs	r1, r2
 8000472:	0018      	movs	r0, r3
 8000474:	f003 fa66 	bl	8003944 <HAL_GPIO_ReadPin>
 8000478:	0003      	movs	r3, r0
 800047a:	7023      	strb	r3, [r4, #0]
		GPIO_PinState oil_low = HAL_GPIO_ReadPin(Oil_Low_GPIO_Port, Oil_Low_Pin);
 800047c:	1d3c      	adds	r4, r7, #4
 800047e:	4bc5      	ldr	r3, [pc, #788]	@ (8000794 <main+0x370>)
 8000480:	2101      	movs	r1, #1
 8000482:	0018      	movs	r0, r3
 8000484:	f003 fa5e 	bl	8003944 <HAL_GPIO_ReadPin>
 8000488:	0003      	movs	r3, r0
 800048a:	7023      	strb	r3, [r4, #0]
		GPIO_PinState oil_estop = HAL_GPIO_ReadPin(Oil_E_Stop_GPIO_Port, Oil_E_Stop_Pin);
 800048c:	1cfc      	adds	r4, r7, #3
 800048e:	4bc1      	ldr	r3, [pc, #772]	@ (8000794 <main+0x370>)
 8000490:	2102      	movs	r1, #2
 8000492:	0018      	movs	r0, r3
 8000494:	f003 fa56 	bl	8003944 <HAL_GPIO_ReadPin>
 8000498:	0003      	movs	r3, r0
 800049a:	7023      	strb	r3, [r4, #0]

		holding_register_database[GPIO_READ] = ((oil_high << OIL_HIGH) | (oil_low << OIL_LOW) | (oil_estop << OIL_ESTOP));
 800049c:	1d7b      	adds	r3, r7, #5
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	b21a      	sxth	r2, r3
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	b21b      	sxth	r3, r3
 80004aa:	4313      	orrs	r3, r2
 80004ac:	b21a      	sxth	r2, r3
 80004ae:	1cfb      	adds	r3, r7, #3
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	b21b      	sxth	r3, r3
 80004b6:	4313      	orrs	r3, r2
 80004b8:	b21b      	sxth	r3, r3
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	4bb6      	ldr	r3, [pc, #728]	@ (8000798 <main+0x374>)
 80004be:	82da      	strh	r2, [r3, #22]

		if(prev_gpio_write_register != holding_register_database[GPIO_WRITE])
 80004c0:	4bb5      	ldr	r3, [pc, #724]	@ (8000798 <main+0x374>)
 80004c2:	8b1a      	ldrh	r2, [r3, #24]
 80004c4:	4bb5      	ldr	r3, [pc, #724]	@ (800079c <main+0x378>)
 80004c6:	881b      	ldrh	r3, [r3, #0]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d058      	beq.n	800057e <main+0x15a>
		{
			if((prev_gpio_write_register & MCU_DVA_MASK_A) != (holding_register_database[GPIO_WRITE] & MCU_DVA_MASK_A))
 80004cc:	4bb2      	ldr	r3, [pc, #712]	@ (8000798 <main+0x374>)
 80004ce:	8b1a      	ldrh	r2, [r3, #24]
 80004d0:	4bb2      	ldr	r3, [pc, #712]	@ (800079c <main+0x378>)
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	4053      	eors	r3, r2
 80004d6:	b29b      	uxth	r3, r3
 80004d8:	001a      	movs	r2, r3
 80004da:	2301      	movs	r3, #1
 80004dc:	4013      	ands	r3, r2
 80004de:	d00a      	beq.n	80004f6 <main+0xd2>
			{
				HAL_GPIO_WritePin(MCU_DCV_A_GPIO_Port, MCU_DCV_A_Pin, (holding_register_database[GPIO_WRITE] & MCU_DVA_MASK_A));
 80004e0:	4bad      	ldr	r3, [pc, #692]	@ (8000798 <main+0x374>)
 80004e2:	8b1b      	ldrh	r3, [r3, #24]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	2201      	movs	r2, #1
 80004e8:	4013      	ands	r3, r2
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	48ac      	ldr	r0, [pc, #688]	@ (80007a0 <main+0x37c>)
 80004ee:	001a      	movs	r2, r3
 80004f0:	2101      	movs	r1, #1
 80004f2:	f003 fa44 	bl	800397e <HAL_GPIO_WritePin>
			}
			if((prev_gpio_write_register & MCU_DVA_MASK_B) != (holding_register_database[GPIO_WRITE] & MCU_DVA_MASK_B))
 80004f6:	4ba8      	ldr	r3, [pc, #672]	@ (8000798 <main+0x374>)
 80004f8:	8b1a      	ldrh	r2, [r3, #24]
 80004fa:	4ba8      	ldr	r3, [pc, #672]	@ (800079c <main+0x378>)
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	4053      	eors	r3, r2
 8000500:	b29b      	uxth	r3, r3
 8000502:	001a      	movs	r2, r3
 8000504:	2302      	movs	r3, #2
 8000506:	4013      	ands	r3, r2
 8000508:	d00a      	beq.n	8000520 <main+0xfc>
			{
				HAL_GPIO_WritePin(MCU_DCV_B_GPIO_Port, MCU_DCV_B_Pin, (holding_register_database[GPIO_WRITE] & MCU_DVA_MASK_B));
 800050a:	4ba3      	ldr	r3, [pc, #652]	@ (8000798 <main+0x374>)
 800050c:	8b1b      	ldrh	r3, [r3, #24]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	2202      	movs	r2, #2
 8000512:	4013      	ands	r3, r2
 8000514:	b2db      	uxtb	r3, r3
 8000516:	48a2      	ldr	r0, [pc, #648]	@ (80007a0 <main+0x37c>)
 8000518:	001a      	movs	r2, r3
 800051a:	2102      	movs	r1, #2
 800051c:	f003 fa2f 	bl	800397e <HAL_GPIO_WritePin>
			}
			if((prev_gpio_write_register & HPU_GATE_MASK) != (holding_register_database[GPIO_WRITE] & HPU_GATE_MASK))
 8000520:	4b9d      	ldr	r3, [pc, #628]	@ (8000798 <main+0x374>)
 8000522:	8b1a      	ldrh	r2, [r3, #24]
 8000524:	4b9d      	ldr	r3, [pc, #628]	@ (800079c <main+0x378>)
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	4053      	eors	r3, r2
 800052a:	b29b      	uxth	r3, r3
 800052c:	001a      	movs	r2, r3
 800052e:	2304      	movs	r3, #4
 8000530:	4013      	ands	r3, r2
 8000532:	d00b      	beq.n	800054c <main+0x128>
			{
				HAL_GPIO_WritePin(HPU_Gate_GPIO_Port, HPU_Gate_Pin, (holding_register_database[GPIO_WRITE] & HPU_GATE_MASK));
 8000534:	4b98      	ldr	r3, [pc, #608]	@ (8000798 <main+0x374>)
 8000536:	8b1b      	ldrh	r3, [r3, #24]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2204      	movs	r2, #4
 800053c:	4013      	ands	r3, r2
 800053e:	b2da      	uxtb	r2, r3
 8000540:	2380      	movs	r3, #128	@ 0x80
 8000542:	015b      	lsls	r3, r3, #5
 8000544:	4896      	ldr	r0, [pc, #600]	@ (80007a0 <main+0x37c>)
 8000546:	0019      	movs	r1, r3
 8000548:	f003 fa19 	bl	800397e <HAL_GPIO_WritePin>
			}
			if((prev_gpio_write_register & WATER_SOLINOID_MASK) != (holding_register_database[GPIO_WRITE] & WATER_SOLINOID_MASK))
 800054c:	4b92      	ldr	r3, [pc, #584]	@ (8000798 <main+0x374>)
 800054e:	8b1a      	ldrh	r2, [r3, #24]
 8000550:	4b92      	ldr	r3, [pc, #584]	@ (800079c <main+0x378>)
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	4053      	eors	r3, r2
 8000556:	b29b      	uxth	r3, r3
 8000558:	001a      	movs	r2, r3
 800055a:	2308      	movs	r3, #8
 800055c:	4013      	ands	r3, r2
 800055e:	d00a      	beq.n	8000576 <main+0x152>
			{
				HAL_GPIO_WritePin(Water_Solinoid_GPIO_Port, Water_Solinoid_Pin, (holding_register_database[GPIO_WRITE] & WATER_SOLINOID_MASK));
 8000560:	4b8d      	ldr	r3, [pc, #564]	@ (8000798 <main+0x374>)
 8000562:	8b1b      	ldrh	r3, [r3, #24]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2208      	movs	r2, #8
 8000568:	4013      	ands	r3, r2
 800056a:	b2db      	uxtb	r3, r3
 800056c:	4889      	ldr	r0, [pc, #548]	@ (8000794 <main+0x370>)
 800056e:	001a      	movs	r2, r3
 8000570:	2104      	movs	r1, #4
 8000572:	f003 fa04 	bl	800397e <HAL_GPIO_WritePin>
			}
			prev_gpio_write_register = holding_register_database[GPIO_WRITE];
 8000576:	4b88      	ldr	r3, [pc, #544]	@ (8000798 <main+0x374>)
 8000578:	8b1a      	ldrh	r2, [r3, #24]
 800057a:	4b88      	ldr	r3, [pc, #544]	@ (800079c <main+0x378>)
 800057c:	801a      	strh	r2, [r3, #0]
		}

		// Handle Modbus Communication
		if(modbus_rx())
 800057e:	f000 fc15 	bl	8000dac <modbus_rx>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d100      	bne.n	8000588 <main+0x164>
 8000586:	e091      	b.n	80006ac <main+0x288>
		{
			if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 8000588:	2000      	movs	r0, #0
 800058a:	f001 f883 	bl	8001694 <get_rx_buffer>
 800058e:	0003      	movs	r3, r0
 8000590:	001a      	movs	r2, r3
 8000592:	4b81      	ldr	r3, [pc, #516]	@ (8000798 <main+0x374>)
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	429a      	cmp	r2, r3
 8000598:	d133      	bne.n	8000602 <main+0x1de>
			{
				switch(get_rx_buffer(1))
 800059a:	2001      	movs	r0, #1
 800059c:	f001 f87a 	bl	8001694 <get_rx_buffer>
 80005a0:	0003      	movs	r3, r0
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	d002      	beq.n	80005ac <main+0x188>
 80005a6:	2b10      	cmp	r3, #16
 80005a8:	d008      	beq.n	80005bc <main+0x198>
 80005aa:	e00f      	b.n	80005cc <main+0x1a8>
				{
					case 0x03:
					{
						// Return holding registers
						modbus_status = return_holding_registers(&modbus_tx_len);
 80005ac:	1dfc      	adds	r4, r7, #7
 80005ae:	1cbb      	adds	r3, r7, #2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 fc0d 	bl	8000dd0 <return_holding_registers>
 80005b6:	0003      	movs	r3, r0
 80005b8:	7023      	strb	r3, [r4, #0]
						break;
 80005ba:	e00e      	b.n	80005da <main+0x1b6>
					}
					case 0x10:
					{
						// Write holding registers
						modbus_status = edit_multiple_registers(&modbus_tx_len);
 80005bc:	1dfc      	adds	r4, r7, #7
 80005be:	1cbb      	adds	r3, r7, #2
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fcb1 	bl	8000f28 <edit_multiple_registers>
 80005c6:	0003      	movs	r3, r0
 80005c8:	7023      	strb	r3, [r4, #0]
						break;
 80005ca:	e006      	b.n	80005da <main+0x1b6>
					}
					default:
					{
						modbus_status = modbus_exception(MB_ILLEGAL_FUNCTION);
 80005cc:	1dfc      	adds	r4, r7, #7
 80005ce:	2004      	movs	r0, #4
 80005d0:	f000 fdac 	bl	800112c <modbus_exception>
 80005d4:	0003      	movs	r3, r0
 80005d6:	7023      	strb	r3, [r4, #0]
						break;
 80005d8:	46c0      	nop			@ (mov r8, r8)
					}
				}
				if(modbus_status != 0)
 80005da:	1dfb      	adds	r3, r7, #7
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d04b      	beq.n	800067c <main+0x258>
				{
					holding_register_database[MB_ERRORS] |= 1U << (modbus_status + (MB_FATAL_ERROR - 1));
 80005e4:	4b6c      	ldr	r3, [pc, #432]	@ (8000798 <main+0x374>)
 80005e6:	891a      	ldrh	r2, [r3, #8]
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	b25b      	sxtb	r3, r3
 80005ee:	3314      	adds	r3, #20
 80005f0:	2101      	movs	r1, #1
 80005f2:	4099      	lsls	r1, r3
 80005f4:	000b      	movs	r3, r1
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	4313      	orrs	r3, r2
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	4b66      	ldr	r3, [pc, #408]	@ (8000798 <main+0x374>)
 80005fe:	811a      	strh	r2, [r3, #8]
 8000600:	e03c      	b.n	800067c <main+0x258>
				}
			}
			// Special case where you retrieve the modbus ID
			else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8000602:	2000      	movs	r0, #0
 8000604:	f001 f846 	bl	8001694 <get_rx_buffer>
 8000608:	0003      	movs	r3, r0
 800060a:	2bff      	cmp	r3, #255	@ 0xff
 800060c:	d136      	bne.n	800067c <main+0x258>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 800060e:	2001      	movs	r0, #1
 8000610:	f001 f840 	bl	8001694 <get_rx_buffer>
 8000614:	0003      	movs	r3, r0
			else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8000616:	2b03      	cmp	r3, #3
 8000618:	d130      	bne.n	800067c <main+0x258>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 800061a:	2002      	movs	r0, #2
 800061c:	f001 f83a 	bl	8001694 <get_rx_buffer>
 8000620:	0003      	movs	r3, r0
 8000622:	021c      	lsls	r4, r3, #8
 8000624:	2003      	movs	r0, #3
 8000626:	f001 f835 	bl	8001694 <get_rx_buffer>
 800062a:	0003      	movs	r3, r0
 800062c:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 800062e:	d125      	bne.n	800067c <main+0x258>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 8000630:	2004      	movs	r0, #4
 8000632:	f001 f82f 	bl	8001694 <get_rx_buffer>
 8000636:	0003      	movs	r3, r0
 8000638:	021c      	lsls	r4, r3, #8
 800063a:	2005      	movs	r0, #5
 800063c:	f001 f82a 	bl	8001694 <get_rx_buffer>
 8000640:	0003      	movs	r3, r0
 8000642:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8000644:	2b01      	cmp	r3, #1
 8000646:	d119      	bne.n	800067c <main+0x258>
			{
				modbus_status = return_holding_registers(&modbus_tx_len);
 8000648:	1dfc      	adds	r4, r7, #7
 800064a:	1cbb      	adds	r3, r7, #2
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fbbf 	bl	8000dd0 <return_holding_registers>
 8000652:	0003      	movs	r3, r0
 8000654:	7023      	strb	r3, [r4, #0]
				if(modbus_status != 0)
 8000656:	1dfb      	adds	r3, r7, #7
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b25b      	sxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d00d      	beq.n	800067c <main+0x258>
				{
					holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 8000660:	4b4d      	ldr	r3, [pc, #308]	@ (8000798 <main+0x374>)
 8000662:	891a      	ldrh	r2, [r3, #8]
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b25b      	sxtb	r3, r3
 800066a:	3314      	adds	r3, #20
 800066c:	2101      	movs	r1, #1
 800066e:	4099      	lsls	r1, r3
 8000670:	000b      	movs	r3, r1
 8000672:	b29b      	uxth	r3, r3
 8000674:	4313      	orrs	r3, r2
 8000676:	b29a      	uxth	r2, r3
 8000678:	4b47      	ldr	r3, [pc, #284]	@ (8000798 <main+0x374>)
 800067a:	811a      	strh	r2, [r3, #8]
				}
			}
			modbus_status = modbus_set_rx();
 800067c:	1dfc      	adds	r4, r7, #7
 800067e:	f000 fefd 	bl	800147c <modbus_set_rx>
 8000682:	0003      	movs	r3, r0
 8000684:	7023      	strb	r3, [r4, #0]
			if(modbus_status != 0)
 8000686:	1dfb      	adds	r3, r7, #7
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b25b      	sxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00d      	beq.n	80006ac <main+0x288>
			{
				holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 8000690:	4b41      	ldr	r3, [pc, #260]	@ (8000798 <main+0x374>)
 8000692:	891a      	ldrh	r2, [r3, #8]
 8000694:	1dfb      	adds	r3, r7, #7
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b25b      	sxtb	r3, r3
 800069a:	3314      	adds	r3, #20
 800069c:	2101      	movs	r1, #1
 800069e:	4099      	lsls	r1, r3
 80006a0:	000b      	movs	r3, r1
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	4b3b      	ldr	r3, [pc, #236]	@ (8000798 <main+0x374>)
 80006aa:	811a      	strh	r2, [r3, #8]
			}
		}
		modbus_status = monitor_modbus();
 80006ac:	1dfc      	adds	r4, r7, #7
 80006ae:	f000 ff07 	bl	80014c0 <monitor_modbus>
 80006b2:	0003      	movs	r3, r0
 80006b4:	7023      	strb	r3, [r4, #0]
		if(modbus_status != HAL_OK && modbus_status != HAL_BUSY)
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d061      	beq.n	8000784 <main+0x360>
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d05c      	beq.n	8000784 <main+0x360>
		{
			switch(modbus_status)
 80006ca:	1dfb      	adds	r3, r7, #7
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	2b15      	cmp	r3, #21
 80006d2:	d051      	beq.n	8000778 <main+0x354>
 80006d4:	dd00      	ble.n	80006d8 <main+0x2b4>
 80006d6:	e6c6      	b.n	8000466 <main+0x42>
 80006d8:	2b14      	cmp	r3, #20
 80006da:	d02f      	beq.n	800073c <main+0x318>
 80006dc:	dd00      	ble.n	80006e0 <main+0x2bc>
 80006de:	e6c2      	b.n	8000466 <main+0x42>
 80006e0:	2b12      	cmp	r3, #18
 80006e2:	d151      	bne.n	8000788 <main+0x364>
			{
				case MB_TX_TIMEOUT:
				{
					for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 80006e4:	1dbb      	adds	r3, r7, #6
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	e01f      	b.n	800072c <main+0x308>
					{
						modbus_status = modbus_send(modbus_tx_len);
 80006ec:	1cbb      	adds	r3, r7, #2
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	1dfc      	adds	r4, r7, #7
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 fdfe 	bl	80012f4 <modbus_send>
 80006f8:	0003      	movs	r3, r0
 80006fa:	7023      	strb	r3, [r4, #0]
						if(modbus_status != HAL_OK)
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b25b      	sxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	d00d      	beq.n	8000722 <main+0x2fe>
						{
							holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 8000706:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <main+0x374>)
 8000708:	891a      	ldrh	r2, [r3, #8]
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b25b      	sxtb	r3, r3
 8000710:	3314      	adds	r3, #20
 8000712:	2101      	movs	r1, #1
 8000714:	4099      	lsls	r1, r3
 8000716:	000b      	movs	r3, r1
 8000718:	b29b      	uxth	r3, r3
 800071a:	4313      	orrs	r3, r2
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <main+0x374>)
 8000720:	811a      	strh	r2, [r3, #8]
					for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 8000722:	1dbb      	adds	r3, r7, #6
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	1dbb      	adds	r3, r7, #6
 8000728:	3201      	adds	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
 800072c:	1dbb      	adds	r3, r7, #6
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b29a      	uxth	r2, r3
 8000732:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <main+0x374>)
 8000734:	88db      	ldrh	r3, [r3, #6]
 8000736:	429a      	cmp	r2, r3
 8000738:	d3d8      	bcc.n	80006ec <main+0x2c8>
						}
					}
				  break;
 800073a:	e034      	b.n	80007a6 <main+0x382>
					// Error only relates to Modbus Master Nodes
					break;
				}
				case MB_UART_ERROR:
				{
					modbus_status = modbus_set_rx();
 800073c:	1dfc      	adds	r4, r7, #7
 800073e:	f000 fe9d 	bl	800147c <modbus_set_rx>
 8000742:	0003      	movs	r3, r0
 8000744:	7023      	strb	r3, [r4, #0]
					if(modbus_status != 0)
 8000746:	1dfb      	adds	r3, r7, #7
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b25b      	sxtb	r3, r3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d029      	beq.n	80007a4 <main+0x380>
					{
						holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <main+0x374>)
 8000752:	891a      	ldrh	r2, [r3, #8]
 8000754:	1dfb      	adds	r3, r7, #7
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b25b      	sxtb	r3, r3
 800075a:	3314      	adds	r3, #20
 800075c:	2101      	movs	r1, #1
 800075e:	4099      	lsls	r1, r3
 8000760:	000b      	movs	r3, r1
 8000762:	b29b      	uxth	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	b29a      	uxth	r2, r3
 8000768:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <main+0x374>)
 800076a:	811a      	strh	r2, [r3, #8]
					}
					break;
 800076c:	e01a      	b.n	80007a4 <main+0x380>
				}
				case MB_FATAL_ERROR:
				{
					while(modbus_status != HAL_OK)
					{
						modbus_status = modbus_reset();
 800076e:	1dfc      	adds	r4, r7, #7
 8000770:	f000 fe16 	bl	80013a0 <modbus_reset>
 8000774:	0003      	movs	r3, r0
 8000776:	7023      	strb	r3, [r4, #0]
					while(modbus_status != HAL_OK)
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	b25b      	sxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1f5      	bne.n	800076e <main+0x34a>
					}
					break;
 8000782:	e010      	b.n	80007a6 <main+0x382>
				}
				default:
 8000784:	46c0      	nop			@ (mov r8, r8)
 8000786:	e66e      	b.n	8000466 <main+0x42>
					break;
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	e66c      	b.n	8000466 <main+0x42>
 800078c:	2000000e 	.word	0x2000000e
 8000790:	20000048 	.word	0x20000048
 8000794:	50000c00 	.word	0x50000c00
 8000798:	20000000 	.word	0x20000000
 800079c:	20000360 	.word	0x20000360
 80007a0:	50000400 	.word	0x50000400
					break;
 80007a4:	46c0      	nop			@ (mov r8, r8)
  {
 80007a6:	e65e      	b.n	8000466 <main+0x42>

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b08f      	sub	sp, #60	@ 0x3c
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	2418      	movs	r4, #24
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	0018      	movs	r0, r3
 80007b4:	2320      	movs	r3, #32
 80007b6:	001a      	movs	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f005 f8dd 	bl	8005978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	0018      	movs	r0, r3
 80007c2:	2314      	movs	r3, #20
 80007c4:	001a      	movs	r2, r3
 80007c6:	2100      	movs	r1, #0
 80007c8:	f005 f8d6 	bl	8005978 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	2201      	movs	r2, #1
 80007d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	2280      	movs	r2, #128	@ 0x80
 80007d6:	0252      	lsls	r2, r2, #9
 80007d8:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	0018      	movs	r0, r3
 80007de:	f003 fa29 	bl	8003c34 <HAL_RCC_OscConfig>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x42>
  {
    Error_Handler();
 80007e6:	f000 fa0b 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2207      	movs	r2, #7
 80007ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2201      	movs	r2, #1
 80007f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2100      	movs	r1, #0
 800080c:	0018      	movs	r0, r3
 800080e:	f003 fc37 	bl	8004080 <HAL_RCC_ClockConfig>
 8000812:	1e03      	subs	r3, r0, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000816:	f000 f9f3 	bl	8000c00 <Error_Handler>
  }
}
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b00f      	add	sp, #60	@ 0x3c
 8000820:	bd90      	pop	{r4, r7, pc}
	...

08000824 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	0018      	movs	r0, r3
 800082e:	230c      	movs	r3, #12
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f005 f8a0 	bl	8005978 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000838:	4b3c      	ldr	r3, [pc, #240]	@ (800092c <MX_ADC1_Init+0x108>)
 800083a:	4a3d      	ldr	r2, [pc, #244]	@ (8000930 <MX_ADC1_Init+0x10c>)
 800083c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800083e:	4b3b      	ldr	r3, [pc, #236]	@ (800092c <MX_ADC1_Init+0x108>)
 8000840:	22c0      	movs	r2, #192	@ 0xc0
 8000842:	0612      	lsls	r2, r2, #24
 8000844:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b39      	ldr	r3, [pc, #228]	@ (800092c <MX_ADC1_Init+0x108>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800084c:	4b37      	ldr	r3, [pc, #220]	@ (800092c <MX_ADC1_Init+0x108>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000852:	4b36      	ldr	r3, [pc, #216]	@ (800092c <MX_ADC1_Init+0x108>)
 8000854:	2280      	movs	r2, #128	@ 0x80
 8000856:	0392      	lsls	r2, r2, #14
 8000858:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800085a:	4b34      	ldr	r3, [pc, #208]	@ (800092c <MX_ADC1_Init+0x108>)
 800085c:	2204      	movs	r2, #4
 800085e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000860:	4b32      	ldr	r3, [pc, #200]	@ (800092c <MX_ADC1_Init+0x108>)
 8000862:	2200      	movs	r2, #0
 8000864:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000866:	4b31      	ldr	r3, [pc, #196]	@ (800092c <MX_ADC1_Init+0x108>)
 8000868:	2200      	movs	r2, #0
 800086a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800086c:	4b2f      	ldr	r3, [pc, #188]	@ (800092c <MX_ADC1_Init+0x108>)
 800086e:	2201      	movs	r2, #1
 8000870:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8000872:	4b2e      	ldr	r3, [pc, #184]	@ (800092c <MX_ADC1_Init+0x108>)
 8000874:	2203      	movs	r2, #3
 8000876:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000878:	4b2c      	ldr	r3, [pc, #176]	@ (800092c <MX_ADC1_Init+0x108>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800087e:	4b2b      	ldr	r3, [pc, #172]	@ (800092c <MX_ADC1_Init+0x108>)
 8000880:	2200      	movs	r2, #0
 8000882:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000884:	4b29      	ldr	r3, [pc, #164]	@ (800092c <MX_ADC1_Init+0x108>)
 8000886:	222c      	movs	r2, #44	@ 0x2c
 8000888:	2100      	movs	r1, #0
 800088a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800088c:	4b27      	ldr	r3, [pc, #156]	@ (800092c <MX_ADC1_Init+0x108>)
 800088e:	2200      	movs	r2, #0
 8000890:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000892:	4b26      	ldr	r3, [pc, #152]	@ (800092c <MX_ADC1_Init+0x108>)
 8000894:	2207      	movs	r2, #7
 8000896:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000898:	4b24      	ldr	r3, [pc, #144]	@ (800092c <MX_ADC1_Init+0x108>)
 800089a:	2200      	movs	r2, #0
 800089c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800089e:	4b23      	ldr	r3, [pc, #140]	@ (800092c <MX_ADC1_Init+0x108>)
 80008a0:	223c      	movs	r2, #60	@ 0x3c
 80008a2:	2100      	movs	r1, #0
 80008a4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 80008a6:	4b21      	ldr	r3, [pc, #132]	@ (800092c <MX_ADC1_Init+0x108>)
 80008a8:	2280      	movs	r2, #128	@ 0x80
 80008aa:	0592      	lsls	r2, r2, #22
 80008ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ae:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <MX_ADC1_Init+0x108>)
 80008b0:	0018      	movs	r0, r3
 80008b2:	f001 fcd1 	bl	8002258 <HAL_ADC_Init>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80008ba:	f000 f9a1 	bl	8000c00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2201      	movs	r2, #1
 80008c2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d0:	1d3a      	adds	r2, r7, #4
 80008d2:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_ADC1_Init+0x108>)
 80008d4:	0011      	movs	r1, r2
 80008d6:	0018      	movs	r0, r3
 80008d8:	f001 fef2 	bl	80026c0 <HAL_ADC_ConfigChannel>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80008e0:	f000 f98e 	bl	8000c00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	4a13      	ldr	r2, [pc, #76]	@ (8000934 <MX_ADC1_Init+0x110>)
 80008e8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2204      	movs	r2, #4
 80008ee:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f0:	1d3a      	adds	r2, r7, #4
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <MX_ADC1_Init+0x108>)
 80008f4:	0011      	movs	r1, r2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f001 fee2 	bl	80026c0 <HAL_ADC_ConfigChannel>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000900:	f000 f97e 	bl	8000c00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	4a0c      	ldr	r2, [pc, #48]	@ (8000938 <MX_ADC1_Init+0x114>)
 8000908:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2208      	movs	r2, #8
 800090e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000910:	1d3a      	adds	r2, r7, #4
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <MX_ADC1_Init+0x108>)
 8000914:	0011      	movs	r1, r2
 8000916:	0018      	movs	r0, r3
 8000918:	f001 fed2 	bl	80026c0 <HAL_ADC_ConfigChannel>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000920:	f000 f96e 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000924:	46c0      	nop			@ (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b004      	add	sp, #16
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000048 	.word	0x20000048
 8000930:	40012400 	.word	0x40012400
 8000934:	04000002 	.word	0x04000002
 8000938:	08000004 	.word	0x08000004

0800093c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000940:	4b1b      	ldr	r3, [pc, #108]	@ (80009b0 <MX_I2C1_Init+0x74>)
 8000942:	4a1c      	ldr	r2, [pc, #112]	@ (80009b4 <MX_I2C1_Init+0x78>)
 8000944:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000946:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <MX_I2C1_Init+0x74>)
 8000948:	4a1b      	ldr	r2, [pc, #108]	@ (80009b8 <MX_I2C1_Init+0x7c>)
 800094a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800094c:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000952:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <MX_I2C1_Init+0x74>)
 8000954:	2201      	movs	r2, #1
 8000956:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000958:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <MX_I2C1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800095e:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <MX_I2C1_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <MX_I2C1_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_I2C1_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000970:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <MX_I2C1_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MX_I2C1_Init+0x74>)
 8000978:	0018      	movs	r0, r3
 800097a:	f003 f81d 	bl	80039b8 <HAL_I2C_Init>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000982:	f000 f93d 	bl	8000c00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <MX_I2C1_Init+0x74>)
 8000988:	2100      	movs	r1, #0
 800098a:	0018      	movs	r0, r3
 800098c:	f003 f8ba 	bl	8003b04 <HAL_I2CEx_ConfigAnalogFilter>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000994:	f000 f934 	bl	8000c00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000998:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <MX_I2C1_Init+0x74>)
 800099a:	2100      	movs	r1, #0
 800099c:	0018      	movs	r0, r3
 800099e:	f003 f8fd 	bl	8003b9c <HAL_I2CEx_ConfigDigitalFilter>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009a6:	f000 f92b 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000108 	.word	0x20000108
 80009b4:	40005400 	.word	0x40005400
 80009b8:	00201d2b 	.word	0x00201d2b

080009bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c0:	4b24      	ldr	r3, [pc, #144]	@ (8000a54 <MX_USART1_UART_Init+0x98>)
 80009c2:	4a25      	ldr	r2, [pc, #148]	@ (8000a58 <MX_USART1_UART_Init+0x9c>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c6:	4b23      	ldr	r3, [pc, #140]	@ (8000a54 <MX_USART1_UART_Init+0x98>)
 80009c8:	22e1      	movs	r2, #225	@ 0xe1
 80009ca:	0252      	lsls	r2, r2, #9
 80009cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b21      	ldr	r3, [pc, #132]	@ (8000a54 <MX_USART1_UART_Init+0x98>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <MX_USART1_UART_Init+0x98>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009da:	4b1e      	ldr	r3, [pc, #120]	@ (8000a54 <MX_USART1_UART_Init+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <MX_USART1_UART_Init+0x98>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a54 <MX_USART1_UART_Init+0x98>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <MX_USART1_UART_Init+0x98>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f2:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <MX_USART1_UART_Init+0x98>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f8:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <MX_USART1_UART_Init+0x98>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fe:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <MX_USART1_UART_Init+0x98>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000a04:	4813      	ldr	r0, [pc, #76]	@ (8000a54 <MX_USART1_UART_Init+0x98>)
 8000a06:	2300      	movs	r3, #0
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f004 fdc0 	bl	8005590 <HAL_RS485Ex_Init>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d001      	beq.n	8000a18 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000a14:	f000 f8f4 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <MX_USART1_UART_Init+0x98>)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f004 fe63 	bl	80056e8 <HAL_UARTEx_SetTxFifoThreshold>
 8000a22:	1e03      	subs	r3, r0, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000a26:	f000 f8eb 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <MX_USART1_UART_Init+0x98>)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f004 fe9a 	bl	8005768 <HAL_UARTEx_SetRxFifoThreshold>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d001      	beq.n	8000a3c <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000a38:	f000 f8e2 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a3c:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <MX_USART1_UART_Init+0x98>)
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f004 fe18 	bl	8005674 <HAL_UARTEx_DisableFifoMode>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000a48:	f000 f8da 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a4c:	46c0      	nop			@ (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	20000214 	.word	0x20000214
 8000a58:	40013800 	.word	0x40013800

08000a5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a62:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <MX_DMA_Init+0x58>)
 8000a64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a66:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <MX_DMA_Init+0x58>)
 8000a68:	2101      	movs	r1, #1
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_DMA_Init+0x58>)
 8000a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a72:	2201      	movs	r2, #1
 8000a74:	4013      	ands	r3, r2
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2009      	movs	r0, #9
 8000a80:	f002 f9ac 	bl	8002ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a84:	2009      	movs	r0, #9
 8000a86:	f002 f9be 	bl	8002e06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	200a      	movs	r0, #10
 8000a90:	f002 f9a4 	bl	8002ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000a94:	200a      	movs	r0, #10
 8000a96:	f002 f9b6 	bl	8002e06 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_DMA1_CH4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_DMA1_CH4_5_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	200b      	movs	r0, #11
 8000aa0:	f002 f99c 	bl	8002ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_DMA1_CH4_5_IRQn);
 8000aa4:	200b      	movs	r0, #11
 8000aa6:	f002 f9ae 	bl	8002e06 <HAL_NVIC_EnableIRQ>

}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b002      	add	sp, #8
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b08b      	sub	sp, #44	@ 0x2c
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	2414      	movs	r4, #20
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2314      	movs	r3, #20
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f004 ff55 	bl	8005978 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	4b48      	ldr	r3, [pc, #288]	@ (8000bf0 <MX_GPIO_Init+0x138>)
 8000ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ad2:	4b47      	ldr	r3, [pc, #284]	@ (8000bf0 <MX_GPIO_Init+0x138>)
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ada:	4b45      	ldr	r3, [pc, #276]	@ (8000bf0 <MX_GPIO_Init+0x138>)
 8000adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ade:	2204      	movs	r2, #4
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ae6:	4b42      	ldr	r3, [pc, #264]	@ (8000bf0 <MX_GPIO_Init+0x138>)
 8000ae8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aea:	4b41      	ldr	r3, [pc, #260]	@ (8000bf0 <MX_GPIO_Init+0x138>)
 8000aec:	2120      	movs	r1, #32
 8000aee:	430a      	orrs	r2, r1
 8000af0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000af2:	4b3f      	ldr	r3, [pc, #252]	@ (8000bf0 <MX_GPIO_Init+0x138>)
 8000af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000af6:	2220      	movs	r2, #32
 8000af8:	4013      	ands	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b3c      	ldr	r3, [pc, #240]	@ (8000bf0 <MX_GPIO_Init+0x138>)
 8000b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b02:	4b3b      	ldr	r3, [pc, #236]	@ (8000bf0 <MX_GPIO_Init+0x138>)
 8000b04:	2101      	movs	r1, #1
 8000b06:	430a      	orrs	r2, r1
 8000b08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b0a:	4b39      	ldr	r3, [pc, #228]	@ (8000bf0 <MX_GPIO_Init+0x138>)
 8000b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	4b36      	ldr	r3, [pc, #216]	@ (8000bf0 <MX_GPIO_Init+0x138>)
 8000b18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b1a:	4b35      	ldr	r3, [pc, #212]	@ (8000bf0 <MX_GPIO_Init+0x138>)
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b22:	4b33      	ldr	r3, [pc, #204]	@ (8000bf0 <MX_GPIO_Init+0x138>)
 8000b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b26:	2202      	movs	r2, #2
 8000b28:	4013      	ands	r3, r2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	4b30      	ldr	r3, [pc, #192]	@ (8000bf0 <MX_GPIO_Init+0x138>)
 8000b30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b32:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf0 <MX_GPIO_Init+0x138>)
 8000b34:	2108      	movs	r1, #8
 8000b36:	430a      	orrs	r2, r1
 8000b38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf0 <MX_GPIO_Init+0x138>)
 8000b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b3e:	2208      	movs	r2, #8
 8000b40:	4013      	ands	r3, r2
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_DCV_A_Pin|MCU_DCV_B_Pin|HPU_Gate_Pin, GPIO_PIN_RESET);
 8000b46:	492b      	ldr	r1, [pc, #172]	@ (8000bf4 <MX_GPIO_Init+0x13c>)
 8000b48:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf8 <MX_GPIO_Init+0x140>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f002 ff16 	bl	800397e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Water_Solinoid_GPIO_Port, Water_Solinoid_Pin, GPIO_PIN_RESET);
 8000b52:	4b2a      	ldr	r3, [pc, #168]	@ (8000bfc <MX_GPIO_Init+0x144>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	2104      	movs	r1, #4
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f002 ff10 	bl	800397e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MCU_DCV_A_Pin MCU_DCV_B_Pin HPU_Gate_Pin */
  GPIO_InitStruct.Pin = MCU_DCV_A_Pin|MCU_DCV_B_Pin|HPU_Gate_Pin;
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	4a24      	ldr	r2, [pc, #144]	@ (8000bf4 <MX_GPIO_Init+0x13c>)
 8000b62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	2201      	movs	r2, #1
 8000b68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	4a1f      	ldr	r2, [pc, #124]	@ (8000bf8 <MX_GPIO_Init+0x140>)
 8000b7a:	0019      	movs	r1, r3
 8000b7c:	0010      	movs	r0, r2
 8000b7e:	f002 fc97 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Oil_High_Pin */
  GPIO_InitStruct.Pin = Oil_High_Pin;
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	2280      	movs	r2, #128	@ 0x80
 8000b86:	0212      	lsls	r2, r2, #8
 8000b88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Oil_High_GPIO_Port, &GPIO_InitStruct);
 8000b96:	193a      	adds	r2, r7, r4
 8000b98:	23a0      	movs	r3, #160	@ 0xa0
 8000b9a:	05db      	lsls	r3, r3, #23
 8000b9c:	0011      	movs	r1, r2
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f002 fc86 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Oil_Low_Pin Oil_E_Stop_Pin */
  GPIO_InitStruct.Pin = Oil_Low_Pin|Oil_E_Stop_Pin;
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	4a10      	ldr	r2, [pc, #64]	@ (8000bfc <MX_GPIO_Init+0x144>)
 8000bba:	0019      	movs	r1, r3
 8000bbc:	0010      	movs	r0, r2
 8000bbe:	f002 fc77 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Water_Solinoid_Pin */
  GPIO_InitStruct.Pin = Water_Solinoid_Pin;
 8000bc2:	0021      	movs	r1, r4
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2201      	movs	r2, #1
 8000bce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Water_Solinoid_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	4a07      	ldr	r2, [pc, #28]	@ (8000bfc <MX_GPIO_Init+0x144>)
 8000be0:	0019      	movs	r1, r3
 8000be2:	0010      	movs	r0, r2
 8000be4:	f002 fc64 	bl	80034b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be8:	46c0      	nop			@ (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b00b      	add	sp, #44	@ 0x2c
 8000bee:	bd90      	pop	{r4, r7, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	00001003 	.word	0x00001003
 8000bf8:	50000400 	.word	0x50000400
 8000bfc:	50000c00 	.word	0x50000c00

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	e7fd      	b.n	8000c08 <Error_Handler+0x8>

08000c0c <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	000a      	movs	r2, r1
 8000c16:	1cbb      	adds	r3, r7, #2
 8000c18:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a45      	ldr	r2, [pc, #276]	@ (8000d34 <HAL_UARTEx_RxEventCallback+0x128>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d000      	beq.n	8000c26 <HAL_UARTEx_RxEventCallback+0x1a>
 8000c24:	e081      	b.n	8000d2a <HAL_UARTEx_RxEventCallback+0x11e>
	{
		chunk_start_i = chunk_end_i;  // Update the last position before copying new data
 8000c26:	4b44      	ldr	r3, [pc, #272]	@ (8000d38 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	4b43      	ldr	r3, [pc, #268]	@ (8000d3c <HAL_UARTEx_RxEventCallback+0x130>)
 8000c2e:	801a      	strh	r2, [r3, #0]
		/*
		 * If the data is large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (chunk_start_i + Size > MODBUS_RX_BUFFER_SIZE)  // If the current position + new data size is greater than the main buffer
 8000c30:	4b42      	ldr	r3, [pc, #264]	@ (8000d3c <HAL_UARTEx_RxEventCallback+0x130>)
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	001a      	movs	r2, r3
 8000c38:	1cbb      	adds	r3, r7, #2
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	18d2      	adds	r2, r2, r3
 8000c3e:	2380      	movs	r3, #128	@ 0x80
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	429a      	cmp	r2, r3
 8000c44:	dd29      	ble.n	8000c9a <HAL_UARTEx_RxEventCallback+0x8e>
		{
			uint16_t datatocopy = MODBUS_RX_BUFFER_SIZE - chunk_start_i;  // find out how much space is left in the main buffer
 8000c46:	4b3d      	ldr	r3, [pc, #244]	@ (8000d3c <HAL_UARTEx_RxEventCallback+0x130>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	240e      	movs	r4, #14
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	2180      	movs	r1, #128	@ 0x80
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	1a8a      	subs	r2, r1, r2
 8000c56:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, datatocopy);  // copy data in that remaining space
 8000c58:	4b38      	ldr	r3, [pc, #224]	@ (8000d3c <HAL_UARTEx_RxEventCallback+0x130>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	001a      	movs	r2, r3
 8000c60:	4b37      	ldr	r3, [pc, #220]	@ (8000d40 <HAL_UARTEx_RxEventCallback+0x134>)
 8000c62:	18d0      	adds	r0, r2, r3
 8000c64:	193b      	adds	r3, r7, r4
 8000c66:	881a      	ldrh	r2, [r3, #0]
 8000c68:	4b36      	ldr	r3, [pc, #216]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0x138>)
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	f004 feb0 	bl	80059d0 <memcpy>

			chunk_end_i = (Size - datatocopy);  // update the position
 8000c70:	1cba      	adds	r2, r7, #2
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	8812      	ldrh	r2, [r2, #0]
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d38 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000c7e:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)modbus_rx_buffer, (uint8_t *)(rx_chunk + datatocopy), chunk_end_i);  // copy the remaining data
 8000c80:	193b      	adds	r3, r7, r4
 8000c82:	881a      	ldrh	r2, [r3, #0]
 8000c84:	4b2f      	ldr	r3, [pc, #188]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0x138>)
 8000c86:	18d1      	adds	r1, r2, r3
 8000c88:	4b2b      	ldr	r3, [pc, #172]	@ (8000d38 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	001a      	movs	r2, r3
 8000c90:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <HAL_UARTEx_RxEventCallback+0x134>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f004 fe9c 	bl	80059d0 <memcpy>
 8000c98:	e014      	b.n	8000cc4 <HAL_UARTEx_RxEventCallback+0xb8>
		 * If the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, Size);
 8000c9a:	4b28      	ldr	r3, [pc, #160]	@ (8000d3c <HAL_UARTEx_RxEventCallback+0x130>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	4b27      	ldr	r3, [pc, #156]	@ (8000d40 <HAL_UARTEx_RxEventCallback+0x134>)
 8000ca4:	18d0      	adds	r0, r2, r3
 8000ca6:	1cbb      	adds	r3, r7, #2
 8000ca8:	881a      	ldrh	r2, [r3, #0]
 8000caa:	4b26      	ldr	r3, [pc, #152]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0x138>)
 8000cac:	0019      	movs	r1, r3
 8000cae:	f004 fe8f 	bl	80059d0 <memcpy>
			chunk_end_i = Size + chunk_start_i;
 8000cb2:	4b22      	ldr	r3, [pc, #136]	@ (8000d3c <HAL_UARTEx_RxEventCallback+0x130>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	1cbb      	adds	r3, r7, #2
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	18d3      	adds	r3, r2, r3
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000cc2:	801a      	strh	r2, [r3, #0]
		}

		if(modbus_header)
 8000cc4:	4b20      	ldr	r3, [pc, #128]	@ (8000d48 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d027      	beq.n	8000d1e <HAL_UARTEx_RxEventCallback+0x112>
		{
			// Log the time for chunk miss error handling
			chunk_time = HAL_GetTick();
 8000cce:	f001 f94d 	bl	8001f6c <HAL_GetTick>
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <HAL_UARTEx_RxEventCallback+0x140>)
 8000cd6:	601a      	str	r2, [r3, #0]

			start_index = chunk_start_i;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <HAL_UARTEx_RxEventCallback+0x130>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <HAL_UARTEx_RxEventCallback+0x144>)
 8000ce0:	801a      	strh	r2, [r3, #0]
			modbus_header = 0;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	801a      	strh	r2, [r3, #0]

			// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, (uint16_t)(((rx_chunk[4] << 8) | rx_chunk[5])*2 + 2 + 1));
 8000ce8:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0x138>)
 8000cea:	791b      	ldrb	r3, [r3, #4]
 8000cec:	021b      	lsls	r3, r3, #8
 8000cee:	4a15      	ldr	r2, [pc, #84]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0x138>)
 8000cf0:	7952      	ldrb	r2, [r2, #5]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	18db      	adds	r3, r3, r3
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	3301      	adds	r3, #1
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	4910      	ldr	r1, [pc, #64]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0x138>)
 8000d04:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <HAL_UARTEx_RxEventCallback+0x148>)
 8000d06:	0018      	movs	r0, r3
 8000d08:	f004 fd70 	bl	80057ec <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000d0c:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2104      	movs	r1, #4
 8000d18:	438a      	bics	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]
			 */
			modbus_header = 1;
			uart_rx_int = 1;
		}
	}
}
 8000d1c:	e005      	b.n	8000d2a <HAL_UARTEx_RxEventCallback+0x11e>
			modbus_header = 1;
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	801a      	strh	r2, [r3, #0]
			uart_rx_int = 1;
 8000d24:	4b0d      	ldr	r3, [pc, #52]	@ (8000d5c <HAL_UARTEx_RxEventCallback+0x150>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b005      	add	sp, #20
 8000d30:	bd90      	pop	{r4, r7, pc}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	40013800 	.word	0x40013800
 8000d38:	2000066c 	.word	0x2000066c
 8000d3c:	2000066a 	.word	0x2000066a
 8000d40:	20000364 	.word	0x20000364
 8000d44:	20000564 	.word	0x20000564
 8000d48:	2000001a 	.word	0x2000001a
 8000d4c:	20000664 	.word	0x20000664
 8000d50:	20000668 	.word	0x20000668
 8000d54:	20000214 	.word	0x20000214
 8000d58:	200002a8 	.word	0x200002a8
 8000d5c:	2000066e 	.word	0x2000066e

08000d60 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	uart_tx_int = 1;
 8000d68:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <HAL_UART_TxCpltCallback+0x18>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
}
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b002      	add	sp, #8
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	2000001c 	.word	0x2000001c

08000d7c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	uart_err_int = 1;
 8000d84:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <HAL_UART_ErrorCallback+0x28>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_MASK);
 8000d8a:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <HAL_UART_ErrorCallback+0x2c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <HAL_UART_ErrorCallback+0x2c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	0052      	lsls	r2, r2, #1
 8000d96:	0852      	lsrs	r2, r2, #1
 8000d98:	609a      	str	r2, [r3, #8]
}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b002      	add	sp, #8
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	2000066f 	.word	0x2000066f
 8000da8:	20000214 	.word	0x20000214

08000dac <modbus_rx>:

// Modbus Slave Functions ---------------------------------------------------------------------

#ifdef MB_SLAVE
uint8_t modbus_rx()
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	if(uart_rx_int)
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <modbus_rx+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d004      	beq.n	8000dc4 <modbus_rx+0x18>
	{
		uart_rx_int = 0;
 8000dba:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <modbus_rx+0x20>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
		return 1;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e000      	b.n	8000dc6 <modbus_rx+0x1a>
	}
	return 0;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000066e 	.word	0x2000066e

08000dd0 <return_holding_registers>:

int8_t return_holding_registers(uint8_t* tx_len)
{
 8000dd0:	b5b0      	push	{r4, r5, r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8000dde:	2002      	movs	r0, #2
 8000de0:	f000 fc58 	bl	8001694 <get_rx_buffer>
 8000de4:	0003      	movs	r3, r0
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b21c      	sxth	r4, r3
 8000dea:	2003      	movs	r0, #3
 8000dec:	f000 fc52 	bl	8001694 <get_rx_buffer>
 8000df0:	0003      	movs	r3, r0
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	4323      	orrs	r3, r4
 8000df6:	b21a      	sxth	r2, r3
 8000df8:	230c      	movs	r3, #12
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8000dfe:	2004      	movs	r0, #4
 8000e00:	f000 fc48 	bl	8001694 <get_rx_buffer>
 8000e04:	0003      	movs	r3, r0
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	b21c      	sxth	r4, r3
 8000e0a:	2005      	movs	r0, #5
 8000e0c:	f000 fc42 	bl	8001694 <get_rx_buffer>
 8000e10:	0003      	movs	r3, r0
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	4323      	orrs	r3, r4
 8000e16:	b21a      	sxth	r2, r3
 8000e18:	210a      	movs	r1, #10
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 8000e1e:	000a      	movs	r2, r1
 8000e20:	18bb      	adds	r3, r7, r2
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e26:	d803      	bhi.n	8000e30 <return_holding_registers+0x60>
 8000e28:	18bb      	adds	r3, r7, r2
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d104      	bne.n	8000e3a <return_holding_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000e30:	2006      	movs	r0, #6
 8000e32:	f000 f97b 	bl	800112c <modbus_exception>
 8000e36:	0003      	movs	r3, r0
 8000e38:	e06e      	b.n	8000f18 <return_holding_registers+0x148>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000e3a:	230a      	movs	r3, #10
 8000e3c:	18fa      	adds	r2, r7, r3
 8000e3e:	230c      	movs	r3, #12
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	8812      	ldrh	r2, [r2, #0]
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	18d3      	adds	r3, r2, r3
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	2108      	movs	r1, #8
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	3a01      	subs	r2, #1
 8000e50:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	2b0d      	cmp	r3, #13
 8000e58:	d904      	bls.n	8000e64 <return_holding_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000e5a:	2005      	movs	r0, #5
 8000e5c:	f000 f966 	bl	800112c <modbus_exception>
 8000e60:	0003      	movs	r3, r0
 8000e62:	e059      	b.n	8000f18 <return_holding_registers+0x148>
	}

	// Return register values

	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8000e64:	2000      	movs	r0, #0
 8000e66:	f000 fc15 	bl	8001694 <get_rx_buffer>
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f20 <return_holding_registers+0x150>)
 8000e70:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8000e72:	2001      	movs	r0, #1
 8000e74:	f000 fc0e 	bl	8001694 <get_rx_buffer>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	4b28      	ldr	r3, [pc, #160]	@ (8000f20 <return_holding_registers+0x150>)
 8000e7e:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8000e80:	230a      	movs	r3, #10
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	18db      	adds	r3, r3, r3
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <return_holding_registers+0x150>)
 8000e8e:	709a      	strb	r2, [r3, #2]
	(*tx_len) = 3;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2203      	movs	r2, #3
 8000e94:	701a      	strb	r2, [r3, #0]
//		prim = __get_PRIMASK();
//		__disable_irq();
	}

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8000e96:	230f      	movs	r3, #15
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	e02c      	b.n	8000efa <return_holding_registers+0x12a>
	{
		modbus_tx_buffer[(*tx_len)++] = high_byte(holding_register_database[first_register_address + i]);
 8000ea0:	250c      	movs	r5, #12
 8000ea2:	197b      	adds	r3, r7, r5
 8000ea4:	881a      	ldrh	r2, [r3, #0]
 8000ea6:	240f      	movs	r4, #15
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	18d2      	adds	r2, r2, r3
 8000eae:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <return_holding_registers+0x154>)
 8000eb0:	0052      	lsls	r2, r2, #1
 8000eb2:	5ad3      	ldrh	r3, [r2, r3]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	b299      	uxth	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	1c5a      	adds	r2, r3, #1
 8000ebe:	b2d0      	uxtb	r0, r2
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	7010      	strb	r0, [r2, #0]
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	b2c9      	uxtb	r1, r1
 8000ec8:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <return_holding_registers+0x150>)
 8000eca:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[(*tx_len)++] = low_byte(holding_register_database[first_register_address + i]);
 8000ecc:	197b      	adds	r3, r7, r5
 8000ece:	881a      	ldrh	r2, [r3, #0]
 8000ed0:	193b      	adds	r3, r7, r4
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	18d2      	adds	r2, r2, r3
 8000ed6:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <return_holding_registers+0x154>)
 8000ed8:	0052      	lsls	r2, r2, #1
 8000eda:	5ad1      	ldrh	r1, [r2, r3]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	1c5a      	adds	r2, r3, #1
 8000ee2:	b2d0      	uxtb	r0, r2
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	7010      	strb	r0, [r2, #0]
 8000ee8:	001a      	movs	r2, r3
 8000eea:	b2c9      	uxtb	r1, r1
 8000eec:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <return_holding_registers+0x150>)
 8000eee:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	781a      	ldrb	r2, [r3, #0]
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	3201      	adds	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	230f      	movs	r3, #15
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	220a      	movs	r2, #10
 8000f04:	18ba      	adds	r2, r7, r2
 8000f06:	8812      	ldrh	r2, [r2, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d8c9      	bhi.n	8000ea0 <return_holding_registers+0xd0>
//		if(prim == 0)
//		{
//			__enable_irq();
//		}
	}
	return modbus_send((*tx_len));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	0018      	movs	r0, r3
 8000f12:	f000 f9ef 	bl	80012f4 <modbus_send>
 8000f16:	0003      	movs	r3, r0
}
 8000f18:	0018      	movs	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b004      	add	sp, #16
 8000f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f20:	20000464 	.word	0x20000464
 8000f24:	20000000 	.word	0x20000000

08000f28 <edit_multiple_registers>:

int8_t edit_multiple_registers(uint8_t *tx_len)
{
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8000f36:	2002      	movs	r0, #2
 8000f38:	f000 fbac 	bl	8001694 <get_rx_buffer>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	021b      	lsls	r3, r3, #8
 8000f40:	b21c      	sxth	r4, r3
 8000f42:	2003      	movs	r0, #3
 8000f44:	f000 fba6 	bl	8001694 <get_rx_buffer>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	b21b      	sxth	r3, r3
 8000f4c:	4323      	orrs	r3, r4
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	2314      	movs	r3, #20
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8000f56:	2004      	movs	r0, #4
 8000f58:	f000 fb9c 	bl	8001694 <get_rx_buffer>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21c      	sxth	r4, r3
 8000f62:	2005      	movs	r0, #5
 8000f64:	f000 fb96 	bl	8001694 <get_rx_buffer>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	4323      	orrs	r3, r4
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	2112      	movs	r1, #18
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8000f76:	000a      	movs	r2, r1
 8000f78:	18bb      	adds	r3, r7, r2
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	2b7d      	cmp	r3, #125	@ 0x7d
 8000f7e:	d803      	bhi.n	8000f88 <edit_multiple_registers+0x60>
 8000f80:	18bb      	adds	r3, r7, r2
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d104      	bne.n	8000f92 <edit_multiple_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000f88:	2006      	movs	r0, #6
 8000f8a:	f000 f8cf 	bl	800112c <modbus_exception>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	e0c3      	b.n	800111a <edit_multiple_registers+0x1f2>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000f92:	2312      	movs	r3, #18
 8000f94:	18fa      	adds	r2, r7, r3
 8000f96:	2314      	movs	r3, #20
 8000f98:	18fb      	adds	r3, r7, r3
 8000f9a:	8812      	ldrh	r2, [r2, #0]
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	18d3      	adds	r3, r2, r3
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	3a01      	subs	r2, #1
 8000fa8:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	2b0d      	cmp	r3, #13
 8000fb0:	d904      	bls.n	8000fbc <edit_multiple_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000fb2:	2005      	movs	r0, #5
 8000fb4:	f000 f8ba 	bl	800112c <modbus_exception>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	e0ae      	b.n	800111a <edit_multiple_registers+0x1f2>
	}

	// Protect Read only values
	if(((first_register_address >= ADC_0) && (first_register_address <= GPIO_READ)) ||
 8000fbc:	2214      	movs	r2, #20
 8000fbe:	18bb      	adds	r3, r7, r2
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d903      	bls.n	8000fce <edit_multiple_registers+0xa6>
 8000fc6:	18bb      	adds	r3, r7, r2
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	2b0b      	cmp	r3, #11
 8000fcc:	d912      	bls.n	8000ff4 <edit_multiple_registers+0xcc>
 8000fce:	2210      	movs	r2, #16
 8000fd0:	18bb      	adds	r3, r7, r2
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	2b06      	cmp	r3, #6
 8000fd6:	d903      	bls.n	8000fe0 <edit_multiple_registers+0xb8>
		 ((last_register_address >= ADC_0) && (last_register_address <= GPIO_READ)) ||
 8000fd8:	18bb      	adds	r3, r7, r2
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	2b0b      	cmp	r3, #11
 8000fde:	d909      	bls.n	8000ff4 <edit_multiple_registers+0xcc>
 8000fe0:	2314      	movs	r3, #20
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d809      	bhi.n	8000ffe <edit_multiple_registers+0xd6>
		 ((first_register_address < ADC_0) && (last_register_address > GPIO_READ)))
 8000fea:	2310      	movs	r3, #16
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	2b0b      	cmp	r3, #11
 8000ff2:	d904      	bls.n	8000ffe <edit_multiple_registers+0xd6>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 8000ff4:	2004      	movs	r0, #4
 8000ff6:	f000 f899 	bl	800112c <modbus_exception>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	e08d      	b.n	800111a <edit_multiple_registers+0x1f2>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 fb48 	bl	8001694 <get_rx_buffer>
 8001004:	0003      	movs	r3, r0
 8001006:	001a      	movs	r2, r3
 8001008:	4b46      	ldr	r3, [pc, #280]	@ (8001124 <edit_multiple_registers+0x1fc>)
 800100a:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 800100c:	2001      	movs	r0, #1
 800100e:	f000 fb41 	bl	8001694 <get_rx_buffer>
 8001012:	0003      	movs	r3, r0
 8001014:	001a      	movs	r2, r3
 8001016:	4b43      	ldr	r3, [pc, #268]	@ (8001124 <edit_multiple_registers+0x1fc>)
 8001018:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 800101a:	2002      	movs	r0, #2
 800101c:	f000 fb3a 	bl	8001694 <get_rx_buffer>
 8001020:	0003      	movs	r3, r0
 8001022:	001a      	movs	r2, r3
 8001024:	4b3f      	ldr	r3, [pc, #252]	@ (8001124 <edit_multiple_registers+0x1fc>)
 8001026:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 8001028:	2003      	movs	r0, #3
 800102a:	f000 fb33 	bl	8001694 <get_rx_buffer>
 800102e:	0003      	movs	r3, r0
 8001030:	001a      	movs	r2, r3
 8001032:	4b3c      	ldr	r3, [pc, #240]	@ (8001124 <edit_multiple_registers+0x1fc>)
 8001034:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 8001036:	2004      	movs	r0, #4
 8001038:	f000 fb2c 	bl	8001694 <get_rx_buffer>
 800103c:	0003      	movs	r3, r0
 800103e:	001a      	movs	r2, r3
 8001040:	4b38      	ldr	r3, [pc, #224]	@ (8001124 <edit_multiple_registers+0x1fc>)
 8001042:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 8001044:	2005      	movs	r0, #5
 8001046:	f000 fb25 	bl	8001694 <get_rx_buffer>
 800104a:	0003      	movs	r3, r0
 800104c:	001a      	movs	r2, r3
 800104e:	4b35      	ldr	r3, [pc, #212]	@ (8001124 <edit_multiple_registers+0x1fc>)
 8001050:	715a      	strb	r2, [r3, #5]
	(*tx_len) = 6;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2206      	movs	r2, #6
 8001056:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8001058:	2317      	movs	r3, #23
 800105a:	18fb      	adds	r3, r7, r3
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e032      	b.n	80010c8 <edit_multiple_registers+0x1a0>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 8001062:	2517      	movs	r5, #23
 8001064:	197b      	adds	r3, r7, r5
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	18db      	adds	r3, r3, r3
 800106a:	b2db      	uxtb	r3, r3
 800106c:	3307      	adds	r3, #7
 800106e:	b2db      	uxtb	r3, r3
 8001070:	0018      	movs	r0, r3
 8001072:	f000 fb0f 	bl	8001694 <get_rx_buffer>
 8001076:	0003      	movs	r3, r0
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	b21c      	sxth	r4, r3
 800107c:	197b      	adds	r3, r7, r5
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	3304      	adds	r3, #4
 8001082:	b2db      	uxtb	r3, r3
 8001084:	18db      	adds	r3, r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	0018      	movs	r0, r3
 800108a:	f000 fb03 	bl	8001694 <get_rx_buffer>
 800108e:	0003      	movs	r3, r0
 8001090:	b21b      	sxth	r3, r3
 8001092:	4323      	orrs	r3, r4
 8001094:	b219      	sxth	r1, r3
 8001096:	2014      	movs	r0, #20
 8001098:	183b      	adds	r3, r7, r0
 800109a:	881a      	ldrh	r2, [r3, #0]
 800109c:	197b      	adds	r3, r7, r5
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	18d2      	adds	r2, r2, r3
 80010a2:	b289      	uxth	r1, r1
 80010a4:	4b20      	ldr	r3, [pc, #128]	@ (8001128 <edit_multiple_registers+0x200>)
 80010a6:	0052      	lsls	r2, r2, #1
 80010a8:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 80010aa:	197b      	adds	r3, r7, r5
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	183b      	adds	r3, r7, r0
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	18d3      	adds	r3, r2, r3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	0018      	movs	r0, r3
 80010ba:	f000 f85f 	bl	800117c <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 80010be:	197b      	adds	r3, r7, r5
 80010c0:	781a      	ldrb	r2, [r3, #0]
 80010c2:	197b      	adds	r3, r7, r5
 80010c4:	3201      	adds	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	2317      	movs	r3, #23
 80010ca:	18fb      	adds	r3, r7, r3
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	2212      	movs	r2, #18
 80010d2:	18ba      	adds	r2, r7, r2
 80010d4:	8812      	ldrh	r2, [r2, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d8c3      	bhi.n	8001062 <edit_multiple_registers+0x13a>

	// TIMING WORKAROUND START
//	HAL_Delay(1);
	// TIMING WORKAROUND END

	int8_t status = modbus_send((*tx_len));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	250f      	movs	r5, #15
 80010e0:	197c      	adds	r4, r7, r5
 80010e2:	0018      	movs	r0, r3
 80010e4:	f000 f906 	bl	80012f4 <modbus_send>
 80010e8:	0003      	movs	r3, r0
 80010ea:	7023      	strb	r3, [r4, #0]

	if(status == MB_SUCCESS)
 80010ec:	197b      	adds	r3, r7, r5
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10d      	bne.n	8001112 <edit_multiple_registers+0x1ea>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 80010f6:	2314      	movs	r3, #20
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d808      	bhi.n	8001112 <edit_multiple_registers+0x1ea>
 8001100:	2310      	movs	r3, #16
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <edit_multiple_registers+0x1ea>
		{
			return modbus_change_baud_rate();
 800110a:	f000 fa3d 	bl	8001588 <modbus_change_baud_rate>
 800110e:	0003      	movs	r3, r0
 8001110:	e003      	b.n	800111a <edit_multiple_registers+0x1f2>
		}
	}
	return status;
 8001112:	230f      	movs	r3, #15
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b25b      	sxtb	r3, r3
}
 800111a:	0018      	movs	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	b006      	add	sp, #24
 8001120:	bdb0      	pop	{r4, r5, r7, pc}
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	20000464 	.word	0x20000464
 8001128:	20000000 	.word	0x20000000

0800112c <modbus_exception>:

int8_t modbus_exception(int8_t exception_code)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	0002      	movs	r2, r0
 8001134:	1dfb      	adds	r3, r7, #7
 8001136:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 8001138:	2000      	movs	r0, #0
 800113a:	f000 faab 	bl	8001694 <get_rx_buffer>
 800113e:	0003      	movs	r3, r0
 8001140:	001a      	movs	r2, r3
 8001142:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <modbus_exception+0x4c>)
 8001144:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 8001146:	2001      	movs	r0, #1
 8001148:	f000 faa4 	bl	8001694 <get_rx_buffer>
 800114c:	0003      	movs	r3, r0
 800114e:	001a      	movs	r2, r3
 8001150:	2380      	movs	r3, #128	@ 0x80
 8001152:	425b      	negs	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <modbus_exception+0x4c>)
 800115a:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 800115c:	1dfb      	adds	r3, r7, #7
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	3b03      	subs	r3, #3
 8001162:	b2da      	uxtb	r2, r3
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <modbus_exception+0x4c>)
 8001166:	709a      	strb	r2, [r3, #2]

	return modbus_send(3);
 8001168:	2003      	movs	r0, #3
 800116a:	f000 f8c3 	bl	80012f4 <modbus_send>
 800116e:	0003      	movs	r3, r0
}
 8001170:	0018      	movs	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	b002      	add	sp, #8
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000464 	.word	0x20000464

0800117c <handle_range>:

void handle_range(uint16_t holding_register)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	0002      	movs	r2, r0
 8001184:	1dbb      	adds	r3, r7, #6
 8001186:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 8001188:	1dbb      	adds	r3, r7, #6
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	2b0c      	cmp	r3, #12
 800118e:	d900      	bls.n	8001192 <handle_range+0x16>
 8001190:	e0a6      	b.n	80012e0 <handle_range+0x164>
 8001192:	009a      	lsls	r2, r3, #2
 8001194:	4b54      	ldr	r3, [pc, #336]	@ (80012e8 <handle_range+0x16c>)
 8001196:	18d3      	adds	r3, r2, r3
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	469f      	mov	pc, r3
	{
		case MODBUS_ID:
		{
			if(holding_register_database[holding_register] > 0xFF)
 800119c:	1dbb      	adds	r3, r7, #6
 800119e:	881a      	ldrh	r2, [r3, #0]
 80011a0:	4b52      	ldr	r3, [pc, #328]	@ (80012ec <handle_range+0x170>)
 80011a2:	0052      	lsls	r2, r2, #1
 80011a4:	5ad3      	ldrh	r3, [r2, r3]
 80011a6:	2bff      	cmp	r3, #255	@ 0xff
 80011a8:	d800      	bhi.n	80011ac <handle_range+0x30>
 80011aa:	e08a      	b.n	80012c2 <handle_range+0x146>
			{
				holding_register_database[holding_register] = 0xFF;
 80011ac:	1dbb      	adds	r3, r7, #6
 80011ae:	881a      	ldrh	r2, [r3, #0]
 80011b0:	4b4e      	ldr	r3, [pc, #312]	@ (80012ec <handle_range+0x170>)
 80011b2:	0052      	lsls	r2, r2, #1
 80011b4:	21ff      	movs	r1, #255	@ 0xff
 80011b6:	52d1      	strh	r1, [r2, r3]
			}
			break;
 80011b8:	e083      	b.n	80012c2 <handle_range+0x146>
		}
		case MB_BAUD_RATE:
		{
			if(holding_register_database[holding_register] < BAUD_RATE_4800)
 80011ba:	1dbb      	adds	r3, r7, #6
 80011bc:	881a      	ldrh	r2, [r3, #0]
 80011be:	4b4b      	ldr	r3, [pc, #300]	@ (80012ec <handle_range+0x170>)
 80011c0:	0052      	lsls	r2, r2, #1
 80011c2:	5ad3      	ldrh	r3, [r2, r3]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d806      	bhi.n	80011d6 <handle_range+0x5a>
			{
				holding_register_database[holding_register] = BAUD_RATE_4800;
 80011c8:	1dbb      	adds	r3, r7, #6
 80011ca:	881a      	ldrh	r2, [r3, #0]
 80011cc:	4b47      	ldr	r3, [pc, #284]	@ (80012ec <handle_range+0x170>)
 80011ce:	0052      	lsls	r2, r2, #1
 80011d0:	2102      	movs	r1, #2
 80011d2:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
			{
				holding_register_database[holding_register] = BAUD_RATE_256000;
			}
			break;
 80011d4:	e077      	b.n	80012c6 <handle_range+0x14a>
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
 80011d6:	1dbb      	adds	r3, r7, #6
 80011d8:	881a      	ldrh	r2, [r3, #0]
 80011da:	4b44      	ldr	r3, [pc, #272]	@ (80012ec <handle_range+0x170>)
 80011dc:	0052      	lsls	r2, r2, #1
 80011de:	5ad3      	ldrh	r3, [r2, r3]
 80011e0:	2b09      	cmp	r3, #9
 80011e2:	d800      	bhi.n	80011e6 <handle_range+0x6a>
 80011e4:	e06f      	b.n	80012c6 <handle_range+0x14a>
				holding_register_database[holding_register] = BAUD_RATE_256000;
 80011e6:	1dbb      	adds	r3, r7, #6
 80011e8:	881a      	ldrh	r2, [r3, #0]
 80011ea:	4b40      	ldr	r3, [pc, #256]	@ (80012ec <handle_range+0x170>)
 80011ec:	0052      	lsls	r2, r2, #1
 80011ee:	2109      	movs	r1, #9
 80011f0:	52d1      	strh	r1, [r2, r3]
			break;
 80011f2:	e068      	b.n	80012c6 <handle_range+0x14a>
		}
		case MB_TRANSMIT_TIMEOUT:
		{
			if(holding_register_database[holding_register] < 5)
 80011f4:	1dbb      	adds	r3, r7, #6
 80011f6:	881a      	ldrh	r2, [r3, #0]
 80011f8:	4b3c      	ldr	r3, [pc, #240]	@ (80012ec <handle_range+0x170>)
 80011fa:	0052      	lsls	r2, r2, #1
 80011fc:	5ad3      	ldrh	r3, [r2, r3]
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d806      	bhi.n	8001210 <handle_range+0x94>
			{
				holding_register_database[holding_register] = 5;
 8001202:	1dbb      	adds	r3, r7, #6
 8001204:	881a      	ldrh	r2, [r3, #0]
 8001206:	4b39      	ldr	r3, [pc, #228]	@ (80012ec <handle_range+0x170>)
 8001208:	0052      	lsls	r2, r2, #1
 800120a:	2105      	movs	r1, #5
 800120c:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 1000)
			{
				holding_register_database[holding_register] = 1000;
			}
			break;
 800120e:	e05c      	b.n	80012ca <handle_range+0x14e>
			else if(holding_register_database[holding_register] > 1000)
 8001210:	1dbb      	adds	r3, r7, #6
 8001212:	881a      	ldrh	r2, [r3, #0]
 8001214:	4b35      	ldr	r3, [pc, #212]	@ (80012ec <handle_range+0x170>)
 8001216:	0052      	lsls	r2, r2, #1
 8001218:	5ad2      	ldrh	r2, [r2, r3]
 800121a:	23fa      	movs	r3, #250	@ 0xfa
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	429a      	cmp	r2, r3
 8001220:	d953      	bls.n	80012ca <handle_range+0x14e>
				holding_register_database[holding_register] = 1000;
 8001222:	1dbb      	adds	r3, r7, #6
 8001224:	881a      	ldrh	r2, [r3, #0]
 8001226:	4b31      	ldr	r3, [pc, #196]	@ (80012ec <handle_range+0x170>)
 8001228:	0052      	lsls	r2, r2, #1
 800122a:	21fa      	movs	r1, #250	@ 0xfa
 800122c:	0089      	lsls	r1, r1, #2
 800122e:	52d1      	strh	r1, [r2, r3]
			break;
 8001230:	e04b      	b.n	80012ca <handle_range+0x14e>
		}
		case MB_TRANSMIT_RETRIES:
		{
			if(holding_register_database[holding_register] > 5)
 8001232:	1dbb      	adds	r3, r7, #6
 8001234:	881a      	ldrh	r2, [r3, #0]
 8001236:	4b2d      	ldr	r3, [pc, #180]	@ (80012ec <handle_range+0x170>)
 8001238:	0052      	lsls	r2, r2, #1
 800123a:	5ad3      	ldrh	r3, [r2, r3]
 800123c:	2b05      	cmp	r3, #5
 800123e:	d946      	bls.n	80012ce <handle_range+0x152>
			{
				holding_register_database[holding_register] = 5;
 8001240:	1dbb      	adds	r3, r7, #6
 8001242:	881a      	ldrh	r2, [r3, #0]
 8001244:	4b29      	ldr	r3, [pc, #164]	@ (80012ec <handle_range+0x170>)
 8001246:	0052      	lsls	r2, r2, #1
 8001248:	2105      	movs	r1, #5
 800124a:	52d1      	strh	r1, [r2, r3]
			}
			break;
 800124c:	e03f      	b.n	80012ce <handle_range+0x152>
		}
		case MB_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x3FF)
 800124e:	1dbb      	adds	r3, r7, #6
 8001250:	881a      	ldrh	r2, [r3, #0]
 8001252:	4b26      	ldr	r3, [pc, #152]	@ (80012ec <handle_range+0x170>)
 8001254:	0052      	lsls	r2, r2, #1
 8001256:	5ad2      	ldrh	r2, [r2, r3]
 8001258:	2380      	movs	r3, #128	@ 0x80
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	429a      	cmp	r2, r3
 800125e:	d338      	bcc.n	80012d2 <handle_range+0x156>
			{
				holding_register_database[holding_register] = 0x3FF;
 8001260:	1dbb      	adds	r3, r7, #6
 8001262:	881a      	ldrh	r2, [r3, #0]
 8001264:	4b21      	ldr	r3, [pc, #132]	@ (80012ec <handle_range+0x170>)
 8001266:	0052      	lsls	r2, r2, #1
 8001268:	4921      	ldr	r1, [pc, #132]	@ (80012f0 <handle_range+0x174>)
 800126a:	52d1      	strh	r1, [r2, r3]
			}
			break;
 800126c:	e031      	b.n	80012d2 <handle_range+0x156>
		}
		case I2C_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x7F)
 800126e:	1dbb      	adds	r3, r7, #6
 8001270:	881a      	ldrh	r2, [r3, #0]
 8001272:	4b1e      	ldr	r3, [pc, #120]	@ (80012ec <handle_range+0x170>)
 8001274:	0052      	lsls	r2, r2, #1
 8001276:	5ad3      	ldrh	r3, [r2, r3]
 8001278:	2b7f      	cmp	r3, #127	@ 0x7f
 800127a:	d92c      	bls.n	80012d6 <handle_range+0x15a>
			{
				holding_register_database[holding_register] = 0x7F;
 800127c:	1dbb      	adds	r3, r7, #6
 800127e:	881a      	ldrh	r2, [r3, #0]
 8001280:	4b1a      	ldr	r3, [pc, #104]	@ (80012ec <handle_range+0x170>)
 8001282:	0052      	lsls	r2, r2, #1
 8001284:	217f      	movs	r1, #127	@ 0x7f
 8001286:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8001288:	e025      	b.n	80012d6 <handle_range+0x15a>
		}
		case I2C_SHUTDOWN:
		{
			if(holding_register_database[holding_register] > 1)
 800128a:	1dbb      	adds	r3, r7, #6
 800128c:	881a      	ldrh	r2, [r3, #0]
 800128e:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <handle_range+0x170>)
 8001290:	0052      	lsls	r2, r2, #1
 8001292:	5ad3      	ldrh	r3, [r2, r3]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d920      	bls.n	80012da <handle_range+0x15e>
			{
				holding_register_database[holding_register] = 1;
 8001298:	1dbb      	adds	r3, r7, #6
 800129a:	881a      	ldrh	r2, [r3, #0]
 800129c:	4b13      	ldr	r3, [pc, #76]	@ (80012ec <handle_range+0x170>)
 800129e:	0052      	lsls	r2, r2, #1
 80012a0:	2101      	movs	r1, #1
 80012a2:	52d1      	strh	r1, [r2, r3]
			}
			break;
 80012a4:	e019      	b.n	80012da <handle_range+0x15e>
		}
		case GPIO_WRITE:
		{
			if(holding_register_database[holding_register] > 0xF)
 80012a6:	1dbb      	adds	r3, r7, #6
 80012a8:	881a      	ldrh	r2, [r3, #0]
 80012aa:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <handle_range+0x170>)
 80012ac:	0052      	lsls	r2, r2, #1
 80012ae:	5ad3      	ldrh	r3, [r2, r3]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d914      	bls.n	80012de <handle_range+0x162>
			{
				holding_register_database[holding_register] = 0xF;
 80012b4:	1dbb      	adds	r3, r7, #6
 80012b6:	881a      	ldrh	r2, [r3, #0]
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <handle_range+0x170>)
 80012ba:	0052      	lsls	r2, r2, #1
 80012bc:	210f      	movs	r1, #15
 80012be:	52d1      	strh	r1, [r2, r3]
			}
			break;
 80012c0:	e00d      	b.n	80012de <handle_range+0x162>
			break;
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	e00c      	b.n	80012e0 <handle_range+0x164>
			break;
 80012c6:	46c0      	nop			@ (mov r8, r8)
 80012c8:	e00a      	b.n	80012e0 <handle_range+0x164>
			break;
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	e008      	b.n	80012e0 <handle_range+0x164>
			break;
 80012ce:	46c0      	nop			@ (mov r8, r8)
 80012d0:	e006      	b.n	80012e0 <handle_range+0x164>
			break;
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	e004      	b.n	80012e0 <handle_range+0x164>
			break;
 80012d6:	46c0      	nop			@ (mov r8, r8)
 80012d8:	e002      	b.n	80012e0 <handle_range+0x164>
			break;
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	e000      	b.n	80012e0 <handle_range+0x164>
			break;
 80012de:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 80012e0:	46c0      	nop			@ (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b002      	add	sp, #8
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	08005bfc 	.word	0x08005bfc
 80012ec:	20000000 	.word	0x20000000
 80012f0:	000003ff 	.word	0x000003ff

080012f4 <modbus_send>:
#endif // MB_SLAVE

// General Modbus Functions -------------------------------------------------------------------

int8_t modbus_send(uint8_t size)
{
 80012f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	0002      	movs	r2, r0
 80012fc:	1dfb      	adds	r3, r7, #7
 80012fe:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8001300:	250f      	movs	r5, #15
 8001302:	197b      	adds	r3, r7, r5
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 8001308:	260c      	movs	r6, #12
 800130a:	19bc      	adds	r4, r7, r6
 800130c:	1dfb      	adds	r3, r7, #7
 800130e:	781a      	ldrb	r2, [r3, #0]
 8001310:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <modbus_send+0x98>)
 8001312:	0011      	movs	r1, r2
 8001314:	0018      	movs	r0, r3
 8001316:	f000 fa0d 	bl	8001734 <crc_16>
 800131a:	0003      	movs	r3, r0
 800131c:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	19ba      	adds	r2, r7, r6
 8001324:	8812      	ldrh	r2, [r2, #0]
 8001326:	b2d1      	uxtb	r1, r2
 8001328:	4a18      	ldr	r2, [pc, #96]	@ (800138c <modbus_send+0x98>)
 800132a:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 800132c:	19bb      	adds	r3, r7, r6
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	b29a      	uxth	r2, r3
 8001334:	1dfb      	adds	r3, r7, #7
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	b2d1      	uxtb	r1, r2
 800133c:	4a13      	ldr	r2, [pc, #76]	@ (800138c <modbus_send+0x98>)
 800133e:	54d1      	strb	r1, [r2, r3]

	uart_tx_int = 0; // This will enable tx timeout monitoring
 8001340:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <modbus_send+0x9c>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
	tx_time = HAL_GetTick();
 8001346:	f000 fe11 	bl	8001f6c <HAL_GetTick>
 800134a:	0002      	movs	r2, r0
 800134c:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <modbus_send+0xa0>)
 800134e:	601a      	str	r2, [r3, #0]
	status = HAL_UART_Transmit_DMA(&huart1, modbus_tx_buffer, size + 2);
 8001350:	1dfb      	adds	r3, r7, #7
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b29b      	uxth	r3, r3
 8001356:	3302      	adds	r3, #2
 8001358:	b29a      	uxth	r2, r3
 800135a:	490c      	ldr	r1, [pc, #48]	@ (800138c <modbus_send+0x98>)
 800135c:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <modbus_send+0xa4>)
 800135e:	0018      	movs	r0, r3
 8001360:	f003 f970 	bl	8004644 <HAL_UART_Transmit_DMA>
 8001364:	0003      	movs	r3, r0
 8001366:	001a      	movs	r2, r3
 8001368:	197b      	adds	r3, r7, r5
 800136a:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_tx, DMA_IT_HT);
 800136c:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <modbus_send+0xa8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <modbus_send+0xa8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2104      	movs	r1, #4
 8001378:	438a      	bics	r2, r1
 800137a:	601a      	str	r2, [r3, #0]
	return status;
 800137c:	197b      	adds	r3, r7, r5
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b25b      	sxtb	r3, r3
}
 8001382:	0018      	movs	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	b005      	add	sp, #20
 8001388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	20000464 	.word	0x20000464
 8001390:	2000001c 	.word	0x2000001c
 8001394:	20000660 	.word	0x20000660
 8001398:	20000214 	.word	0x20000214
 800139c:	20000304 	.word	0x20000304

080013a0 <modbus_reset>:

int8_t modbus_reset()
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
	int8_t status = 0;
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Abort(&huart1);
 80013ac:	4b30      	ldr	r3, [pc, #192]	@ (8001470 <modbus_reset+0xd0>)
 80013ae:	0018      	movs	r0, r3
 80013b0:	f003 f9da 	bl	8004768 <HAL_UART_Abort>
 80013b4:	0003      	movs	r3, r0
 80013b6:	001a      	movs	r2, r3
 80013b8:	1dfb      	adds	r3, r7, #7
 80013ba:	701a      	strb	r2, [r3, #0]
	status |= HAL_UART_DeInit(&huart1);
 80013bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001470 <modbus_reset+0xd0>)
 80013be:	0018      	movs	r0, r3
 80013c0:	f003 f900 	bl	80045c4 <HAL_UART_DeInit>
 80013c4:	0003      	movs	r3, r0
 80013c6:	b259      	sxtb	r1, r3
 80013c8:	1dfb      	adds	r3, r7, #7
 80013ca:	1dfa      	adds	r2, r7, #7
 80013cc:	7812      	ldrb	r2, [r2, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	701a      	strb	r2, [r3, #0]
	__USART1_FORCE_RESET();
 80013d2:	4b28      	ldr	r3, [pc, #160]	@ (8001474 <modbus_reset+0xd4>)
 80013d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013d6:	4b27      	ldr	r3, [pc, #156]	@ (8001474 <modbus_reset+0xd4>)
 80013d8:	2180      	movs	r1, #128	@ 0x80
 80013da:	01c9      	lsls	r1, r1, #7
 80013dc:	430a      	orrs	r2, r1
 80013de:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_Delay(100);
 80013e0:	2064      	movs	r0, #100	@ 0x64
 80013e2:	f000 fdcd 	bl	8001f80 <HAL_Delay>
	__USART1_RELEASE_RESET();
 80013e6:	4b23      	ldr	r3, [pc, #140]	@ (8001474 <modbus_reset+0xd4>)
 80013e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013ea:	4b22      	ldr	r3, [pc, #136]	@ (8001474 <modbus_reset+0xd4>)
 80013ec:	4922      	ldr	r1, [pc, #136]	@ (8001478 <modbus_reset+0xd8>)
 80013ee:	400a      	ands	r2, r1
 80013f0:	631a      	str	r2, [r3, #48]	@ 0x30
	status = HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0);
 80013f2:	481f      	ldr	r0, [pc, #124]	@ (8001470 <modbus_reset+0xd0>)
 80013f4:	2300      	movs	r3, #0
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	f004 f8c9 	bl	8005590 <HAL_RS485Ex_Init>
 80013fe:	0003      	movs	r3, r0
 8001400:	001a      	movs	r2, r3
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8);
 8001406:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <modbus_reset+0xd0>)
 8001408:	2100      	movs	r1, #0
 800140a:	0018      	movs	r0, r3
 800140c:	f004 f96c 	bl	80056e8 <HAL_UARTEx_SetTxFifoThreshold>
 8001410:	0003      	movs	r3, r0
 8001412:	b259      	sxtb	r1, r3
 8001414:	1dfb      	adds	r3, r7, #7
 8001416:	1dfa      	adds	r2, r7, #7
 8001418:	7812      	ldrb	r2, [r2, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8);
 800141e:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <modbus_reset+0xd0>)
 8001420:	2100      	movs	r1, #0
 8001422:	0018      	movs	r0, r3
 8001424:	f004 f9a0 	bl	8005768 <HAL_UARTEx_SetRxFifoThreshold>
 8001428:	0003      	movs	r3, r0
 800142a:	b259      	sxtb	r1, r3
 800142c:	1dfb      	adds	r3, r7, #7
 800142e:	1dfa      	adds	r2, r7, #7
 8001430:	7812      	ldrb	r2, [r2, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_DisableFifoMode(&huart1);
 8001436:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <modbus_reset+0xd0>)
 8001438:	0018      	movs	r0, r3
 800143a:	f004 f91b 	bl	8005674 <HAL_UARTEx_DisableFifoMode>
 800143e:	0003      	movs	r3, r0
 8001440:	b259      	sxtb	r1, r3
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	1dfa      	adds	r2, r7, #7
 8001446:	7812      	ldrb	r2, [r2, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 800144c:	1dfb      	adds	r3, r7, #7
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b25b      	sxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d004      	beq.n	8001460 <modbus_reset+0xc0>
	{
		return handle_modbus_error(MB_FATAL_ERROR);
 8001456:	2015      	movs	r0, #21
 8001458:	f000 f94e 	bl	80016f8 <handle_modbus_error>
 800145c:	0003      	movs	r3, r0
 800145e:	e002      	b.n	8001466 <modbus_reset+0xc6>
	}
	return status;
 8001460:	1dfb      	adds	r3, r7, #7
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b25b      	sxtb	r3, r3
}
 8001466:	0018      	movs	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	b002      	add	sp, #8
 800146c:	bd80      	pop	{r7, pc}
 800146e:	46c0      	nop			@ (mov r8, r8)
 8001470:	20000214 	.word	0x20000214
 8001474:	40021000 	.word	0x40021000
 8001478:	ffffbfff 	.word	0xffffbfff

0800147c <modbus_set_rx>:

int8_t modbus_set_rx()
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, 6);
 8001482:	490c      	ldr	r1, [pc, #48]	@ (80014b4 <modbus_set_rx+0x38>)
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <modbus_set_rx+0x3c>)
 8001486:	2206      	movs	r2, #6
 8001488:	0018      	movs	r0, r3
 800148a:	f004 f9af 	bl	80057ec <HAL_UARTEx_ReceiveToIdle_DMA>
 800148e:	0003      	movs	r3, r0
 8001490:	001a      	movs	r2, r3
 8001492:	1dfb      	adds	r3, r7, #7
 8001494:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <modbus_set_rx+0x40>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <modbus_set_rx+0x40>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2104      	movs	r1, #4
 80014a2:	438a      	bics	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]

	return status;
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b25b      	sxtb	r3, r3
}
 80014ac:	0018      	movs	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b002      	add	sp, #8
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000564 	.word	0x20000564
 80014b8:	20000214 	.word	0x20000214
 80014bc:	200002a8 	.word	0x200002a8

080014c0 <monitor_modbus>:

int8_t monitor_modbus()
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
	int8_t status = MB_SUCCESS;
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]

	// Chunk miss handling
	status = handle_chunk_miss();
 80014cc:	1dfc      	adds	r4, r7, #7
 80014ce:	f000 f977 	bl	80017c0 <handle_chunk_miss>
 80014d2:	0003      	movs	r3, r0
 80014d4:	7023      	strb	r3, [r4, #0]
	if(status != MB_SUCCESS)
 80014d6:	1dfb      	adds	r3, r7, #7
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b25b      	sxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d012      	beq.n	8001506 <monitor_modbus+0x46>
	{
		status = modbus_reset();
 80014e0:	1dfc      	adds	r4, r7, #7
 80014e2:	f7ff ff5d 	bl	80013a0 <modbus_reset>
 80014e6:	0003      	movs	r3, r0
 80014e8:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 80014ea:	1dfb      	adds	r3, r7, #7
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <monitor_modbus+0x3c>
		{
			return status;
 80014f4:	1dfb      	adds	r3, r7, #7
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	e039      	b.n	8001570 <monitor_modbus+0xb0>
		}
		return handle_modbus_error(MB_UART_ERROR);
 80014fc:	2014      	movs	r0, #20
 80014fe:	f000 f8fb 	bl	80016f8 <handle_modbus_error>
 8001502:	0003      	movs	r3, r0
 8001504:	e034      	b.n	8001570 <monitor_modbus+0xb0>
	}

	// Uart error handling
	if(uart_err_int)
 8001506:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <monitor_modbus+0xb8>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d015      	beq.n	800153c <monitor_modbus+0x7c>
	{
		uart_err_int = 0;
 8001510:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <monitor_modbus+0xb8>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
		status = modbus_reset();
 8001516:	1dfc      	adds	r4, r7, #7
 8001518:	f7ff ff42 	bl	80013a0 <modbus_reset>
 800151c:	0003      	movs	r3, r0
 800151e:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 8001520:	1dfb      	adds	r3, r7, #7
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b25b      	sxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <monitor_modbus+0x72>
		{
			return status;
 800152a:	1dfb      	adds	r3, r7, #7
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b25b      	sxtb	r3, r3
 8001530:	e01e      	b.n	8001570 <monitor_modbus+0xb0>
		}
		return handle_modbus_error(MB_UART_ERROR);
 8001532:	2014      	movs	r0, #20
 8001534:	f000 f8e0 	bl	80016f8 <handle_modbus_error>
 8001538:	0003      	movs	r3, r0
 800153a:	e019      	b.n	8001570 <monitor_modbus+0xb0>
	}

	// TX timeout handling
	if(!uart_tx_int)
 800153c:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <monitor_modbus+0xbc>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d111      	bne.n	800156a <monitor_modbus+0xaa>
	{
		if(HAL_GetTick() - tx_time >= holding_register_database[MB_TRANSMIT_TIMEOUT])
 8001546:	f000 fd11 	bl	8001f6c <HAL_GetTick>
 800154a:	0002      	movs	r2, r0
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <monitor_modbus+0xc0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	4a0c      	ldr	r2, [pc, #48]	@ (8001584 <monitor_modbus+0xc4>)
 8001554:	8892      	ldrh	r2, [r2, #4]
 8001556:	4293      	cmp	r3, r2
 8001558:	d304      	bcc.n	8001564 <monitor_modbus+0xa4>
		{
			return handle_modbus_error(MB_TX_TIMEOUT);
 800155a:	2012      	movs	r0, #18
 800155c:	f000 f8cc 	bl	80016f8 <handle_modbus_error>
 8001560:	0003      	movs	r3, r0
 8001562:	e005      	b.n	8001570 <monitor_modbus+0xb0>
		}
		status = HAL_BUSY;
 8001564:	1dfb      	adds	r3, r7, #7
 8001566:	2202      	movs	r2, #2
 8001568:	701a      	strb	r2, [r3, #0]
			}
			status = HAL_BUSY;
		}
	}
#endif
	return status;
 800156a:	1dfb      	adds	r3, r7, #7
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b25b      	sxtb	r3, r3
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	b003      	add	sp, #12
 8001576:	bd90      	pop	{r4, r7, pc}
 8001578:	2000066f 	.word	0x2000066f
 800157c:	2000001c 	.word	0x2000001c
 8001580:	20000660 	.word	0x20000660
 8001584:	20000000 	.word	0x20000000

08001588 <modbus_change_baud_rate>:

	return status;
}

int8_t modbus_change_baud_rate()
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
	int8_t status = 0;
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[MB_BAUD_RATE])
 8001594:	4b3c      	ldr	r3, [pc, #240]	@ (8001688 <modbus_change_baud_rate+0x100>)
 8001596:	885b      	ldrh	r3, [r3, #2]
 8001598:	2b09      	cmp	r3, #9
 800159a:	d82c      	bhi.n	80015f6 <modbus_change_baud_rate+0x6e>
 800159c:	009a      	lsls	r2, r3, #2
 800159e:	4b3b      	ldr	r3, [pc, #236]	@ (800168c <modbus_change_baud_rate+0x104>)
 80015a0:	18d3      	adds	r3, r2, r3
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	469f      	mov	pc, r3
	{
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 80015a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001690 <modbus_change_baud_rate+0x108>)
 80015a8:	2296      	movs	r2, #150	@ 0x96
 80015aa:	0152      	lsls	r2, r2, #5
 80015ac:	605a      	str	r2, [r3, #4]
			break;
 80015ae:	e049      	b.n	8001644 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 80015b0:	4b37      	ldr	r3, [pc, #220]	@ (8001690 <modbus_change_baud_rate+0x108>)
 80015b2:	2296      	movs	r2, #150	@ 0x96
 80015b4:	0192      	lsls	r2, r2, #6
 80015b6:	605a      	str	r2, [r3, #4]
			break;
 80015b8:	e044      	b.n	8001644 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 80015ba:	4b35      	ldr	r3, [pc, #212]	@ (8001690 <modbus_change_baud_rate+0x108>)
 80015bc:	2296      	movs	r2, #150	@ 0x96
 80015be:	01d2      	lsls	r2, r2, #7
 80015c0:	605a      	str	r2, [r3, #4]
			break;
 80015c2:	e03f      	b.n	8001644 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 80015c4:	4b32      	ldr	r3, [pc, #200]	@ (8001690 <modbus_change_baud_rate+0x108>)
 80015c6:	2296      	movs	r2, #150	@ 0x96
 80015c8:	0212      	lsls	r2, r2, #8
 80015ca:	605a      	str	r2, [r3, #4]
			break;
 80015cc:	e03a      	b.n	8001644 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 80015ce:	4b30      	ldr	r3, [pc, #192]	@ (8001690 <modbus_change_baud_rate+0x108>)
 80015d0:	22e1      	movs	r2, #225	@ 0xe1
 80015d2:	0212      	lsls	r2, r2, #8
 80015d4:	605a      	str	r2, [r3, #4]
			break;
 80015d6:	e035      	b.n	8001644 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 80015d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001690 <modbus_change_baud_rate+0x108>)
 80015da:	22e1      	movs	r2, #225	@ 0xe1
 80015dc:	0252      	lsls	r2, r2, #9
 80015de:	605a      	str	r2, [r3, #4]
			break;
 80015e0:	e030      	b.n	8001644 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 80015e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001690 <modbus_change_baud_rate+0x108>)
 80015e4:	22fa      	movs	r2, #250	@ 0xfa
 80015e6:	0252      	lsls	r2, r2, #9
 80015e8:	605a      	str	r2, [r3, #4]
			break;
 80015ea:	e02b      	b.n	8001644 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 80015ec:	4b28      	ldr	r3, [pc, #160]	@ (8001690 <modbus_change_baud_rate+0x108>)
 80015ee:	22fa      	movs	r2, #250	@ 0xfa
 80015f0:	0292      	lsls	r2, r2, #10
 80015f2:	605a      	str	r2, [r3, #4]
			break;
 80015f4:	e026      	b.n	8001644 <modbus_change_baud_rate+0xbc>
		}
		default:
		{
			holding_register_database[MB_BAUD_RATE] = BAUD_RATE_9600;
 80015f6:	4b24      	ldr	r3, [pc, #144]	@ (8001688 <modbus_change_baud_rate+0x100>)
 80015f8:	2203      	movs	r2, #3
 80015fa:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 80015fc:	4b24      	ldr	r3, [pc, #144]	@ (8001690 <modbus_change_baud_rate+0x108>)
 80015fe:	2296      	movs	r2, #150	@ 0x96
 8001600:	0192      	lsls	r2, r2, #6
 8001602:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 8001604:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <modbus_change_baud_rate+0x108>)
 8001606:	0018      	movs	r0, r3
 8001608:	f003 f9d2 	bl	80049b0 <UART_SetConfig>
 800160c:	0003      	movs	r3, r0
 800160e:	001a      	movs	r2, r3
 8001610:	1dfb      	adds	r3, r7, #7
 8001612:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8001614:	1dfb      	adds	r3, r7, #7
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b25b      	sxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10d      	bne.n	800163a <modbus_change_baud_rate+0xb2>
			{
				status = modbus_reset();
 800161e:	1dfc      	adds	r4, r7, #7
 8001620:	f7ff febe 	bl	80013a0 <modbus_reset>
 8001624:	0003      	movs	r3, r0
 8001626:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK)
 8001628:	1dfb      	adds	r3, r7, #7
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b25b      	sxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <modbus_change_baud_rate+0xb2>
				{
					return status;
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b25b      	sxtb	r3, r3
 8001638:	e022      	b.n	8001680 <modbus_change_baud_rate+0xf8>
				}
			}
			return handle_modbus_error(RANGE_ERROR);
 800163a:	200e      	movs	r0, #14
 800163c:	f000 f85c 	bl	80016f8 <handle_modbus_error>
 8001640:	0003      	movs	r3, r0
 8001642:	e01d      	b.n	8001680 <modbus_change_baud_rate+0xf8>
		}
	}
	status = UART_SetConfig(&huart1);
 8001644:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <modbus_change_baud_rate+0x108>)
 8001646:	0018      	movs	r0, r3
 8001648:	f003 f9b2 	bl	80049b0 <UART_SetConfig>
 800164c:	0003      	movs	r3, r0
 800164e:	001a      	movs	r2, r3
 8001650:	1dfb      	adds	r3, r7, #7
 8001652:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
 8001654:	1dfb      	adds	r3, r7, #7
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b25b      	sxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10d      	bne.n	800167a <modbus_change_baud_rate+0xf2>
	{
		// Log error, reset UART
		status = modbus_reset();
 800165e:	1dfc      	adds	r4, r7, #7
 8001660:	f7ff fe9e 	bl	80013a0 <modbus_reset>
 8001664:	0003      	movs	r3, r0
 8001666:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 8001668:	1dfb      	adds	r3, r7, #7
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b25b      	sxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <modbus_change_baud_rate+0xf2>
		{
			return status;
 8001672:	1dfb      	adds	r3, r7, #7
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b25b      	sxtb	r3, r3
 8001678:	e002      	b.n	8001680 <modbus_change_baud_rate+0xf8>
		}
	}

	return modbus_set_rx();
 800167a:	f7ff feff 	bl	800147c <modbus_set_rx>
 800167e:	0003      	movs	r3, r0
}
 8001680:	0018      	movs	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	b003      	add	sp, #12
 8001686:	bd90      	pop	{r4, r7, pc}
 8001688:	20000000 	.word	0x20000000
 800168c:	08005c30 	.word	0x08005c30
 8001690:	20000214 	.word	0x20000214

08001694 <get_rx_buffer>:
}


// Low Level Functions -------------------------------------------------------------------------
uint8_t get_rx_buffer(uint8_t index)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	0002      	movs	r2, r0
 800169c:	1dfb      	adds	r3, r7, #7
 800169e:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 80016a0:	1dfb      	adds	r3, r7, #7
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2bff      	cmp	r3, #255	@ 0xff
 80016a6:	d01e      	beq.n	80016e6 <get_rx_buffer+0x52>
	{
		return ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 80016a8:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <get_rx_buffer+0x5c>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	001a      	movs	r2, r3
 80016b0:	1dfb      	adds	r3, r7, #7
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 80016b6:	2bff      	cmp	r3, #255	@ 0xff
 80016b8:	dd0b      	ble.n	80016d2 <get_rx_buffer+0x3e>
 80016ba:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <get_rx_buffer+0x5c>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	001a      	movs	r2, r3
 80016c2:	1dfb      	adds	r3, r7, #7
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	18d3      	adds	r3, r2, r3
 80016c8:	3b01      	subs	r3, #1
 80016ca:	3bff      	subs	r3, #255	@ 0xff
 80016cc:	4a09      	ldr	r2, [pc, #36]	@ (80016f4 <get_rx_buffer+0x60>)
 80016ce:	5cd3      	ldrb	r3, [r2, r3]
 80016d0:	e00a      	b.n	80016e8 <get_rx_buffer+0x54>
				modbus_rx_buffer[start_index + index];
 80016d2:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <get_rx_buffer+0x5c>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	001a      	movs	r2, r3
 80016da:	1dfb      	adds	r3, r7, #7
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 80016e0:	4a04      	ldr	r2, [pc, #16]	@ (80016f4 <get_rx_buffer+0x60>)
 80016e2:	5cd3      	ldrb	r3, [r2, r3]
 80016e4:	e000      	b.n	80016e8 <get_rx_buffer+0x54>
	}
	return 0xFF;
 80016e6:	23ff      	movs	r3, #255	@ 0xff
}
 80016e8:	0018      	movs	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b002      	add	sp, #8
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000668 	.word	0x20000668
 80016f4:	20000364 	.word	0x20000364

080016f8 <handle_modbus_error>:

int8_t handle_modbus_error(int8_t error_code)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	0002      	movs	r2, r0
 8001700:	1dfb      	adds	r3, r7, #7
 8001702:	701a      	strb	r2, [r3, #0]
	holding_register_database[MB_ERRORS] |= 1U << (error_code - RANGE_ERROR);
 8001704:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <handle_modbus_error+0x38>)
 8001706:	891a      	ldrh	r2, [r3, #8]
 8001708:	1dfb      	adds	r3, r7, #7
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b25b      	sxtb	r3, r3
 800170e:	3b0e      	subs	r3, #14
 8001710:	2101      	movs	r1, #1
 8001712:	4099      	lsls	r1, r3
 8001714:	000b      	movs	r3, r1
 8001716:	b29b      	uxth	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b29a      	uxth	r2, r3
 800171c:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <handle_modbus_error+0x38>)
 800171e:	811a      	strh	r2, [r3, #8]
	return error_code;
 8001720:	1dfb      	adds	r3, r7, #7
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b25b      	sxtb	r3, r3
}
 8001726:	0018      	movs	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	b002      	add	sp, #8
 800172c:	bd80      	pop	{r7, pc}
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	20000000 	.word	0x20000000

08001734 <crc_16>:

// Private Functions ---------------------------------------------------------------------------

uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	000a      	movs	r2, r1
 800173e:	1cfb      	adds	r3, r7, #3
 8001740:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 8001742:	230f      	movs	r3, #15
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	22ff      	movs	r2, #255	@ 0xff
 8001748:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 800174a:	230e      	movs	r3, #14
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	22ff      	movs	r2, #255	@ 0xff
 8001750:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8001752:	e019      	b.n	8001788 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	781a      	ldrb	r2, [r3, #0]
 800175c:	200e      	movs	r0, #14
 800175e:	183b      	adds	r3, r7, r0
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	4053      	eors	r3, r2
 8001764:	b2db      	uxtb	r3, r3
 8001766:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8001768:	4a13      	ldr	r2, [pc, #76]	@ (80017b8 <crc_16+0x84>)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	18d3      	adds	r3, r2, r3
 800176e:	7819      	ldrb	r1, [r3, #0]
 8001770:	183b      	adds	r3, r7, r0
 8001772:	200f      	movs	r0, #15
 8001774:	183a      	adds	r2, r7, r0
 8001776:	7812      	ldrb	r2, [r2, #0]
 8001778:	404a      	eors	r2, r1
 800177a:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 800177c:	183b      	adds	r3, r7, r0
 800177e:	490f      	ldr	r1, [pc, #60]	@ (80017bc <crc_16+0x88>)
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	188a      	adds	r2, r1, r2
 8001784:	7812      	ldrb	r2, [r2, #0]
 8001786:	701a      	strb	r2, [r3, #0]
	while (size--)
 8001788:	1cfb      	adds	r3, r7, #3
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	1cfa      	adds	r2, r7, #3
 800178e:	1e59      	subs	r1, r3, #1
 8001790:	7011      	strb	r1, [r2, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1de      	bne.n	8001754 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 8001796:	230f      	movs	r3, #15
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	b21a      	sxth	r2, r3
 80017a0:	230e      	movs	r3, #14
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	b29b      	uxth	r3, r3
}
 80017ae:	0018      	movs	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b004      	add	sp, #16
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	080059fc 	.word	0x080059fc
 80017bc:	08005afc 	.word	0x08005afc

080017c0 <handle_chunk_miss>:

int8_t handle_chunk_miss()
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 80017c6:	4b15      	ldr	r3, [pc, #84]	@ (800181c <handle_chunk_miss+0x5c>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d120      	bne.n	8001812 <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 80017d0:	f000 fbcc 	bl	8001f6c <HAL_GetTick>
 80017d4:	0002      	movs	r2, r0
 80017d6:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <handle_chunk_miss+0x60>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b0a      	cmp	r3, #10
 80017de:	d918      	bls.n	8001812 <handle_chunk_miss+0x52>
		{
			modbus_header = 1;
 80017e0:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <handle_chunk_miss+0x5c>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort(&huart1);
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <handle_chunk_miss+0x64>)
 80017e8:	0018      	movs	r0, r3
 80017ea:	f002 ffbd 	bl	8004768 <HAL_UART_Abort>
 80017ee:	0003      	movs	r3, r0
 80017f0:	001a      	movs	r2, r3
 80017f2:	1dfb      	adds	r3, r7, #7
 80017f4:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 80017f6:	1dfb      	adds	r3, r7, #7
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d104      	bne.n	800180a <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8001800:	1dfc      	adds	r4, r7, #7
 8001802:	f7ff fe3b 	bl	800147c <modbus_set_rx>
 8001806:	0003      	movs	r3, r0
 8001808:	7023      	strb	r3, [r4, #0]
			}
			return status;
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	b25b      	sxtb	r3, r3
 8001810:	e000      	b.n	8001814 <handle_chunk_miss+0x54>
		}
	}
	return MB_SUCCESS;
 8001812:	2300      	movs	r3, #0
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	b003      	add	sp, #12
 800181a:	bd90      	pop	{r4, r7, pc}
 800181c:	2000001a 	.word	0x2000001a
 8001820:	20000664 	.word	0x20000664
 8001824:	20000214 	.word	0x20000214

08001828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <HAL_MspInit+0x44>)
 8001830:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001832:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <HAL_MspInit+0x44>)
 8001834:	2101      	movs	r1, #1
 8001836:	430a      	orrs	r2, r1
 8001838:	641a      	str	r2, [r3, #64]	@ 0x40
 800183a:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <HAL_MspInit+0x44>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	2201      	movs	r2, #1
 8001840:	4013      	ands	r3, r2
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	4b09      	ldr	r3, [pc, #36]	@ (800186c <HAL_MspInit+0x44>)
 8001848:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800184a:	4b08      	ldr	r3, [pc, #32]	@ (800186c <HAL_MspInit+0x44>)
 800184c:	2180      	movs	r1, #128	@ 0x80
 800184e:	0549      	lsls	r1, r1, #21
 8001850:	430a      	orrs	r2, r1
 8001852:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001854:	4b05      	ldr	r3, [pc, #20]	@ (800186c <HAL_MspInit+0x44>)
 8001856:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001858:	2380      	movs	r3, #128	@ 0x80
 800185a:	055b      	lsls	r3, r3, #21
 800185c:	4013      	ands	r3, r2
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001862:	46c0      	nop			@ (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	b002      	add	sp, #8
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	40021000 	.word	0x40021000

08001870 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b093      	sub	sp, #76	@ 0x4c
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	2334      	movs	r3, #52	@ 0x34
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	0018      	movs	r0, r3
 800187e:	2314      	movs	r3, #20
 8001880:	001a      	movs	r2, r3
 8001882:	2100      	movs	r1, #0
 8001884:	f004 f878 	bl	8005978 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001888:	2414      	movs	r4, #20
 800188a:	193b      	adds	r3, r7, r4
 800188c:	0018      	movs	r0, r3
 800188e:	2320      	movs	r3, #32
 8001890:	001a      	movs	r2, r3
 8001892:	2100      	movs	r1, #0
 8001894:	f004 f870 	bl	8005978 <memset>
  if(hadc->Instance==ADC1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a35      	ldr	r2, [pc, #212]	@ (8001974 <HAL_ADC_MspInit+0x104>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d163      	bne.n	800196a <HAL_ADC_MspInit+0xfa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	2220      	movs	r2, #32
 80018a6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80018a8:	193b      	adds	r3, r7, r4
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	0018      	movs	r0, r3
 80018b2:	f002 fd8b 	bl	80043cc <HAL_RCCEx_PeriphCLKConfig>
 80018b6:	1e03      	subs	r3, r0, #0
 80018b8:	d001      	beq.n	80018be <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 80018ba:	f7ff f9a1 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018be:	4b2e      	ldr	r3, [pc, #184]	@ (8001978 <HAL_ADC_MspInit+0x108>)
 80018c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001978 <HAL_ADC_MspInit+0x108>)
 80018c4:	2180      	movs	r1, #128	@ 0x80
 80018c6:	0349      	lsls	r1, r1, #13
 80018c8:	430a      	orrs	r2, r1
 80018ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80018cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <HAL_ADC_MspInit+0x108>)
 80018ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018d0:	2380      	movs	r3, #128	@ 0x80
 80018d2:	035b      	lsls	r3, r3, #13
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	4b27      	ldr	r3, [pc, #156]	@ (8001978 <HAL_ADC_MspInit+0x108>)
 80018dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018de:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <HAL_ADC_MspInit+0x108>)
 80018e0:	2101      	movs	r1, #1
 80018e2:	430a      	orrs	r2, r1
 80018e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80018e6:	4b24      	ldr	r3, [pc, #144]	@ (8001978 <HAL_ADC_MspInit+0x108>)
 80018e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ea:	2201      	movs	r2, #1
 80018ec:	4013      	ands	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Oil_Temp_Pin|Water_Pressure_Pin|Oil_Pressure_Pin;
 80018f2:	2134      	movs	r1, #52	@ 0x34
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	2207      	movs	r2, #7
 80018f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fa:	187b      	adds	r3, r7, r1
 80018fc:	2203      	movs	r2, #3
 80018fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	187b      	adds	r3, r7, r1
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	187a      	adds	r2, r7, r1
 8001908:	23a0      	movs	r3, #160	@ 0xa0
 800190a:	05db      	lsls	r3, r3, #23
 800190c:	0011      	movs	r1, r2
 800190e:	0018      	movs	r0, r3
 8001910:	f001 fdce 	bl	80034b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001914:	4b19      	ldr	r3, [pc, #100]	@ (800197c <HAL_ADC_MspInit+0x10c>)
 8001916:	4a1a      	ldr	r2, [pc, #104]	@ (8001980 <HAL_ADC_MspInit+0x110>)
 8001918:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <HAL_ADC_MspInit+0x10c>)
 800191c:	2205      	movs	r2, #5
 800191e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001920:	4b16      	ldr	r3, [pc, #88]	@ (800197c <HAL_ADC_MspInit+0x10c>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <HAL_ADC_MspInit+0x10c>)
 8001928:	2200      	movs	r2, #0
 800192a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800192c:	4b13      	ldr	r3, [pc, #76]	@ (800197c <HAL_ADC_MspInit+0x10c>)
 800192e:	2280      	movs	r2, #128	@ 0x80
 8001930:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001932:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_ADC_MspInit+0x10c>)
 8001934:	2280      	movs	r2, #128	@ 0x80
 8001936:	0052      	lsls	r2, r2, #1
 8001938:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800193a:	4b10      	ldr	r3, [pc, #64]	@ (800197c <HAL_ADC_MspInit+0x10c>)
 800193c:	2280      	movs	r2, #128	@ 0x80
 800193e:	00d2      	lsls	r2, r2, #3
 8001940:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001942:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <HAL_ADC_MspInit+0x10c>)
 8001944:	2220      	movs	r2, #32
 8001946:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <HAL_ADC_MspInit+0x10c>)
 800194a:	2200      	movs	r2, #0
 800194c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800194e:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <HAL_ADC_MspInit+0x10c>)
 8001950:	0018      	movs	r0, r3
 8001952:	f001 fa75 	bl	8002e40 <HAL_DMA_Init>
 8001956:	1e03      	subs	r3, r0, #0
 8001958:	d001      	beq.n	800195e <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800195a:	f7ff f951 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a06      	ldr	r2, [pc, #24]	@ (800197c <HAL_ADC_MspInit+0x10c>)
 8001962:	651a      	str	r2, [r3, #80]	@ 0x50
 8001964:	4b05      	ldr	r3, [pc, #20]	@ (800197c <HAL_ADC_MspInit+0x10c>)
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	b013      	add	sp, #76	@ 0x4c
 8001970:	bd90      	pop	{r4, r7, pc}
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	40012400 	.word	0x40012400
 8001978:	40021000 	.word	0x40021000
 800197c:	200000ac 	.word	0x200000ac
 8001980:	40020008 	.word	0x40020008

08001984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b093      	sub	sp, #76	@ 0x4c
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	2334      	movs	r3, #52	@ 0x34
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	0018      	movs	r0, r3
 8001992:	2314      	movs	r3, #20
 8001994:	001a      	movs	r2, r3
 8001996:	2100      	movs	r1, #0
 8001998:	f003 ffee 	bl	8005978 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800199c:	2414      	movs	r4, #20
 800199e:	193b      	adds	r3, r7, r4
 80019a0:	0018      	movs	r0, r3
 80019a2:	2320      	movs	r3, #32
 80019a4:	001a      	movs	r2, r3
 80019a6:	2100      	movs	r1, #0
 80019a8:	f003 ffe6 	bl	8005978 <memset>
  if(hi2c->Instance==I2C1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ae8 <HAL_I2C_MspInit+0x164>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d000      	beq.n	80019b8 <HAL_I2C_MspInit+0x34>
 80019b6:	e093      	b.n	8001ae0 <HAL_I2C_MspInit+0x15c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019b8:	193b      	adds	r3, r7, r4
 80019ba:	2202      	movs	r2, #2
 80019bc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019be:	193b      	adds	r3, r7, r4
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c4:	193b      	adds	r3, r7, r4
 80019c6:	0018      	movs	r0, r3
 80019c8:	f002 fd00 	bl	80043cc <HAL_RCCEx_PeriphCLKConfig>
 80019cc:	1e03      	subs	r3, r0, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80019d0:	f7ff f916 	bl	8000c00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b45      	ldr	r3, [pc, #276]	@ (8001aec <HAL_I2C_MspInit+0x168>)
 80019d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019d8:	4b44      	ldr	r3, [pc, #272]	@ (8001aec <HAL_I2C_MspInit+0x168>)
 80019da:	2101      	movs	r1, #1
 80019dc:	430a      	orrs	r2, r1
 80019de:	635a      	str	r2, [r3, #52]	@ 0x34
 80019e0:	4b42      	ldr	r3, [pc, #264]	@ (8001aec <HAL_I2C_MspInit+0x168>)
 80019e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e4:	2201      	movs	r2, #1
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019ec:	2134      	movs	r1, #52	@ 0x34
 80019ee:	187b      	adds	r3, r7, r1
 80019f0:	22c0      	movs	r2, #192	@ 0xc0
 80019f2:	00d2      	lsls	r2, r2, #3
 80019f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	2212      	movs	r2, #18
 80019fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	2206      	movs	r2, #6
 8001a0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	187a      	adds	r2, r7, r1
 8001a10:	23a0      	movs	r3, #160	@ 0xa0
 8001a12:	05db      	lsls	r3, r3, #23
 8001a14:	0011      	movs	r1, r2
 8001a16:	0018      	movs	r0, r3
 8001a18:	f001 fd4a 	bl	80034b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a1c:	4b33      	ldr	r3, [pc, #204]	@ (8001aec <HAL_I2C_MspInit+0x168>)
 8001a1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a20:	4b32      	ldr	r3, [pc, #200]	@ (8001aec <HAL_I2C_MspInit+0x168>)
 8001a22:	2180      	movs	r1, #128	@ 0x80
 8001a24:	0389      	lsls	r1, r1, #14
 8001a26:	430a      	orrs	r2, r1
 8001a28:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a2a:	4b30      	ldr	r3, [pc, #192]	@ (8001aec <HAL_I2C_MspInit+0x168>)
 8001a2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a2e:	2380      	movs	r3, #128	@ 0x80
 8001a30:	039b      	lsls	r3, r3, #14
 8001a32:	4013      	ands	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 8001a38:	4b2d      	ldr	r3, [pc, #180]	@ (8001af0 <HAL_I2C_MspInit+0x16c>)
 8001a3a:	4a2e      	ldr	r2, [pc, #184]	@ (8001af4 <HAL_I2C_MspInit+0x170>)
 8001a3c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001af0 <HAL_I2C_MspInit+0x16c>)
 8001a40:	220a      	movs	r2, #10
 8001a42:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a44:	4b2a      	ldr	r3, [pc, #168]	@ (8001af0 <HAL_I2C_MspInit+0x16c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a4a:	4b29      	ldr	r3, [pc, #164]	@ (8001af0 <HAL_I2C_MspInit+0x16c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a50:	4b27      	ldr	r3, [pc, #156]	@ (8001af0 <HAL_I2C_MspInit+0x16c>)
 8001a52:	2280      	movs	r2, #128	@ 0x80
 8001a54:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a56:	4b26      	ldr	r3, [pc, #152]	@ (8001af0 <HAL_I2C_MspInit+0x16c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a5c:	4b24      	ldr	r3, [pc, #144]	@ (8001af0 <HAL_I2C_MspInit+0x16c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001a62:	4b23      	ldr	r3, [pc, #140]	@ (8001af0 <HAL_I2C_MspInit+0x16c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a68:	4b21      	ldr	r3, [pc, #132]	@ (8001af0 <HAL_I2C_MspInit+0x16c>)
 8001a6a:	2280      	movs	r2, #128	@ 0x80
 8001a6c:	0152      	lsls	r2, r2, #5
 8001a6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001a70:	4b1f      	ldr	r3, [pc, #124]	@ (8001af0 <HAL_I2C_MspInit+0x16c>)
 8001a72:	0018      	movs	r0, r3
 8001a74:	f001 f9e4 	bl	8002e40 <HAL_DMA_Init>
 8001a78:	1e03      	subs	r3, r0, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8001a7c:	f7ff f8c0 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a1b      	ldr	r2, [pc, #108]	@ (8001af0 <HAL_I2C_MspInit+0x16c>)
 8001a84:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a86:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <HAL_I2C_MspInit+0x16c>)
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel5;
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <HAL_I2C_MspInit+0x174>)
 8001a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8001afc <HAL_I2C_MspInit+0x178>)
 8001a90:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001a92:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <HAL_I2C_MspInit+0x174>)
 8001a94:	220b      	movs	r2, #11
 8001a96:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a98:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <HAL_I2C_MspInit+0x174>)
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a9e:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <HAL_I2C_MspInit+0x174>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <HAL_I2C_MspInit+0x174>)
 8001aa6:	2280      	movs	r2, #128	@ 0x80
 8001aa8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <HAL_I2C_MspInit+0x174>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <HAL_I2C_MspInit+0x174>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <HAL_I2C_MspInit+0x174>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001abc:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <HAL_I2C_MspInit+0x174>)
 8001abe:	2280      	movs	r2, #128	@ 0x80
 8001ac0:	0152      	lsls	r2, r2, #5
 8001ac2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <HAL_I2C_MspInit+0x174>)
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f001 f9ba 	bl	8002e40 <HAL_DMA_Init>
 8001acc:	1e03      	subs	r3, r0, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_I2C_MspInit+0x150>
    {
      Error_Handler();
 8001ad0:	f7ff f896 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a08      	ldr	r2, [pc, #32]	@ (8001af8 <HAL_I2C_MspInit+0x174>)
 8001ad8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ada:	4b07      	ldr	r3, [pc, #28]	@ (8001af8 <HAL_I2C_MspInit+0x174>)
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ae0:	46c0      	nop			@ (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b013      	add	sp, #76	@ 0x4c
 8001ae6:	bd90      	pop	{r4, r7, pc}
 8001ae8:	40005400 	.word	0x40005400
 8001aec:	40021000 	.word	0x40021000
 8001af0:	2000015c 	.word	0x2000015c
 8001af4:	40020044 	.word	0x40020044
 8001af8:	200001b8 	.word	0x200001b8
 8001afc:	40020058 	.word	0x40020058

08001b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b095      	sub	sp, #84	@ 0x54
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	233c      	movs	r3, #60	@ 0x3c
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	2314      	movs	r3, #20
 8001b10:	001a      	movs	r2, r3
 8001b12:	2100      	movs	r1, #0
 8001b14:	f003 ff30 	bl	8005978 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b18:	241c      	movs	r4, #28
 8001b1a:	193b      	adds	r3, r7, r4
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	2320      	movs	r3, #32
 8001b20:	001a      	movs	r2, r3
 8001b22:	2100      	movs	r1, #0
 8001b24:	f003 ff28 	bl	8005978 <memset>
  if(huart->Instance==USART1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a70      	ldr	r2, [pc, #448]	@ (8001cf0 <HAL_UART_MspInit+0x1f0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d000      	beq.n	8001b34 <HAL_UART_MspInit+0x34>
 8001b32:	e0d9      	b.n	8001ce8 <HAL_UART_MspInit+0x1e8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b34:	193b      	adds	r3, r7, r4
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001b3a:	193b      	adds	r3, r7, r4
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b40:	193b      	adds	r3, r7, r4
 8001b42:	0018      	movs	r0, r3
 8001b44:	f002 fc42 	bl	80043cc <HAL_RCCEx_PeriphCLKConfig>
 8001b48:	1e03      	subs	r3, r0, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001b4c:	f7ff f858 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b50:	4b68      	ldr	r3, [pc, #416]	@ (8001cf4 <HAL_UART_MspInit+0x1f4>)
 8001b52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b54:	4b67      	ldr	r3, [pc, #412]	@ (8001cf4 <HAL_UART_MspInit+0x1f4>)
 8001b56:	2180      	movs	r1, #128	@ 0x80
 8001b58:	01c9      	lsls	r1, r1, #7
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b5e:	4b65      	ldr	r3, [pc, #404]	@ (8001cf4 <HAL_UART_MspInit+0x1f4>)
 8001b60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b62:	2380      	movs	r3, #128	@ 0x80
 8001b64:	01db      	lsls	r3, r3, #7
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
 8001b6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6c:	4b61      	ldr	r3, [pc, #388]	@ (8001cf4 <HAL_UART_MspInit+0x1f4>)
 8001b6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b70:	4b60      	ldr	r3, [pc, #384]	@ (8001cf4 <HAL_UART_MspInit+0x1f4>)
 8001b72:	2104      	movs	r1, #4
 8001b74:	430a      	orrs	r2, r1
 8001b76:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b78:	4b5e      	ldr	r3, [pc, #376]	@ (8001cf4 <HAL_UART_MspInit+0x1f4>)
 8001b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	4013      	ands	r3, r2
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b84:	4b5b      	ldr	r3, [pc, #364]	@ (8001cf4 <HAL_UART_MspInit+0x1f4>)
 8001b86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b88:	4b5a      	ldr	r3, [pc, #360]	@ (8001cf4 <HAL_UART_MspInit+0x1f4>)
 8001b8a:	2102      	movs	r1, #2
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b90:	4b58      	ldr	r3, [pc, #352]	@ (8001cf4 <HAL_UART_MspInit+0x1f4>)
 8001b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b94:	2202      	movs	r2, #2
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9c:	4b55      	ldr	r3, [pc, #340]	@ (8001cf4 <HAL_UART_MspInit+0x1f4>)
 8001b9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ba0:	4b54      	ldr	r3, [pc, #336]	@ (8001cf4 <HAL_UART_MspInit+0x1f4>)
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ba8:	4b52      	ldr	r3, [pc, #328]	@ (8001cf4 <HAL_UART_MspInit+0x1f4>)
 8001baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bac:	2201      	movs	r2, #1
 8001bae:	4013      	ands	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001bb4:	213c      	movs	r1, #60	@ 0x3c
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	2280      	movs	r2, #128	@ 0x80
 8001bba:	01d2      	lsls	r2, r2, #7
 8001bbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	000c      	movs	r4, r1
 8001bc0:	193b      	adds	r3, r7, r4
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	193b      	adds	r3, r7, r4
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	193b      	adds	r3, r7, r4
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001bd2:	193b      	adds	r3, r7, r4
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd8:	193b      	adds	r3, r7, r4
 8001bda:	4a47      	ldr	r2, [pc, #284]	@ (8001cf8 <HAL_UART_MspInit+0x1f8>)
 8001bdc:	0019      	movs	r1, r3
 8001bde:	0010      	movs	r0, r2
 8001be0:	f001 fc66 	bl	80034b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001be4:	193b      	adds	r3, r7, r4
 8001be6:	2204      	movs	r2, #4
 8001be8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	193b      	adds	r3, r7, r4
 8001bec:	2202      	movs	r2, #2
 8001bee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	193b      	adds	r3, r7, r4
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	193b      	adds	r3, r7, r4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001bfc:	193b      	adds	r3, r7, r4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	193b      	adds	r3, r7, r4
 8001c04:	4a3d      	ldr	r2, [pc, #244]	@ (8001cfc <HAL_UART_MspInit+0x1fc>)
 8001c06:	0019      	movs	r1, r3
 8001c08:	0010      	movs	r0, r2
 8001c0a:	f001 fc51 	bl	80034b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c0e:	0021      	movs	r1, r4
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	2280      	movs	r2, #128	@ 0x80
 8001c14:	0152      	lsls	r2, r2, #5
 8001c16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	187b      	adds	r3, r7, r1
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	187b      	adds	r3, r7, r1
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	187b      	adds	r3, r7, r1
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001c2a:	187b      	adds	r3, r7, r1
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c30:	187a      	adds	r2, r7, r1
 8001c32:	23a0      	movs	r3, #160	@ 0xa0
 8001c34:	05db      	lsls	r3, r3, #23
 8001c36:	0011      	movs	r1, r2
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f001 fc39 	bl	80034b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8001c3e:	4b30      	ldr	r3, [pc, #192]	@ (8001d00 <HAL_UART_MspInit+0x200>)
 8001c40:	4a30      	ldr	r2, [pc, #192]	@ (8001d04 <HAL_UART_MspInit+0x204>)
 8001c42:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001c44:	4b2e      	ldr	r3, [pc, #184]	@ (8001d00 <HAL_UART_MspInit+0x200>)
 8001c46:	2232      	movs	r2, #50	@ 0x32
 8001c48:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d00 <HAL_UART_MspInit+0x200>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c50:	4b2b      	ldr	r3, [pc, #172]	@ (8001d00 <HAL_UART_MspInit+0x200>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c56:	4b2a      	ldr	r3, [pc, #168]	@ (8001d00 <HAL_UART_MspInit+0x200>)
 8001c58:	2280      	movs	r2, #128	@ 0x80
 8001c5a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c5c:	4b28      	ldr	r3, [pc, #160]	@ (8001d00 <HAL_UART_MspInit+0x200>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c62:	4b27      	ldr	r3, [pc, #156]	@ (8001d00 <HAL_UART_MspInit+0x200>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001c68:	4b25      	ldr	r3, [pc, #148]	@ (8001d00 <HAL_UART_MspInit+0x200>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c6e:	4b24      	ldr	r3, [pc, #144]	@ (8001d00 <HAL_UART_MspInit+0x200>)
 8001c70:	22c0      	movs	r2, #192	@ 0xc0
 8001c72:	0192      	lsls	r2, r2, #6
 8001c74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c76:	4b22      	ldr	r3, [pc, #136]	@ (8001d00 <HAL_UART_MspInit+0x200>)
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f001 f8e1 	bl	8002e40 <HAL_DMA_Init>
 8001c7e:	1e03      	subs	r3, r0, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 8001c82:	f7fe ffbd 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2180      	movs	r1, #128	@ 0x80
 8001c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d00 <HAL_UART_MspInit+0x200>)
 8001c8c:	505a      	str	r2, [r3, r1]
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d00 <HAL_UART_MspInit+0x200>)
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8001c94:	4b1c      	ldr	r3, [pc, #112]	@ (8001d08 <HAL_UART_MspInit+0x208>)
 8001c96:	4a1d      	ldr	r2, [pc, #116]	@ (8001d0c <HAL_UART_MspInit+0x20c>)
 8001c98:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <HAL_UART_MspInit+0x208>)
 8001c9c:	2233      	movs	r2, #51	@ 0x33
 8001c9e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ca0:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <HAL_UART_MspInit+0x208>)
 8001ca2:	2210      	movs	r2, #16
 8001ca4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca6:	4b18      	ldr	r3, [pc, #96]	@ (8001d08 <HAL_UART_MspInit+0x208>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cac:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <HAL_UART_MspInit+0x208>)
 8001cae:	2280      	movs	r2, #128	@ 0x80
 8001cb0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <HAL_UART_MspInit+0x208>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cb8:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <HAL_UART_MspInit+0x208>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001cbe:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <HAL_UART_MspInit+0x208>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001cc4:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <HAL_UART_MspInit+0x208>)
 8001cc6:	2280      	movs	r2, #128	@ 0x80
 8001cc8:	0192      	lsls	r2, r2, #6
 8001cca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <HAL_UART_MspInit+0x208>)
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f001 f8b6 	bl	8002e40 <HAL_DMA_Init>
 8001cd4:	1e03      	subs	r3, r0, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_UART_MspInit+0x1dc>
    {
      Error_Handler();
 8001cd8:	f7fe ff92 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <HAL_UART_MspInit+0x208>)
 8001ce0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001ce2:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <HAL_UART_MspInit+0x208>)
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ce8:	46c0      	nop			@ (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b015      	add	sp, #84	@ 0x54
 8001cee:	bd90      	pop	{r4, r7, pc}
 8001cf0:	40013800 	.word	0x40013800
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	50000800 	.word	0x50000800
 8001cfc:	50000400 	.word	0x50000400
 8001d00:	200002a8 	.word	0x200002a8
 8001d04:	4002001c 	.word	0x4002001c
 8001d08:	20000304 	.word	0x20000304
 8001d0c:	40020030 	.word	0x40020030

08001d10 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a15      	ldr	r2, [pc, #84]	@ (8001d74 <HAL_UART_MspDeInit+0x64>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d124      	bne.n	8001d6c <HAL_UART_MspDeInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001d22:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <HAL_UART_MspDeInit+0x68>)
 8001d24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d26:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <HAL_UART_MspDeInit+0x68>)
 8001d28:	4914      	ldr	r1, [pc, #80]	@ (8001d7c <HAL_UART_MspDeInit+0x6c>)
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	641a      	str	r2, [r3, #64]	@ 0x40
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);
 8001d2e:	2380      	movs	r3, #128	@ 0x80
 8001d30:	01db      	lsls	r3, r3, #7
 8001d32:	4a13      	ldr	r2, [pc, #76]	@ (8001d80 <HAL_UART_MspDeInit+0x70>)
 8001d34:	0019      	movs	r1, r3
 8001d36:	0010      	movs	r0, r2
 8001d38:	f001 fd2c 	bl	8003794 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8001d3c:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <HAL_UART_MspDeInit+0x74>)
 8001d3e:	2104      	movs	r1, #4
 8001d40:	0018      	movs	r0, r3
 8001d42:	f001 fd27 	bl	8003794 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 8001d46:	2380      	movs	r3, #128	@ 0x80
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	23a0      	movs	r3, #160	@ 0xa0
 8001d4c:	05db      	lsls	r3, r3, #23
 8001d4e:	0011      	movs	r1, r2
 8001d50:	0018      	movs	r0, r3
 8001d52:	f001 fd1f 	bl	8003794 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2280      	movs	r2, #128	@ 0x80
 8001d5a:	589b      	ldr	r3, [r3, r2]
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f001 f8f9 	bl	8002f54 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d66:	0018      	movs	r0, r3
 8001d68:	f001 f8f4 	bl	8002f54 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001d6c:	46c0      	nop			@ (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40013800 	.word	0x40013800
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	ffffbfff 	.word	0xffffbfff
 8001d80:	50000800 	.word	0x50000800
 8001d84:	50000400 	.word	0x50000400

08001d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d8c:	46c0      	nop			@ (mov r8, r8)
 8001d8e:	e7fd      	b.n	8001d8c <NMI_Handler+0x4>

08001d90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d94:	46c0      	nop			@ (mov r8, r8)
 8001d96:	e7fd      	b.n	8001d94 <HardFault_Handler+0x4>

08001d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9c:	46c0      	nop			@ (mov r8, r8)
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db0:	f000 f8ca 	bl	8001f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db4:	46c0      	nop			@ (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dc0:	4b03      	ldr	r3, [pc, #12]	@ (8001dd0 <DMA1_Channel1_IRQHandler+0x14>)
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f001 fa28 	bl	8003218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dc8:	46c0      	nop			@ (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	200000ac 	.word	0x200000ac

08001dd4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001dd8:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f001 fa1c 	bl	8003218 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001de0:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <DMA1_Channel2_3_IRQHandler+0x20>)
 8001de2:	0018      	movs	r0, r3
 8001de4:	f001 fa18 	bl	8003218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001de8:	46c0      	nop			@ (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	46c0      	nop			@ (mov r8, r8)
 8001df0:	200002a8 	.word	0x200002a8
 8001df4:	20000304 	.word	0x20000304

08001df8 <DMAMUX1_DMA1_CH4_5_IRQHandler>:

/**
  * @brief This function handles DMAMUX1, DMA1 Channel 4 and 5.
  */
void DMAMUX1_DMA1_CH4_5_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 0 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x1c>)
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f001 fa0a 	bl	8003218 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001e04:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x20>)
 8001e06:	0018      	movs	r0, r3
 8001e08:	f001 fa06 	bl	8003218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 1 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 1 */
}
 8001e0c:	46c0      	nop			@ (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	46c0      	nop			@ (mov r8, r8)
 8001e14:	2000015c 	.word	0x2000015c
 8001e18:	200001b8 	.word	0x200001b8

08001e1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e20:	4b03      	ldr	r3, [pc, #12]	@ (8001e30 <SystemInit+0x14>)
 8001e22:	2280      	movs	r2, #128	@ 0x80
 8001e24:	0512      	lsls	r2, r2, #20
 8001e26:	609a      	str	r2, [r3, #8]
#endif
}
 8001e28:	46c0      	nop			@ (mov r8, r8)
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			@ (mov r8, r8)
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <Reset_Handler>:
 8001e34:	480d      	ldr	r0, [pc, #52]	@ (8001e6c <LoopForever+0x2>)
 8001e36:	4685      	mov	sp, r0
 8001e38:	f7ff fff0 	bl	8001e1c <SystemInit>
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	e003      	b.n	8001e48 <LoopCopyDataInit>

08001e40 <CopyDataInit>:
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <LoopForever+0x6>)
 8001e42:	585b      	ldr	r3, [r3, r1]
 8001e44:	5043      	str	r3, [r0, r1]
 8001e46:	3104      	adds	r1, #4

08001e48 <LoopCopyDataInit>:
 8001e48:	480a      	ldr	r0, [pc, #40]	@ (8001e74 <LoopForever+0xa>)
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <LoopForever+0xe>)
 8001e4c:	1842      	adds	r2, r0, r1
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d3f6      	bcc.n	8001e40 <CopyDataInit>
 8001e52:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <LoopForever+0x12>)
 8001e54:	e002      	b.n	8001e5c <LoopFillZerobss>

08001e56 <FillZerobss>:
 8001e56:	2300      	movs	r3, #0
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	3204      	adds	r2, #4

08001e5c <LoopFillZerobss>:
 8001e5c:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <LoopForever+0x16>)
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d3f9      	bcc.n	8001e56 <FillZerobss>
 8001e62:	f003 fd91 	bl	8005988 <__libc_init_array>
 8001e66:	f7fe fadd 	bl	8000424 <main>

08001e6a <LoopForever>:
 8001e6a:	e7fe      	b.n	8001e6a <LoopForever>
 8001e6c:	20006000 	.word	0x20006000
 8001e70:	08005ce8 	.word	0x08005ce8
 8001e74:	20000000 	.word	0x20000000
 8001e78:	2000002c 	.word	0x2000002c
 8001e7c:	2000002c 	.word	0x2000002c
 8001e80:	20000674 	.word	0x20000674

08001e84 <ADC1_IRQHandler>:
 8001e84:	e7fe      	b.n	8001e84 <ADC1_IRQHandler>

08001e86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e8c:	1dfb      	adds	r3, r7, #7
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e92:	2003      	movs	r0, #3
 8001e94:	f000 f80e 	bl	8001eb4 <HAL_InitTick>
 8001e98:	1e03      	subs	r3, r0, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001e9c:	1dfb      	adds	r3, r7, #7
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	e001      	b.n	8001ea8 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ea4:	f7ff fcc0 	bl	8001828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ea8:	1dfb      	adds	r3, r7, #7
 8001eaa:	781b      	ldrb	r3, [r3, #0]
}
 8001eac:	0018      	movs	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b002      	add	sp, #8
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ebc:	230f      	movs	r3, #15
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <HAL_InitTick+0x88>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d02b      	beq.n	8001f24 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f40 <HAL_InitTick+0x8c>)
 8001ece:	681c      	ldr	r4, [r3, #0]
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f3c <HAL_InitTick+0x88>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	23fa      	movs	r3, #250	@ 0xfa
 8001ed8:	0098      	lsls	r0, r3, #2
 8001eda:	f7fe f915 	bl	8000108 <__udivsi3>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	0020      	movs	r0, r4
 8001ee4:	f7fe f910 	bl	8000108 <__udivsi3>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	0018      	movs	r0, r3
 8001eec:	f000 ff9b 	bl	8002e26 <HAL_SYSTICK_Config>
 8001ef0:	1e03      	subs	r3, r0, #0
 8001ef2:	d112      	bne.n	8001f1a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d80a      	bhi.n	8001f10 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	2301      	movs	r3, #1
 8001efe:	425b      	negs	r3, r3
 8001f00:	2200      	movs	r2, #0
 8001f02:	0018      	movs	r0, r3
 8001f04:	f000 ff6a 	bl	8002ddc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f08:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <HAL_InitTick+0x90>)
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e00d      	b.n	8001f2c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001f10:	230f      	movs	r3, #15
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]
 8001f18:	e008      	b.n	8001f2c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f1a:	230f      	movs	r3, #15
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	e003      	b.n	8001f2c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f24:	230f      	movs	r3, #15
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001f2c:	230f      	movs	r3, #15
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	781b      	ldrb	r3, [r3, #0]
}
 8001f32:	0018      	movs	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b005      	add	sp, #20
 8001f38:	bd90      	pop	{r4, r7, pc}
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	20000028 	.word	0x20000028
 8001f40:	20000020 	.word	0x20000020
 8001f44:	20000024 	.word	0x20000024

08001f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <HAL_IncTick+0x1c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	001a      	movs	r2, r3
 8001f52:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <HAL_IncTick+0x20>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	18d2      	adds	r2, r2, r3
 8001f58:	4b03      	ldr	r3, [pc, #12]	@ (8001f68 <HAL_IncTick+0x20>)
 8001f5a:	601a      	str	r2, [r3, #0]
}
 8001f5c:	46c0      	nop			@ (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	20000028 	.word	0x20000028
 8001f68:	20000670 	.word	0x20000670

08001f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f70:	4b02      	ldr	r3, [pc, #8]	@ (8001f7c <HAL_GetTick+0x10>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	46c0      	nop			@ (mov r8, r8)
 8001f7c:	20000670 	.word	0x20000670

08001f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f88:	f7ff fff0 	bl	8001f6c <HAL_GetTick>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3301      	adds	r3, #1
 8001f98:	d005      	beq.n	8001fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc4 <HAL_Delay+0x44>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	001a      	movs	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	189b      	adds	r3, r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	f7ff ffe0 	bl	8001f6c <HAL_GetTick>
 8001fac:	0002      	movs	r2, r0
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d8f7      	bhi.n	8001fa8 <HAL_Delay+0x28>
  {
  }
}
 8001fb8:	46c0      	nop			@ (mov r8, r8)
 8001fba:	46c0      	nop			@ (mov r8, r8)
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b004      	add	sp, #16
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	20000028 	.word	0x20000028

08001fc8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a05      	ldr	r2, [pc, #20]	@ (8001fec <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001fd8:	401a      	ands	r2, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	601a      	str	r2, [r3, #0]
}
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b002      	add	sp, #8
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	ff3fffff 	.word	0xff3fffff

08001ff0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	23c0      	movs	r3, #192	@ 0xc0
 8001ffe:	041b      	lsls	r3, r3, #16
 8002000:	4013      	ands	r3, r2
}
 8002002:	0018      	movs	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	b002      	add	sp, #8
 8002008:	bd80      	pop	{r7, pc}

0800200a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	2104      	movs	r1, #4
 800201e:	400a      	ands	r2, r1
 8002020:	2107      	movs	r1, #7
 8002022:	4091      	lsls	r1, r2
 8002024:	000a      	movs	r2, r1
 8002026:	43d2      	mvns	r2, r2
 8002028:	401a      	ands	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2104      	movs	r1, #4
 800202e:	400b      	ands	r3, r1
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4099      	lsls	r1, r3
 8002034:	000b      	movs	r3, r1
 8002036:	431a      	orrs	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800203c:	46c0      	nop			@ (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b004      	add	sp, #16
 8002042:	bd80      	pop	{r7, pc}

08002044 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	2104      	movs	r1, #4
 8002056:	400a      	ands	r2, r1
 8002058:	2107      	movs	r1, #7
 800205a:	4091      	lsls	r1, r2
 800205c:	000a      	movs	r2, r1
 800205e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2104      	movs	r1, #4
 8002064:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002066:	40da      	lsrs	r2, r3
 8002068:	0013      	movs	r3, r2
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b002      	add	sp, #8
 8002070:	bd80      	pop	{r7, pc}

08002072 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	23c0      	movs	r3, #192	@ 0xc0
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	4013      	ands	r3, r2
 8002084:	d101      	bne.n	800208a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800208a:	2300      	movs	r3, #0
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	b002      	add	sp, #8
 8002092:	bd80      	pop	{r7, pc}

08002094 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	211f      	movs	r1, #31
 80020a8:	400a      	ands	r2, r1
 80020aa:	210f      	movs	r1, #15
 80020ac:	4091      	lsls	r1, r2
 80020ae:	000a      	movs	r2, r1
 80020b0:	43d2      	mvns	r2, r2
 80020b2:	401a      	ands	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	0e9b      	lsrs	r3, r3, #26
 80020b8:	210f      	movs	r1, #15
 80020ba:	4019      	ands	r1, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	201f      	movs	r0, #31
 80020c0:	4003      	ands	r3, r0
 80020c2:	4099      	lsls	r1, r3
 80020c4:	000b      	movs	r3, r1
 80020c6:	431a      	orrs	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020cc:	46c0      	nop			@ (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b004      	add	sp, #16
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	025b      	lsls	r3, r3, #9
 80020e6:	0a5b      	lsrs	r3, r3, #9
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020ee:	46c0      	nop			@ (mov r8, r8)
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b002      	add	sp, #8
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	0252      	lsls	r2, r2, #9
 8002108:	0a52      	lsrs	r2, r2, #9
 800210a:	43d2      	mvns	r2, r2
 800210c:	401a      	ands	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	b002      	add	sp, #8
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	0212      	lsls	r2, r2, #8
 8002130:	43d2      	mvns	r2, r2
 8002132:	401a      	ands	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	400b      	ands	r3, r1
 800213c:	4904      	ldr	r1, [pc, #16]	@ (8002150 <LL_ADC_SetChannelSamplingTime+0x34>)
 800213e:	400b      	ands	r3, r1
 8002140:	431a      	orrs	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002146:	46c0      	nop			@ (mov r8, r8)
 8002148:	46bd      	mov	sp, r7
 800214a:	b004      	add	sp, #16
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			@ (mov r8, r8)
 8002150:	7fffff00 	.word	0x7fffff00

08002154 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	4a05      	ldr	r2, [pc, #20]	@ (8002178 <LL_ADC_EnableInternalRegulator+0x24>)
 8002162:	4013      	ands	r3, r2
 8002164:	2280      	movs	r2, #128	@ 0x80
 8002166:	0552      	lsls	r2, r2, #21
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	46bd      	mov	sp, r7
 8002172:	b002      	add	sp, #8
 8002174:	bd80      	pop	{r7, pc}
 8002176:	46c0      	nop			@ (mov r8, r8)
 8002178:	6fffffe8 	.word	0x6fffffe8

0800217c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	2380      	movs	r3, #128	@ 0x80
 800218a:	055b      	lsls	r3, r3, #21
 800218c:	401a      	ands	r2, r3
 800218e:	2380      	movs	r3, #128	@ 0x80
 8002190:	055b      	lsls	r3, r3, #21
 8002192:	429a      	cmp	r2, r3
 8002194:	d101      	bne.n	800219a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800219a:	2300      	movs	r3, #0
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4a04      	ldr	r2, [pc, #16]	@ (80021c4 <LL_ADC_Enable+0x20>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	2201      	movs	r2, #1
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021bc:	46c0      	nop			@ (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	b002      	add	sp, #8
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	7fffffe8 	.word	0x7fffffe8

080021c8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	4a04      	ldr	r2, [pc, #16]	@ (80021e8 <LL_ADC_Disable+0x20>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	2202      	movs	r2, #2
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80021e0:	46c0      	nop			@ (mov r8, r8)
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b002      	add	sp, #8
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	7fffffe8 	.word	0x7fffffe8

080021ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2201      	movs	r2, #1
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <LL_ADC_IsEnabled+0x18>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <LL_ADC_IsEnabled+0x1a>
 8002204:	2300      	movs	r3, #0
}
 8002206:	0018      	movs	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	b002      	add	sp, #8
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4a04      	ldr	r2, [pc, #16]	@ (8002230 <LL_ADC_REG_StartConversion+0x20>)
 800221e:	4013      	ands	r3, r2
 8002220:	2204      	movs	r2, #4
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002228:	46c0      	nop			@ (mov r8, r8)
 800222a:	46bd      	mov	sp, r7
 800222c:	b002      	add	sp, #8
 800222e:	bd80      	pop	{r7, pc}
 8002230:	7fffffe8 	.word	0x7fffffe8

08002234 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2204      	movs	r2, #4
 8002242:	4013      	ands	r3, r2
 8002244:	2b04      	cmp	r3, #4
 8002246:	d101      	bne.n	800224c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800224c:	2300      	movs	r3, #0
}
 800224e:	0018      	movs	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	b002      	add	sp, #8
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002260:	231f      	movs	r3, #31
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002268:	2300      	movs	r3, #0
 800226a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e17e      	b.n	800257c <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10a      	bne.n	800229c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	0018      	movs	r0, r3
 800228a:	f7ff faf1 	bl	8001870 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2254      	movs	r2, #84	@ 0x54
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f7ff ff6b 	bl	800217c <LL_ADC_IsInternalRegulatorEnabled>
 80022a6:	1e03      	subs	r3, r0, #0
 80022a8:	d114      	bne.n	80022d4 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	0018      	movs	r0, r3
 80022b0:	f7ff ff50 	bl	8002154 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80022b4:	4bb3      	ldr	r3, [pc, #716]	@ (8002584 <HAL_ADC_Init+0x32c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	49b3      	ldr	r1, [pc, #716]	@ (8002588 <HAL_ADC_Init+0x330>)
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7fd ff24 	bl	8000108 <__udivsi3>
 80022c0:	0003      	movs	r3, r0
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022c6:	e002      	b.n	80022ce <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f9      	bne.n	80022c8 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	0018      	movs	r0, r3
 80022da:	f7ff ff4f 	bl	800217c <LL_ADC_IsInternalRegulatorEnabled>
 80022de:	1e03      	subs	r3, r0, #0
 80022e0:	d10f      	bne.n	8002302 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e6:	2210      	movs	r2, #16
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f2:	2201      	movs	r2, #1
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80022fa:	231f      	movs	r3, #31
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	2201      	movs	r2, #1
 8002300:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	0018      	movs	r0, r3
 8002308:	f7ff ff94 	bl	8002234 <LL_ADC_REG_IsConversionOngoing>
 800230c:	0003      	movs	r3, r0
 800230e:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002314:	2210      	movs	r2, #16
 8002316:	4013      	ands	r3, r2
 8002318:	d000      	beq.n	800231c <HAL_ADC_Init+0xc4>
 800231a:	e122      	b.n	8002562 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d000      	beq.n	8002324 <HAL_ADC_Init+0xcc>
 8002322:	e11e      	b.n	8002562 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002328:	4a98      	ldr	r2, [pc, #608]	@ (800258c <HAL_ADC_Init+0x334>)
 800232a:	4013      	ands	r3, r2
 800232c:	2202      	movs	r2, #2
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0018      	movs	r0, r3
 800233a:	f7ff ff57 	bl	80021ec <LL_ADC_IsEnabled>
 800233e:	1e03      	subs	r3, r0, #0
 8002340:	d000      	beq.n	8002344 <HAL_ADC_Init+0xec>
 8002342:	e0ad      	b.n	80024a0 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7e1b      	ldrb	r3, [r3, #24]
 800234c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800234e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	7e5b      	ldrb	r3, [r3, #25]
 8002354:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002356:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7e9b      	ldrb	r3, [r3, #26]
 800235c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800235e:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <HAL_ADC_Init+0x116>
 8002368:	2380      	movs	r3, #128	@ 0x80
 800236a:	015b      	lsls	r3, r3, #5
 800236c:	e000      	b.n	8002370 <HAL_ADC_Init+0x118>
 800236e:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002370:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002376:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	da04      	bge.n	800238a <HAL_ADC_Init+0x132>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	085b      	lsrs	r3, r3, #1
 8002388:	e001      	b.n	800238e <HAL_ADC_Init+0x136>
 800238a:	2380      	movs	r3, #128	@ 0x80
 800238c:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800238e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	212c      	movs	r1, #44	@ 0x2c
 8002394:	5c5b      	ldrb	r3, [r3, r1]
 8002396:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002398:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	5c9b      	ldrb	r3, [r3, r2]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d115      	bne.n	80023d6 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	7e9b      	ldrb	r3, [r3, #26]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	2280      	movs	r2, #128	@ 0x80
 80023b6:	0252      	lsls	r2, r2, #9
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
 80023bc:	e00b      	b.n	80023d6 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c2:	2220      	movs	r2, #32
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ce:	2201      	movs	r2, #1
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023e2:	23e0      	movs	r3, #224	@ 0xe0
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80023ec:	4313      	orrs	r3, r2
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	4a65      	ldr	r2, [pc, #404]	@ (8002590 <HAL_ADC_Init+0x338>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	430a      	orrs	r2, r1
 8002408:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	0f9b      	lsrs	r3, r3, #30
 8002410:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002416:	4313      	orrs	r3, r2
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	4313      	orrs	r3, r2
 800241c:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	223c      	movs	r2, #60	@ 0x3c
 8002422:	5c9b      	ldrb	r3, [r3, r2]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d111      	bne.n	800244c <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	0f9b      	lsrs	r3, r3, #30
 800242e:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002434:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 800243a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002440:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	2201      	movs	r2, #1
 8002448:	4313      	orrs	r3, r2
 800244a:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	4a50      	ldr	r2, [pc, #320]	@ (8002594 <HAL_ADC_Init+0x33c>)
 8002454:	4013      	ands	r3, r2
 8002456:	0019      	movs	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	430a      	orrs	r2, r1
 8002460:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	23c0      	movs	r3, #192	@ 0xc0
 8002468:	061b      	lsls	r3, r3, #24
 800246a:	429a      	cmp	r2, r3
 800246c:	d018      	beq.n	80024a0 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002472:	2380      	movs	r3, #128	@ 0x80
 8002474:	05db      	lsls	r3, r3, #23
 8002476:	429a      	cmp	r2, r3
 8002478:	d012      	beq.n	80024a0 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800247e:	2380      	movs	r3, #128	@ 0x80
 8002480:	061b      	lsls	r3, r3, #24
 8002482:	429a      	cmp	r2, r3
 8002484:	d00c      	beq.n	80024a0 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002486:	4b44      	ldr	r3, [pc, #272]	@ (8002598 <HAL_ADC_Init+0x340>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a44      	ldr	r2, [pc, #272]	@ (800259c <HAL_ADC_Init+0x344>)
 800248c:	4013      	ands	r3, r2
 800248e:	0019      	movs	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	23f0      	movs	r3, #240	@ 0xf0
 8002496:	039b      	lsls	r3, r3, #14
 8002498:	401a      	ands	r2, r3
 800249a:	4b3f      	ldr	r3, [pc, #252]	@ (8002598 <HAL_ADC_Init+0x340>)
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a8:	001a      	movs	r2, r3
 80024aa:	2100      	movs	r1, #0
 80024ac:	f7ff fdad 	bl	800200a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b8:	4939      	ldr	r1, [pc, #228]	@ (80025a0 <HAL_ADC_Init+0x348>)
 80024ba:	001a      	movs	r2, r3
 80024bc:	f7ff fda5 	bl	800200a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2110      	movs	r1, #16
 80024d4:	4249      	negs	r1, r1
 80024d6:	430a      	orrs	r2, r1
 80024d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80024da:	e018      	b.n	800250e <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	2380      	movs	r3, #128	@ 0x80
 80024e2:	039b      	lsls	r3, r3, #14
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d112      	bne.n	800250e <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	221c      	movs	r2, #28
 80024f8:	4013      	ands	r3, r2
 80024fa:	2210      	movs	r2, #16
 80024fc:	4252      	negs	r2, r2
 80024fe:	409a      	lsls	r2, r3
 8002500:	0011      	movs	r1, r2
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2100      	movs	r1, #0
 8002514:	0018      	movs	r0, r3
 8002516:	f7ff fd95 	bl	8002044 <LL_ADC_GetSamplingTimeCommonChannels>
 800251a:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002520:	429a      	cmp	r2, r3
 8002522:	d10b      	bne.n	800253c <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252e:	2203      	movs	r2, #3
 8002530:	4393      	bics	r3, r2
 8002532:	2201      	movs	r2, #1
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800253a:	e01c      	b.n	8002576 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002540:	2212      	movs	r2, #18
 8002542:	4393      	bics	r3, r2
 8002544:	2210      	movs	r2, #16
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002550:	2201      	movs	r2, #1
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002558:	231f      	movs	r3, #31
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002560:	e009      	b.n	8002576 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002566:	2210      	movs	r2, #16
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800256e:	231f      	movs	r3, #31
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002576:	231f      	movs	r3, #31
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	781b      	ldrb	r3, [r3, #0]
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b008      	add	sp, #32
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000020 	.word	0x20000020
 8002588:	00030d40 	.word	0x00030d40
 800258c:	fffffefd 	.word	0xfffffefd
 8002590:	ffde0201 	.word	0xffde0201
 8002594:	1ffffc02 	.word	0x1ffffc02
 8002598:	40012708 	.word	0x40012708
 800259c:	ffc3ffff 	.word	0xffc3ffff
 80025a0:	7fffff04 	.word	0x7fffff04

080025a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025a4:	b5b0      	push	{r4, r5, r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7ff fe3d 	bl	8002234 <LL_ADC_REG_IsConversionOngoing>
 80025ba:	1e03      	subs	r3, r0, #0
 80025bc:	d16c      	bne.n	8002698 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2254      	movs	r2, #84	@ 0x54
 80025c2:	5c9b      	ldrb	r3, [r3, r2]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_ADC_Start_DMA+0x28>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e06c      	b.n	80026a6 <HAL_ADC_Start_DMA+0x102>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2254      	movs	r2, #84	@ 0x54
 80025d0:	2101      	movs	r1, #1
 80025d2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	4013      	ands	r3, r2
 80025de:	d113      	bne.n	8002608 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f7ff fe01 	bl	80021ec <LL_ADC_IsEnabled>
 80025ea:	1e03      	subs	r3, r0, #0
 80025ec:	d004      	beq.n	80025f8 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	0018      	movs	r0, r3
 80025f4:	f7ff fde8 	bl	80021c8 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2101      	movs	r1, #1
 8002604:	430a      	orrs	r2, r1
 8002606:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002608:	2517      	movs	r5, #23
 800260a:	197c      	adds	r4, r7, r5
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	0018      	movs	r0, r3
 8002610:	f000 fa2c 	bl	8002a6c <ADC_Enable>
 8002614:	0003      	movs	r3, r0
 8002616:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002618:	002c      	movs	r4, r5
 800261a:	193b      	adds	r3, r7, r4
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d13e      	bne.n	80026a0 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002626:	4a22      	ldr	r2, [pc, #136]	@ (80026b0 <HAL_ADC_Start_DMA+0x10c>)
 8002628:	4013      	ands	r3, r2
 800262a:	2280      	movs	r2, #128	@ 0x80
 800262c:	0052      	lsls	r2, r2, #1
 800262e:	431a      	orrs	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800263e:	4a1d      	ldr	r2, [pc, #116]	@ (80026b4 <HAL_ADC_Start_DMA+0x110>)
 8002640:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002646:	4a1c      	ldr	r2, [pc, #112]	@ (80026b8 <HAL_ADC_Start_DMA+0x114>)
 8002648:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800264e:	4a1b      	ldr	r2, [pc, #108]	@ (80026bc <HAL_ADC_Start_DMA+0x118>)
 8002650:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	221c      	movs	r2, #28
 8002658:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2254      	movs	r2, #84	@ 0x54
 800265e:	2100      	movs	r1, #0
 8002660:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2110      	movs	r1, #16
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3340      	adds	r3, #64	@ 0x40
 800267c:	0019      	movs	r1, r3
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	193c      	adds	r4, r7, r4
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f000 fcde 	bl	8003044 <HAL_DMA_Start_IT>
 8002688:	0003      	movs	r3, r0
 800268a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	0018      	movs	r0, r3
 8002692:	f7ff fdbd 	bl	8002210 <LL_ADC_REG_StartConversion>
 8002696:	e003      	b.n	80026a0 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002698:	2317      	movs	r3, #23
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	2202      	movs	r2, #2
 800269e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80026a0:	2317      	movs	r3, #23
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	781b      	ldrb	r3, [r3, #0]
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b006      	add	sp, #24
 80026ac:	bdb0      	pop	{r4, r5, r7, pc}
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	fffff0fe 	.word	0xfffff0fe
 80026b4:	08002b69 	.word	0x08002b69
 80026b8:	08002c31 	.word	0x08002c31
 80026bc:	08002c4f 	.word	0x08002c4f

080026c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ca:	2317      	movs	r3, #23
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2254      	movs	r2, #84	@ 0x54
 80026da:	5c9b      	ldrb	r3, [r3, r2]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x24>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e1be      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x3a2>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2254      	movs	r2, #84	@ 0x54
 80026e8:	2101      	movs	r1, #1
 80026ea:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0018      	movs	r0, r3
 80026f2:	f7ff fd9f 	bl	8002234 <LL_ADC_REG_IsConversionOngoing>
 80026f6:	1e03      	subs	r3, r0, #0
 80026f8:	d000      	beq.n	80026fc <HAL_ADC_ConfigChannel+0x3c>
 80026fa:	e1a1      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d100      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x46>
 8002704:	e152      	b.n	80029ac <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	2380      	movs	r3, #128	@ 0x80
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	429a      	cmp	r2, r3
 8002710:	d004      	beq.n	800271c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002716:	4ac2      	ldr	r2, [pc, #776]	@ (8002a20 <HAL_ADC_ConfigChannel+0x360>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d108      	bne.n	800272e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0019      	movs	r1, r3
 8002726:	0010      	movs	r0, r2
 8002728:	f7ff fcd4 	bl	80020d4 <LL_ADC_REG_SetSequencerChAdd>
 800272c:	e0ed      	b.n	800290a <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	211f      	movs	r1, #31
 8002738:	400b      	ands	r3, r1
 800273a:	210f      	movs	r1, #15
 800273c:	4099      	lsls	r1, r3
 800273e:	000b      	movs	r3, r1
 8002740:	43db      	mvns	r3, r3
 8002742:	4013      	ands	r3, r2
 8002744:	0019      	movs	r1, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	025b      	lsls	r3, r3, #9
 800274c:	0a5b      	lsrs	r3, r3, #9
 800274e:	d105      	bne.n	800275c <HAL_ADC_ConfigChannel+0x9c>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	0e9b      	lsrs	r3, r3, #26
 8002756:	221f      	movs	r2, #31
 8002758:	4013      	ands	r3, r2
 800275a:	e0bc      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2201      	movs	r2, #1
 8002762:	4013      	ands	r3, r2
 8002764:	d000      	beq.n	8002768 <HAL_ADC_ConfigChannel+0xa8>
 8002766:	e0b5      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x214>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2202      	movs	r2, #2
 800276e:	4013      	ands	r3, r2
 8002770:	d000      	beq.n	8002774 <HAL_ADC_ConfigChannel+0xb4>
 8002772:	e0ad      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x210>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2204      	movs	r2, #4
 800277a:	4013      	ands	r3, r2
 800277c:	d000      	beq.n	8002780 <HAL_ADC_ConfigChannel+0xc0>
 800277e:	e0a5      	b.n	80028cc <HAL_ADC_ConfigChannel+0x20c>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2208      	movs	r2, #8
 8002786:	4013      	ands	r3, r2
 8002788:	d000      	beq.n	800278c <HAL_ADC_ConfigChannel+0xcc>
 800278a:	e09d      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x208>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2210      	movs	r2, #16
 8002792:	4013      	ands	r3, r2
 8002794:	d000      	beq.n	8002798 <HAL_ADC_ConfigChannel+0xd8>
 8002796:	e095      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x204>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2220      	movs	r2, #32
 800279e:	4013      	ands	r3, r2
 80027a0:	d000      	beq.n	80027a4 <HAL_ADC_ConfigChannel+0xe4>
 80027a2:	e08d      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x200>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2240      	movs	r2, #64	@ 0x40
 80027aa:	4013      	ands	r3, r2
 80027ac:	d000      	beq.n	80027b0 <HAL_ADC_ConfigChannel+0xf0>
 80027ae:	e085      	b.n	80028bc <HAL_ADC_ConfigChannel+0x1fc>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2280      	movs	r2, #128	@ 0x80
 80027b6:	4013      	ands	r3, r2
 80027b8:	d000      	beq.n	80027bc <HAL_ADC_ConfigChannel+0xfc>
 80027ba:	e07d      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x1f8>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	2380      	movs	r3, #128	@ 0x80
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4013      	ands	r3, r2
 80027c6:	d000      	beq.n	80027ca <HAL_ADC_ConfigChannel+0x10a>
 80027c8:	e074      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x1f4>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	2380      	movs	r3, #128	@ 0x80
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4013      	ands	r3, r2
 80027d4:	d000      	beq.n	80027d8 <HAL_ADC_ConfigChannel+0x118>
 80027d6:	e06b      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x1f0>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	2380      	movs	r3, #128	@ 0x80
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4013      	ands	r3, r2
 80027e2:	d000      	beq.n	80027e6 <HAL_ADC_ConfigChannel+0x126>
 80027e4:	e062      	b.n	80028ac <HAL_ADC_ConfigChannel+0x1ec>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	2380      	movs	r3, #128	@ 0x80
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	4013      	ands	r3, r2
 80027f0:	d000      	beq.n	80027f4 <HAL_ADC_ConfigChannel+0x134>
 80027f2:	e059      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x1e8>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2380      	movs	r3, #128	@ 0x80
 80027fa:	015b      	lsls	r3, r3, #5
 80027fc:	4013      	ands	r3, r2
 80027fe:	d151      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x1e4>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2380      	movs	r3, #128	@ 0x80
 8002806:	019b      	lsls	r3, r3, #6
 8002808:	4013      	ands	r3, r2
 800280a:	d149      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x1e0>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2380      	movs	r3, #128	@ 0x80
 8002812:	01db      	lsls	r3, r3, #7
 8002814:	4013      	ands	r3, r2
 8002816:	d141      	bne.n	800289c <HAL_ADC_ConfigChannel+0x1dc>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	2380      	movs	r3, #128	@ 0x80
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	4013      	ands	r3, r2
 8002822:	d139      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x1d8>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	2380      	movs	r3, #128	@ 0x80
 800282a:	025b      	lsls	r3, r3, #9
 800282c:	4013      	ands	r3, r2
 800282e:	d131      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x1d4>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2380      	movs	r3, #128	@ 0x80
 8002836:	029b      	lsls	r3, r3, #10
 8002838:	4013      	ands	r3, r2
 800283a:	d129      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x1d0>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2380      	movs	r3, #128	@ 0x80
 8002842:	02db      	lsls	r3, r3, #11
 8002844:	4013      	ands	r3, r2
 8002846:	d121      	bne.n	800288c <HAL_ADC_ConfigChannel+0x1cc>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	2380      	movs	r3, #128	@ 0x80
 800284e:	031b      	lsls	r3, r3, #12
 8002850:	4013      	ands	r3, r2
 8002852:	d119      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x1c8>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	2380      	movs	r3, #128	@ 0x80
 800285a:	035b      	lsls	r3, r3, #13
 800285c:	4013      	ands	r3, r2
 800285e:	d111      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x1c4>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	2380      	movs	r3, #128	@ 0x80
 8002866:	039b      	lsls	r3, r3, #14
 8002868:	4013      	ands	r3, r2
 800286a:	d109      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x1c0>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	2380      	movs	r3, #128	@ 0x80
 8002872:	03db      	lsls	r3, r3, #15
 8002874:	4013      	ands	r3, r2
 8002876:	d001      	beq.n	800287c <HAL_ADC_ConfigChannel+0x1bc>
 8002878:	2316      	movs	r3, #22
 800287a:	e02c      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 800287c:	2300      	movs	r3, #0
 800287e:	e02a      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 8002880:	2315      	movs	r3, #21
 8002882:	e028      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 8002884:	2314      	movs	r3, #20
 8002886:	e026      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 8002888:	2313      	movs	r3, #19
 800288a:	e024      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 800288c:	2312      	movs	r3, #18
 800288e:	e022      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 8002890:	2311      	movs	r3, #17
 8002892:	e020      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 8002894:	2310      	movs	r3, #16
 8002896:	e01e      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 8002898:	230f      	movs	r3, #15
 800289a:	e01c      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 800289c:	230e      	movs	r3, #14
 800289e:	e01a      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 80028a0:	230d      	movs	r3, #13
 80028a2:	e018      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 80028a4:	230c      	movs	r3, #12
 80028a6:	e016      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 80028a8:	230b      	movs	r3, #11
 80028aa:	e014      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 80028ac:	230a      	movs	r3, #10
 80028ae:	e012      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 80028b0:	2309      	movs	r3, #9
 80028b2:	e010      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 80028b4:	2308      	movs	r3, #8
 80028b6:	e00e      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 80028b8:	2307      	movs	r3, #7
 80028ba:	e00c      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 80028bc:	2306      	movs	r3, #6
 80028be:	e00a      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 80028c0:	2305      	movs	r3, #5
 80028c2:	e008      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 80028c4:	2304      	movs	r3, #4
 80028c6:	e006      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 80028c8:	2303      	movs	r3, #3
 80028ca:	e004      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e002      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x216>
 80028d4:	2300      	movs	r3, #0
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	6852      	ldr	r2, [r2, #4]
 80028da:	201f      	movs	r0, #31
 80028dc:	4002      	ands	r2, r0
 80028de:	4093      	lsls	r3, r2
 80028e0:	000a      	movs	r2, r1
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d808      	bhi.n	800290a <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	001a      	movs	r2, r3
 8002906:	f7ff fbc5 	bl	8002094 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6819      	ldr	r1, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	001a      	movs	r2, r3
 8002918:	f7ff fc00 	bl	800211c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	db00      	blt.n	8002926 <HAL_ADC_ConfigChannel+0x266>
 8002924:	e096      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002926:	4b3f      	ldr	r3, [pc, #252]	@ (8002a24 <HAL_ADC_ConfigChannel+0x364>)
 8002928:	0018      	movs	r0, r3
 800292a:	f7ff fb61 	bl	8001ff0 <LL_ADC_GetCommonPathInternalCh>
 800292e:	0003      	movs	r3, r0
 8002930:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a3c      	ldr	r2, [pc, #240]	@ (8002a28 <HAL_ADC_ConfigChannel+0x368>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d123      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	2380      	movs	r3, #128	@ 0x80
 8002940:	041b      	lsls	r3, r3, #16
 8002942:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002944:	d11e      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2280      	movs	r2, #128	@ 0x80
 800294a:	0412      	lsls	r2, r2, #16
 800294c:	4313      	orrs	r3, r2
 800294e:	4a35      	ldr	r2, [pc, #212]	@ (8002a24 <HAL_ADC_ConfigChannel+0x364>)
 8002950:	0019      	movs	r1, r3
 8002952:	0010      	movs	r0, r2
 8002954:	f7ff fb38 	bl	8001fc8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002958:	4b34      	ldr	r3, [pc, #208]	@ (8002a2c <HAL_ADC_ConfigChannel+0x36c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4934      	ldr	r1, [pc, #208]	@ (8002a30 <HAL_ADC_ConfigChannel+0x370>)
 800295e:	0018      	movs	r0, r3
 8002960:	f7fd fbd2 	bl	8000108 <__udivsi3>
 8002964:	0003      	movs	r3, r0
 8002966:	001a      	movs	r2, r3
 8002968:	0013      	movs	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	189b      	adds	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	3301      	adds	r3, #1
 8002972:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002974:	e002      	b.n	800297c <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3b01      	subs	r3, #1
 800297a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f9      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002982:	e067      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a2a      	ldr	r2, [pc, #168]	@ (8002a34 <HAL_ADC_ConfigChannel+0x374>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d162      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	2380      	movs	r3, #128	@ 0x80
 8002992:	03db      	lsls	r3, r3, #15
 8002994:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002996:	d15d      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2280      	movs	r2, #128	@ 0x80
 800299c:	03d2      	lsls	r2, r2, #15
 800299e:	4313      	orrs	r3, r2
 80029a0:	4a20      	ldr	r2, [pc, #128]	@ (8002a24 <HAL_ADC_ConfigChannel+0x364>)
 80029a2:	0019      	movs	r1, r3
 80029a4:	0010      	movs	r0, r2
 80029a6:	f7ff fb0f 	bl	8001fc8 <LL_ADC_SetCommonPathInternalCh>
 80029aa:	e053      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	2380      	movs	r3, #128	@ 0x80
 80029b2:	061b      	lsls	r3, r3, #24
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d004      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80029bc:	4a18      	ldr	r2, [pc, #96]	@ (8002a20 <HAL_ADC_ConfigChannel+0x360>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d107      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	0019      	movs	r1, r3
 80029cc:	0010      	movs	r0, r2
 80029ce:	f7ff fb92 	bl	80020f6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	da3c      	bge.n	8002a54 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029da:	4b12      	ldr	r3, [pc, #72]	@ (8002a24 <HAL_ADC_ConfigChannel+0x364>)
 80029dc:	0018      	movs	r0, r3
 80029de:	f7ff fb07 	bl	8001ff0 <LL_ADC_GetCommonPathInternalCh>
 80029e2:	0003      	movs	r3, r0
 80029e4:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002a28 <HAL_ADC_ConfigChannel+0x368>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d108      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4a11      	ldr	r2, [pc, #68]	@ (8002a38 <HAL_ADC_ConfigChannel+0x378>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002a24 <HAL_ADC_ConfigChannel+0x364>)
 80029f8:	0019      	movs	r1, r3
 80029fa:	0010      	movs	r0, r2
 80029fc:	f7ff fae4 	bl	8001fc8 <LL_ADC_SetCommonPathInternalCh>
 8002a00:	e028      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a0b      	ldr	r2, [pc, #44]	@ (8002a34 <HAL_ADC_ConfigChannel+0x374>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d123      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4a0b      	ldr	r2, [pc, #44]	@ (8002a3c <HAL_ADC_ConfigChannel+0x37c>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	4a04      	ldr	r2, [pc, #16]	@ (8002a24 <HAL_ADC_ConfigChannel+0x364>)
 8002a14:	0019      	movs	r1, r3
 8002a16:	0010      	movs	r0, r2
 8002a18:	f7ff fad6 	bl	8001fc8 <LL_ADC_SetCommonPathInternalCh>
 8002a1c:	e01a      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x394>
 8002a1e:	46c0      	nop			@ (mov r8, r8)
 8002a20:	80000004 	.word	0x80000004
 8002a24:	40012708 	.word	0x40012708
 8002a28:	a4000200 	.word	0xa4000200
 8002a2c:	20000020 	.word	0x20000020
 8002a30:	00030d40 	.word	0x00030d40
 8002a34:	a8000400 	.word	0xa8000400
 8002a38:	ff7fffff 	.word	0xff7fffff
 8002a3c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a44:	2220      	movs	r2, #32
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a4c:	2317      	movs	r3, #23
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	2201      	movs	r2, #1
 8002a52:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2254      	movs	r2, #84	@ 0x54
 8002a58:	2100      	movs	r1, #0
 8002a5a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002a5c:	2317      	movs	r3, #23
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	781b      	ldrb	r3, [r3, #0]
}
 8002a62:	0018      	movs	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b006      	add	sp, #24
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	46c0      	nop			@ (mov r8, r8)

08002a6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f7ff fbb5 	bl	80021ec <LL_ADC_IsEnabled>
 8002a82:	1e03      	subs	r3, r0, #0
 8002a84:	d162      	bne.n	8002b4c <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4a32      	ldr	r2, [pc, #200]	@ (8002b58 <ADC_Enable+0xec>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d00d      	beq.n	8002aae <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a96:	2210      	movs	r2, #16
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e04f      	b.n	8002b4e <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f7ff fb76 	bl	80021a4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002ab8:	4b28      	ldr	r3, [pc, #160]	@ (8002b5c <ADC_Enable+0xf0>)
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7ff fa98 	bl	8001ff0 <LL_ADC_GetCommonPathInternalCh>
 8002ac0:	0002      	movs	r2, r0
 8002ac2:	2380      	movs	r3, #128	@ 0x80
 8002ac4:	041b      	lsls	r3, r3, #16
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d00f      	beq.n	8002aea <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002aca:	4b25      	ldr	r3, [pc, #148]	@ (8002b60 <ADC_Enable+0xf4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4925      	ldr	r1, [pc, #148]	@ (8002b64 <ADC_Enable+0xf8>)
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f7fd fb19 	bl	8000108 <__udivsi3>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002ada:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002adc:	e002      	b.n	8002ae4 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f9      	bne.n	8002ade <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	7e5b      	ldrb	r3, [r3, #25]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d02c      	beq.n	8002b4c <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002af2:	f7ff fa3b 	bl	8001f6c <HAL_GetTick>
 8002af6:	0003      	movs	r3, r0
 8002af8:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002afa:	e020      	b.n	8002b3e <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7ff fb73 	bl	80021ec <LL_ADC_IsEnabled>
 8002b06:	1e03      	subs	r3, r0, #0
 8002b08:	d104      	bne.n	8002b14 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f7ff fb48 	bl	80021a4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b14:	f7ff fa2a 	bl	8001f6c <HAL_GetTick>
 8002b18:	0002      	movs	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d90d      	bls.n	8002b3e <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b26:	2210      	movs	r2, #16
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b32:	2201      	movs	r2, #1
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e007      	b.n	8002b4e <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2201      	movs	r2, #1
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d1d7      	bne.n	8002afc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	0018      	movs	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b004      	add	sp, #16
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	46c0      	nop			@ (mov r8, r8)
 8002b58:	80000017 	.word	0x80000017
 8002b5c:	40012708 	.word	0x40012708
 8002b60:	20000020 	.word	0x20000020
 8002b64:	00030d40 	.word	0x00030d40

08002b68 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7a:	2250      	movs	r2, #80	@ 0x50
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d141      	bne.n	8002c04 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b84:	2280      	movs	r2, #128	@ 0x80
 8002b86:	0092      	lsls	r2, r2, #2
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	0018      	movs	r0, r3
 8002b94:	f7ff fa6d 	bl	8002072 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b98:	1e03      	subs	r3, r0, #0
 8002b9a:	d02e      	beq.n	8002bfa <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	7e9b      	ldrb	r3, [r3, #26]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12a      	bne.n	8002bfa <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2208      	movs	r2, #8
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d123      	bne.n	8002bfa <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f7ff fb3c 	bl	8002234 <LL_ADC_REG_IsConversionOngoing>
 8002bbc:	1e03      	subs	r3, r0, #0
 8002bbe:	d110      	bne.n	8002be2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	210c      	movs	r1, #12
 8002bcc:	438a      	bics	r2, r1
 8002bce:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd4:	4a15      	ldr	r2, [pc, #84]	@ (8002c2c <ADC_DMAConvCplt+0xc4>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2201      	movs	r2, #1
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	659a      	str	r2, [r3, #88]	@ 0x58
 8002be0:	e00b      	b.n	8002bfa <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be6:	2220      	movs	r2, #32
 8002be8:	431a      	orrs	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f7fd fbf9 	bl	80003f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c02:	e00f      	b.n	8002c24 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c08:	2210      	movs	r2, #16
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d004      	beq.n	8002c18 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7fd fbff 	bl	8000414 <HAL_ADC_ErrorCallback>
}
 8002c16:	e005      	b.n	8002c24 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	0010      	movs	r0, r2
 8002c22:	4798      	blx	r3
}
 8002c24:	46c0      	nop			@ (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b004      	add	sp, #16
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	fffffefe 	.word	0xfffffefe

08002c30 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f7fd fbdf 	bl	8000404 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c46:	46c0      	nop			@ (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b004      	add	sp, #16
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c60:	2240      	movs	r2, #64	@ 0x40
 8002c62:	431a      	orrs	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	0018      	movs	r0, r3
 8002c78:	f7fd fbcc 	bl	8000414 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c7c:	46c0      	nop			@ (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b004      	add	sp, #16
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	0002      	movs	r2, r0
 8002c8c:	1dfb      	adds	r3, r7, #7
 8002c8e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c90:	1dfb      	adds	r3, r7, #7
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c96:	d809      	bhi.n	8002cac <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c98:	1dfb      	adds	r3, r7, #7
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	001a      	movs	r2, r3
 8002c9e:	231f      	movs	r3, #31
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	4b04      	ldr	r3, [pc, #16]	@ (8002cb4 <__NVIC_EnableIRQ+0x30>)
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	4091      	lsls	r1, r2
 8002ca8:	000a      	movs	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002cac:	46c0      	nop			@ (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b002      	add	sp, #8
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	e000e100 	.word	0xe000e100

08002cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	0002      	movs	r2, r0
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	1dfb      	adds	r3, r7, #7
 8002cc4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002cc6:	1dfb      	adds	r3, r7, #7
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ccc:	d828      	bhi.n	8002d20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cce:	4a2f      	ldr	r2, [pc, #188]	@ (8002d8c <__NVIC_SetPriority+0xd4>)
 8002cd0:	1dfb      	adds	r3, r7, #7
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	b25b      	sxtb	r3, r3
 8002cd6:	089b      	lsrs	r3, r3, #2
 8002cd8:	33c0      	adds	r3, #192	@ 0xc0
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	589b      	ldr	r3, [r3, r2]
 8002cde:	1dfa      	adds	r2, r7, #7
 8002ce0:	7812      	ldrb	r2, [r2, #0]
 8002ce2:	0011      	movs	r1, r2
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	400a      	ands	r2, r1
 8002ce8:	00d2      	lsls	r2, r2, #3
 8002cea:	21ff      	movs	r1, #255	@ 0xff
 8002cec:	4091      	lsls	r1, r2
 8002cee:	000a      	movs	r2, r1
 8002cf0:	43d2      	mvns	r2, r2
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	019b      	lsls	r3, r3, #6
 8002cfa:	22ff      	movs	r2, #255	@ 0xff
 8002cfc:	401a      	ands	r2, r3
 8002cfe:	1dfb      	adds	r3, r7, #7
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	0018      	movs	r0, r3
 8002d04:	2303      	movs	r3, #3
 8002d06:	4003      	ands	r3, r0
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d0c:	481f      	ldr	r0, [pc, #124]	@ (8002d8c <__NVIC_SetPriority+0xd4>)
 8002d0e:	1dfb      	adds	r3, r7, #7
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	089b      	lsrs	r3, r3, #2
 8002d16:	430a      	orrs	r2, r1
 8002d18:	33c0      	adds	r3, #192	@ 0xc0
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d1e:	e031      	b.n	8002d84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d20:	4a1b      	ldr	r2, [pc, #108]	@ (8002d90 <__NVIC_SetPriority+0xd8>)
 8002d22:	1dfb      	adds	r3, r7, #7
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	0019      	movs	r1, r3
 8002d28:	230f      	movs	r3, #15
 8002d2a:	400b      	ands	r3, r1
 8002d2c:	3b08      	subs	r3, #8
 8002d2e:	089b      	lsrs	r3, r3, #2
 8002d30:	3306      	adds	r3, #6
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	18d3      	adds	r3, r2, r3
 8002d36:	3304      	adds	r3, #4
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	1dfa      	adds	r2, r7, #7
 8002d3c:	7812      	ldrb	r2, [r2, #0]
 8002d3e:	0011      	movs	r1, r2
 8002d40:	2203      	movs	r2, #3
 8002d42:	400a      	ands	r2, r1
 8002d44:	00d2      	lsls	r2, r2, #3
 8002d46:	21ff      	movs	r1, #255	@ 0xff
 8002d48:	4091      	lsls	r1, r2
 8002d4a:	000a      	movs	r2, r1
 8002d4c:	43d2      	mvns	r2, r2
 8002d4e:	401a      	ands	r2, r3
 8002d50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	019b      	lsls	r3, r3, #6
 8002d56:	22ff      	movs	r2, #255	@ 0xff
 8002d58:	401a      	ands	r2, r3
 8002d5a:	1dfb      	adds	r3, r7, #7
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	0018      	movs	r0, r3
 8002d60:	2303      	movs	r3, #3
 8002d62:	4003      	ands	r3, r0
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d68:	4809      	ldr	r0, [pc, #36]	@ (8002d90 <__NVIC_SetPriority+0xd8>)
 8002d6a:	1dfb      	adds	r3, r7, #7
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	001c      	movs	r4, r3
 8002d70:	230f      	movs	r3, #15
 8002d72:	4023      	ands	r3, r4
 8002d74:	3b08      	subs	r3, #8
 8002d76:	089b      	lsrs	r3, r3, #2
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	3306      	adds	r3, #6
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	18c3      	adds	r3, r0, r3
 8002d80:	3304      	adds	r3, #4
 8002d82:	601a      	str	r2, [r3, #0]
}
 8002d84:	46c0      	nop			@ (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b003      	add	sp, #12
 8002d8a:	bd90      	pop	{r4, r7, pc}
 8002d8c:	e000e100 	.word	0xe000e100
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	1e5a      	subs	r2, r3, #1
 8002da0:	2380      	movs	r3, #128	@ 0x80
 8002da2:	045b      	lsls	r3, r3, #17
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d301      	bcc.n	8002dac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002da8:	2301      	movs	r3, #1
 8002daa:	e010      	b.n	8002dce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dac:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd8 <SysTick_Config+0x44>)
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	3a01      	subs	r2, #1
 8002db2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002db4:	2301      	movs	r3, #1
 8002db6:	425b      	negs	r3, r3
 8002db8:	2103      	movs	r1, #3
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f7ff ff7c 	bl	8002cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc0:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <SysTick_Config+0x44>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dc6:	4b04      	ldr	r3, [pc, #16]	@ (8002dd8 <SysTick_Config+0x44>)
 8002dc8:	2207      	movs	r2, #7
 8002dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	0018      	movs	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b002      	add	sp, #8
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	46c0      	nop			@ (mov r8, r8)
 8002dd8:	e000e010 	.word	0xe000e010

08002ddc <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	210f      	movs	r1, #15
 8002de8:	187b      	adds	r3, r7, r1
 8002dea:	1c02      	adds	r2, r0, #0
 8002dec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	187b      	adds	r3, r7, r1
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b25b      	sxtb	r3, r3
 8002df6:	0011      	movs	r1, r2
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7ff ff5d 	bl	8002cb8 <__NVIC_SetPriority>
}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b004      	add	sp, #16
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	0002      	movs	r2, r0
 8002e0e:	1dfb      	adds	r3, r7, #7
 8002e10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e12:	1dfb      	adds	r3, r7, #7
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	b25b      	sxtb	r3, r3
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f7ff ff33 	bl	8002c84 <__NVIC_EnableIRQ>
}
 8002e1e:	46c0      	nop			@ (mov r8, r8)
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b002      	add	sp, #8
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7ff ffaf 	bl	8002d94 <SysTick_Config>
 8002e36:	0003      	movs	r3, r0
}
 8002e38:	0018      	movs	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e077      	b.n	8002f42 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a3d      	ldr	r2, [pc, #244]	@ (8002f4c <HAL_DMA_Init+0x10c>)
 8002e58:	4694      	mov	ip, r2
 8002e5a:	4463      	add	r3, ip
 8002e5c:	2114      	movs	r1, #20
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f7fd f952 	bl	8000108 <__udivsi3>
 8002e64:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002e66:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2225      	movs	r2, #37	@ 0x25
 8002e70:	2102      	movs	r1, #2
 8002e72:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4934      	ldr	r1, [pc, #208]	@ (8002f50 <HAL_DMA_Init+0x110>)
 8002e80:	400a      	ands	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6819      	ldr	r1, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f000 faa7 	bl	8003410 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	2380      	movs	r3, #128	@ 0x80
 8002ec8:	01db      	lsls	r3, r3, #7
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d102      	bne.n	8002ed4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002edc:	21ff      	movs	r1, #255	@ 0xff
 8002ede:	400a      	ands	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002eea:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d011      	beq.n	8002f18 <HAL_DMA_Init+0xd8>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d80d      	bhi.n	8002f18 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	0018      	movs	r0, r3
 8002f00:	f000 fab2 	bl	8003468 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	e008      	b.n	8002f2a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2225      	movs	r2, #37	@ 0x25
 8002f34:	2101      	movs	r1, #1
 8002f36:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2224      	movs	r2, #36	@ 0x24
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	0018      	movs	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b002      	add	sp, #8
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	bffdfff8 	.word	0xbffdfff8
 8002f50:	ffff800f 	.word	0xffff800f

08002f54 <HAL_DMA_DeInit>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e066      	b.n	8003034 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2101      	movs	r1, #1
 8002f72:	438a      	bics	r2, r1
 8002f74:	601a      	str	r2, [r3, #0]

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a30      	ldr	r2, [pc, #192]	@ (800303c <HAL_DMA_DeInit+0xe8>)
 8002f7c:	4694      	mov	ip, r2
 8002f7e:	4463      	add	r3, ip
 8002f80:	2114      	movs	r1, #20
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7fd f8c0 	bl	8000108 <__udivsi3>
 8002f88:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002f8a:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002f98:	4b29      	ldr	r3, [pc, #164]	@ (8003040 <HAL_DMA_DeInit+0xec>)
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa0:	221c      	movs	r2, #28
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	4b25      	ldr	r3, [pc, #148]	@ (8003040 <HAL_DMA_DeInit+0xec>)
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f000 fa2d 	bl	8003410 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002fc6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d010      	beq.n	8002ff2 <HAL_DMA_DeInit+0x9e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d80c      	bhi.n	8002ff2 <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 fa44 	bl	8003468 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002ff0:	605a      	str	r2, [r3, #4]
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	639a      	str	r2, [r3, #56]	@ 0x38

  hdma->DMAmuxRequestGen = 0U;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2225      	movs	r2, #37	@ 0x25
 8003026:	2100      	movs	r1, #0
 8003028:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2224      	movs	r2, #36	@ 0x24
 800302e:	2100      	movs	r1, #0
 8003030:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}
 800303c:	bffdfff8 	.word	0xbffdfff8
 8003040:	40020000 	.word	0x40020000

08003044 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003052:	2317      	movs	r3, #23
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2224      	movs	r2, #36	@ 0x24
 800305e:	5c9b      	ldrb	r3, [r3, r2]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_DMA_Start_IT+0x24>
 8003064:	2302      	movs	r3, #2
 8003066:	e070      	b.n	800314a <HAL_DMA_Start_IT+0x106>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2224      	movs	r2, #36	@ 0x24
 800306c:	2101      	movs	r1, #1
 800306e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2225      	movs	r2, #37	@ 0x25
 8003074:	5c9b      	ldrb	r3, [r3, r2]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	d157      	bne.n	800312c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2225      	movs	r2, #37	@ 0x25
 8003080:	2102      	movs	r1, #2
 8003082:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2101      	movs	r1, #1
 8003096:	438a      	bics	r2, r1
 8003098:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f975 	bl	8003390 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	210e      	movs	r1, #14
 80030ba:	430a      	orrs	r2, r1
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e00f      	b.n	80030e0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2104      	movs	r1, #4
 80030cc:	438a      	bics	r2, r1
 80030ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	210a      	movs	r1, #10
 80030dc:	430a      	orrs	r2, r1
 80030de:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	2380      	movs	r3, #128	@ 0x80
 80030e8:	025b      	lsls	r3, r3, #9
 80030ea:	4013      	ands	r3, r2
 80030ec:	d008      	beq.n	8003100 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f8:	2180      	movs	r1, #128	@ 0x80
 80030fa:	0049      	lsls	r1, r1, #1
 80030fc:	430a      	orrs	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003112:	2180      	movs	r1, #128	@ 0x80
 8003114:	0049      	lsls	r1, r1, #1
 8003116:	430a      	orrs	r2, r1
 8003118:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2101      	movs	r1, #1
 8003126:	430a      	orrs	r2, r1
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	e007      	b.n	800313c <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2224      	movs	r2, #36	@ 0x24
 8003130:	2100      	movs	r1, #0
 8003132:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003134:	2317      	movs	r3, #23
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	2202      	movs	r2, #2
 800313a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2224      	movs	r2, #36	@ 0x24
 8003140:	2100      	movs	r1, #0
 8003142:	5499      	strb	r1, [r3, r2]

  return status;
 8003144:	2317      	movs	r3, #23
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	781b      	ldrb	r3, [r3, #0]
}
 800314a:	0018      	movs	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	b006      	add	sp, #24
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e050      	b.n	8003208 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2225      	movs	r2, #37	@ 0x25
 800316a:	5c9b      	ldrb	r3, [r3, r2]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d008      	beq.n	8003184 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2204      	movs	r2, #4
 8003176:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2224      	movs	r2, #36	@ 0x24
 800317c:	2100      	movs	r1, #0
 800317e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e041      	b.n	8003208 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	210e      	movs	r1, #14
 8003190:	438a      	bics	r2, r1
 8003192:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319e:	491c      	ldr	r1, [pc, #112]	@ (8003210 <HAL_DMA_Abort+0xbc>)
 80031a0:	400a      	ands	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2101      	movs	r1, #1
 80031b0:	438a      	bics	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80031b4:	4b17      	ldr	r3, [pc, #92]	@ (8003214 <HAL_DMA_Abort+0xc0>)
 80031b6:	6859      	ldr	r1, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031bc:	221c      	movs	r2, #28
 80031be:	4013      	ands	r3, r2
 80031c0:	2201      	movs	r2, #1
 80031c2:	409a      	lsls	r2, r3
 80031c4:	4b13      	ldr	r3, [pc, #76]	@ (8003214 <HAL_DMA_Abort+0xc0>)
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80031d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00c      	beq.n	80031f6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e6:	490a      	ldr	r1, [pc, #40]	@ (8003210 <HAL_DMA_Abort+0xbc>)
 80031e8:	400a      	ands	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80031f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2225      	movs	r2, #37	@ 0x25
 80031fa:	2101      	movs	r1, #1
 80031fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2224      	movs	r2, #36	@ 0x24
 8003202:	2100      	movs	r1, #0
 8003204:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	0018      	movs	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	b002      	add	sp, #8
 800320e:	bd80      	pop	{r7, pc}
 8003210:	fffffeff 	.word	0xfffffeff
 8003214:	40020000 	.word	0x40020000

08003218 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8003220:	4b55      	ldr	r3, [pc, #340]	@ (8003378 <HAL_DMA_IRQHandler+0x160>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	221c      	movs	r2, #28
 8003234:	4013      	ands	r3, r2
 8003236:	2204      	movs	r2, #4
 8003238:	409a      	lsls	r2, r3
 800323a:	0013      	movs	r3, r2
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4013      	ands	r3, r2
 8003240:	d027      	beq.n	8003292 <HAL_DMA_IRQHandler+0x7a>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2204      	movs	r2, #4
 8003246:	4013      	ands	r3, r2
 8003248:	d023      	beq.n	8003292 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2220      	movs	r2, #32
 8003252:	4013      	ands	r3, r2
 8003254:	d107      	bne.n	8003266 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2104      	movs	r1, #4
 8003262:	438a      	bics	r2, r1
 8003264:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8003266:	4b44      	ldr	r3, [pc, #272]	@ (8003378 <HAL_DMA_IRQHandler+0x160>)
 8003268:	6859      	ldr	r1, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	221c      	movs	r2, #28
 8003270:	4013      	ands	r3, r2
 8003272:	2204      	movs	r2, #4
 8003274:	409a      	lsls	r2, r3
 8003276:	4b40      	ldr	r3, [pc, #256]	@ (8003378 <HAL_DMA_IRQHandler+0x160>)
 8003278:	430a      	orrs	r2, r1
 800327a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003280:	2b00      	cmp	r3, #0
 8003282:	d100      	bne.n	8003286 <HAL_DMA_IRQHandler+0x6e>
 8003284:	e073      	b.n	800336e <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	0010      	movs	r0, r2
 800328e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003290:	e06d      	b.n	800336e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	221c      	movs	r2, #28
 8003298:	4013      	ands	r3, r2
 800329a:	2202      	movs	r2, #2
 800329c:	409a      	lsls	r2, r3
 800329e:	0013      	movs	r3, r2
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4013      	ands	r3, r2
 80032a4:	d02e      	beq.n	8003304 <HAL_DMA_IRQHandler+0xec>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2202      	movs	r2, #2
 80032aa:	4013      	ands	r3, r2
 80032ac:	d02a      	beq.n	8003304 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2220      	movs	r2, #32
 80032b6:	4013      	ands	r3, r2
 80032b8:	d10b      	bne.n	80032d2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	210a      	movs	r1, #10
 80032c6:	438a      	bics	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2225      	movs	r2, #37	@ 0x25
 80032ce:	2101      	movs	r1, #1
 80032d0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80032d2:	4b29      	ldr	r3, [pc, #164]	@ (8003378 <HAL_DMA_IRQHandler+0x160>)
 80032d4:	6859      	ldr	r1, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	221c      	movs	r2, #28
 80032dc:	4013      	ands	r3, r2
 80032de:	2202      	movs	r2, #2
 80032e0:	409a      	lsls	r2, r3
 80032e2:	4b25      	ldr	r3, [pc, #148]	@ (8003378 <HAL_DMA_IRQHandler+0x160>)
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2224      	movs	r2, #36	@ 0x24
 80032ec:	2100      	movs	r1, #0
 80032ee:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d03a      	beq.n	800336e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	0010      	movs	r0, r2
 8003300:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003302:	e034      	b.n	800336e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003308:	221c      	movs	r2, #28
 800330a:	4013      	ands	r3, r2
 800330c:	2208      	movs	r2, #8
 800330e:	409a      	lsls	r2, r3
 8003310:	0013      	movs	r3, r2
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4013      	ands	r3, r2
 8003316:	d02b      	beq.n	8003370 <HAL_DMA_IRQHandler+0x158>
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2208      	movs	r2, #8
 800331c:	4013      	ands	r3, r2
 800331e:	d027      	beq.n	8003370 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	210e      	movs	r1, #14
 800332c:	438a      	bics	r2, r1
 800332e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003330:	4b11      	ldr	r3, [pc, #68]	@ (8003378 <HAL_DMA_IRQHandler+0x160>)
 8003332:	6859      	ldr	r1, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	221c      	movs	r2, #28
 800333a:	4013      	ands	r3, r2
 800333c:	2201      	movs	r2, #1
 800333e:	409a      	lsls	r2, r3
 8003340:	4b0d      	ldr	r3, [pc, #52]	@ (8003378 <HAL_DMA_IRQHandler+0x160>)
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2225      	movs	r2, #37	@ 0x25
 8003350:	2101      	movs	r1, #1
 8003352:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2224      	movs	r2, #36	@ 0x24
 8003358:	2100      	movs	r1, #0
 800335a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	0010      	movs	r0, r2
 800336c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800336e:	46c0      	nop			@ (mov r8, r8)
 8003370:	46c0      	nop			@ (mov r8, r8)
}
 8003372:	46bd      	mov	sp, r7
 8003374:	b004      	add	sp, #16
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40020000 	.word	0x40020000

0800337c <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003388:	0018      	movs	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	b002      	add	sp, #8
 800338e:	bd80      	pop	{r7, pc}

08003390 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80033a6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d004      	beq.n	80033ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80033b8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80033ba:	4b14      	ldr	r3, [pc, #80]	@ (800340c <DMA_SetConfig+0x7c>)
 80033bc:	6859      	ldr	r1, [r3, #4]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	221c      	movs	r2, #28
 80033c4:	4013      	ands	r3, r2
 80033c6:	2201      	movs	r2, #1
 80033c8:	409a      	lsls	r2, r3
 80033ca:	4b10      	ldr	r3, [pc, #64]	@ (800340c <DMA_SetConfig+0x7c>)
 80033cc:	430a      	orrs	r2, r1
 80033ce:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b10      	cmp	r3, #16
 80033de:	d108      	bne.n	80033f2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033f0:	e007      	b.n	8003402 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	60da      	str	r2, [r3, #12]
}
 8003402:	46c0      	nop			@ (mov r8, r8)
 8003404:	46bd      	mov	sp, r7
 8003406:	b004      	add	sp, #16
 8003408:	bd80      	pop	{r7, pc}
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	40020000 	.word	0x40020000

08003410 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	001a      	movs	r2, r3
 800341e:	23ff      	movs	r3, #255	@ 0xff
 8003420:	4013      	ands	r3, r2
 8003422:	3b08      	subs	r3, #8
 8003424:	2114      	movs	r1, #20
 8003426:	0018      	movs	r0, r3
 8003428:	f7fc fe6e 	bl	8000108 <__udivsi3>
 800342c:	0003      	movs	r3, r0
 800342e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8003436:	4a0a      	ldr	r2, [pc, #40]	@ (8003460 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003438:	4694      	mov	ip, r2
 800343a:	4463      	add	r3, ip
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	001a      	movs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a07      	ldr	r2, [pc, #28]	@ (8003464 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003448:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	221c      	movs	r2, #28
 800344e:	4013      	ands	r3, r2
 8003450:	2201      	movs	r2, #1
 8003452:	409a      	lsls	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003458:	46c0      	nop			@ (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	b004      	add	sp, #16
 800345e:	bd80      	pop	{r7, pc}
 8003460:	10008200 	.word	0x10008200
 8003464:	40020880 	.word	0x40020880

08003468 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	22ff      	movs	r2, #255	@ 0xff
 8003476:	4013      	ands	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4a0a      	ldr	r2, [pc, #40]	@ (80034a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800347e:	4694      	mov	ip, r2
 8003480:	4463      	add	r3, ip
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	001a      	movs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a07      	ldr	r2, [pc, #28]	@ (80034ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800348e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3b01      	subs	r3, #1
 8003494:	2203      	movs	r2, #3
 8003496:	4013      	ands	r3, r2
 8003498:	2201      	movs	r2, #1
 800349a:	409a      	lsls	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80034a0:	46c0      	nop			@ (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b004      	add	sp, #16
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	1000823f 	.word	0x1000823f
 80034ac:	40020940 	.word	0x40020940

080034b0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80034be:	e153      	b.n	8003768 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2101      	movs	r1, #1
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4091      	lsls	r1, r2
 80034ca:	000a      	movs	r2, r1
 80034cc:	4013      	ands	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d100      	bne.n	80034d8 <HAL_GPIO_Init+0x28>
 80034d6:	e144      	b.n	8003762 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x38>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b12      	cmp	r3, #18
 80034e6:	d125      	bne.n	8003534 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	08da      	lsrs	r2, r3, #3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3208      	adds	r2, #8
 80034f0:	0092      	lsls	r2, r2, #2
 80034f2:	58d3      	ldr	r3, [r2, r3]
 80034f4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	2207      	movs	r2, #7
 80034fa:	4013      	ands	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	220f      	movs	r2, #15
 8003500:	409a      	lsls	r2, r3
 8003502:	0013      	movs	r3, r2
 8003504:	43da      	mvns	r2, r3
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	4013      	ands	r3, r2
 800350a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	220f      	movs	r2, #15
 8003512:	401a      	ands	r2, r3
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2107      	movs	r1, #7
 8003518:	400b      	ands	r3, r1
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	409a      	lsls	r2, r3
 800351e:	0013      	movs	r3, r2
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	08da      	lsrs	r2, r3, #3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3208      	adds	r2, #8
 800352e:	0092      	lsls	r2, r2, #2
 8003530:	6979      	ldr	r1, [r7, #20]
 8003532:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	2203      	movs	r2, #3
 8003540:	409a      	lsls	r2, r3
 8003542:	0013      	movs	r3, r2
 8003544:	43da      	mvns	r2, r3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	4013      	ands	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2203      	movs	r2, #3
 8003552:	401a      	ands	r2, r3
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	409a      	lsls	r2, r3
 800355a:	0013      	movs	r3, r2
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d00b      	beq.n	8003588 <HAL_GPIO_Init+0xd8>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d007      	beq.n	8003588 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800357c:	2b11      	cmp	r3, #17
 800357e:	d003      	beq.n	8003588 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b12      	cmp	r3, #18
 8003586:	d130      	bne.n	80035ea <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	2203      	movs	r2, #3
 8003594:	409a      	lsls	r2, r3
 8003596:	0013      	movs	r3, r2
 8003598:	43da      	mvns	r2, r3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	4013      	ands	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	409a      	lsls	r2, r3
 80035aa:	0013      	movs	r3, r2
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035be:	2201      	movs	r2, #1
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	409a      	lsls	r2, r3
 80035c4:	0013      	movs	r3, r2
 80035c6:	43da      	mvns	r2, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	4013      	ands	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	091b      	lsrs	r3, r3, #4
 80035d4:	2201      	movs	r2, #1
 80035d6:	401a      	ands	r2, r3
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	409a      	lsls	r2, r3
 80035dc:	0013      	movs	r3, r2
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b03      	cmp	r3, #3
 80035f0:	d017      	beq.n	8003622 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	2203      	movs	r2, #3
 80035fe:	409a      	lsls	r2, r3
 8003600:	0013      	movs	r3, r2
 8003602:	43da      	mvns	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	4013      	ands	r3, r2
 8003608:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	409a      	lsls	r2, r3
 8003614:	0013      	movs	r3, r2
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	2380      	movs	r3, #128	@ 0x80
 8003628:	055b      	lsls	r3, r3, #21
 800362a:	4013      	ands	r3, r2
 800362c:	d100      	bne.n	8003630 <HAL_GPIO_Init+0x180>
 800362e:	e098      	b.n	8003762 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003630:	4a53      	ldr	r2, [pc, #332]	@ (8003780 <HAL_GPIO_Init+0x2d0>)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	089b      	lsrs	r3, r3, #2
 8003636:	3318      	adds	r3, #24
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	589b      	ldr	r3, [r3, r2]
 800363c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2203      	movs	r2, #3
 8003642:	4013      	ands	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	220f      	movs	r2, #15
 8003648:	409a      	lsls	r2, r3
 800364a:	0013      	movs	r3, r2
 800364c:	43da      	mvns	r2, r3
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	4013      	ands	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	23a0      	movs	r3, #160	@ 0xa0
 8003658:	05db      	lsls	r3, r3, #23
 800365a:	429a      	cmp	r2, r3
 800365c:	d019      	beq.n	8003692 <HAL_GPIO_Init+0x1e2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a48      	ldr	r2, [pc, #288]	@ (8003784 <HAL_GPIO_Init+0x2d4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d013      	beq.n	800368e <HAL_GPIO_Init+0x1de>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a47      	ldr	r2, [pc, #284]	@ (8003788 <HAL_GPIO_Init+0x2d8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00d      	beq.n	800368a <HAL_GPIO_Init+0x1da>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a46      	ldr	r2, [pc, #280]	@ (800378c <HAL_GPIO_Init+0x2dc>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d007      	beq.n	8003686 <HAL_GPIO_Init+0x1d6>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a45      	ldr	r2, [pc, #276]	@ (8003790 <HAL_GPIO_Init+0x2e0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d101      	bne.n	8003682 <HAL_GPIO_Init+0x1d2>
 800367e:	2305      	movs	r3, #5
 8003680:	e008      	b.n	8003694 <HAL_GPIO_Init+0x1e4>
 8003682:	2306      	movs	r3, #6
 8003684:	e006      	b.n	8003694 <HAL_GPIO_Init+0x1e4>
 8003686:	2303      	movs	r3, #3
 8003688:	e004      	b.n	8003694 <HAL_GPIO_Init+0x1e4>
 800368a:	2302      	movs	r3, #2
 800368c:	e002      	b.n	8003694 <HAL_GPIO_Init+0x1e4>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_GPIO_Init+0x1e4>
 8003692:	2300      	movs	r3, #0
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	2103      	movs	r1, #3
 8003698:	400a      	ands	r2, r1
 800369a:	00d2      	lsls	r2, r2, #3
 800369c:	4093      	lsls	r3, r2
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80036a4:	4936      	ldr	r1, [pc, #216]	@ (8003780 <HAL_GPIO_Init+0x2d0>)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	089b      	lsrs	r3, r3, #2
 80036aa:	3318      	adds	r3, #24
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80036b2:	4a33      	ldr	r2, [pc, #204]	@ (8003780 <HAL_GPIO_Init+0x2d0>)
 80036b4:	2380      	movs	r3, #128	@ 0x80
 80036b6:	58d3      	ldr	r3, [r2, r3]
 80036b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	43da      	mvns	r2, r3
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	4013      	ands	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	2380      	movs	r3, #128	@ 0x80
 80036ca:	025b      	lsls	r3, r3, #9
 80036cc:	4013      	ands	r3, r2
 80036ce:	d003      	beq.n	80036d8 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80036d8:	4929      	ldr	r1, [pc, #164]	@ (8003780 <HAL_GPIO_Init+0x2d0>)
 80036da:	2280      	movs	r2, #128	@ 0x80
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80036e0:	4a27      	ldr	r2, [pc, #156]	@ (8003780 <HAL_GPIO_Init+0x2d0>)
 80036e2:	2384      	movs	r3, #132	@ 0x84
 80036e4:	58d3      	ldr	r3, [r2, r3]
 80036e6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	43da      	mvns	r2, r3
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	4013      	ands	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	2380      	movs	r3, #128	@ 0x80
 80036f8:	029b      	lsls	r3, r3, #10
 80036fa:	4013      	ands	r3, r2
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003706:	491e      	ldr	r1, [pc, #120]	@ (8003780 <HAL_GPIO_Init+0x2d0>)
 8003708:	2284      	movs	r2, #132	@ 0x84
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800370e:	4b1c      	ldr	r3, [pc, #112]	@ (8003780 <HAL_GPIO_Init+0x2d0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	43da      	mvns	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	4013      	ands	r3, r2
 800371c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	2380      	movs	r3, #128	@ 0x80
 8003724:	035b      	lsls	r3, r3, #13
 8003726:	4013      	ands	r3, r2
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003732:	4b13      	ldr	r3, [pc, #76]	@ (8003780 <HAL_GPIO_Init+0x2d0>)
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8003738:	4b11      	ldr	r3, [pc, #68]	@ (8003780 <HAL_GPIO_Init+0x2d0>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	43da      	mvns	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	4013      	ands	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	2380      	movs	r3, #128	@ 0x80
 800374e:	039b      	lsls	r3, r3, #14
 8003750:	4013      	ands	r3, r2
 8003752:	d003      	beq.n	800375c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800375c:	4b08      	ldr	r3, [pc, #32]	@ (8003780 <HAL_GPIO_Init+0x2d0>)
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	3301      	adds	r3, #1
 8003766:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	40da      	lsrs	r2, r3
 8003770:	1e13      	subs	r3, r2, #0
 8003772:	d000      	beq.n	8003776 <HAL_GPIO_Init+0x2c6>
 8003774:	e6a4      	b.n	80034c0 <HAL_GPIO_Init+0x10>
  }
}
 8003776:	46c0      	nop			@ (mov r8, r8)
 8003778:	46c0      	nop			@ (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	b006      	add	sp, #24
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40021800 	.word	0x40021800
 8003784:	50000400 	.word	0x50000400
 8003788:	50000800 	.word	0x50000800
 800378c:	50000c00 	.word	0x50000c00
 8003790:	50001400 	.word	0x50001400

08003794 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80037a2:	e0ba      	b.n	800391a <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80037a4:	2201      	movs	r2, #1
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	409a      	lsls	r2, r3
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	4013      	ands	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d100      	bne.n	80037b8 <HAL_GPIO_DeInit+0x24>
 80037b6:	e0ad      	b.n	8003914 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 80037b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003930 <HAL_GPIO_DeInit+0x19c>)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	089b      	lsrs	r3, r3, #2
 80037be:	3318      	adds	r3, #24
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	589b      	ldr	r3, [r3, r2]
 80037c4:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2203      	movs	r2, #3
 80037ca:	4013      	ands	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	220f      	movs	r2, #15
 80037d0:	409a      	lsls	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4013      	ands	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	23a0      	movs	r3, #160	@ 0xa0
 80037dc:	05db      	lsls	r3, r3, #23
 80037de:	429a      	cmp	r2, r3
 80037e0:	d019      	beq.n	8003816 <HAL_GPIO_DeInit+0x82>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a53      	ldr	r2, [pc, #332]	@ (8003934 <HAL_GPIO_DeInit+0x1a0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d013      	beq.n	8003812 <HAL_GPIO_DeInit+0x7e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a52      	ldr	r2, [pc, #328]	@ (8003938 <HAL_GPIO_DeInit+0x1a4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00d      	beq.n	800380e <HAL_GPIO_DeInit+0x7a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a51      	ldr	r2, [pc, #324]	@ (800393c <HAL_GPIO_DeInit+0x1a8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d007      	beq.n	800380a <HAL_GPIO_DeInit+0x76>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a50      	ldr	r2, [pc, #320]	@ (8003940 <HAL_GPIO_DeInit+0x1ac>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d101      	bne.n	8003806 <HAL_GPIO_DeInit+0x72>
 8003802:	2305      	movs	r3, #5
 8003804:	e008      	b.n	8003818 <HAL_GPIO_DeInit+0x84>
 8003806:	2306      	movs	r3, #6
 8003808:	e006      	b.n	8003818 <HAL_GPIO_DeInit+0x84>
 800380a:	2303      	movs	r3, #3
 800380c:	e004      	b.n	8003818 <HAL_GPIO_DeInit+0x84>
 800380e:	2302      	movs	r3, #2
 8003810:	e002      	b.n	8003818 <HAL_GPIO_DeInit+0x84>
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <HAL_GPIO_DeInit+0x84>
 8003816:	2300      	movs	r3, #0
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	2103      	movs	r1, #3
 800381c:	400a      	ands	r2, r1
 800381e:	00d2      	lsls	r2, r2, #3
 8003820:	4093      	lsls	r3, r2
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	429a      	cmp	r2, r3
 8003826:	d136      	bne.n	8003896 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003828:	4a41      	ldr	r2, [pc, #260]	@ (8003930 <HAL_GPIO_DeInit+0x19c>)
 800382a:	2380      	movs	r3, #128	@ 0x80
 800382c:	58d3      	ldr	r3, [r2, r3]
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	43d2      	mvns	r2, r2
 8003832:	493f      	ldr	r1, [pc, #252]	@ (8003930 <HAL_GPIO_DeInit+0x19c>)
 8003834:	4013      	ands	r3, r2
 8003836:	2280      	movs	r2, #128	@ 0x80
 8003838:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800383a:	4a3d      	ldr	r2, [pc, #244]	@ (8003930 <HAL_GPIO_DeInit+0x19c>)
 800383c:	2384      	movs	r3, #132	@ 0x84
 800383e:	58d3      	ldr	r3, [r2, r3]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	43d2      	mvns	r2, r2
 8003844:	493a      	ldr	r1, [pc, #232]	@ (8003930 <HAL_GPIO_DeInit+0x19c>)
 8003846:	4013      	ands	r3, r2
 8003848:	2284      	movs	r2, #132	@ 0x84
 800384a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800384c:	4b38      	ldr	r3, [pc, #224]	@ (8003930 <HAL_GPIO_DeInit+0x19c>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	43d9      	mvns	r1, r3
 8003854:	4b36      	ldr	r3, [pc, #216]	@ (8003930 <HAL_GPIO_DeInit+0x19c>)
 8003856:	400a      	ands	r2, r1
 8003858:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800385a:	4b35      	ldr	r3, [pc, #212]	@ (8003930 <HAL_GPIO_DeInit+0x19c>)
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	43d9      	mvns	r1, r3
 8003862:	4b33      	ldr	r3, [pc, #204]	@ (8003930 <HAL_GPIO_DeInit+0x19c>)
 8003864:	400a      	ands	r2, r1
 8003866:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2203      	movs	r2, #3
 800386c:	4013      	ands	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	220f      	movs	r2, #15
 8003872:	409a      	lsls	r2, r3
 8003874:	0013      	movs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8003878:	4a2d      	ldr	r2, [pc, #180]	@ (8003930 <HAL_GPIO_DeInit+0x19c>)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	089b      	lsrs	r3, r3, #2
 800387e:	3318      	adds	r3, #24
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	589a      	ldr	r2, [r3, r2]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	43d9      	mvns	r1, r3
 8003888:	4829      	ldr	r0, [pc, #164]	@ (8003930 <HAL_GPIO_DeInit+0x19c>)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	089b      	lsrs	r3, r3, #2
 800388e:	400a      	ands	r2, r1
 8003890:	3318      	adds	r3, #24
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	2103      	movs	r1, #3
 80038a0:	4099      	lsls	r1, r3
 80038a2:	000b      	movs	r3, r1
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	08da      	lsrs	r2, r3, #3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3208      	adds	r2, #8
 80038b2:	0092      	lsls	r2, r2, #2
 80038b4:	58d3      	ldr	r3, [r2, r3]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	2107      	movs	r1, #7
 80038ba:	400a      	ands	r2, r1
 80038bc:	0092      	lsls	r2, r2, #2
 80038be:	210f      	movs	r1, #15
 80038c0:	4091      	lsls	r1, r2
 80038c2:	000a      	movs	r2, r1
 80038c4:	43d1      	mvns	r1, r2
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	08d2      	lsrs	r2, r2, #3
 80038ca:	4019      	ands	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3208      	adds	r2, #8
 80038d0:	0092      	lsls	r2, r2, #2
 80038d2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	0052      	lsls	r2, r2, #1
 80038dc:	2103      	movs	r1, #3
 80038de:	4091      	lsls	r1, r2
 80038e0:	000a      	movs	r2, r1
 80038e2:	43d2      	mvns	r2, r2
 80038e4:	401a      	ands	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2101      	movs	r1, #1
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4091      	lsls	r1, r2
 80038f4:	000a      	movs	r2, r1
 80038f6:	43d2      	mvns	r2, r2
 80038f8:	401a      	ands	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	0052      	lsls	r2, r2, #1
 8003906:	2103      	movs	r1, #3
 8003908:	4091      	lsls	r1, r2
 800390a:	000a      	movs	r2, r1
 800390c:	43d2      	mvns	r2, r2
 800390e:	401a      	ands	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	3301      	adds	r3, #1
 8003918:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	40da      	lsrs	r2, r3
 8003920:	1e13      	subs	r3, r2, #0
 8003922:	d000      	beq.n	8003926 <HAL_GPIO_DeInit+0x192>
 8003924:	e73e      	b.n	80037a4 <HAL_GPIO_DeInit+0x10>
  }
}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	46c0      	nop			@ (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	b006      	add	sp, #24
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021800 	.word	0x40021800
 8003934:	50000400 	.word	0x50000400
 8003938:	50000800 	.word	0x50000800
 800393c:	50000c00 	.word	0x50000c00
 8003940:	50001400 	.word	0x50001400

08003944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	000a      	movs	r2, r1
 800394e:	1cbb      	adds	r3, r7, #2
 8003950:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	1cba      	adds	r2, r7, #2
 8003958:	8812      	ldrh	r2, [r2, #0]
 800395a:	4013      	ands	r3, r2
 800395c:	d004      	beq.n	8003968 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800395e:	230f      	movs	r3, #15
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	2201      	movs	r2, #1
 8003964:	701a      	strb	r2, [r3, #0]
 8003966:	e003      	b.n	8003970 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003968:	230f      	movs	r3, #15
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003970:	230f      	movs	r3, #15
 8003972:	18fb      	adds	r3, r7, r3
 8003974:	781b      	ldrb	r3, [r3, #0]
}
 8003976:	0018      	movs	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	b004      	add	sp, #16
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	0008      	movs	r0, r1
 8003988:	0011      	movs	r1, r2
 800398a:	1cbb      	adds	r3, r7, #2
 800398c:	1c02      	adds	r2, r0, #0
 800398e:	801a      	strh	r2, [r3, #0]
 8003990:	1c7b      	adds	r3, r7, #1
 8003992:	1c0a      	adds	r2, r1, #0
 8003994:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003996:	1c7b      	adds	r3, r7, #1
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d004      	beq.n	80039a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800399e:	1cbb      	adds	r3, r7, #2
 80039a0:	881a      	ldrh	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039a6:	e003      	b.n	80039b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039a8:	1cbb      	adds	r3, r7, #2
 80039aa:	881a      	ldrh	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039b0:	46c0      	nop			@ (mov r8, r8)
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b002      	add	sp, #8
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e08f      	b.n	8003aea <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2241      	movs	r2, #65	@ 0x41
 80039ce:	5c9b      	ldrb	r3, [r3, r2]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d107      	bne.n	80039e6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2240      	movs	r2, #64	@ 0x40
 80039da:	2100      	movs	r1, #0
 80039dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f7fd ffcf 	bl	8001984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2241      	movs	r2, #65	@ 0x41
 80039ea:	2124      	movs	r1, #36	@ 0x24
 80039ec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2101      	movs	r1, #1
 80039fa:	438a      	bics	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	493b      	ldr	r1, [pc, #236]	@ (8003af4 <HAL_I2C_Init+0x13c>)
 8003a08:	400a      	ands	r2, r1
 8003a0a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4938      	ldr	r1, [pc, #224]	@ (8003af8 <HAL_I2C_Init+0x140>)
 8003a18:	400a      	ands	r2, r1
 8003a1a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d108      	bne.n	8003a36 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2180      	movs	r1, #128	@ 0x80
 8003a2e:	0209      	lsls	r1, r1, #8
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]
 8003a34:	e007      	b.n	8003a46 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2184      	movs	r1, #132	@ 0x84
 8003a40:	0209      	lsls	r1, r1, #8
 8003a42:	430a      	orrs	r2, r1
 8003a44:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d109      	bne.n	8003a62 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2180      	movs	r1, #128	@ 0x80
 8003a5a:	0109      	lsls	r1, r1, #4
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
 8003a60:	e007      	b.n	8003a72 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4923      	ldr	r1, [pc, #140]	@ (8003afc <HAL_I2C_Init+0x144>)
 8003a6e:	400a      	ands	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4920      	ldr	r1, [pc, #128]	@ (8003b00 <HAL_I2C_Init+0x148>)
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	491a      	ldr	r1, [pc, #104]	@ (8003af8 <HAL_I2C_Init+0x140>)
 8003a8e:	400a      	ands	r2, r1
 8003a90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69d9      	ldr	r1, [r3, #28]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1a      	ldr	r2, [r3, #32]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2241      	movs	r2, #65	@ 0x41
 8003ad6:	2120      	movs	r1, #32
 8003ad8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2242      	movs	r2, #66	@ 0x42
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	0018      	movs	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b002      	add	sp, #8
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	46c0      	nop			@ (mov r8, r8)
 8003af4:	f0ffffff 	.word	0xf0ffffff
 8003af8:	ffff7fff 	.word	0xffff7fff
 8003afc:	fffff7ff 	.word	0xfffff7ff
 8003b00:	02008000 	.word	0x02008000

08003b04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2241      	movs	r2, #65	@ 0x41
 8003b12:	5c9b      	ldrb	r3, [r3, r2]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	d138      	bne.n	8003b8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2240      	movs	r2, #64	@ 0x40
 8003b1e:	5c9b      	ldrb	r3, [r3, r2]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e032      	b.n	8003b8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2240      	movs	r2, #64	@ 0x40
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2241      	movs	r2, #65	@ 0x41
 8003b34:	2124      	movs	r1, #36	@ 0x24
 8003b36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2101      	movs	r1, #1
 8003b44:	438a      	bics	r2, r1
 8003b46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4911      	ldr	r1, [pc, #68]	@ (8003b98 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003b54:	400a      	ands	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6819      	ldr	r1, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2101      	movs	r1, #1
 8003b74:	430a      	orrs	r2, r1
 8003b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2241      	movs	r2, #65	@ 0x41
 8003b7c:	2120      	movs	r1, #32
 8003b7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2240      	movs	r2, #64	@ 0x40
 8003b84:	2100      	movs	r1, #0
 8003b86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e000      	b.n	8003b8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b8c:	2302      	movs	r3, #2
  }
}
 8003b8e:	0018      	movs	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b002      	add	sp, #8
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			@ (mov r8, r8)
 8003b98:	ffffefff 	.word	0xffffefff

08003b9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2241      	movs	r2, #65	@ 0x41
 8003baa:	5c9b      	ldrb	r3, [r3, r2]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d139      	bne.n	8003c26 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2240      	movs	r2, #64	@ 0x40
 8003bb6:	5c9b      	ldrb	r3, [r3, r2]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e033      	b.n	8003c28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2240      	movs	r2, #64	@ 0x40
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2241      	movs	r2, #65	@ 0x41
 8003bcc:	2124      	movs	r1, #36	@ 0x24
 8003bce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2101      	movs	r1, #1
 8003bdc:	438a      	bics	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4a11      	ldr	r2, [pc, #68]	@ (8003c30 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	021b      	lsls	r3, r3, #8
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2241      	movs	r2, #65	@ 0x41
 8003c16:	2120      	movs	r1, #32
 8003c18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2240      	movs	r2, #64	@ 0x40
 8003c1e:	2100      	movs	r1, #0
 8003c20:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	e000      	b.n	8003c28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c26:	2302      	movs	r3, #2
  }
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b004      	add	sp, #16
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	fffff0ff 	.word	0xfffff0ff

08003c34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e20f      	b.n	8004066 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d100      	bne.n	8003c52 <HAL_RCC_OscConfig+0x1e>
 8003c50:	e069      	b.n	8003d26 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c52:	4bc8      	ldr	r3, [pc, #800]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2238      	movs	r2, #56	@ 0x38
 8003c58:	4013      	ands	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d105      	bne.n	8003c6e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d15d      	bne.n	8003d26 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e1fb      	b.n	8004066 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	2380      	movs	r3, #128	@ 0x80
 8003c74:	025b      	lsls	r3, r3, #9
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d107      	bne.n	8003c8a <HAL_RCC_OscConfig+0x56>
 8003c7a:	4bbe      	ldr	r3, [pc, #760]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4bbd      	ldr	r3, [pc, #756]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003c80:	2180      	movs	r1, #128	@ 0x80
 8003c82:	0249      	lsls	r1, r1, #9
 8003c84:	430a      	orrs	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	e020      	b.n	8003ccc <HAL_RCC_OscConfig+0x98>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	23a0      	movs	r3, #160	@ 0xa0
 8003c90:	02db      	lsls	r3, r3, #11
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d10e      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x80>
 8003c96:	4bb7      	ldr	r3, [pc, #732]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	4bb6      	ldr	r3, [pc, #728]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003c9c:	2180      	movs	r1, #128	@ 0x80
 8003c9e:	02c9      	lsls	r1, r1, #11
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	4bb3      	ldr	r3, [pc, #716]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4bb2      	ldr	r3, [pc, #712]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003caa:	2180      	movs	r1, #128	@ 0x80
 8003cac:	0249      	lsls	r1, r1, #9
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e00b      	b.n	8003ccc <HAL_RCC_OscConfig+0x98>
 8003cb4:	4baf      	ldr	r3, [pc, #700]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4bae      	ldr	r3, [pc, #696]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003cba:	49af      	ldr	r1, [pc, #700]	@ (8003f78 <HAL_RCC_OscConfig+0x344>)
 8003cbc:	400a      	ands	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	4bac      	ldr	r3, [pc, #688]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4bab      	ldr	r3, [pc, #684]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003cc6:	49ad      	ldr	r1, [pc, #692]	@ (8003f7c <HAL_RCC_OscConfig+0x348>)
 8003cc8:	400a      	ands	r2, r1
 8003cca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d014      	beq.n	8003cfe <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fe f94a 	bl	8001f6c <HAL_GetTick>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003cde:	f7fe f945 	bl	8001f6c <HAL_GetTick>
 8003ce2:	0002      	movs	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b64      	cmp	r3, #100	@ 0x64
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e1ba      	b.n	8004066 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cf0:	4ba0      	ldr	r3, [pc, #640]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	2380      	movs	r3, #128	@ 0x80
 8003cf6:	029b      	lsls	r3, r3, #10
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0xaa>
 8003cfc:	e013      	b.n	8003d26 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfe:	f7fe f935 	bl	8001f6c <HAL_GetTick>
 8003d02:	0003      	movs	r3, r0
 8003d04:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003d08:	f7fe f930 	bl	8001f6c <HAL_GetTick>
 8003d0c:	0002      	movs	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b64      	cmp	r3, #100	@ 0x64
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e1a5      	b.n	8004066 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d1a:	4b96      	ldr	r3, [pc, #600]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	2380      	movs	r3, #128	@ 0x80
 8003d20:	029b      	lsls	r3, r3, #10
 8003d22:	4013      	ands	r3, r2
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d100      	bne.n	8003d32 <HAL_RCC_OscConfig+0xfe>
 8003d30:	e086      	b.n	8003e40 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d32:	4b90      	ldr	r3, [pc, #576]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2238      	movs	r2, #56	@ 0x38
 8003d38:	4013      	ands	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d12f      	bne.n	8003da2 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e18b      	b.n	8004066 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4e:	4b89      	ldr	r3, [pc, #548]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4a8b      	ldr	r2, [pc, #556]	@ (8003f80 <HAL_RCC_OscConfig+0x34c>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	0019      	movs	r1, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	021a      	lsls	r2, r3, #8
 8003d5e:	4b85      	ldr	r3, [pc, #532]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003d60:	430a      	orrs	r2, r1
 8003d62:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d112      	bne.n	8003d90 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d6a:	4b82      	ldr	r3, [pc, #520]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a85      	ldr	r2, [pc, #532]	@ (8003f84 <HAL_RCC_OscConfig+0x350>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	0019      	movs	r1, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	4b7e      	ldr	r3, [pc, #504]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003d7e:	4b7d      	ldr	r3, [pc, #500]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	0adb      	lsrs	r3, r3, #11
 8003d84:	2207      	movs	r2, #7
 8003d86:	4013      	ands	r3, r2
 8003d88:	4a7f      	ldr	r2, [pc, #508]	@ (8003f88 <HAL_RCC_OscConfig+0x354>)
 8003d8a:	40da      	lsrs	r2, r3
 8003d8c:	4b7f      	ldr	r3, [pc, #508]	@ (8003f8c <HAL_RCC_OscConfig+0x358>)
 8003d8e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d90:	4b7f      	ldr	r3, [pc, #508]	@ (8003f90 <HAL_RCC_OscConfig+0x35c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7fe f88d 	bl	8001eb4 <HAL_InitTick>
 8003d9a:	1e03      	subs	r3, r0, #0
 8003d9c:	d050      	beq.n	8003e40 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e161      	b.n	8004066 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d030      	beq.n	8003e0c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003daa:	4b72      	ldr	r3, [pc, #456]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a75      	ldr	r2, [pc, #468]	@ (8003f84 <HAL_RCC_OscConfig+0x350>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	0019      	movs	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	4b6e      	ldr	r3, [pc, #440]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8003dbe:	4b6d      	ldr	r3, [pc, #436]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003dc4:	2180      	movs	r1, #128	@ 0x80
 8003dc6:	0049      	lsls	r1, r1, #1
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7fe f8ce 	bl	8001f6c <HAL_GetTick>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003dd6:	f7fe f8c9 	bl	8001f6c <HAL_GetTick>
 8003dda:	0002      	movs	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e13e      	b.n	8004066 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003de8:	4b62      	ldr	r3, [pc, #392]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	2380      	movs	r3, #128	@ 0x80
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4013      	ands	r3, r2
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df4:	4b5f      	ldr	r3, [pc, #380]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	4a61      	ldr	r2, [pc, #388]	@ (8003f80 <HAL_RCC_OscConfig+0x34c>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	0019      	movs	r1, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	021a      	lsls	r2, r3, #8
 8003e04:	4b5b      	ldr	r3, [pc, #364]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003e06:	430a      	orrs	r2, r1
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	e019      	b.n	8003e40 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8003e0c:	4b59      	ldr	r3, [pc, #356]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b58      	ldr	r3, [pc, #352]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003e12:	4960      	ldr	r1, [pc, #384]	@ (8003f94 <HAL_RCC_OscConfig+0x360>)
 8003e14:	400a      	ands	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e18:	f7fe f8a8 	bl	8001f6c <HAL_GetTick>
 8003e1c:	0003      	movs	r3, r0
 8003e1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003e22:	f7fe f8a3 	bl	8001f6c <HAL_GetTick>
 8003e26:	0002      	movs	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e118      	b.n	8004066 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e34:	4b4f      	ldr	r3, [pc, #316]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	2380      	movs	r3, #128	@ 0x80
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d1f0      	bne.n	8003e22 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2208      	movs	r2, #8
 8003e46:	4013      	ands	r3, r2
 8003e48:	d042      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2238      	movs	r2, #56	@ 0x38
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b18      	cmp	r3, #24
 8003e54:	d105      	bne.n	8003e62 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d138      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e101      	b.n	8004066 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d019      	beq.n	8003e9e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003e6a:	4b42      	ldr	r3, [pc, #264]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003e6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e6e:	4b41      	ldr	r3, [pc, #260]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003e70:	2101      	movs	r1, #1
 8003e72:	430a      	orrs	r2, r1
 8003e74:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e76:	f7fe f879 	bl	8001f6c <HAL_GetTick>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003e80:	f7fe f874 	bl	8001f6c <HAL_GetTick>
 8003e84:	0002      	movs	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e0e9      	b.n	8004066 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003e92:	4b38      	ldr	r3, [pc, #224]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e96:	2202      	movs	r2, #2
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d0f1      	beq.n	8003e80 <HAL_RCC_OscConfig+0x24c>
 8003e9c:	e018      	b.n	8003ed0 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003e9e:	4b35      	ldr	r3, [pc, #212]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003ea0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ea2:	4b34      	ldr	r3, [pc, #208]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	438a      	bics	r2, r1
 8003ea8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eaa:	f7fe f85f 	bl	8001f6c <HAL_GetTick>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003eb4:	f7fe f85a 	bl	8001f6c <HAL_GetTick>
 8003eb8:	0002      	movs	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e0cf      	b.n	8004066 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003ec6:	4b2b      	ldr	r3, [pc, #172]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eca:	2202      	movs	r2, #2
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d1f1      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d100      	bne.n	8003edc <HAL_RCC_OscConfig+0x2a8>
 8003eda:	e084      	b.n	8003fe6 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003edc:	230f      	movs	r3, #15
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003ee4:	4b23      	ldr	r3, [pc, #140]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2238      	movs	r2, #56	@ 0x38
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d106      	bne.n	8003efe <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d000      	beq.n	8003efa <HAL_RCC_OscConfig+0x2c6>
 8003ef8:	e075      	b.n	8003fe6 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e0b3      	b.n	8004066 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d106      	bne.n	8003f14 <HAL_RCC_OscConfig+0x2e0>
 8003f06:	4b1b      	ldr	r3, [pc, #108]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003f08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f12:	e01c      	b.n	8003f4e <HAL_RCC_OscConfig+0x31a>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b05      	cmp	r3, #5
 8003f1a:	d10c      	bne.n	8003f36 <HAL_RCC_OscConfig+0x302>
 8003f1c:	4b15      	ldr	r3, [pc, #84]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003f1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f20:	4b14      	ldr	r3, [pc, #80]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003f22:	2104      	movs	r1, #4
 8003f24:	430a      	orrs	r2, r1
 8003f26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f28:	4b12      	ldr	r3, [pc, #72]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003f2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f2c:	4b11      	ldr	r3, [pc, #68]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003f2e:	2101      	movs	r1, #1
 8003f30:	430a      	orrs	r2, r1
 8003f32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f34:	e00b      	b.n	8003f4e <HAL_RCC_OscConfig+0x31a>
 8003f36:	4b0f      	ldr	r3, [pc, #60]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003f38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	438a      	bics	r2, r1
 8003f40:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f42:	4b0c      	ldr	r3, [pc, #48]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003f44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f46:	4b0b      	ldr	r3, [pc, #44]	@ (8003f74 <HAL_RCC_OscConfig+0x340>)
 8003f48:	2104      	movs	r1, #4
 8003f4a:	438a      	bics	r2, r1
 8003f4c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d028      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7fe f809 	bl	8001f6c <HAL_GetTick>
 8003f5a:	0003      	movs	r3, r0
 8003f5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003f5e:	e01d      	b.n	8003f9c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f60:	f7fe f804 	bl	8001f6c <HAL_GetTick>
 8003f64:	0002      	movs	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	4a0b      	ldr	r2, [pc, #44]	@ (8003f98 <HAL_RCC_OscConfig+0x364>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d915      	bls.n	8003f9c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e078      	b.n	8004066 <HAL_RCC_OscConfig+0x432>
 8003f74:	40021000 	.word	0x40021000
 8003f78:	fffeffff 	.word	0xfffeffff
 8003f7c:	fffbffff 	.word	0xfffbffff
 8003f80:	ffff80ff 	.word	0xffff80ff
 8003f84:	ffffc7ff 	.word	0xffffc7ff
 8003f88:	02dc6c00 	.word	0x02dc6c00
 8003f8c:	20000020 	.word	0x20000020
 8003f90:	20000024 	.word	0x20000024
 8003f94:	fffffeff 	.word	0xfffffeff
 8003f98:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003f9c:	4b34      	ldr	r3, [pc, #208]	@ (8004070 <HAL_RCC_OscConfig+0x43c>)
 8003f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d0dc      	beq.n	8003f60 <HAL_RCC_OscConfig+0x32c>
 8003fa6:	e013      	b.n	8003fd0 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fd ffe0 	bl	8001f6c <HAL_GetTick>
 8003fac:	0003      	movs	r3, r0
 8003fae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003fb0:	e009      	b.n	8003fc6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb2:	f7fd ffdb 	bl	8001f6c <HAL_GetTick>
 8003fb6:	0002      	movs	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8004074 <HAL_RCC_OscConfig+0x440>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e04f      	b.n	8004066 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8004070 <HAL_RCC_OscConfig+0x43c>)
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fca:	2202      	movs	r2, #2
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d1f0      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003fd0:	230f      	movs	r3, #15
 8003fd2:	18fb      	adds	r3, r7, r3
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d105      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003fda:	4b25      	ldr	r3, [pc, #148]	@ (8004070 <HAL_RCC_OscConfig+0x43c>)
 8003fdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fde:	4b24      	ldr	r3, [pc, #144]	@ (8004070 <HAL_RCC_OscConfig+0x43c>)
 8003fe0:	4925      	ldr	r1, [pc, #148]	@ (8004078 <HAL_RCC_OscConfig+0x444>)
 8003fe2:	400a      	ands	r2, r1
 8003fe4:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2210      	movs	r2, #16
 8003fec:	4013      	ands	r3, r2
 8003fee:	d039      	beq.n	8004064 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01b      	beq.n	8004030 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8004070 <HAL_RCC_OscConfig+0x43c>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8004070 <HAL_RCC_OscConfig+0x43c>)
 8003ffe:	2180      	movs	r1, #128	@ 0x80
 8004000:	03c9      	lsls	r1, r1, #15
 8004002:	430a      	orrs	r2, r1
 8004004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004006:	f7fd ffb1 	bl	8001f6c <HAL_GetTick>
 800400a:	0003      	movs	r3, r0
 800400c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004010:	f7fd ffac 	bl	8001f6c <HAL_GetTick>
 8004014:	0002      	movs	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e021      	b.n	8004066 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8004022:	4b13      	ldr	r3, [pc, #76]	@ (8004070 <HAL_RCC_OscConfig+0x43c>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	2380      	movs	r3, #128	@ 0x80
 8004028:	041b      	lsls	r3, r3, #16
 800402a:	4013      	ands	r3, r2
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0x3dc>
 800402e:	e019      	b.n	8004064 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004030:	4b0f      	ldr	r3, [pc, #60]	@ (8004070 <HAL_RCC_OscConfig+0x43c>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4b0e      	ldr	r3, [pc, #56]	@ (8004070 <HAL_RCC_OscConfig+0x43c>)
 8004036:	4911      	ldr	r1, [pc, #68]	@ (800407c <HAL_RCC_OscConfig+0x448>)
 8004038:	400a      	ands	r2, r1
 800403a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403c:	f7fd ff96 	bl	8001f6c <HAL_GetTick>
 8004040:	0003      	movs	r3, r0
 8004042:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004046:	f7fd ff91 	bl	8001f6c <HAL_GetTick>
 800404a:	0002      	movs	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e006      	b.n	8004066 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8004058:	4b05      	ldr	r3, [pc, #20]	@ (8004070 <HAL_RCC_OscConfig+0x43c>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	2380      	movs	r3, #128	@ 0x80
 800405e:	041b      	lsls	r3, r3, #16
 8004060:	4013      	ands	r3, r2
 8004062:	d1f0      	bne.n	8004046 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	0018      	movs	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	b006      	add	sp, #24
 800406c:	bd80      	pop	{r7, pc}
 800406e:	46c0      	nop			@ (mov r8, r8)
 8004070:	40021000 	.word	0x40021000
 8004074:	00001388 	.word	0x00001388
 8004078:	efffffff 	.word	0xefffffff
 800407c:	ffbfffff 	.word	0xffbfffff

08004080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0f6      	b.n	8004282 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004094:	4b7d      	ldr	r3, [pc, #500]	@ (800428c <HAL_RCC_ClockConfig+0x20c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2207      	movs	r2, #7
 800409a:	4013      	ands	r3, r2
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d91e      	bls.n	80040e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b7a      	ldr	r3, [pc, #488]	@ (800428c <HAL_RCC_ClockConfig+0x20c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2207      	movs	r2, #7
 80040a8:	4393      	bics	r3, r2
 80040aa:	0019      	movs	r1, r3
 80040ac:	4b77      	ldr	r3, [pc, #476]	@ (800428c <HAL_RCC_ClockConfig+0x20c>)
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040b4:	f7fd ff5a 	bl	8001f6c <HAL_GetTick>
 80040b8:	0003      	movs	r3, r0
 80040ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040bc:	e009      	b.n	80040d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80040be:	f7fd ff55 	bl	8001f6c <HAL_GetTick>
 80040c2:	0002      	movs	r2, r0
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	4a71      	ldr	r2, [pc, #452]	@ (8004290 <HAL_RCC_ClockConfig+0x210>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e0d7      	b.n	8004282 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040d2:	4b6e      	ldr	r3, [pc, #440]	@ (800428c <HAL_RCC_ClockConfig+0x20c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2207      	movs	r2, #7
 80040d8:	4013      	ands	r3, r2
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d1ee      	bne.n	80040be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2202      	movs	r2, #2
 80040e6:	4013      	ands	r3, r2
 80040e8:	d017      	beq.n	800411a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2204      	movs	r2, #4
 80040f0:	4013      	ands	r3, r2
 80040f2:	d008      	beq.n	8004106 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80040f4:	4b67      	ldr	r3, [pc, #412]	@ (8004294 <HAL_RCC_ClockConfig+0x214>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	4a67      	ldr	r2, [pc, #412]	@ (8004298 <HAL_RCC_ClockConfig+0x218>)
 80040fa:	401a      	ands	r2, r3
 80040fc:	4b65      	ldr	r3, [pc, #404]	@ (8004294 <HAL_RCC_ClockConfig+0x214>)
 80040fe:	21b0      	movs	r1, #176	@ 0xb0
 8004100:	0109      	lsls	r1, r1, #4
 8004102:	430a      	orrs	r2, r1
 8004104:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004106:	4b63      	ldr	r3, [pc, #396]	@ (8004294 <HAL_RCC_ClockConfig+0x214>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	4a64      	ldr	r2, [pc, #400]	@ (800429c <HAL_RCC_ClockConfig+0x21c>)
 800410c:	4013      	ands	r3, r2
 800410e:	0019      	movs	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	4b5f      	ldr	r3, [pc, #380]	@ (8004294 <HAL_RCC_ClockConfig+0x214>)
 8004116:	430a      	orrs	r2, r1
 8004118:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2201      	movs	r2, #1
 8004120:	4013      	ands	r3, r2
 8004122:	d100      	bne.n	8004126 <HAL_RCC_ClockConfig+0xa6>
 8004124:	e061      	b.n	80041ea <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8004126:	4b5b      	ldr	r3, [pc, #364]	@ (8004294 <HAL_RCC_ClockConfig+0x214>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	221c      	movs	r2, #28
 800412c:	4393      	bics	r3, r2
 800412e:	0019      	movs	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	4b57      	ldr	r3, [pc, #348]	@ (8004294 <HAL_RCC_ClockConfig+0x214>)
 8004136:	430a      	orrs	r2, r1
 8004138:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d107      	bne.n	8004152 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004142:	4b54      	ldr	r3, [pc, #336]	@ (8004294 <HAL_RCC_ClockConfig+0x214>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	2380      	movs	r3, #128	@ 0x80
 8004148:	029b      	lsls	r3, r3, #10
 800414a:	4013      	ands	r3, r2
 800414c:	d12b      	bne.n	80041a6 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e097      	b.n	8004282 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d107      	bne.n	800416a <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800415a:	4b4e      	ldr	r3, [pc, #312]	@ (8004294 <HAL_RCC_ClockConfig+0x214>)
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	2380      	movs	r3, #128	@ 0x80
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4013      	ands	r3, r2
 8004164:	d11f      	bne.n	80041a6 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e08b      	b.n	8004282 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d107      	bne.n	8004182 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8004172:	4b48      	ldr	r3, [pc, #288]	@ (8004294 <HAL_RCC_ClockConfig+0x214>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	2380      	movs	r3, #128	@ 0x80
 8004178:	041b      	lsls	r3, r3, #16
 800417a:	4013      	ands	r3, r2
 800417c:	d113      	bne.n	80041a6 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e07f      	b.n	8004282 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b03      	cmp	r3, #3
 8004188:	d106      	bne.n	8004198 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800418a:	4b42      	ldr	r3, [pc, #264]	@ (8004294 <HAL_RCC_ClockConfig+0x214>)
 800418c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800418e:	2202      	movs	r2, #2
 8004190:	4013      	ands	r3, r2
 8004192:	d108      	bne.n	80041a6 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e074      	b.n	8004282 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004198:	4b3e      	ldr	r3, [pc, #248]	@ (8004294 <HAL_RCC_ClockConfig+0x214>)
 800419a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800419c:	2202      	movs	r2, #2
 800419e:	4013      	ands	r3, r2
 80041a0:	d101      	bne.n	80041a6 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e06d      	b.n	8004282 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004294 <HAL_RCC_ClockConfig+0x214>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2207      	movs	r2, #7
 80041ac:	4393      	bics	r3, r2
 80041ae:	0019      	movs	r1, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	4b37      	ldr	r3, [pc, #220]	@ (8004294 <HAL_RCC_ClockConfig+0x214>)
 80041b6:	430a      	orrs	r2, r1
 80041b8:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ba:	f7fd fed7 	bl	8001f6c <HAL_GetTick>
 80041be:	0003      	movs	r3, r0
 80041c0:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c2:	e009      	b.n	80041d8 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80041c4:	f7fd fed2 	bl	8001f6c <HAL_GetTick>
 80041c8:	0002      	movs	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	4a30      	ldr	r2, [pc, #192]	@ (8004290 <HAL_RCC_ClockConfig+0x210>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e054      	b.n	8004282 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004294 <HAL_RCC_ClockConfig+0x214>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2238      	movs	r2, #56	@ 0x38
 80041de:	401a      	ands	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d1ec      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041ea:	4b28      	ldr	r3, [pc, #160]	@ (800428c <HAL_RCC_ClockConfig+0x20c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2207      	movs	r2, #7
 80041f0:	4013      	ands	r3, r2
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d21e      	bcs.n	8004236 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f8:	4b24      	ldr	r3, [pc, #144]	@ (800428c <HAL_RCC_ClockConfig+0x20c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2207      	movs	r2, #7
 80041fe:	4393      	bics	r3, r2
 8004200:	0019      	movs	r1, r3
 8004202:	4b22      	ldr	r3, [pc, #136]	@ (800428c <HAL_RCC_ClockConfig+0x20c>)
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800420a:	f7fd feaf 	bl	8001f6c <HAL_GetTick>
 800420e:	0003      	movs	r3, r0
 8004210:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004212:	e009      	b.n	8004228 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004214:	f7fd feaa 	bl	8001f6c <HAL_GetTick>
 8004218:	0002      	movs	r2, r0
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	4a1c      	ldr	r2, [pc, #112]	@ (8004290 <HAL_RCC_ClockConfig+0x210>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e02c      	b.n	8004282 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004228:	4b18      	ldr	r3, [pc, #96]	@ (800428c <HAL_RCC_ClockConfig+0x20c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2207      	movs	r2, #7
 800422e:	4013      	ands	r3, r2
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d1ee      	bne.n	8004214 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2204      	movs	r2, #4
 800423c:	4013      	ands	r3, r2
 800423e:	d009      	beq.n	8004254 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004240:	4b14      	ldr	r3, [pc, #80]	@ (8004294 <HAL_RCC_ClockConfig+0x214>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	4a16      	ldr	r2, [pc, #88]	@ (80042a0 <HAL_RCC_ClockConfig+0x220>)
 8004246:	4013      	ands	r3, r2
 8004248:	0019      	movs	r1, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	4b11      	ldr	r3, [pc, #68]	@ (8004294 <HAL_RCC_ClockConfig+0x214>)
 8004250:	430a      	orrs	r2, r1
 8004252:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004254:	f000 f82c 	bl	80042b0 <HAL_RCC_GetSysClockFreq>
 8004258:	0001      	movs	r1, r0
 800425a:	4b0e      	ldr	r3, [pc, #56]	@ (8004294 <HAL_RCC_ClockConfig+0x214>)
 800425c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800425e:	0a1b      	lsrs	r3, r3, #8
 8004260:	220f      	movs	r2, #15
 8004262:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004264:	4b0f      	ldr	r3, [pc, #60]	@ (80042a4 <HAL_RCC_ClockConfig+0x224>)
 8004266:	0092      	lsls	r2, r2, #2
 8004268:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800426a:	221f      	movs	r2, #31
 800426c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800426e:	000a      	movs	r2, r1
 8004270:	40da      	lsrs	r2, r3
 8004272:	4b0d      	ldr	r3, [pc, #52]	@ (80042a8 <HAL_RCC_ClockConfig+0x228>)
 8004274:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004276:	4b0d      	ldr	r3, [pc, #52]	@ (80042ac <HAL_RCC_ClockConfig+0x22c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	0018      	movs	r0, r3
 800427c:	f7fd fe1a 	bl	8001eb4 <HAL_InitTick>
 8004280:	0003      	movs	r3, r0
}
 8004282:	0018      	movs	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	b004      	add	sp, #16
 8004288:	bd80      	pop	{r7, pc}
 800428a:	46c0      	nop			@ (mov r8, r8)
 800428c:	40022000 	.word	0x40022000
 8004290:	00001388 	.word	0x00001388
 8004294:	40021000 	.word	0x40021000
 8004298:	ffff84ff 	.word	0xffff84ff
 800429c:	fffff0ff 	.word	0xfffff0ff
 80042a0:	ffff8fff 	.word	0xffff8fff
 80042a4:	08005c58 	.word	0x08005c58
 80042a8:	20000020 	.word	0x20000020
 80042ac:	20000024 	.word	0x20000024

080042b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 80042b6:	4b27      	ldr	r3, [pc, #156]	@ (8004354 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	089b      	lsrs	r3, r3, #2
 80042bc:	2207      	movs	r2, #7
 80042be:	4013      	ands	r3, r2
 80042c0:	3301      	adds	r3, #1
 80042c2:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80042c4:	4b23      	ldr	r3, [pc, #140]	@ (8004354 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2238      	movs	r2, #56	@ 0x38
 80042ca:	4013      	ands	r3, r2
 80042cc:	d10f      	bne.n	80042ee <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80042ce:	4b21      	ldr	r3, [pc, #132]	@ (8004354 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	0adb      	lsrs	r3, r3, #11
 80042d4:	2207      	movs	r2, #7
 80042d6:	4013      	ands	r3, r2
 80042d8:	2201      	movs	r2, #1
 80042da:	409a      	lsls	r2, r3
 80042dc:	0013      	movs	r3, r2
 80042de:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	481d      	ldr	r0, [pc, #116]	@ (8004358 <HAL_RCC_GetSysClockFreq+0xa8>)
 80042e4:	f7fb ff10 	bl	8000108 <__udivsi3>
 80042e8:	0003      	movs	r3, r0
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	e027      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80042ee:	4b19      	ldr	r3, [pc, #100]	@ (8004354 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2238      	movs	r2, #56	@ 0x38
 80042f4:	4013      	ands	r3, r2
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d102      	bne.n	8004300 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042fa:	4b18      	ldr	r3, [pc, #96]	@ (800435c <HAL_RCC_GetSysClockFreq+0xac>)
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	e01e      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004300:	4b14      	ldr	r3, [pc, #80]	@ (8004354 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2238      	movs	r2, #56	@ 0x38
 8004306:	4013      	ands	r3, r2
 8004308:	2b20      	cmp	r3, #32
 800430a:	d103      	bne.n	8004314 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800430c:	2380      	movs	r3, #128	@ 0x80
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	e014      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004314:	4b0f      	ldr	r3, [pc, #60]	@ (8004354 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2238      	movs	r2, #56	@ 0x38
 800431a:	4013      	ands	r3, r2
 800431c:	2b18      	cmp	r3, #24
 800431e:	d103      	bne.n	8004328 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004320:	23fa      	movs	r3, #250	@ 0xfa
 8004322:	01db      	lsls	r3, r3, #7
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	e00a      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8004328:	4b0a      	ldr	r3, [pc, #40]	@ (8004354 <HAL_RCC_GetSysClockFreq+0xa4>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2238      	movs	r2, #56	@ 0x38
 800432e:	4013      	ands	r3, r2
 8004330:	2b10      	cmp	r3, #16
 8004332:	d102      	bne.n	800433a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8004334:	4b08      	ldr	r3, [pc, #32]	@ (8004358 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	e001      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 800433e:	68b9      	ldr	r1, [r7, #8]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f7fb fee1 	bl	8000108 <__udivsi3>
 8004346:	0003      	movs	r3, r0
 8004348:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 800434a:	68fb      	ldr	r3, [r7, #12]
}
 800434c:	0018      	movs	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	b004      	add	sp, #16
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40021000 	.word	0x40021000
 8004358:	02dc6c00 	.word	0x02dc6c00
 800435c:	007a1200 	.word	0x007a1200

08004360 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004364:	f7ff ffa4 	bl	80042b0 <HAL_RCC_GetSysClockFreq>
 8004368:	0001      	movs	r1, r0
 800436a:	4b09      	ldr	r3, [pc, #36]	@ (8004390 <HAL_RCC_GetHCLKFreq+0x30>)
 800436c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800436e:	0a1b      	lsrs	r3, r3, #8
 8004370:	220f      	movs	r2, #15
 8004372:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004374:	4b07      	ldr	r3, [pc, #28]	@ (8004394 <HAL_RCC_GetHCLKFreq+0x34>)
 8004376:	0092      	lsls	r2, r2, #2
 8004378:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800437a:	221f      	movs	r2, #31
 800437c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800437e:	000a      	movs	r2, r1
 8004380:	40da      	lsrs	r2, r3
 8004382:	4b05      	ldr	r3, [pc, #20]	@ (8004398 <HAL_RCC_GetHCLKFreq+0x38>)
 8004384:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8004386:	4b04      	ldr	r3, [pc, #16]	@ (8004398 <HAL_RCC_GetHCLKFreq+0x38>)
 8004388:	681b      	ldr	r3, [r3, #0]
}
 800438a:	0018      	movs	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40021000 	.word	0x40021000
 8004394:	08005c58 	.word	0x08005c58
 8004398:	20000020 	.word	0x20000020

0800439c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80043a0:	f7ff ffde 	bl	8004360 <HAL_RCC_GetHCLKFreq>
 80043a4:	0001      	movs	r1, r0
 80043a6:	4b07      	ldr	r3, [pc, #28]	@ (80043c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	0b1b      	lsrs	r3, r3, #12
 80043ac:	2207      	movs	r2, #7
 80043ae:	401a      	ands	r2, r3
 80043b0:	4b05      	ldr	r3, [pc, #20]	@ (80043c8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80043b2:	0092      	lsls	r2, r2, #2
 80043b4:	58d3      	ldr	r3, [r2, r3]
 80043b6:	221f      	movs	r2, #31
 80043b8:	4013      	ands	r3, r2
 80043ba:	40d9      	lsrs	r1, r3
 80043bc:	000b      	movs	r3, r1
}
 80043be:	0018      	movs	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40021000 	.word	0x40021000
 80043c8:	08005c98 	.word	0x08005c98

080043cc <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80043d4:	2313      	movs	r3, #19
 80043d6:	18fb      	adds	r3, r7, r3
 80043d8:	2200      	movs	r2, #0
 80043da:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043dc:	2312      	movs	r3, #18
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	2200      	movs	r2, #0
 80043e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2240      	movs	r2, #64	@ 0x40
 80043ea:	4013      	ands	r3, r2
 80043ec:	d100      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80043ee:	e079      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043f0:	2011      	movs	r0, #17
 80043f2:	183b      	adds	r3, r7, r0
 80043f4:	2200      	movs	r2, #0
 80043f6:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043f8:	4b6a      	ldr	r3, [pc, #424]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80043fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043fc:	2380      	movs	r3, #128	@ 0x80
 80043fe:	055b      	lsls	r3, r3, #21
 8004400:	4013      	ands	r3, r2
 8004402:	d110      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004404:	4b67      	ldr	r3, [pc, #412]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004406:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004408:	4b66      	ldr	r3, [pc, #408]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800440a:	2180      	movs	r1, #128	@ 0x80
 800440c:	0549      	lsls	r1, r1, #21
 800440e:	430a      	orrs	r2, r1
 8004410:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004412:	4b64      	ldr	r3, [pc, #400]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004414:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004416:	2380      	movs	r3, #128	@ 0x80
 8004418:	055b      	lsls	r3, r3, #21
 800441a:	4013      	ands	r3, r2
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004420:	183b      	adds	r3, r7, r0
 8004422:	2201      	movs	r2, #1
 8004424:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8004426:	4b5f      	ldr	r3, [pc, #380]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004428:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800442a:	23c0      	movs	r3, #192	@ 0xc0
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4013      	ands	r3, r2
 8004430:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d019      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	429a      	cmp	r2, r3
 8004440:	d014      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8004442:	4b58      	ldr	r3, [pc, #352]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004446:	4a58      	ldr	r2, [pc, #352]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004448:	4013      	ands	r3, r2
 800444a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800444c:	4b55      	ldr	r3, [pc, #340]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800444e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004450:	4b54      	ldr	r3, [pc, #336]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004452:	2180      	movs	r1, #128	@ 0x80
 8004454:	0249      	lsls	r1, r1, #9
 8004456:	430a      	orrs	r2, r1
 8004458:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800445a:	4b52      	ldr	r3, [pc, #328]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800445c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800445e:	4b51      	ldr	r3, [pc, #324]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004460:	4952      	ldr	r1, [pc, #328]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004462:	400a      	ands	r2, r1
 8004464:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8004466:	4b4f      	ldr	r3, [pc, #316]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2201      	movs	r2, #1
 8004470:	4013      	ands	r3, r2
 8004472:	d016      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004474:	f7fd fd7a 	bl	8001f6c <HAL_GetTick>
 8004478:	0003      	movs	r3, r0
 800447a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800447c:	e00c      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800447e:	f7fd fd75 	bl	8001f6c <HAL_GetTick>
 8004482:	0002      	movs	r2, r0
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	4a49      	ldr	r2, [pc, #292]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d904      	bls.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800448e:	2313      	movs	r3, #19
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	2203      	movs	r2, #3
 8004494:	701a      	strb	r2, [r3, #0]
          break;
 8004496:	e004      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004498:	4b42      	ldr	r3, [pc, #264]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800449a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449c:	2202      	movs	r2, #2
 800449e:	4013      	ands	r3, r2
 80044a0:	d0ed      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80044a2:	2313      	movs	r3, #19
 80044a4:	18fb      	adds	r3, r7, r3
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10a      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044ac:	4b3d      	ldr	r3, [pc, #244]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b0:	4a3d      	ldr	r2, [pc, #244]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	0019      	movs	r1, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69da      	ldr	r2, [r3, #28]
 80044ba:	4b3a      	ldr	r3, [pc, #232]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044bc:	430a      	orrs	r2, r1
 80044be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044c0:	e005      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c2:	2312      	movs	r3, #18
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	2213      	movs	r2, #19
 80044c8:	18ba      	adds	r2, r7, r2
 80044ca:	7812      	ldrb	r2, [r2, #0]
 80044cc:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044ce:	2311      	movs	r3, #17
 80044d0:	18fb      	adds	r3, r7, r3
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d105      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d8:	4b32      	ldr	r3, [pc, #200]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044dc:	4b31      	ldr	r3, [pc, #196]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044de:	4935      	ldr	r1, [pc, #212]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80044e0:	400a      	ands	r2, r1
 80044e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2201      	movs	r2, #1
 80044ea:	4013      	ands	r3, r2
 80044ec:	d009      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ee:	4b2d      	ldr	r3, [pc, #180]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f2:	2203      	movs	r2, #3
 80044f4:	4393      	bics	r3, r2
 80044f6:	0019      	movs	r1, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	4b29      	ldr	r3, [pc, #164]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044fe:	430a      	orrs	r2, r1
 8004500:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2202      	movs	r2, #2
 8004508:	4013      	ands	r3, r2
 800450a:	d009      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800450c:	4b25      	ldr	r3, [pc, #148]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800450e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004510:	4a29      	ldr	r2, [pc, #164]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004512:	4013      	ands	r3, r2
 8004514:	0019      	movs	r1, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	4b22      	ldr	r3, [pc, #136]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800451c:	430a      	orrs	r2, r1
 800451e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2220      	movs	r2, #32
 8004526:	4013      	ands	r3, r2
 8004528:	d008      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800452a:	4b1e      	ldr	r3, [pc, #120]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800452c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	0899      	lsrs	r1, r3, #2
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	4b1b      	ldr	r3, [pc, #108]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004538:	430a      	orrs	r2, r1
 800453a:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2208      	movs	r2, #8
 8004542:	4013      	ands	r3, r2
 8004544:	d009      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004546:	4b17      	ldr	r3, [pc, #92]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454a:	4a1c      	ldr	r2, [pc, #112]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800454c:	4013      	ands	r3, r2
 800454e:	0019      	movs	r1, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695a      	ldr	r2, [r3, #20]
 8004554:	4b13      	ldr	r3, [pc, #76]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004556:	430a      	orrs	r2, r1
 8004558:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2204      	movs	r2, #4
 8004560:	4013      	ands	r3, r2
 8004562:	d009      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004564:	4b0f      	ldr	r3, [pc, #60]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004568:	4a15      	ldr	r2, [pc, #84]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800456a:	4013      	ands	r3, r2
 800456c:	0019      	movs	r1, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	4b0c      	ldr	r3, [pc, #48]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004574:	430a      	orrs	r2, r1
 8004576:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2280      	movs	r2, #128	@ 0x80
 800457e:	4013      	ands	r3, r2
 8004580:	d009      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8004582:	4b08      	ldr	r3, [pc, #32]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	22e0      	movs	r2, #224	@ 0xe0
 8004588:	4393      	bics	r3, r2
 800458a:	0019      	movs	r1, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	4b04      	ldr	r3, [pc, #16]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004592:	430a      	orrs	r2, r1
 8004594:	601a      	str	r2, [r3, #0]
  }
  return status;
 8004596:	2312      	movs	r3, #18
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	781b      	ldrb	r3, [r3, #0]
}
 800459c:	0018      	movs	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	b006      	add	sp, #24
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40021000 	.word	0x40021000
 80045a8:	fffffcff 	.word	0xfffffcff
 80045ac:	fffeffff 	.word	0xfffeffff
 80045b0:	00001388 	.word	0x00001388
 80045b4:	efffffff 	.word	0xefffffff
 80045b8:	ffffcfff 	.word	0xffffcfff
 80045bc:	ffffefff 	.word	0xffffefff
 80045c0:	ffff3fff 	.word	0xffff3fff

080045c4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e032      	b.n	800463c <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2288      	movs	r2, #136	@ 0x88
 80045da:	2124      	movs	r1, #36	@ 0x24
 80045dc:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2101      	movs	r1, #1
 80045ea:	438a      	bics	r2, r1
 80045ec:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2200      	movs	r2, #0
 80045fc:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2200      	movs	r2, #0
 8004604:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	0018      	movs	r0, r3
 800460a:	f7fd fb81 	bl	8001d10 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2290      	movs	r2, #144	@ 0x90
 8004612:	2100      	movs	r1, #0
 8004614:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2288      	movs	r2, #136	@ 0x88
 800461a:	2100      	movs	r1, #0
 800461c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	228c      	movs	r2, #140	@ 0x8c
 8004622:	2100      	movs	r1, #0
 8004624:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2284      	movs	r2, #132	@ 0x84
 8004636:	2100      	movs	r1, #0
 8004638:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b002      	add	sp, #8
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	1dbb      	adds	r3, r7, #6
 8004650:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2288      	movs	r2, #136	@ 0x88
 8004656:	589b      	ldr	r3, [r3, r2]
 8004658:	2b20      	cmp	r3, #32
 800465a:	d000      	beq.n	800465e <HAL_UART_Transmit_DMA+0x1a>
 800465c:	e079      	b.n	8004752 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_UART_Transmit_DMA+0x28>
 8004664:	1dbb      	adds	r3, r7, #6
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e071      	b.n	8004754 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	2380      	movs	r3, #128	@ 0x80
 8004676:	015b      	lsls	r3, r3, #5
 8004678:	429a      	cmp	r2, r3
 800467a:	d109      	bne.n	8004690 <HAL_UART_Transmit_DMA+0x4c>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d105      	bne.n	8004690 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2201      	movs	r2, #1
 8004688:	4013      	ands	r3, r2
 800468a:	d001      	beq.n	8004690 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e061      	b.n	8004754 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1dba      	adds	r2, r7, #6
 800469a:	2154      	movs	r1, #84	@ 0x54
 800469c:	8812      	ldrh	r2, [r2, #0]
 800469e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	1dba      	adds	r2, r7, #6
 80046a4:	2156      	movs	r1, #86	@ 0x56
 80046a6:	8812      	ldrh	r2, [r2, #0]
 80046a8:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2290      	movs	r2, #144	@ 0x90
 80046ae:	2100      	movs	r1, #0
 80046b0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2288      	movs	r2, #136	@ 0x88
 80046b6:	2121      	movs	r1, #33	@ 0x21
 80046b8:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d028      	beq.n	8004714 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046c6:	4a25      	ldr	r2, [pc, #148]	@ (800475c <HAL_UART_Transmit_DMA+0x118>)
 80046c8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046ce:	4a24      	ldr	r2, [pc, #144]	@ (8004760 <HAL_UART_Transmit_DMA+0x11c>)
 80046d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046d6:	4a23      	ldr	r2, [pc, #140]	@ (8004764 <HAL_UART_Transmit_DMA+0x120>)
 80046d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046de:	2200      	movs	r2, #0
 80046e0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ea:	0019      	movs	r1, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3328      	adds	r3, #40	@ 0x28
 80046f2:	001a      	movs	r2, r3
 80046f4:	1dbb      	adds	r3, r7, #6
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	f7fe fca4 	bl	8003044 <HAL_DMA_Start_IT>
 80046fc:	1e03      	subs	r3, r0, #0
 80046fe:	d009      	beq.n	8004714 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2290      	movs	r2, #144	@ 0x90
 8004704:	2110      	movs	r1, #16
 8004706:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2288      	movs	r2, #136	@ 0x88
 800470c:	2120      	movs	r1, #32
 800470e:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e01f      	b.n	8004754 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2240      	movs	r2, #64	@ 0x40
 800471a:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800471c:	f3ef 8310 	mrs	r3, PRIMASK
 8004720:	613b      	str	r3, [r7, #16]
  return(result);
 8004722:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004724:	61fb      	str	r3, [r7, #28]
 8004726:	2301      	movs	r3, #1
 8004728:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f383 8810 	msr	PRIMASK, r3
}
 8004730:	46c0      	nop			@ (mov r8, r8)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2180      	movs	r1, #128	@ 0x80
 800473e:	430a      	orrs	r2, r1
 8004740:	609a      	str	r2, [r3, #8]
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	f383 8810 	msr	PRIMASK, r3
}
 800474c:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	e000      	b.n	8004754 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8004752:	2302      	movs	r3, #2
  }
}
 8004754:	0018      	movs	r0, r3
 8004756:	46bd      	mov	sp, r7
 8004758:	b008      	add	sp, #32
 800475a:	bd80      	pop	{r7, pc}
 800475c:	080052e1 	.word	0x080052e1
 8004760:	08005379 	.word	0x08005379
 8004764:	0800550b 	.word	0x0800550b

08004768 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b096      	sub	sp, #88	@ 0x58
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004770:	f3ef 8310 	mrs	r3, PRIMASK
 8004774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004778:	657b      	str	r3, [r7, #84]	@ 0x54
 800477a:	2301      	movs	r3, #1
 800477c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004780:	f383 8810 	msr	PRIMASK, r3
}
 8004784:	46c0      	nop			@ (mov r8, r8)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4979      	ldr	r1, [pc, #484]	@ (8004978 <HAL_UART_Abort+0x210>)
 8004792:	400a      	ands	r2, r1
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004798:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800479c:	f383 8810 	msr	PRIMASK, r3
}
 80047a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80047a2:	f3ef 8310 	mrs	r3, PRIMASK
 80047a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80047a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 80047aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80047ac:	2301      	movs	r3, #1
 80047ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b2:	f383 8810 	msr	PRIMASK, r3
}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	496e      	ldr	r1, [pc, #440]	@ (800497c <HAL_UART_Abort+0x214>)
 80047c4:	400a      	ands	r2, r1
 80047c6:	609a      	str	r2, [r3, #8]
 80047c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047ca:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ce:	f383 8810 	msr	PRIMASK, r3
}
 80047d2:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d118      	bne.n	800480e <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80047dc:	f3ef 8310 	mrs	r3, PRIMASK
 80047e0:	623b      	str	r3, [r7, #32]
  return(result);
 80047e2:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80047e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047e6:	2301      	movs	r3, #1
 80047e8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	f383 8810 	msr	PRIMASK, r3
}
 80047f0:	46c0      	nop			@ (mov r8, r8)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2110      	movs	r1, #16
 80047fe:	438a      	bics	r2, r1
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004804:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004808:	f383 8810 	msr	PRIMASK, r3
}
 800480c:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	2280      	movs	r2, #128	@ 0x80
 8004816:	4013      	ands	r3, r2
 8004818:	2b80      	cmp	r3, #128	@ 0x80
 800481a:	d135      	bne.n	8004888 <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800481c:	f3ef 8310 	mrs	r3, PRIMASK
 8004820:	617b      	str	r3, [r7, #20]
  return(result);
 8004822:	697b      	ldr	r3, [r7, #20]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004824:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004826:	2301      	movs	r3, #1
 8004828:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f383 8810 	msr	PRIMASK, r3
}
 8004830:	46c0      	nop			@ (mov r8, r8)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2180      	movs	r1, #128	@ 0x80
 800483e:	438a      	bics	r2, r1
 8004840:	609a      	str	r2, [r3, #8]
 8004842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004844:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	f383 8810 	msr	PRIMASK, r3
}
 800484c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004852:	2b00      	cmp	r3, #0
 8004854:	d018      	beq.n	8004888 <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800485a:	2200      	movs	r2, #0
 800485c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004862:	0018      	movs	r0, r3
 8004864:	f7fe fc76 	bl	8003154 <HAL_DMA_Abort>
 8004868:	1e03      	subs	r3, r0, #0
 800486a:	d00d      	beq.n	8004888 <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004870:	0018      	movs	r0, r3
 8004872:	f7fe fd83 	bl	800337c <HAL_DMA_GetError>
 8004876:	0003      	movs	r3, r0
 8004878:	2b20      	cmp	r3, #32
 800487a:	d105      	bne.n	8004888 <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2290      	movs	r2, #144	@ 0x90
 8004880:	2110      	movs	r1, #16
 8004882:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e072      	b.n	800496e <HAL_UART_Abort+0x206>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2240      	movs	r2, #64	@ 0x40
 8004890:	4013      	ands	r3, r2
 8004892:	2b40      	cmp	r3, #64	@ 0x40
 8004894:	d139      	bne.n	800490a <HAL_UART_Abort+0x1a2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004896:	f3ef 8310 	mrs	r3, PRIMASK
 800489a:	60bb      	str	r3, [r7, #8]
  return(result);
 800489c:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800489e:	647b      	str	r3, [r7, #68]	@ 0x44
 80048a0:	2301      	movs	r3, #1
 80048a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f383 8810 	msr	PRIMASK, r3
}
 80048aa:	46c0      	nop			@ (mov r8, r8)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2140      	movs	r1, #64	@ 0x40
 80048b8:	438a      	bics	r2, r1
 80048ba:	609a      	str	r2, [r3, #8]
 80048bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f383 8810 	msr	PRIMASK, r3
}
 80048c6:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2280      	movs	r2, #128	@ 0x80
 80048cc:	589b      	ldr	r3, [r3, r2]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01b      	beq.n	800490a <HAL_UART_Abort+0x1a2>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2280      	movs	r2, #128	@ 0x80
 80048d6:	589b      	ldr	r3, [r3, r2]
 80048d8:	2200      	movs	r2, #0
 80048da:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2280      	movs	r2, #128	@ 0x80
 80048e0:	589b      	ldr	r3, [r3, r2]
 80048e2:	0018      	movs	r0, r3
 80048e4:	f7fe fc36 	bl	8003154 <HAL_DMA_Abort>
 80048e8:	1e03      	subs	r3, r0, #0
 80048ea:	d00e      	beq.n	800490a <HAL_UART_Abort+0x1a2>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2280      	movs	r2, #128	@ 0x80
 80048f0:	589b      	ldr	r3, [r3, r2]
 80048f2:	0018      	movs	r0, r3
 80048f4:	f7fe fd42 	bl	800337c <HAL_DMA_GetError>
 80048f8:	0003      	movs	r3, r0
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d105      	bne.n	800490a <HAL_UART_Abort+0x1a2>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2290      	movs	r2, #144	@ 0x90
 8004902:	2110      	movs	r1, #16
 8004904:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e031      	b.n	800496e <HAL_UART_Abort+0x206>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2256      	movs	r2, #86	@ 0x56
 800490e:	2100      	movs	r1, #0
 8004910:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	225e      	movs	r2, #94	@ 0x5e
 8004916:	2100      	movs	r1, #0
 8004918:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	220f      	movs	r2, #15
 8004920:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004926:	2380      	movs	r3, #128	@ 0x80
 8004928:	059b      	lsls	r3, r3, #22
 800492a:	429a      	cmp	r2, r3
 800492c:	d107      	bne.n	800493e <HAL_UART_Abort+0x1d6>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	699a      	ldr	r2, [r3, #24]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2110      	movs	r1, #16
 800493a:	430a      	orrs	r2, r1
 800493c:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699a      	ldr	r2, [r3, #24]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2108      	movs	r1, #8
 800494a:	430a      	orrs	r2, r1
 800494c:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2288      	movs	r2, #136	@ 0x88
 8004952:	2120      	movs	r1, #32
 8004954:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	228c      	movs	r2, #140	@ 0x8c
 800495a:	2120      	movs	r1, #32
 800495c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2290      	movs	r2, #144	@ 0x90
 8004968:	2100      	movs	r1, #0
 800496a:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	0018      	movs	r0, r3
 8004970:	46bd      	mov	sp, r7
 8004972:	b016      	add	sp, #88	@ 0x58
 8004974:	bd80      	pop	{r7, pc}
 8004976:	46c0      	nop			@ (mov r8, r8)
 8004978:	fffffe1f 	.word	0xfffffe1f
 800497c:	ef7ffffe 	.word	0xef7ffffe

08004980 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004988:	46c0      	nop			@ (mov r8, r8)
 800498a:	46bd      	mov	sp, r7
 800498c:	b002      	add	sp, #8
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004998:	46c0      	nop			@ (mov r8, r8)
 800499a:	46bd      	mov	sp, r7
 800499c:	b002      	add	sp, #8
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80049a8:	46c0      	nop			@ (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b002      	add	sp, #8
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049b8:	231e      	movs	r3, #30
 80049ba:	18fb      	adds	r3, r7, r3
 80049bc:	2200      	movs	r2, #0
 80049be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4aab      	ldr	r2, [pc, #684]	@ (8004c8c <UART_SetConfig+0x2dc>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	0019      	movs	r1, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	4aa6      	ldr	r2, [pc, #664]	@ (8004c90 <UART_SetConfig+0x2e0>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	0019      	movs	r1, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	4a9d      	ldr	r2, [pc, #628]	@ (8004c94 <UART_SetConfig+0x2e4>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	0019      	movs	r1, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a32:	220f      	movs	r2, #15
 8004a34:	4393      	bics	r3, r2
 8004a36:	0019      	movs	r1, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a93      	ldr	r2, [pc, #588]	@ (8004c98 <UART_SetConfig+0x2e8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d127      	bne.n	8004a9e <UART_SetConfig+0xee>
 8004a4e:	4b93      	ldr	r3, [pc, #588]	@ (8004c9c <UART_SetConfig+0x2ec>)
 8004a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a52:	2203      	movs	r2, #3
 8004a54:	4013      	ands	r3, r2
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d017      	beq.n	8004a8a <UART_SetConfig+0xda>
 8004a5a:	d81b      	bhi.n	8004a94 <UART_SetConfig+0xe4>
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d00a      	beq.n	8004a76 <UART_SetConfig+0xc6>
 8004a60:	d818      	bhi.n	8004a94 <UART_SetConfig+0xe4>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <UART_SetConfig+0xbc>
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d00a      	beq.n	8004a80 <UART_SetConfig+0xd0>
 8004a6a:	e013      	b.n	8004a94 <UART_SetConfig+0xe4>
 8004a6c:	231f      	movs	r3, #31
 8004a6e:	18fb      	adds	r3, r7, r3
 8004a70:	2200      	movs	r2, #0
 8004a72:	701a      	strb	r2, [r3, #0]
 8004a74:	e021      	b.n	8004aba <UART_SetConfig+0x10a>
 8004a76:	231f      	movs	r3, #31
 8004a78:	18fb      	adds	r3, r7, r3
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	e01c      	b.n	8004aba <UART_SetConfig+0x10a>
 8004a80:	231f      	movs	r3, #31
 8004a82:	18fb      	adds	r3, r7, r3
 8004a84:	2204      	movs	r2, #4
 8004a86:	701a      	strb	r2, [r3, #0]
 8004a88:	e017      	b.n	8004aba <UART_SetConfig+0x10a>
 8004a8a:	231f      	movs	r3, #31
 8004a8c:	18fb      	adds	r3, r7, r3
 8004a8e:	2208      	movs	r2, #8
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	e012      	b.n	8004aba <UART_SetConfig+0x10a>
 8004a94:	231f      	movs	r3, #31
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	2210      	movs	r2, #16
 8004a9a:	701a      	strb	r2, [r3, #0]
 8004a9c:	e00d      	b.n	8004aba <UART_SetConfig+0x10a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a7f      	ldr	r2, [pc, #508]	@ (8004ca0 <UART_SetConfig+0x2f0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d104      	bne.n	8004ab2 <UART_SetConfig+0x102>
 8004aa8:	231f      	movs	r3, #31
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	e003      	b.n	8004aba <UART_SetConfig+0x10a>
 8004ab2:	231f      	movs	r3, #31
 8004ab4:	18fb      	adds	r3, r7, r3
 8004ab6:	2210      	movs	r2, #16
 8004ab8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69da      	ldr	r2, [r3, #28]
 8004abe:	2380      	movs	r3, #128	@ 0x80
 8004ac0:	021b      	lsls	r3, r3, #8
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d000      	beq.n	8004ac8 <UART_SetConfig+0x118>
 8004ac6:	e06f      	b.n	8004ba8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004ac8:	231f      	movs	r3, #31
 8004aca:	18fb      	adds	r3, r7, r3
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d01f      	beq.n	8004b12 <UART_SetConfig+0x162>
 8004ad2:	dc22      	bgt.n	8004b1a <UART_SetConfig+0x16a>
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d017      	beq.n	8004b08 <UART_SetConfig+0x158>
 8004ad8:	dc1f      	bgt.n	8004b1a <UART_SetConfig+0x16a>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <UART_SetConfig+0x134>
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d005      	beq.n	8004aee <UART_SetConfig+0x13e>
 8004ae2:	e01a      	b.n	8004b1a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae4:	f7ff fc5a 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 8004ae8:	0003      	movs	r3, r0
 8004aea:	61bb      	str	r3, [r7, #24]
        break;
 8004aec:	e01c      	b.n	8004b28 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004aee:	4b6b      	ldr	r3, [pc, #428]	@ (8004c9c <UART_SetConfig+0x2ec>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2207      	movs	r2, #7
 8004af6:	4013      	ands	r3, r2
 8004af8:	3301      	adds	r3, #1
 8004afa:	0019      	movs	r1, r3
 8004afc:	4869      	ldr	r0, [pc, #420]	@ (8004ca4 <UART_SetConfig+0x2f4>)
 8004afe:	f7fb fb03 	bl	8000108 <__udivsi3>
 8004b02:	0003      	movs	r3, r0
 8004b04:	61bb      	str	r3, [r7, #24]
        break;
 8004b06:	e00f      	b.n	8004b28 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b08:	f7ff fbd2 	bl	80042b0 <HAL_RCC_GetSysClockFreq>
 8004b0c:	0003      	movs	r3, r0
 8004b0e:	61bb      	str	r3, [r7, #24]
        break;
 8004b10:	e00a      	b.n	8004b28 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b12:	2380      	movs	r3, #128	@ 0x80
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	61bb      	str	r3, [r7, #24]
        break;
 8004b18:	e006      	b.n	8004b28 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b1e:	231e      	movs	r3, #30
 8004b20:	18fb      	adds	r3, r7, r3
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]
        break;
 8004b26:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d100      	bne.n	8004b30 <UART_SetConfig+0x180>
 8004b2e:	e097      	b.n	8004c60 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b34:	4b5c      	ldr	r3, [pc, #368]	@ (8004ca8 <UART_SetConfig+0x2f8>)
 8004b36:	0052      	lsls	r2, r2, #1
 8004b38:	5ad3      	ldrh	r3, [r2, r3]
 8004b3a:	0019      	movs	r1, r3
 8004b3c:	69b8      	ldr	r0, [r7, #24]
 8004b3e:	f7fb fae3 	bl	8000108 <__udivsi3>
 8004b42:	0003      	movs	r3, r0
 8004b44:	005a      	lsls	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	085b      	lsrs	r3, r3, #1
 8004b4c:	18d2      	adds	r2, r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	0019      	movs	r1, r3
 8004b54:	0010      	movs	r0, r2
 8004b56:	f7fb fad7 	bl	8000108 <__udivsi3>
 8004b5a:	0003      	movs	r3, r0
 8004b5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	2b0f      	cmp	r3, #15
 8004b62:	d91c      	bls.n	8004b9e <UART_SetConfig+0x1ee>
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	2380      	movs	r3, #128	@ 0x80
 8004b68:	025b      	lsls	r3, r3, #9
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d217      	bcs.n	8004b9e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	200e      	movs	r0, #14
 8004b74:	183b      	adds	r3, r7, r0
 8004b76:	210f      	movs	r1, #15
 8004b78:	438a      	bics	r2, r1
 8004b7a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	085b      	lsrs	r3, r3, #1
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2207      	movs	r2, #7
 8004b84:	4013      	ands	r3, r2
 8004b86:	b299      	uxth	r1, r3
 8004b88:	183b      	adds	r3, r7, r0
 8004b8a:	183a      	adds	r2, r7, r0
 8004b8c:	8812      	ldrh	r2, [r2, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	183a      	adds	r2, r7, r0
 8004b98:	8812      	ldrh	r2, [r2, #0]
 8004b9a:	60da      	str	r2, [r3, #12]
 8004b9c:	e060      	b.n	8004c60 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004b9e:	231e      	movs	r3, #30
 8004ba0:	18fb      	adds	r3, r7, r3
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	e05b      	b.n	8004c60 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ba8:	231f      	movs	r3, #31
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d01f      	beq.n	8004bf2 <UART_SetConfig+0x242>
 8004bb2:	dc22      	bgt.n	8004bfa <UART_SetConfig+0x24a>
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d017      	beq.n	8004be8 <UART_SetConfig+0x238>
 8004bb8:	dc1f      	bgt.n	8004bfa <UART_SetConfig+0x24a>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <UART_SetConfig+0x214>
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d005      	beq.n	8004bce <UART_SetConfig+0x21e>
 8004bc2:	e01a      	b.n	8004bfa <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc4:	f7ff fbea 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 8004bc8:	0003      	movs	r3, r0
 8004bca:	61bb      	str	r3, [r7, #24]
        break;
 8004bcc:	e01c      	b.n	8004c08 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004bce:	4b33      	ldr	r3, [pc, #204]	@ (8004c9c <UART_SetConfig+0x2ec>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	2207      	movs	r2, #7
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	3301      	adds	r3, #1
 8004bda:	0019      	movs	r1, r3
 8004bdc:	4831      	ldr	r0, [pc, #196]	@ (8004ca4 <UART_SetConfig+0x2f4>)
 8004bde:	f7fb fa93 	bl	8000108 <__udivsi3>
 8004be2:	0003      	movs	r3, r0
 8004be4:	61bb      	str	r3, [r7, #24]
        break;
 8004be6:	e00f      	b.n	8004c08 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004be8:	f7ff fb62 	bl	80042b0 <HAL_RCC_GetSysClockFreq>
 8004bec:	0003      	movs	r3, r0
 8004bee:	61bb      	str	r3, [r7, #24]
        break;
 8004bf0:	e00a      	b.n	8004c08 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf2:	2380      	movs	r3, #128	@ 0x80
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	61bb      	str	r3, [r7, #24]
        break;
 8004bf8:	e006      	b.n	8004c08 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bfe:	231e      	movs	r3, #30
 8004c00:	18fb      	adds	r3, r7, r3
 8004c02:	2201      	movs	r2, #1
 8004c04:	701a      	strb	r2, [r3, #0]
        break;
 8004c06:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d028      	beq.n	8004c60 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c12:	4b25      	ldr	r3, [pc, #148]	@ (8004ca8 <UART_SetConfig+0x2f8>)
 8004c14:	0052      	lsls	r2, r2, #1
 8004c16:	5ad3      	ldrh	r3, [r2, r3]
 8004c18:	0019      	movs	r1, r3
 8004c1a:	69b8      	ldr	r0, [r7, #24]
 8004c1c:	f7fb fa74 	bl	8000108 <__udivsi3>
 8004c20:	0003      	movs	r3, r0
 8004c22:	001a      	movs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	085b      	lsrs	r3, r3, #1
 8004c2a:	18d2      	adds	r2, r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	0019      	movs	r1, r3
 8004c32:	0010      	movs	r0, r2
 8004c34:	f7fb fa68 	bl	8000108 <__udivsi3>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b0f      	cmp	r3, #15
 8004c40:	d90a      	bls.n	8004c58 <UART_SetConfig+0x2a8>
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	2380      	movs	r3, #128	@ 0x80
 8004c46:	025b      	lsls	r3, r3, #9
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d205      	bcs.n	8004c58 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	60da      	str	r2, [r3, #12]
 8004c56:	e003      	b.n	8004c60 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004c58:	231e      	movs	r3, #30
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	226a      	movs	r2, #106	@ 0x6a
 8004c64:	2101      	movs	r1, #1
 8004c66:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2268      	movs	r2, #104	@ 0x68
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c7c:	231e      	movs	r3, #30
 8004c7e:	18fb      	adds	r3, r7, r3
 8004c80:	781b      	ldrb	r3, [r3, #0]
}
 8004c82:	0018      	movs	r0, r3
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b008      	add	sp, #32
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	46c0      	nop			@ (mov r8, r8)
 8004c8c:	cfff69f3 	.word	0xcfff69f3
 8004c90:	ffffcfff 	.word	0xffffcfff
 8004c94:	11fff4ff 	.word	0x11fff4ff
 8004c98:	40013800 	.word	0x40013800
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	40004400 	.word	0x40004400
 8004ca4:	02dc6c00 	.word	0x02dc6c00
 8004ca8:	08005cb8 	.word	0x08005cb8

08004cac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb8:	2208      	movs	r2, #8
 8004cba:	4013      	ands	r3, r2
 8004cbc:	d00b      	beq.n	8004cd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	4a4a      	ldr	r2, [pc, #296]	@ (8004df0 <UART_AdvFeatureConfig+0x144>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	0019      	movs	r1, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cda:	2201      	movs	r2, #1
 8004cdc:	4013      	ands	r3, r2
 8004cde:	d00b      	beq.n	8004cf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	4a43      	ldr	r2, [pc, #268]	@ (8004df4 <UART_AdvFeatureConfig+0x148>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	0019      	movs	r1, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d00b      	beq.n	8004d1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	4a3b      	ldr	r2, [pc, #236]	@ (8004df8 <UART_AdvFeatureConfig+0x14c>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	0019      	movs	r1, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1e:	2204      	movs	r2, #4
 8004d20:	4013      	ands	r3, r2
 8004d22:	d00b      	beq.n	8004d3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	4a34      	ldr	r2, [pc, #208]	@ (8004dfc <UART_AdvFeatureConfig+0x150>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	0019      	movs	r1, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d40:	2210      	movs	r2, #16
 8004d42:	4013      	ands	r3, r2
 8004d44:	d00b      	beq.n	8004d5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8004e00 <UART_AdvFeatureConfig+0x154>)
 8004d4e:	4013      	ands	r3, r2
 8004d50:	0019      	movs	r1, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d62:	2220      	movs	r2, #32
 8004d64:	4013      	ands	r3, r2
 8004d66:	d00b      	beq.n	8004d80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	4a25      	ldr	r2, [pc, #148]	@ (8004e04 <UART_AdvFeatureConfig+0x158>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	0019      	movs	r1, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d84:	2240      	movs	r2, #64	@ 0x40
 8004d86:	4013      	ands	r3, r2
 8004d88:	d01d      	beq.n	8004dc6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	4a1d      	ldr	r2, [pc, #116]	@ (8004e08 <UART_AdvFeatureConfig+0x15c>)
 8004d92:	4013      	ands	r3, r2
 8004d94:	0019      	movs	r1, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004da6:	2380      	movs	r3, #128	@ 0x80
 8004da8:	035b      	lsls	r3, r3, #13
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d10b      	bne.n	8004dc6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	4a15      	ldr	r2, [pc, #84]	@ (8004e0c <UART_AdvFeatureConfig+0x160>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	0019      	movs	r1, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dca:	2280      	movs	r2, #128	@ 0x80
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d00b      	beq.n	8004de8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8004e10 <UART_AdvFeatureConfig+0x164>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	0019      	movs	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	605a      	str	r2, [r3, #4]
  }
}
 8004de8:	46c0      	nop			@ (mov r8, r8)
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b002      	add	sp, #8
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	ffff7fff 	.word	0xffff7fff
 8004df4:	fffdffff 	.word	0xfffdffff
 8004df8:	fffeffff 	.word	0xfffeffff
 8004dfc:	fffbffff 	.word	0xfffbffff
 8004e00:	ffffefff 	.word	0xffffefff
 8004e04:	ffffdfff 	.word	0xffffdfff
 8004e08:	ffefffff 	.word	0xffefffff
 8004e0c:	ff9fffff 	.word	0xff9fffff
 8004e10:	fff7ffff 	.word	0xfff7ffff

08004e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b092      	sub	sp, #72	@ 0x48
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2290      	movs	r2, #144	@ 0x90
 8004e20:	2100      	movs	r1, #0
 8004e22:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e24:	f7fd f8a2 	bl	8001f6c <HAL_GetTick>
 8004e28:	0003      	movs	r3, r0
 8004e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2208      	movs	r2, #8
 8004e34:	4013      	ands	r3, r2
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d12d      	bne.n	8004e96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e3c:	2280      	movs	r2, #128	@ 0x80
 8004e3e:	0391      	lsls	r1, r2, #14
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	4a47      	ldr	r2, [pc, #284]	@ (8004f60 <UART_CheckIdleState+0x14c>)
 8004e44:	9200      	str	r2, [sp, #0]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f000 f88e 	bl	8004f68 <UART_WaitOnFlagUntilTimeout>
 8004e4c:	1e03      	subs	r3, r0, #0
 8004e4e:	d022      	beq.n	8004e96 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e50:	f3ef 8310 	mrs	r3, PRIMASK
 8004e54:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e60:	f383 8810 	msr	PRIMASK, r3
}
 8004e64:	46c0      	nop			@ (mov r8, r8)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2180      	movs	r1, #128	@ 0x80
 8004e72:	438a      	bics	r2, r1
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7c:	f383 8810 	msr	PRIMASK, r3
}
 8004e80:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2288      	movs	r2, #136	@ 0x88
 8004e86:	2120      	movs	r1, #32
 8004e88:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2284      	movs	r2, #132	@ 0x84
 8004e8e:	2100      	movs	r1, #0
 8004e90:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e060      	b.n	8004f58 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d146      	bne.n	8004f32 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea6:	2280      	movs	r2, #128	@ 0x80
 8004ea8:	03d1      	lsls	r1, r2, #15
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	4a2c      	ldr	r2, [pc, #176]	@ (8004f60 <UART_CheckIdleState+0x14c>)
 8004eae:	9200      	str	r2, [sp, #0]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f000 f859 	bl	8004f68 <UART_WaitOnFlagUntilTimeout>
 8004eb6:	1e03      	subs	r3, r0, #0
 8004eb8:	d03b      	beq.n	8004f32 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004eba:	f3ef 8310 	mrs	r3, PRIMASK
 8004ebe:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f383 8810 	msr	PRIMASK, r3
}
 8004ece:	46c0      	nop			@ (mov r8, r8)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4922      	ldr	r1, [pc, #136]	@ (8004f64 <UART_CheckIdleState+0x150>)
 8004edc:	400a      	ands	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f383 8810 	msr	PRIMASK, r3
}
 8004eea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004eec:	f3ef 8310 	mrs	r3, PRIMASK
 8004ef0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ef2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	f383 8810 	msr	PRIMASK, r3
}
 8004f00:	46c0      	nop			@ (mov r8, r8)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	438a      	bics	r2, r1
 8004f10:	609a      	str	r2, [r3, #8]
 8004f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	f383 8810 	msr	PRIMASK, r3
}
 8004f1c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	228c      	movs	r2, #140	@ 0x8c
 8004f22:	2120      	movs	r1, #32
 8004f24:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2284      	movs	r2, #132	@ 0x84
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e012      	b.n	8004f58 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2288      	movs	r2, #136	@ 0x88
 8004f36:	2120      	movs	r1, #32
 8004f38:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	228c      	movs	r2, #140	@ 0x8c
 8004f3e:	2120      	movs	r1, #32
 8004f40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2284      	movs	r2, #132	@ 0x84
 8004f52:	2100      	movs	r1, #0
 8004f54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	0018      	movs	r0, r3
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	b010      	add	sp, #64	@ 0x40
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	01ffffff 	.word	0x01ffffff
 8004f64:	fffffedf 	.word	0xfffffedf

08004f68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	1dfb      	adds	r3, r7, #7
 8004f76:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f78:	e051      	b.n	800501e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	d04e      	beq.n	800501e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f80:	f7fc fff4 	bl	8001f6c <HAL_GetTick>
 8004f84:	0002      	movs	r2, r0
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d302      	bcc.n	8004f96 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e051      	b.n	800503e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	d03b      	beq.n	800501e <UART_WaitOnFlagUntilTimeout+0xb6>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b80      	cmp	r3, #128	@ 0x80
 8004faa:	d038      	beq.n	800501e <UART_WaitOnFlagUntilTimeout+0xb6>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b40      	cmp	r3, #64	@ 0x40
 8004fb0:	d035      	beq.n	800501e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	2208      	movs	r2, #8
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d111      	bne.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2208      	movs	r2, #8
 8004fc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f000 f922 	bl	8005214 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2290      	movs	r2, #144	@ 0x90
 8004fd4:	2108      	movs	r1, #8
 8004fd6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2284      	movs	r2, #132	@ 0x84
 8004fdc:	2100      	movs	r1, #0
 8004fde:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e02c      	b.n	800503e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	69da      	ldr	r2, [r3, #28]
 8004fea:	2380      	movs	r3, #128	@ 0x80
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	401a      	ands	r2, r3
 8004ff0:	2380      	movs	r3, #128	@ 0x80
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d112      	bne.n	800501e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2280      	movs	r2, #128	@ 0x80
 8004ffe:	0112      	lsls	r2, r2, #4
 8005000:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	0018      	movs	r0, r3
 8005006:	f000 f905 	bl	8005214 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2290      	movs	r2, #144	@ 0x90
 800500e:	2120      	movs	r1, #32
 8005010:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2284      	movs	r2, #132	@ 0x84
 8005016:	2100      	movs	r1, #0
 8005018:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e00f      	b.n	800503e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	4013      	ands	r3, r2
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	425a      	negs	r2, r3
 800502e:	4153      	adcs	r3, r2
 8005030:	b2db      	uxtb	r3, r3
 8005032:	001a      	movs	r2, r3
 8005034:	1dfb      	adds	r3, r7, #7
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d09e      	beq.n	8004f7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	0018      	movs	r0, r3
 8005040:	46bd      	mov	sp, r7
 8005042:	b004      	add	sp, #16
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b090      	sub	sp, #64	@ 0x40
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	1dbb      	adds	r3, r7, #6
 8005054:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	1dba      	adds	r2, r7, #6
 8005060:	215c      	movs	r1, #92	@ 0x5c
 8005062:	8812      	ldrh	r2, [r2, #0]
 8005064:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2290      	movs	r2, #144	@ 0x90
 800506a:	2100      	movs	r1, #0
 800506c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	228c      	movs	r2, #140	@ 0x8c
 8005072:	2122      	movs	r1, #34	@ 0x22
 8005074:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2280      	movs	r2, #128	@ 0x80
 800507a:	589b      	ldr	r3, [r3, r2]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d02d      	beq.n	80050dc <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2280      	movs	r2, #128	@ 0x80
 8005084:	589b      	ldr	r3, [r3, r2]
 8005086:	4a40      	ldr	r2, [pc, #256]	@ (8005188 <UART_Start_Receive_DMA+0x140>)
 8005088:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2280      	movs	r2, #128	@ 0x80
 800508e:	589b      	ldr	r3, [r3, r2]
 8005090:	4a3e      	ldr	r2, [pc, #248]	@ (800518c <UART_Start_Receive_DMA+0x144>)
 8005092:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2280      	movs	r2, #128	@ 0x80
 8005098:	589b      	ldr	r3, [r3, r2]
 800509a:	4a3d      	ldr	r2, [pc, #244]	@ (8005190 <UART_Start_Receive_DMA+0x148>)
 800509c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2280      	movs	r2, #128	@ 0x80
 80050a2:	589b      	ldr	r3, [r3, r2]
 80050a4:	2200      	movs	r2, #0
 80050a6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2280      	movs	r2, #128	@ 0x80
 80050ac:	5898      	ldr	r0, [r3, r2]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3324      	adds	r3, #36	@ 0x24
 80050b4:	0019      	movs	r1, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ba:	001a      	movs	r2, r3
 80050bc:	1dbb      	adds	r3, r7, #6
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	f7fd ffc0 	bl	8003044 <HAL_DMA_Start_IT>
 80050c4:	1e03      	subs	r3, r0, #0
 80050c6:	d009      	beq.n	80050dc <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2290      	movs	r2, #144	@ 0x90
 80050cc:	2110      	movs	r1, #16
 80050ce:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	228c      	movs	r2, #140	@ 0x8c
 80050d4:	2120      	movs	r1, #32
 80050d6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e050      	b.n	800517e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d019      	beq.n	8005118 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80050e4:	f3ef 8310 	mrs	r3, PRIMASK
 80050e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80050ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050ee:	2301      	movs	r3, #1
 80050f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f4:	f383 8810 	msr	PRIMASK, r3
}
 80050f8:	46c0      	nop			@ (mov r8, r8)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2180      	movs	r1, #128	@ 0x80
 8005106:	0049      	lsls	r1, r1, #1
 8005108:	430a      	orrs	r2, r1
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800510e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005112:	f383 8810 	msr	PRIMASK, r3
}
 8005116:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005118:	f3ef 8310 	mrs	r3, PRIMASK
 800511c:	613b      	str	r3, [r7, #16]
  return(result);
 800511e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005120:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005122:	2301      	movs	r3, #1
 8005124:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f383 8810 	msr	PRIMASK, r3
}
 800512c:	46c0      	nop			@ (mov r8, r8)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2101      	movs	r1, #1
 800513a:	430a      	orrs	r2, r1
 800513c:	609a      	str	r2, [r3, #8]
 800513e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005140:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	f383 8810 	msr	PRIMASK, r3
}
 8005148:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800514a:	f3ef 8310 	mrs	r3, PRIMASK
 800514e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005150:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005152:	637b      	str	r3, [r7, #52]	@ 0x34
 8005154:	2301      	movs	r3, #1
 8005156:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	f383 8810 	msr	PRIMASK, r3
}
 800515e:	46c0      	nop			@ (mov r8, r8)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2140      	movs	r1, #64	@ 0x40
 800516c:	430a      	orrs	r2, r1
 800516e:	609a      	str	r2, [r3, #8]
 8005170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005172:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005176:	f383 8810 	msr	PRIMASK, r3
}
 800517a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	0018      	movs	r0, r3
 8005180:	46bd      	mov	sp, r7
 8005182:	b010      	add	sp, #64	@ 0x40
 8005184:	bd80      	pop	{r7, pc}
 8005186:	46c0      	nop			@ (mov r8, r8)
 8005188:	08005399 	.word	0x08005399
 800518c:	080054c9 	.word	0x080054c9
 8005190:	0800550b 	.word	0x0800550b

08005194 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b08a      	sub	sp, #40	@ 0x28
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800519c:	f3ef 8310 	mrs	r3, PRIMASK
 80051a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80051a2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80051a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051a6:	2301      	movs	r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f383 8810 	msr	PRIMASK, r3
}
 80051b0:	46c0      	nop			@ (mov r8, r8)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	21c0      	movs	r1, #192	@ 0xc0
 80051be:	438a      	bics	r2, r1
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f383 8810 	msr	PRIMASK, r3
}
 80051cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80051ce:	f3ef 8310 	mrs	r3, PRIMASK
 80051d2:	617b      	str	r3, [r7, #20]
  return(result);
 80051d4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80051d6:	623b      	str	r3, [r7, #32]
 80051d8:	2301      	movs	r3, #1
 80051da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	f383 8810 	msr	PRIMASK, r3
}
 80051e2:	46c0      	nop			@ (mov r8, r8)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4908      	ldr	r1, [pc, #32]	@ (8005210 <UART_EndTxTransfer+0x7c>)
 80051f0:	400a      	ands	r2, r1
 80051f2:	609a      	str	r2, [r3, #8]
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f383 8810 	msr	PRIMASK, r3
}
 80051fe:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2288      	movs	r2, #136	@ 0x88
 8005204:	2120      	movs	r1, #32
 8005206:	5099      	str	r1, [r3, r2]
}
 8005208:	46c0      	nop			@ (mov r8, r8)
 800520a:	46bd      	mov	sp, r7
 800520c:	b00a      	add	sp, #40	@ 0x28
 800520e:	bd80      	pop	{r7, pc}
 8005210:	ff7fffff 	.word	0xff7fffff

08005214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08e      	sub	sp, #56	@ 0x38
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800521c:	f3ef 8310 	mrs	r3, PRIMASK
 8005220:	617b      	str	r3, [r7, #20]
  return(result);
 8005222:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005224:	637b      	str	r3, [r7, #52]	@ 0x34
 8005226:	2301      	movs	r3, #1
 8005228:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	f383 8810 	msr	PRIMASK, r3
}
 8005230:	46c0      	nop			@ (mov r8, r8)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4926      	ldr	r1, [pc, #152]	@ (80052d8 <UART_EndRxTransfer+0xc4>)
 800523e:	400a      	ands	r2, r1
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005244:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	f383 8810 	msr	PRIMASK, r3
}
 800524c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800524e:	f3ef 8310 	mrs	r3, PRIMASK
 8005252:	623b      	str	r3, [r7, #32]
  return(result);
 8005254:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005256:	633b      	str	r3, [r7, #48]	@ 0x30
 8005258:	2301      	movs	r3, #1
 800525a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525e:	f383 8810 	msr	PRIMASK, r3
}
 8005262:	46c0      	nop			@ (mov r8, r8)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	491b      	ldr	r1, [pc, #108]	@ (80052dc <UART_EndRxTransfer+0xc8>)
 8005270:	400a      	ands	r2, r1
 8005272:	609a      	str	r2, [r3, #8]
 8005274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005276:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527a:	f383 8810 	msr	PRIMASK, r3
}
 800527e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005284:	2b01      	cmp	r3, #1
 8005286:	d118      	bne.n	80052ba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005288:	f3ef 8310 	mrs	r3, PRIMASK
 800528c:	60bb      	str	r3, [r7, #8]
  return(result);
 800528e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005290:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005292:	2301      	movs	r3, #1
 8005294:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f383 8810 	msr	PRIMASK, r3
}
 800529c:	46c0      	nop			@ (mov r8, r8)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2110      	movs	r1, #16
 80052aa:	438a      	bics	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f383 8810 	msr	PRIMASK, r3
}
 80052b8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	228c      	movs	r2, #140	@ 0x8c
 80052be:	2120      	movs	r1, #32
 80052c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80052ce:	46c0      	nop			@ (mov r8, r8)
 80052d0:	46bd      	mov	sp, r7
 80052d2:	b00e      	add	sp, #56	@ 0x38
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	46c0      	nop			@ (mov r8, r8)
 80052d8:	fffffedf 	.word	0xfffffedf
 80052dc:	effffffe 	.word	0xeffffffe

080052e0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08c      	sub	sp, #48	@ 0x30
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2220      	movs	r2, #32
 80052f6:	4013      	ands	r3, r2
 80052f8:	d135      	bne.n	8005366 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80052fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fc:	2256      	movs	r2, #86	@ 0x56
 80052fe:	2100      	movs	r1, #0
 8005300:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005302:	f3ef 8310 	mrs	r3, PRIMASK
 8005306:	60fb      	str	r3, [r7, #12]
  return(result);
 8005308:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800530a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800530c:	2301      	movs	r3, #1
 800530e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f383 8810 	msr	PRIMASK, r3
}
 8005316:	46c0      	nop			@ (mov r8, r8)
 8005318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2180      	movs	r1, #128	@ 0x80
 8005324:	438a      	bics	r2, r1
 8005326:	609a      	str	r2, [r3, #8]
 8005328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f383 8810 	msr	PRIMASK, r3
}
 8005332:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005334:	f3ef 8310 	mrs	r3, PRIMASK
 8005338:	61bb      	str	r3, [r7, #24]
  return(result);
 800533a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800533c:	627b      	str	r3, [r7, #36]	@ 0x24
 800533e:	2301      	movs	r3, #1
 8005340:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	f383 8810 	msr	PRIMASK, r3
}
 8005348:	46c0      	nop			@ (mov r8, r8)
 800534a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2140      	movs	r1, #64	@ 0x40
 8005356:	430a      	orrs	r2, r1
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	f383 8810 	msr	PRIMASK, r3
}
 8005364:	e004      	b.n	8005370 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8005366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005368:	0018      	movs	r0, r3
 800536a:	f7fb fcf9 	bl	8000d60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800536e:	46c0      	nop			@ (mov r8, r8)
 8005370:	46c0      	nop			@ (mov r8, r8)
 8005372:	46bd      	mov	sp, r7
 8005374:	b00c      	add	sp, #48	@ 0x30
 8005376:	bd80      	pop	{r7, pc}

08005378 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005384:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	0018      	movs	r0, r3
 800538a:	f7ff faf9 	bl	8004980 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800538e:	46c0      	nop			@ (mov r8, r8)
 8005390:	46bd      	mov	sp, r7
 8005392:	b004      	add	sp, #16
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b094      	sub	sp, #80	@ 0x50
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2220      	movs	r2, #32
 80053ae:	4013      	ands	r3, r2
 80053b0:	d16f      	bne.n	8005492 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80053b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053b4:	225e      	movs	r2, #94	@ 0x5e
 80053b6:	2100      	movs	r1, #0
 80053b8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80053ba:	f3ef 8310 	mrs	r3, PRIMASK
 80053be:	61bb      	str	r3, [r7, #24]
  return(result);
 80053c0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053c4:	2301      	movs	r3, #1
 80053c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f383 8810 	msr	PRIMASK, r3
}
 80053ce:	46c0      	nop			@ (mov r8, r8)
 80053d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	493a      	ldr	r1, [pc, #232]	@ (80054c4 <UART_DMAReceiveCplt+0x12c>)
 80053dc:	400a      	ands	r2, r1
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	f383 8810 	msr	PRIMASK, r3
}
 80053ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80053ec:	f3ef 8310 	mrs	r3, PRIMASK
 80053f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80053f6:	2301      	movs	r3, #1
 80053f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fc:	f383 8810 	msr	PRIMASK, r3
}
 8005400:	46c0      	nop			@ (mov r8, r8)
 8005402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2101      	movs	r1, #1
 800540e:	438a      	bics	r2, r1
 8005410:	609a      	str	r2, [r3, #8]
 8005412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005418:	f383 8810 	msr	PRIMASK, r3
}
 800541c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800541e:	f3ef 8310 	mrs	r3, PRIMASK
 8005422:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005426:	643b      	str	r3, [r7, #64]	@ 0x40
 8005428:	2301      	movs	r3, #1
 800542a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800542c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542e:	f383 8810 	msr	PRIMASK, r3
}
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2140      	movs	r1, #64	@ 0x40
 8005440:	438a      	bics	r2, r1
 8005442:	609a      	str	r2, [r3, #8]
 8005444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005446:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544a:	f383 8810 	msr	PRIMASK, r3
}
 800544e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005452:	228c      	movs	r2, #140	@ 0x8c
 8005454:	2120      	movs	r1, #32
 8005456:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800545a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800545c:	2b01      	cmp	r3, #1
 800545e:	d118      	bne.n	8005492 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005460:	f3ef 8310 	mrs	r3, PRIMASK
 8005464:	60fb      	str	r3, [r7, #12]
  return(result);
 8005466:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005468:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800546a:	2301      	movs	r3, #1
 800546c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f383 8810 	msr	PRIMASK, r3
}
 8005474:	46c0      	nop			@ (mov r8, r8)
 8005476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2110      	movs	r1, #16
 8005482:	438a      	bics	r2, r1
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005488:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f383 8810 	msr	PRIMASK, r3
}
 8005490:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005494:	2200      	movs	r2, #0
 8005496:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800549a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800549c:	2b01      	cmp	r3, #1
 800549e:	d108      	bne.n	80054b2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054a2:	225c      	movs	r2, #92	@ 0x5c
 80054a4:	5a9a      	ldrh	r2, [r3, r2]
 80054a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054a8:	0011      	movs	r1, r2
 80054aa:	0018      	movs	r0, r3
 80054ac:	f7fb fbae 	bl	8000c0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054b0:	e003      	b.n	80054ba <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80054b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054b4:	0018      	movs	r0, r3
 80054b6:	f7ff fa6b 	bl	8004990 <HAL_UART_RxCpltCallback>
}
 80054ba:	46c0      	nop			@ (mov r8, r8)
 80054bc:	46bd      	mov	sp, r7
 80054be:	b014      	add	sp, #80	@ 0x50
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	46c0      	nop			@ (mov r8, r8)
 80054c4:	fffffeff 	.word	0xfffffeff

080054c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d10a      	bne.n	80054fa <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	225c      	movs	r2, #92	@ 0x5c
 80054e8:	5a9b      	ldrh	r3, [r3, r2]
 80054ea:	085b      	lsrs	r3, r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	0011      	movs	r1, r2
 80054f2:	0018      	movs	r0, r3
 80054f4:	f7fb fb8a 	bl	8000c0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054f8:	e003      	b.n	8005502 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7ff fa4f 	bl	80049a0 <HAL_UART_RxHalfCpltCallback>
}
 8005502:	46c0      	nop			@ (mov r8, r8)
 8005504:	46bd      	mov	sp, r7
 8005506:	b004      	add	sp, #16
 8005508:	bd80      	pop	{r7, pc}

0800550a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b086      	sub	sp, #24
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005516:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	2288      	movs	r2, #136	@ 0x88
 800551c:	589b      	ldr	r3, [r3, r2]
 800551e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	228c      	movs	r2, #140	@ 0x8c
 8005524:	589b      	ldr	r3, [r3, r2]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	2280      	movs	r2, #128	@ 0x80
 8005530:	4013      	ands	r3, r2
 8005532:	2b80      	cmp	r3, #128	@ 0x80
 8005534:	d10a      	bne.n	800554c <UART_DMAError+0x42>
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	2b21      	cmp	r3, #33	@ 0x21
 800553a:	d107      	bne.n	800554c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	2256      	movs	r2, #86	@ 0x56
 8005540:	2100      	movs	r1, #0
 8005542:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	0018      	movs	r0, r3
 8005548:	f7ff fe24 	bl	8005194 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	2240      	movs	r2, #64	@ 0x40
 8005554:	4013      	ands	r3, r2
 8005556:	2b40      	cmp	r3, #64	@ 0x40
 8005558:	d10a      	bne.n	8005570 <UART_DMAError+0x66>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b22      	cmp	r3, #34	@ 0x22
 800555e:	d107      	bne.n	8005570 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	225e      	movs	r2, #94	@ 0x5e
 8005564:	2100      	movs	r1, #0
 8005566:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	0018      	movs	r0, r3
 800556c:	f7ff fe52 	bl	8005214 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2290      	movs	r2, #144	@ 0x90
 8005574:	589b      	ldr	r3, [r3, r2]
 8005576:	2210      	movs	r2, #16
 8005578:	431a      	orrs	r2, r3
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2190      	movs	r1, #144	@ 0x90
 800557e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	0018      	movs	r0, r3
 8005584:	f7fb fbfa 	bl	8000d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005588:	46c0      	nop			@ (mov r8, r8)
 800558a:	46bd      	mov	sp, r7
 800558c:	b006      	add	sp, #24
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e05d      	b.n	8005664 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2288      	movs	r2, #136	@ 0x88
 80055ac:	589b      	ldr	r3, [r3, r2]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d107      	bne.n	80055c2 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2284      	movs	r2, #132	@ 0x84
 80055b6:	2100      	movs	r1, #0
 80055b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	0018      	movs	r0, r3
 80055be:	f7fc fa9f 	bl	8001b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2288      	movs	r2, #136	@ 0x88
 80055c6:	2124      	movs	r1, #36	@ 0x24
 80055c8:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2101      	movs	r1, #1
 80055d6:	438a      	bics	r2, r1
 80055d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	0018      	movs	r0, r3
 80055e6:	f7ff fb61 	bl	8004cac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	0018      	movs	r0, r3
 80055ee:	f7ff f9df 	bl	80049b0 <UART_SetConfig>
 80055f2:	0003      	movs	r3, r0
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e033      	b.n	8005664 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689a      	ldr	r2, [r3, #8]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2180      	movs	r1, #128	@ 0x80
 8005608:	01c9      	lsls	r1, r1, #7
 800560a:	430a      	orrs	r2, r1
 800560c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	4a15      	ldr	r2, [pc, #84]	@ (800566c <HAL_RS485Ex_Init+0xdc>)
 8005616:	4013      	ands	r3, r2
 8005618:	0019      	movs	r1, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	430a      	orrs	r2, r1
 8005622:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	055b      	lsls	r3, r3, #21
 8005628:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	041b      	lsls	r3, r3, #16
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a0d      	ldr	r2, [pc, #52]	@ (8005670 <HAL_RS485Ex_Init+0xe0>)
 800563c:	4013      	ands	r3, r2
 800563e:	0019      	movs	r1, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	430a      	orrs	r2, r1
 8005648:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2101      	movs	r1, #1
 8005656:	430a      	orrs	r2, r1
 8005658:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	0018      	movs	r0, r3
 800565e:	f7ff fbd9 	bl	8004e14 <UART_CheckIdleState>
 8005662:	0003      	movs	r3, r0
}
 8005664:	0018      	movs	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	b006      	add	sp, #24
 800566a:	bd80      	pop	{r7, pc}
 800566c:	ffff7fff 	.word	0xffff7fff
 8005670:	fc00ffff 	.word	0xfc00ffff

08005674 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2284      	movs	r2, #132	@ 0x84
 8005680:	5c9b      	ldrb	r3, [r3, r2]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_UARTEx_DisableFifoMode+0x16>
 8005686:	2302      	movs	r3, #2
 8005688:	e027      	b.n	80056da <HAL_UARTEx_DisableFifoMode+0x66>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2284      	movs	r2, #132	@ 0x84
 800568e:	2101      	movs	r1, #1
 8005690:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2288      	movs	r2, #136	@ 0x88
 8005696:	2124      	movs	r1, #36	@ 0x24
 8005698:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2101      	movs	r1, #1
 80056ae:	438a      	bics	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4a0b      	ldr	r2, [pc, #44]	@ (80056e4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80056b6:	4013      	ands	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2288      	movs	r2, #136	@ 0x88
 80056cc:	2120      	movs	r1, #32
 80056ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2284      	movs	r2, #132	@ 0x84
 80056d4:	2100      	movs	r1, #0
 80056d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	0018      	movs	r0, r3
 80056dc:	46bd      	mov	sp, r7
 80056de:	b004      	add	sp, #16
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	46c0      	nop			@ (mov r8, r8)
 80056e4:	dfffffff 	.word	0xdfffffff

080056e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2284      	movs	r2, #132	@ 0x84
 80056f6:	5c9b      	ldrb	r3, [r3, r2]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e02e      	b.n	800575e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2284      	movs	r2, #132	@ 0x84
 8005704:	2101      	movs	r1, #1
 8005706:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2288      	movs	r2, #136	@ 0x88
 800570c:	2124      	movs	r1, #36	@ 0x24
 800570e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2101      	movs	r1, #1
 8005724:	438a      	bics	r2, r1
 8005726:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	08d9      	lsrs	r1, r3, #3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	0018      	movs	r0, r3
 8005740:	f000 f8bc 	bl	80058bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2288      	movs	r2, #136	@ 0x88
 8005750:	2120      	movs	r1, #32
 8005752:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2284      	movs	r2, #132	@ 0x84
 8005758:	2100      	movs	r1, #0
 800575a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	0018      	movs	r0, r3
 8005760:	46bd      	mov	sp, r7
 8005762:	b004      	add	sp, #16
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2284      	movs	r2, #132	@ 0x84
 8005776:	5c9b      	ldrb	r3, [r3, r2]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800577c:	2302      	movs	r3, #2
 800577e:	e02f      	b.n	80057e0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2284      	movs	r2, #132	@ 0x84
 8005784:	2101      	movs	r1, #1
 8005786:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2288      	movs	r2, #136	@ 0x88
 800578c:	2124      	movs	r1, #36	@ 0x24
 800578e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2101      	movs	r1, #1
 80057a4:	438a      	bics	r2, r1
 80057a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	4a0e      	ldr	r2, [pc, #56]	@ (80057e8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	0019      	movs	r1, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	0018      	movs	r0, r3
 80057c2:	f000 f87b 	bl	80058bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2288      	movs	r2, #136	@ 0x88
 80057d2:	2120      	movs	r1, #32
 80057d4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2284      	movs	r2, #132	@ 0x84
 80057da:	2100      	movs	r1, #0
 80057dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	0018      	movs	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	b004      	add	sp, #16
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	f1ffffff 	.word	0xf1ffffff

080057ec <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057ec:	b5b0      	push	{r4, r5, r7, lr}
 80057ee:	b08a      	sub	sp, #40	@ 0x28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	1dbb      	adds	r3, r7, #6
 80057f8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	228c      	movs	r2, #140	@ 0x8c
 80057fe:	589b      	ldr	r3, [r3, r2]
 8005800:	2b20      	cmp	r3, #32
 8005802:	d156      	bne.n	80058b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800580a:	1dbb      	adds	r3, r7, #6
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e04e      	b.n	80058b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	2380      	movs	r3, #128	@ 0x80
 800581c:	015b      	lsls	r3, r3, #5
 800581e:	429a      	cmp	r2, r3
 8005820:	d109      	bne.n	8005836 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d105      	bne.n	8005836 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2201      	movs	r2, #1
 800582e:	4013      	ands	r3, r2
 8005830:	d001      	beq.n	8005836 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e03e      	b.n	80058b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005842:	2527      	movs	r5, #39	@ 0x27
 8005844:	197c      	adds	r4, r7, r5
 8005846:	1dbb      	adds	r3, r7, #6
 8005848:	881a      	ldrh	r2, [r3, #0]
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	0018      	movs	r0, r3
 8005850:	f7ff fbfa 	bl	8005048 <UART_Start_Receive_DMA>
 8005854:	0003      	movs	r3, r0
 8005856:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005858:	197b      	adds	r3, r7, r5
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d124      	bne.n	80058aa <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005864:	2b01      	cmp	r3, #1
 8005866:	d11c      	bne.n	80058a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2210      	movs	r2, #16
 800586e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005870:	f3ef 8310 	mrs	r3, PRIMASK
 8005874:	617b      	str	r3, [r7, #20]
  return(result);
 8005876:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005878:	623b      	str	r3, [r7, #32]
 800587a:	2301      	movs	r3, #1
 800587c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	f383 8810 	msr	PRIMASK, r3
}
 8005884:	46c0      	nop			@ (mov r8, r8)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2110      	movs	r1, #16
 8005892:	430a      	orrs	r2, r1
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	f383 8810 	msr	PRIMASK, r3
}
 80058a0:	e003      	b.n	80058aa <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80058a2:	2327      	movs	r3, #39	@ 0x27
 80058a4:	18fb      	adds	r3, r7, r3
 80058a6:	2201      	movs	r2, #1
 80058a8:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80058aa:	2327      	movs	r3, #39	@ 0x27
 80058ac:	18fb      	adds	r3, r7, r3
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	e000      	b.n	80058b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80058b2:	2302      	movs	r3, #2
  }
}
 80058b4:	0018      	movs	r0, r3
 80058b6:	46bd      	mov	sp, r7
 80058b8:	b00a      	add	sp, #40	@ 0x28
 80058ba:	bdb0      	pop	{r4, r5, r7, pc}

080058bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d108      	bne.n	80058de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	226a      	movs	r2, #106	@ 0x6a
 80058d0:	2101      	movs	r1, #1
 80058d2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2268      	movs	r2, #104	@ 0x68
 80058d8:	2101      	movs	r1, #1
 80058da:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058dc:	e043      	b.n	8005966 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058de:	260f      	movs	r6, #15
 80058e0:	19bb      	adds	r3, r7, r6
 80058e2:	2208      	movs	r2, #8
 80058e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058e6:	200e      	movs	r0, #14
 80058e8:	183b      	adds	r3, r7, r0
 80058ea:	2208      	movs	r2, #8
 80058ec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	0e5b      	lsrs	r3, r3, #25
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	240d      	movs	r4, #13
 80058fa:	193b      	adds	r3, r7, r4
 80058fc:	2107      	movs	r1, #7
 80058fe:	400a      	ands	r2, r1
 8005900:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	0f5b      	lsrs	r3, r3, #29
 800590a:	b2da      	uxtb	r2, r3
 800590c:	250c      	movs	r5, #12
 800590e:	197b      	adds	r3, r7, r5
 8005910:	2107      	movs	r1, #7
 8005912:	400a      	ands	r2, r1
 8005914:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005916:	183b      	adds	r3, r7, r0
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	197a      	adds	r2, r7, r5
 800591c:	7812      	ldrb	r2, [r2, #0]
 800591e:	4914      	ldr	r1, [pc, #80]	@ (8005970 <UARTEx_SetNbDataToProcess+0xb4>)
 8005920:	5c8a      	ldrb	r2, [r1, r2]
 8005922:	435a      	muls	r2, r3
 8005924:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005926:	197b      	adds	r3, r7, r5
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	4a12      	ldr	r2, [pc, #72]	@ (8005974 <UARTEx_SetNbDataToProcess+0xb8>)
 800592c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800592e:	0019      	movs	r1, r3
 8005930:	f7fa fc74 	bl	800021c <__divsi3>
 8005934:	0003      	movs	r3, r0
 8005936:	b299      	uxth	r1, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	226a      	movs	r2, #106	@ 0x6a
 800593c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800593e:	19bb      	adds	r3, r7, r6
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	193a      	adds	r2, r7, r4
 8005944:	7812      	ldrb	r2, [r2, #0]
 8005946:	490a      	ldr	r1, [pc, #40]	@ (8005970 <UARTEx_SetNbDataToProcess+0xb4>)
 8005948:	5c8a      	ldrb	r2, [r1, r2]
 800594a:	435a      	muls	r2, r3
 800594c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800594e:	193b      	adds	r3, r7, r4
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	4a08      	ldr	r2, [pc, #32]	@ (8005974 <UARTEx_SetNbDataToProcess+0xb8>)
 8005954:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005956:	0019      	movs	r1, r3
 8005958:	f7fa fc60 	bl	800021c <__divsi3>
 800595c:	0003      	movs	r3, r0
 800595e:	b299      	uxth	r1, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2268      	movs	r2, #104	@ 0x68
 8005964:	5299      	strh	r1, [r3, r2]
}
 8005966:	46c0      	nop			@ (mov r8, r8)
 8005968:	46bd      	mov	sp, r7
 800596a:	b005      	add	sp, #20
 800596c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800596e:	46c0      	nop			@ (mov r8, r8)
 8005970:	08005cd0 	.word	0x08005cd0
 8005974:	08005cd8 	.word	0x08005cd8

08005978 <memset>:
 8005978:	0003      	movs	r3, r0
 800597a:	1882      	adds	r2, r0, r2
 800597c:	4293      	cmp	r3, r2
 800597e:	d100      	bne.n	8005982 <memset+0xa>
 8005980:	4770      	bx	lr
 8005982:	7019      	strb	r1, [r3, #0]
 8005984:	3301      	adds	r3, #1
 8005986:	e7f9      	b.n	800597c <memset+0x4>

08005988 <__libc_init_array>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	2600      	movs	r6, #0
 800598c:	4c0c      	ldr	r4, [pc, #48]	@ (80059c0 <__libc_init_array+0x38>)
 800598e:	4d0d      	ldr	r5, [pc, #52]	@ (80059c4 <__libc_init_array+0x3c>)
 8005990:	1b64      	subs	r4, r4, r5
 8005992:	10a4      	asrs	r4, r4, #2
 8005994:	42a6      	cmp	r6, r4
 8005996:	d109      	bne.n	80059ac <__libc_init_array+0x24>
 8005998:	2600      	movs	r6, #0
 800599a:	f000 f823 	bl	80059e4 <_init>
 800599e:	4c0a      	ldr	r4, [pc, #40]	@ (80059c8 <__libc_init_array+0x40>)
 80059a0:	4d0a      	ldr	r5, [pc, #40]	@ (80059cc <__libc_init_array+0x44>)
 80059a2:	1b64      	subs	r4, r4, r5
 80059a4:	10a4      	asrs	r4, r4, #2
 80059a6:	42a6      	cmp	r6, r4
 80059a8:	d105      	bne.n	80059b6 <__libc_init_array+0x2e>
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
 80059ac:	00b3      	lsls	r3, r6, #2
 80059ae:	58eb      	ldr	r3, [r5, r3]
 80059b0:	4798      	blx	r3
 80059b2:	3601      	adds	r6, #1
 80059b4:	e7ee      	b.n	8005994 <__libc_init_array+0xc>
 80059b6:	00b3      	lsls	r3, r6, #2
 80059b8:	58eb      	ldr	r3, [r5, r3]
 80059ba:	4798      	blx	r3
 80059bc:	3601      	adds	r6, #1
 80059be:	e7f2      	b.n	80059a6 <__libc_init_array+0x1e>
 80059c0:	08005ce0 	.word	0x08005ce0
 80059c4:	08005ce0 	.word	0x08005ce0
 80059c8:	08005ce4 	.word	0x08005ce4
 80059cc:	08005ce0 	.word	0x08005ce0

080059d0 <memcpy>:
 80059d0:	2300      	movs	r3, #0
 80059d2:	b510      	push	{r4, lr}
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d100      	bne.n	80059da <memcpy+0xa>
 80059d8:	bd10      	pop	{r4, pc}
 80059da:	5ccc      	ldrb	r4, [r1, r3]
 80059dc:	54c4      	strb	r4, [r0, r3]
 80059de:	3301      	adds	r3, #1
 80059e0:	e7f8      	b.n	80059d4 <memcpy+0x4>
	...

080059e4 <_init>:
 80059e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e6:	46c0      	nop			@ (mov r8, r8)
 80059e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ea:	bc08      	pop	{r3}
 80059ec:	469e      	mov	lr, r3
 80059ee:	4770      	bx	lr

080059f0 <_fini>:
 80059f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f2:	46c0      	nop			@ (mov r8, r8)
 80059f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059f6:	bc08      	pop	{r3}
 80059f8:	469e      	mov	lr, r3
 80059fa:	4770      	bx	lr
