
AboveGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac34  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800acf4  0800acf4  0000bcf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afe4  0800afe4  0000c030  2**0
                  CONTENTS
  4 .ARM          00000000  0800afe4  0800afe4  0000c030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800afe4  0800afe4  0000c030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afe4  0800afe4  0000bfe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800afe8  0800afe8  0000bfe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  0800afec  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000030  0800b01c  0000c030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  0800b01c  0000c5a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c57  00000000  00000000  0000c058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000296e  00000000  00000000  0001ecaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00021620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c00  00000000  00000000  00022578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b6b  00000000  00000000  00023178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014159  00000000  00000000  00039ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee49  00000000  00000000  0004de3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dcc85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a20  00000000  00000000  000dccc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e06e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800acdc 	.word	0x0800acdc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	0800acdc 	.word	0x0800acdc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 fd05 	bl	8000e14 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fc45 	bl	8000ca4 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fcf7 	bl	8000e14 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fced 	bl	8000e14 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fc6f 	bl	8000d2c <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			@ (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fc65 	bl	8000d2c <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	0008      	movs	r0, r1
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 f8c3 	bl	8000604 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 f843 	bl	8000514 <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 f8b5 	bl	8000604 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 f8ab 	bl	8000604 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f851 	bl	8000564 <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f847 	bl	8000564 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_f2uiz>:
 80004e4:	219e      	movs	r1, #158	@ 0x9e
 80004e6:	b510      	push	{r4, lr}
 80004e8:	05c9      	lsls	r1, r1, #23
 80004ea:	1c04      	adds	r4, r0, #0
 80004ec:	f7ff fff0 	bl	80004d0 <__aeabi_fcmpge>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d103      	bne.n	80004fc <__aeabi_f2uiz+0x18>
 80004f4:	1c20      	adds	r0, r4, #0
 80004f6:	f000 fbb5 	bl	8000c64 <__aeabi_f2iz>
 80004fa:	bd10      	pop	{r4, pc}
 80004fc:	219e      	movs	r1, #158	@ 0x9e
 80004fe:	1c20      	adds	r0, r4, #0
 8000500:	05c9      	lsls	r1, r1, #23
 8000502:	f000 fa0b 	bl	800091c <__aeabi_fsub>
 8000506:	f000 fbad 	bl	8000c64 <__aeabi_f2iz>
 800050a:	2380      	movs	r3, #128	@ 0x80
 800050c:	061b      	lsls	r3, r3, #24
 800050e:	469c      	mov	ip, r3
 8000510:	4460      	add	r0, ip
 8000512:	e7f2      	b.n	80004fa <__aeabi_f2uiz+0x16>

08000514 <__eqsf2>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	0042      	lsls	r2, r0, #1
 8000518:	024e      	lsls	r6, r1, #9
 800051a:	004c      	lsls	r4, r1, #1
 800051c:	0245      	lsls	r5, r0, #9
 800051e:	0a6d      	lsrs	r5, r5, #9
 8000520:	0e12      	lsrs	r2, r2, #24
 8000522:	0fc3      	lsrs	r3, r0, #31
 8000524:	0a76      	lsrs	r6, r6, #9
 8000526:	0e24      	lsrs	r4, r4, #24
 8000528:	0fc9      	lsrs	r1, r1, #31
 800052a:	2aff      	cmp	r2, #255	@ 0xff
 800052c:	d010      	beq.n	8000550 <__eqsf2+0x3c>
 800052e:	2cff      	cmp	r4, #255	@ 0xff
 8000530:	d00c      	beq.n	800054c <__eqsf2+0x38>
 8000532:	2001      	movs	r0, #1
 8000534:	42a2      	cmp	r2, r4
 8000536:	d10a      	bne.n	800054e <__eqsf2+0x3a>
 8000538:	42b5      	cmp	r5, r6
 800053a:	d108      	bne.n	800054e <__eqsf2+0x3a>
 800053c:	428b      	cmp	r3, r1
 800053e:	d00f      	beq.n	8000560 <__eqsf2+0x4c>
 8000540:	2a00      	cmp	r2, #0
 8000542:	d104      	bne.n	800054e <__eqsf2+0x3a>
 8000544:	0028      	movs	r0, r5
 8000546:	1e43      	subs	r3, r0, #1
 8000548:	4198      	sbcs	r0, r3
 800054a:	e000      	b.n	800054e <__eqsf2+0x3a>
 800054c:	2001      	movs	r0, #1
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	2001      	movs	r0, #1
 8000552:	2cff      	cmp	r4, #255	@ 0xff
 8000554:	d1fb      	bne.n	800054e <__eqsf2+0x3a>
 8000556:	4335      	orrs	r5, r6
 8000558:	d1f9      	bne.n	800054e <__eqsf2+0x3a>
 800055a:	404b      	eors	r3, r1
 800055c:	0018      	movs	r0, r3
 800055e:	e7f6      	b.n	800054e <__eqsf2+0x3a>
 8000560:	2000      	movs	r0, #0
 8000562:	e7f4      	b.n	800054e <__eqsf2+0x3a>

08000564 <__gesf2>:
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	0042      	lsls	r2, r0, #1
 8000568:	0244      	lsls	r4, r0, #9
 800056a:	024d      	lsls	r5, r1, #9
 800056c:	0fc3      	lsrs	r3, r0, #31
 800056e:	0048      	lsls	r0, r1, #1
 8000570:	0a64      	lsrs	r4, r4, #9
 8000572:	0e12      	lsrs	r2, r2, #24
 8000574:	0a6d      	lsrs	r5, r5, #9
 8000576:	0e00      	lsrs	r0, r0, #24
 8000578:	0fc9      	lsrs	r1, r1, #31
 800057a:	2aff      	cmp	r2, #255	@ 0xff
 800057c:	d019      	beq.n	80005b2 <__gesf2+0x4e>
 800057e:	28ff      	cmp	r0, #255	@ 0xff
 8000580:	d00b      	beq.n	800059a <__gesf2+0x36>
 8000582:	2a00      	cmp	r2, #0
 8000584:	d11e      	bne.n	80005c4 <__gesf2+0x60>
 8000586:	2800      	cmp	r0, #0
 8000588:	d10b      	bne.n	80005a2 <__gesf2+0x3e>
 800058a:	2d00      	cmp	r5, #0
 800058c:	d027      	beq.n	80005de <__gesf2+0x7a>
 800058e:	2c00      	cmp	r4, #0
 8000590:	d134      	bne.n	80005fc <__gesf2+0x98>
 8000592:	2900      	cmp	r1, #0
 8000594:	d02f      	beq.n	80005f6 <__gesf2+0x92>
 8000596:	0008      	movs	r0, r1
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	2d00      	cmp	r5, #0
 800059c:	d128      	bne.n	80005f0 <__gesf2+0x8c>
 800059e:	2a00      	cmp	r2, #0
 80005a0:	d101      	bne.n	80005a6 <__gesf2+0x42>
 80005a2:	2c00      	cmp	r4, #0
 80005a4:	d0f5      	beq.n	8000592 <__gesf2+0x2e>
 80005a6:	428b      	cmp	r3, r1
 80005a8:	d107      	bne.n	80005ba <__gesf2+0x56>
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d023      	beq.n	80005f6 <__gesf2+0x92>
 80005ae:	0018      	movs	r0, r3
 80005b0:	e7f2      	b.n	8000598 <__gesf2+0x34>
 80005b2:	2c00      	cmp	r4, #0
 80005b4:	d11c      	bne.n	80005f0 <__gesf2+0x8c>
 80005b6:	28ff      	cmp	r0, #255	@ 0xff
 80005b8:	d014      	beq.n	80005e4 <__gesf2+0x80>
 80005ba:	1e58      	subs	r0, r3, #1
 80005bc:	2302      	movs	r3, #2
 80005be:	4018      	ands	r0, r3
 80005c0:	3801      	subs	r0, #1
 80005c2:	e7e9      	b.n	8000598 <__gesf2+0x34>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d0f8      	beq.n	80005ba <__gesf2+0x56>
 80005c8:	428b      	cmp	r3, r1
 80005ca:	d1f6      	bne.n	80005ba <__gesf2+0x56>
 80005cc:	4282      	cmp	r2, r0
 80005ce:	dcf4      	bgt.n	80005ba <__gesf2+0x56>
 80005d0:	dbeb      	blt.n	80005aa <__gesf2+0x46>
 80005d2:	42ac      	cmp	r4, r5
 80005d4:	d8f1      	bhi.n	80005ba <__gesf2+0x56>
 80005d6:	2000      	movs	r0, #0
 80005d8:	42ac      	cmp	r4, r5
 80005da:	d2dd      	bcs.n	8000598 <__gesf2+0x34>
 80005dc:	e7e5      	b.n	80005aa <__gesf2+0x46>
 80005de:	2c00      	cmp	r4, #0
 80005e0:	d0da      	beq.n	8000598 <__gesf2+0x34>
 80005e2:	e7ea      	b.n	80005ba <__gesf2+0x56>
 80005e4:	2d00      	cmp	r5, #0
 80005e6:	d103      	bne.n	80005f0 <__gesf2+0x8c>
 80005e8:	428b      	cmp	r3, r1
 80005ea:	d1e6      	bne.n	80005ba <__gesf2+0x56>
 80005ec:	2000      	movs	r0, #0
 80005ee:	e7d3      	b.n	8000598 <__gesf2+0x34>
 80005f0:	2002      	movs	r0, #2
 80005f2:	4240      	negs	r0, r0
 80005f4:	e7d0      	b.n	8000598 <__gesf2+0x34>
 80005f6:	2001      	movs	r0, #1
 80005f8:	4240      	negs	r0, r0
 80005fa:	e7cd      	b.n	8000598 <__gesf2+0x34>
 80005fc:	428b      	cmp	r3, r1
 80005fe:	d0e8      	beq.n	80005d2 <__gesf2+0x6e>
 8000600:	e7db      	b.n	80005ba <__gesf2+0x56>
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__lesf2>:
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	0042      	lsls	r2, r0, #1
 8000608:	0244      	lsls	r4, r0, #9
 800060a:	024d      	lsls	r5, r1, #9
 800060c:	0fc3      	lsrs	r3, r0, #31
 800060e:	0048      	lsls	r0, r1, #1
 8000610:	0a64      	lsrs	r4, r4, #9
 8000612:	0e12      	lsrs	r2, r2, #24
 8000614:	0a6d      	lsrs	r5, r5, #9
 8000616:	0e00      	lsrs	r0, r0, #24
 8000618:	0fc9      	lsrs	r1, r1, #31
 800061a:	2aff      	cmp	r2, #255	@ 0xff
 800061c:	d01a      	beq.n	8000654 <__lesf2+0x50>
 800061e:	28ff      	cmp	r0, #255	@ 0xff
 8000620:	d00e      	beq.n	8000640 <__lesf2+0x3c>
 8000622:	2a00      	cmp	r2, #0
 8000624:	d11e      	bne.n	8000664 <__lesf2+0x60>
 8000626:	2800      	cmp	r0, #0
 8000628:	d10e      	bne.n	8000648 <__lesf2+0x44>
 800062a:	2d00      	cmp	r5, #0
 800062c:	d02a      	beq.n	8000684 <__lesf2+0x80>
 800062e:	2c00      	cmp	r4, #0
 8000630:	d00c      	beq.n	800064c <__lesf2+0x48>
 8000632:	428b      	cmp	r3, r1
 8000634:	d01d      	beq.n	8000672 <__lesf2+0x6e>
 8000636:	1e58      	subs	r0, r3, #1
 8000638:	2302      	movs	r3, #2
 800063a:	4018      	ands	r0, r3
 800063c:	3801      	subs	r0, #1
 800063e:	e010      	b.n	8000662 <__lesf2+0x5e>
 8000640:	2d00      	cmp	r5, #0
 8000642:	d10d      	bne.n	8000660 <__lesf2+0x5c>
 8000644:	2a00      	cmp	r2, #0
 8000646:	d120      	bne.n	800068a <__lesf2+0x86>
 8000648:	2c00      	cmp	r4, #0
 800064a:	d11e      	bne.n	800068a <__lesf2+0x86>
 800064c:	2900      	cmp	r1, #0
 800064e:	d023      	beq.n	8000698 <__lesf2+0x94>
 8000650:	0008      	movs	r0, r1
 8000652:	e006      	b.n	8000662 <__lesf2+0x5e>
 8000654:	2c00      	cmp	r4, #0
 8000656:	d103      	bne.n	8000660 <__lesf2+0x5c>
 8000658:	28ff      	cmp	r0, #255	@ 0xff
 800065a:	d1ec      	bne.n	8000636 <__lesf2+0x32>
 800065c:	2d00      	cmp	r5, #0
 800065e:	d017      	beq.n	8000690 <__lesf2+0x8c>
 8000660:	2002      	movs	r0, #2
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	2800      	cmp	r0, #0
 8000666:	d0e6      	beq.n	8000636 <__lesf2+0x32>
 8000668:	428b      	cmp	r3, r1
 800066a:	d1e4      	bne.n	8000636 <__lesf2+0x32>
 800066c:	4282      	cmp	r2, r0
 800066e:	dce2      	bgt.n	8000636 <__lesf2+0x32>
 8000670:	db04      	blt.n	800067c <__lesf2+0x78>
 8000672:	42ac      	cmp	r4, r5
 8000674:	d8df      	bhi.n	8000636 <__lesf2+0x32>
 8000676:	2000      	movs	r0, #0
 8000678:	42ac      	cmp	r4, r5
 800067a:	d2f2      	bcs.n	8000662 <__lesf2+0x5e>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00b      	beq.n	8000698 <__lesf2+0x94>
 8000680:	0018      	movs	r0, r3
 8000682:	e7ee      	b.n	8000662 <__lesf2+0x5e>
 8000684:	2c00      	cmp	r4, #0
 8000686:	d0ec      	beq.n	8000662 <__lesf2+0x5e>
 8000688:	e7d5      	b.n	8000636 <__lesf2+0x32>
 800068a:	428b      	cmp	r3, r1
 800068c:	d1d3      	bne.n	8000636 <__lesf2+0x32>
 800068e:	e7f5      	b.n	800067c <__lesf2+0x78>
 8000690:	2000      	movs	r0, #0
 8000692:	428b      	cmp	r3, r1
 8000694:	d0e5      	beq.n	8000662 <__lesf2+0x5e>
 8000696:	e7ce      	b.n	8000636 <__lesf2+0x32>
 8000698:	2001      	movs	r0, #1
 800069a:	4240      	negs	r0, r0
 800069c:	e7e1      	b.n	8000662 <__lesf2+0x5e>
 800069e:	46c0      	nop			@ (mov r8, r8)

080006a0 <__aeabi_fmul>:
 80006a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006a2:	464f      	mov	r7, r9
 80006a4:	4646      	mov	r6, r8
 80006a6:	46d6      	mov	lr, sl
 80006a8:	0243      	lsls	r3, r0, #9
 80006aa:	0a5b      	lsrs	r3, r3, #9
 80006ac:	0045      	lsls	r5, r0, #1
 80006ae:	b5c0      	push	{r6, r7, lr}
 80006b0:	4699      	mov	r9, r3
 80006b2:	1c0f      	adds	r7, r1, #0
 80006b4:	0e2d      	lsrs	r5, r5, #24
 80006b6:	0fc6      	lsrs	r6, r0, #31
 80006b8:	2d00      	cmp	r5, #0
 80006ba:	d100      	bne.n	80006be <__aeabi_fmul+0x1e>
 80006bc:	e088      	b.n	80007d0 <__aeabi_fmul+0x130>
 80006be:	2dff      	cmp	r5, #255	@ 0xff
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fmul+0x24>
 80006c2:	e08d      	b.n	80007e0 <__aeabi_fmul+0x140>
 80006c4:	2280      	movs	r2, #128	@ 0x80
 80006c6:	00db      	lsls	r3, r3, #3
 80006c8:	04d2      	lsls	r2, r2, #19
 80006ca:	431a      	orrs	r2, r3
 80006cc:	2300      	movs	r3, #0
 80006ce:	4691      	mov	r9, r2
 80006d0:	4698      	mov	r8, r3
 80006d2:	469a      	mov	sl, r3
 80006d4:	3d7f      	subs	r5, #127	@ 0x7f
 80006d6:	027c      	lsls	r4, r7, #9
 80006d8:	007b      	lsls	r3, r7, #1
 80006da:	0a64      	lsrs	r4, r4, #9
 80006dc:	0e1b      	lsrs	r3, r3, #24
 80006de:	0fff      	lsrs	r7, r7, #31
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d068      	beq.n	80007b6 <__aeabi_fmul+0x116>
 80006e4:	2bff      	cmp	r3, #255	@ 0xff
 80006e6:	d021      	beq.n	800072c <__aeabi_fmul+0x8c>
 80006e8:	2280      	movs	r2, #128	@ 0x80
 80006ea:	00e4      	lsls	r4, r4, #3
 80006ec:	04d2      	lsls	r2, r2, #19
 80006ee:	4314      	orrs	r4, r2
 80006f0:	4642      	mov	r2, r8
 80006f2:	3b7f      	subs	r3, #127	@ 0x7f
 80006f4:	195b      	adds	r3, r3, r5
 80006f6:	2100      	movs	r1, #0
 80006f8:	1c5d      	adds	r5, r3, #1
 80006fa:	2a0a      	cmp	r2, #10
 80006fc:	dc2e      	bgt.n	800075c <__aeabi_fmul+0xbc>
 80006fe:	407e      	eors	r6, r7
 8000700:	4642      	mov	r2, r8
 8000702:	2a02      	cmp	r2, #2
 8000704:	dc23      	bgt.n	800074e <__aeabi_fmul+0xae>
 8000706:	3a01      	subs	r2, #1
 8000708:	2a01      	cmp	r2, #1
 800070a:	d900      	bls.n	800070e <__aeabi_fmul+0x6e>
 800070c:	e0bd      	b.n	800088a <__aeabi_fmul+0x1ea>
 800070e:	2902      	cmp	r1, #2
 8000710:	d06e      	beq.n	80007f0 <__aeabi_fmul+0x150>
 8000712:	2901      	cmp	r1, #1
 8000714:	d12c      	bne.n	8000770 <__aeabi_fmul+0xd0>
 8000716:	2000      	movs	r0, #0
 8000718:	2200      	movs	r2, #0
 800071a:	05c0      	lsls	r0, r0, #23
 800071c:	07f6      	lsls	r6, r6, #31
 800071e:	4310      	orrs	r0, r2
 8000720:	4330      	orrs	r0, r6
 8000722:	bce0      	pop	{r5, r6, r7}
 8000724:	46ba      	mov	sl, r7
 8000726:	46b1      	mov	r9, r6
 8000728:	46a8      	mov	r8, r5
 800072a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800072c:	002b      	movs	r3, r5
 800072e:	33ff      	adds	r3, #255	@ 0xff
 8000730:	2c00      	cmp	r4, #0
 8000732:	d065      	beq.n	8000800 <__aeabi_fmul+0x160>
 8000734:	2203      	movs	r2, #3
 8000736:	4641      	mov	r1, r8
 8000738:	4311      	orrs	r1, r2
 800073a:	0032      	movs	r2, r6
 800073c:	3501      	adds	r5, #1
 800073e:	4688      	mov	r8, r1
 8000740:	407a      	eors	r2, r7
 8000742:	35ff      	adds	r5, #255	@ 0xff
 8000744:	290a      	cmp	r1, #10
 8000746:	dd00      	ble.n	800074a <__aeabi_fmul+0xaa>
 8000748:	e0d8      	b.n	80008fc <__aeabi_fmul+0x25c>
 800074a:	0016      	movs	r6, r2
 800074c:	2103      	movs	r1, #3
 800074e:	4640      	mov	r0, r8
 8000750:	2201      	movs	r2, #1
 8000752:	4082      	lsls	r2, r0
 8000754:	20a6      	movs	r0, #166	@ 0xa6
 8000756:	00c0      	lsls	r0, r0, #3
 8000758:	4202      	tst	r2, r0
 800075a:	d020      	beq.n	800079e <__aeabi_fmul+0xfe>
 800075c:	4653      	mov	r3, sl
 800075e:	2b02      	cmp	r3, #2
 8000760:	d046      	beq.n	80007f0 <__aeabi_fmul+0x150>
 8000762:	2b03      	cmp	r3, #3
 8000764:	d100      	bne.n	8000768 <__aeabi_fmul+0xc8>
 8000766:	e0bb      	b.n	80008e0 <__aeabi_fmul+0x240>
 8000768:	4651      	mov	r1, sl
 800076a:	464c      	mov	r4, r9
 800076c:	2901      	cmp	r1, #1
 800076e:	d0d2      	beq.n	8000716 <__aeabi_fmul+0x76>
 8000770:	002b      	movs	r3, r5
 8000772:	337f      	adds	r3, #127	@ 0x7f
 8000774:	2b00      	cmp	r3, #0
 8000776:	dd70      	ble.n	800085a <__aeabi_fmul+0x1ba>
 8000778:	0762      	lsls	r2, r4, #29
 800077a:	d004      	beq.n	8000786 <__aeabi_fmul+0xe6>
 800077c:	220f      	movs	r2, #15
 800077e:	4022      	ands	r2, r4
 8000780:	2a04      	cmp	r2, #4
 8000782:	d000      	beq.n	8000786 <__aeabi_fmul+0xe6>
 8000784:	3404      	adds	r4, #4
 8000786:	0122      	lsls	r2, r4, #4
 8000788:	d503      	bpl.n	8000792 <__aeabi_fmul+0xf2>
 800078a:	4b63      	ldr	r3, [pc, #396]	@ (8000918 <__aeabi_fmul+0x278>)
 800078c:	401c      	ands	r4, r3
 800078e:	002b      	movs	r3, r5
 8000790:	3380      	adds	r3, #128	@ 0x80
 8000792:	2bfe      	cmp	r3, #254	@ 0xfe
 8000794:	dc2c      	bgt.n	80007f0 <__aeabi_fmul+0x150>
 8000796:	01a2      	lsls	r2, r4, #6
 8000798:	0a52      	lsrs	r2, r2, #9
 800079a:	b2d8      	uxtb	r0, r3
 800079c:	e7bd      	b.n	800071a <__aeabi_fmul+0x7a>
 800079e:	2090      	movs	r0, #144	@ 0x90
 80007a0:	0080      	lsls	r0, r0, #2
 80007a2:	4202      	tst	r2, r0
 80007a4:	d127      	bne.n	80007f6 <__aeabi_fmul+0x156>
 80007a6:	38b9      	subs	r0, #185	@ 0xb9
 80007a8:	38ff      	subs	r0, #255	@ 0xff
 80007aa:	4210      	tst	r0, r2
 80007ac:	d06d      	beq.n	800088a <__aeabi_fmul+0x1ea>
 80007ae:	003e      	movs	r6, r7
 80007b0:	46a1      	mov	r9, r4
 80007b2:	468a      	mov	sl, r1
 80007b4:	e7d2      	b.n	800075c <__aeabi_fmul+0xbc>
 80007b6:	2c00      	cmp	r4, #0
 80007b8:	d141      	bne.n	800083e <__aeabi_fmul+0x19e>
 80007ba:	2301      	movs	r3, #1
 80007bc:	4642      	mov	r2, r8
 80007be:	431a      	orrs	r2, r3
 80007c0:	4690      	mov	r8, r2
 80007c2:	002b      	movs	r3, r5
 80007c4:	4642      	mov	r2, r8
 80007c6:	2101      	movs	r1, #1
 80007c8:	1c5d      	adds	r5, r3, #1
 80007ca:	2a0a      	cmp	r2, #10
 80007cc:	dd97      	ble.n	80006fe <__aeabi_fmul+0x5e>
 80007ce:	e7c5      	b.n	800075c <__aeabi_fmul+0xbc>
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d126      	bne.n	8000822 <__aeabi_fmul+0x182>
 80007d4:	2304      	movs	r3, #4
 80007d6:	4698      	mov	r8, r3
 80007d8:	3b03      	subs	r3, #3
 80007da:	2500      	movs	r5, #0
 80007dc:	469a      	mov	sl, r3
 80007de:	e77a      	b.n	80006d6 <__aeabi_fmul+0x36>
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d118      	bne.n	8000816 <__aeabi_fmul+0x176>
 80007e4:	2308      	movs	r3, #8
 80007e6:	4698      	mov	r8, r3
 80007e8:	3b06      	subs	r3, #6
 80007ea:	25ff      	movs	r5, #255	@ 0xff
 80007ec:	469a      	mov	sl, r3
 80007ee:	e772      	b.n	80006d6 <__aeabi_fmul+0x36>
 80007f0:	20ff      	movs	r0, #255	@ 0xff
 80007f2:	2200      	movs	r2, #0
 80007f4:	e791      	b.n	800071a <__aeabi_fmul+0x7a>
 80007f6:	2280      	movs	r2, #128	@ 0x80
 80007f8:	2600      	movs	r6, #0
 80007fa:	20ff      	movs	r0, #255	@ 0xff
 80007fc:	03d2      	lsls	r2, r2, #15
 80007fe:	e78c      	b.n	800071a <__aeabi_fmul+0x7a>
 8000800:	4641      	mov	r1, r8
 8000802:	2202      	movs	r2, #2
 8000804:	3501      	adds	r5, #1
 8000806:	4311      	orrs	r1, r2
 8000808:	4688      	mov	r8, r1
 800080a:	35ff      	adds	r5, #255	@ 0xff
 800080c:	290a      	cmp	r1, #10
 800080e:	dca5      	bgt.n	800075c <__aeabi_fmul+0xbc>
 8000810:	2102      	movs	r1, #2
 8000812:	407e      	eors	r6, r7
 8000814:	e774      	b.n	8000700 <__aeabi_fmul+0x60>
 8000816:	230c      	movs	r3, #12
 8000818:	4698      	mov	r8, r3
 800081a:	3b09      	subs	r3, #9
 800081c:	25ff      	movs	r5, #255	@ 0xff
 800081e:	469a      	mov	sl, r3
 8000820:	e759      	b.n	80006d6 <__aeabi_fmul+0x36>
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fbb0 	bl	8000f88 <__clzsi2>
 8000828:	464a      	mov	r2, r9
 800082a:	1f43      	subs	r3, r0, #5
 800082c:	2576      	movs	r5, #118	@ 0x76
 800082e:	409a      	lsls	r2, r3
 8000830:	2300      	movs	r3, #0
 8000832:	426d      	negs	r5, r5
 8000834:	4691      	mov	r9, r2
 8000836:	4698      	mov	r8, r3
 8000838:	469a      	mov	sl, r3
 800083a:	1a2d      	subs	r5, r5, r0
 800083c:	e74b      	b.n	80006d6 <__aeabi_fmul+0x36>
 800083e:	0020      	movs	r0, r4
 8000840:	f000 fba2 	bl	8000f88 <__clzsi2>
 8000844:	4642      	mov	r2, r8
 8000846:	1f43      	subs	r3, r0, #5
 8000848:	409c      	lsls	r4, r3
 800084a:	1a2b      	subs	r3, r5, r0
 800084c:	3b76      	subs	r3, #118	@ 0x76
 800084e:	2100      	movs	r1, #0
 8000850:	1c5d      	adds	r5, r3, #1
 8000852:	2a0a      	cmp	r2, #10
 8000854:	dc00      	bgt.n	8000858 <__aeabi_fmul+0x1b8>
 8000856:	e752      	b.n	80006fe <__aeabi_fmul+0x5e>
 8000858:	e780      	b.n	800075c <__aeabi_fmul+0xbc>
 800085a:	2201      	movs	r2, #1
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	2b1b      	cmp	r3, #27
 8000860:	dd00      	ble.n	8000864 <__aeabi_fmul+0x1c4>
 8000862:	e758      	b.n	8000716 <__aeabi_fmul+0x76>
 8000864:	359e      	adds	r5, #158	@ 0x9e
 8000866:	0022      	movs	r2, r4
 8000868:	40ac      	lsls	r4, r5
 800086a:	40da      	lsrs	r2, r3
 800086c:	1e63      	subs	r3, r4, #1
 800086e:	419c      	sbcs	r4, r3
 8000870:	4322      	orrs	r2, r4
 8000872:	0753      	lsls	r3, r2, #29
 8000874:	d004      	beq.n	8000880 <__aeabi_fmul+0x1e0>
 8000876:	230f      	movs	r3, #15
 8000878:	4013      	ands	r3, r2
 800087a:	2b04      	cmp	r3, #4
 800087c:	d000      	beq.n	8000880 <__aeabi_fmul+0x1e0>
 800087e:	3204      	adds	r2, #4
 8000880:	0153      	lsls	r3, r2, #5
 8000882:	d537      	bpl.n	80008f4 <__aeabi_fmul+0x254>
 8000884:	2001      	movs	r0, #1
 8000886:	2200      	movs	r2, #0
 8000888:	e747      	b.n	800071a <__aeabi_fmul+0x7a>
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	464a      	mov	r2, r9
 800088e:	0424      	lsls	r4, r4, #16
 8000890:	0c24      	lsrs	r4, r4, #16
 8000892:	0027      	movs	r7, r4
 8000894:	0c10      	lsrs	r0, r2, #16
 8000896:	0412      	lsls	r2, r2, #16
 8000898:	0c12      	lsrs	r2, r2, #16
 800089a:	4344      	muls	r4, r0
 800089c:	4357      	muls	r7, r2
 800089e:	4348      	muls	r0, r1
 80008a0:	4351      	muls	r1, r2
 80008a2:	0c3a      	lsrs	r2, r7, #16
 80008a4:	1909      	adds	r1, r1, r4
 80008a6:	1852      	adds	r2, r2, r1
 80008a8:	4294      	cmp	r4, r2
 80008aa:	d903      	bls.n	80008b4 <__aeabi_fmul+0x214>
 80008ac:	2180      	movs	r1, #128	@ 0x80
 80008ae:	0249      	lsls	r1, r1, #9
 80008b0:	468c      	mov	ip, r1
 80008b2:	4460      	add	r0, ip
 80008b4:	043f      	lsls	r7, r7, #16
 80008b6:	0411      	lsls	r1, r2, #16
 80008b8:	0c3f      	lsrs	r7, r7, #16
 80008ba:	19c9      	adds	r1, r1, r7
 80008bc:	018c      	lsls	r4, r1, #6
 80008be:	1e67      	subs	r7, r4, #1
 80008c0:	41bc      	sbcs	r4, r7
 80008c2:	0c12      	lsrs	r2, r2, #16
 80008c4:	0e89      	lsrs	r1, r1, #26
 80008c6:	1812      	adds	r2, r2, r0
 80008c8:	430c      	orrs	r4, r1
 80008ca:	0192      	lsls	r2, r2, #6
 80008cc:	4314      	orrs	r4, r2
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	d50e      	bpl.n	80008f0 <__aeabi_fmul+0x250>
 80008d2:	2301      	movs	r3, #1
 80008d4:	0862      	lsrs	r2, r4, #1
 80008d6:	401c      	ands	r4, r3
 80008d8:	4314      	orrs	r4, r2
 80008da:	e749      	b.n	8000770 <__aeabi_fmul+0xd0>
 80008dc:	003e      	movs	r6, r7
 80008de:	46a1      	mov	r9, r4
 80008e0:	2280      	movs	r2, #128	@ 0x80
 80008e2:	464b      	mov	r3, r9
 80008e4:	03d2      	lsls	r2, r2, #15
 80008e6:	431a      	orrs	r2, r3
 80008e8:	0252      	lsls	r2, r2, #9
 80008ea:	20ff      	movs	r0, #255	@ 0xff
 80008ec:	0a52      	lsrs	r2, r2, #9
 80008ee:	e714      	b.n	800071a <__aeabi_fmul+0x7a>
 80008f0:	001d      	movs	r5, r3
 80008f2:	e73d      	b.n	8000770 <__aeabi_fmul+0xd0>
 80008f4:	0192      	lsls	r2, r2, #6
 80008f6:	2000      	movs	r0, #0
 80008f8:	0a52      	lsrs	r2, r2, #9
 80008fa:	e70e      	b.n	800071a <__aeabi_fmul+0x7a>
 80008fc:	290f      	cmp	r1, #15
 80008fe:	d1ed      	bne.n	80008dc <__aeabi_fmul+0x23c>
 8000900:	2280      	movs	r2, #128	@ 0x80
 8000902:	464b      	mov	r3, r9
 8000904:	03d2      	lsls	r2, r2, #15
 8000906:	4213      	tst	r3, r2
 8000908:	d0ea      	beq.n	80008e0 <__aeabi_fmul+0x240>
 800090a:	4214      	tst	r4, r2
 800090c:	d1e8      	bne.n	80008e0 <__aeabi_fmul+0x240>
 800090e:	003e      	movs	r6, r7
 8000910:	20ff      	movs	r0, #255	@ 0xff
 8000912:	4322      	orrs	r2, r4
 8000914:	e701      	b.n	800071a <__aeabi_fmul+0x7a>
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	f7ffffff 	.word	0xf7ffffff

0800091c <__aeabi_fsub>:
 800091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091e:	4647      	mov	r7, r8
 8000920:	46ce      	mov	lr, r9
 8000922:	024e      	lsls	r6, r1, #9
 8000924:	0243      	lsls	r3, r0, #9
 8000926:	0045      	lsls	r5, r0, #1
 8000928:	0a72      	lsrs	r2, r6, #9
 800092a:	0fc4      	lsrs	r4, r0, #31
 800092c:	0048      	lsls	r0, r1, #1
 800092e:	b580      	push	{r7, lr}
 8000930:	4694      	mov	ip, r2
 8000932:	0a5f      	lsrs	r7, r3, #9
 8000934:	0e2d      	lsrs	r5, r5, #24
 8000936:	099b      	lsrs	r3, r3, #6
 8000938:	0e00      	lsrs	r0, r0, #24
 800093a:	0fc9      	lsrs	r1, r1, #31
 800093c:	09b6      	lsrs	r6, r6, #6
 800093e:	28ff      	cmp	r0, #255	@ 0xff
 8000940:	d024      	beq.n	800098c <__aeabi_fsub+0x70>
 8000942:	2201      	movs	r2, #1
 8000944:	4051      	eors	r1, r2
 8000946:	1a2a      	subs	r2, r5, r0
 8000948:	428c      	cmp	r4, r1
 800094a:	d00f      	beq.n	800096c <__aeabi_fsub+0x50>
 800094c:	2a00      	cmp	r2, #0
 800094e:	dc00      	bgt.n	8000952 <__aeabi_fsub+0x36>
 8000950:	e16a      	b.n	8000c28 <__aeabi_fsub+0x30c>
 8000952:	2800      	cmp	r0, #0
 8000954:	d135      	bne.n	80009c2 <__aeabi_fsub+0xa6>
 8000956:	2e00      	cmp	r6, #0
 8000958:	d100      	bne.n	800095c <__aeabi_fsub+0x40>
 800095a:	e0a2      	b.n	8000aa2 <__aeabi_fsub+0x186>
 800095c:	1e51      	subs	r1, r2, #1
 800095e:	2a01      	cmp	r2, #1
 8000960:	d100      	bne.n	8000964 <__aeabi_fsub+0x48>
 8000962:	e124      	b.n	8000bae <__aeabi_fsub+0x292>
 8000964:	2aff      	cmp	r2, #255	@ 0xff
 8000966:	d021      	beq.n	80009ac <__aeabi_fsub+0x90>
 8000968:	000a      	movs	r2, r1
 800096a:	e02f      	b.n	80009cc <__aeabi_fsub+0xb0>
 800096c:	2a00      	cmp	r2, #0
 800096e:	dc00      	bgt.n	8000972 <__aeabi_fsub+0x56>
 8000970:	e167      	b.n	8000c42 <__aeabi_fsub+0x326>
 8000972:	2800      	cmp	r0, #0
 8000974:	d05e      	beq.n	8000a34 <__aeabi_fsub+0x118>
 8000976:	2dff      	cmp	r5, #255	@ 0xff
 8000978:	d018      	beq.n	80009ac <__aeabi_fsub+0x90>
 800097a:	2180      	movs	r1, #128	@ 0x80
 800097c:	04c9      	lsls	r1, r1, #19
 800097e:	430e      	orrs	r6, r1
 8000980:	2a1b      	cmp	r2, #27
 8000982:	dc00      	bgt.n	8000986 <__aeabi_fsub+0x6a>
 8000984:	e076      	b.n	8000a74 <__aeabi_fsub+0x158>
 8000986:	002a      	movs	r2, r5
 8000988:	3301      	adds	r3, #1
 800098a:	e032      	b.n	80009f2 <__aeabi_fsub+0xd6>
 800098c:	002a      	movs	r2, r5
 800098e:	3aff      	subs	r2, #255	@ 0xff
 8000990:	4691      	mov	r9, r2
 8000992:	2e00      	cmp	r6, #0
 8000994:	d042      	beq.n	8000a1c <__aeabi_fsub+0x100>
 8000996:	428c      	cmp	r4, r1
 8000998:	d055      	beq.n	8000a46 <__aeabi_fsub+0x12a>
 800099a:	464a      	mov	r2, r9
 800099c:	2a00      	cmp	r2, #0
 800099e:	d100      	bne.n	80009a2 <__aeabi_fsub+0x86>
 80009a0:	e09c      	b.n	8000adc <__aeabi_fsub+0x1c0>
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d100      	bne.n	80009a8 <__aeabi_fsub+0x8c>
 80009a6:	e077      	b.n	8000a98 <__aeabi_fsub+0x17c>
 80009a8:	000c      	movs	r4, r1
 80009aa:	0033      	movs	r3, r6
 80009ac:	08db      	lsrs	r3, r3, #3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d100      	bne.n	80009b4 <__aeabi_fsub+0x98>
 80009b2:	e06e      	b.n	8000a92 <__aeabi_fsub+0x176>
 80009b4:	2280      	movs	r2, #128	@ 0x80
 80009b6:	03d2      	lsls	r2, r2, #15
 80009b8:	4313      	orrs	r3, r2
 80009ba:	025b      	lsls	r3, r3, #9
 80009bc:	20ff      	movs	r0, #255	@ 0xff
 80009be:	0a5b      	lsrs	r3, r3, #9
 80009c0:	e024      	b.n	8000a0c <__aeabi_fsub+0xf0>
 80009c2:	2dff      	cmp	r5, #255	@ 0xff
 80009c4:	d0f2      	beq.n	80009ac <__aeabi_fsub+0x90>
 80009c6:	2180      	movs	r1, #128	@ 0x80
 80009c8:	04c9      	lsls	r1, r1, #19
 80009ca:	430e      	orrs	r6, r1
 80009cc:	2101      	movs	r1, #1
 80009ce:	2a1b      	cmp	r2, #27
 80009d0:	dc08      	bgt.n	80009e4 <__aeabi_fsub+0xc8>
 80009d2:	0031      	movs	r1, r6
 80009d4:	2020      	movs	r0, #32
 80009d6:	40d1      	lsrs	r1, r2
 80009d8:	1a82      	subs	r2, r0, r2
 80009da:	4096      	lsls	r6, r2
 80009dc:	0032      	movs	r2, r6
 80009de:	1e50      	subs	r0, r2, #1
 80009e0:	4182      	sbcs	r2, r0
 80009e2:	4311      	orrs	r1, r2
 80009e4:	1a5b      	subs	r3, r3, r1
 80009e6:	015a      	lsls	r2, r3, #5
 80009e8:	d460      	bmi.n	8000aac <__aeabi_fsub+0x190>
 80009ea:	2107      	movs	r1, #7
 80009ec:	002a      	movs	r2, r5
 80009ee:	4019      	ands	r1, r3
 80009f0:	d057      	beq.n	8000aa2 <__aeabi_fsub+0x186>
 80009f2:	210f      	movs	r1, #15
 80009f4:	4019      	ands	r1, r3
 80009f6:	2904      	cmp	r1, #4
 80009f8:	d000      	beq.n	80009fc <__aeabi_fsub+0xe0>
 80009fa:	3304      	adds	r3, #4
 80009fc:	0159      	lsls	r1, r3, #5
 80009fe:	d550      	bpl.n	8000aa2 <__aeabi_fsub+0x186>
 8000a00:	1c50      	adds	r0, r2, #1
 8000a02:	2afe      	cmp	r2, #254	@ 0xfe
 8000a04:	d045      	beq.n	8000a92 <__aeabi_fsub+0x176>
 8000a06:	019b      	lsls	r3, r3, #6
 8000a08:	b2c0      	uxtb	r0, r0
 8000a0a:	0a5b      	lsrs	r3, r3, #9
 8000a0c:	05c0      	lsls	r0, r0, #23
 8000a0e:	4318      	orrs	r0, r3
 8000a10:	07e4      	lsls	r4, r4, #31
 8000a12:	4320      	orrs	r0, r4
 8000a14:	bcc0      	pop	{r6, r7}
 8000a16:	46b9      	mov	r9, r7
 8000a18:	46b0      	mov	r8, r6
 8000a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4051      	eors	r1, r2
 8000a20:	428c      	cmp	r4, r1
 8000a22:	d1ba      	bne.n	800099a <__aeabi_fsub+0x7e>
 8000a24:	464a      	mov	r2, r9
 8000a26:	2a00      	cmp	r2, #0
 8000a28:	d010      	beq.n	8000a4c <__aeabi_fsub+0x130>
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fsub+0x114>
 8000a2e:	e098      	b.n	8000b62 <__aeabi_fsub+0x246>
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7bb      	b.n	80009ac <__aeabi_fsub+0x90>
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	d034      	beq.n	8000aa2 <__aeabi_fsub+0x186>
 8000a38:	1e51      	subs	r1, r2, #1
 8000a3a:	2a01      	cmp	r2, #1
 8000a3c:	d06e      	beq.n	8000b1c <__aeabi_fsub+0x200>
 8000a3e:	2aff      	cmp	r2, #255	@ 0xff
 8000a40:	d0b4      	beq.n	80009ac <__aeabi_fsub+0x90>
 8000a42:	000a      	movs	r2, r1
 8000a44:	e79c      	b.n	8000980 <__aeabi_fsub+0x64>
 8000a46:	2a00      	cmp	r2, #0
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fsub+0x130>
 8000a4a:	e088      	b.n	8000b5e <__aeabi_fsub+0x242>
 8000a4c:	20fe      	movs	r0, #254	@ 0xfe
 8000a4e:	1c6a      	adds	r2, r5, #1
 8000a50:	4210      	tst	r0, r2
 8000a52:	d000      	beq.n	8000a56 <__aeabi_fsub+0x13a>
 8000a54:	e092      	b.n	8000b7c <__aeabi_fsub+0x260>
 8000a56:	2d00      	cmp	r5, #0
 8000a58:	d000      	beq.n	8000a5c <__aeabi_fsub+0x140>
 8000a5a:	e0a4      	b.n	8000ba6 <__aeabi_fsub+0x28a>
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_fsub+0x146>
 8000a60:	e0cb      	b.n	8000bfa <__aeabi_fsub+0x2de>
 8000a62:	2e00      	cmp	r6, #0
 8000a64:	d000      	beq.n	8000a68 <__aeabi_fsub+0x14c>
 8000a66:	e0ca      	b.n	8000bfe <__aeabi_fsub+0x2e2>
 8000a68:	2200      	movs	r2, #0
 8000a6a:	08db      	lsrs	r3, r3, #3
 8000a6c:	025b      	lsls	r3, r3, #9
 8000a6e:	0a5b      	lsrs	r3, r3, #9
 8000a70:	b2d0      	uxtb	r0, r2
 8000a72:	e7cb      	b.n	8000a0c <__aeabi_fsub+0xf0>
 8000a74:	0031      	movs	r1, r6
 8000a76:	2020      	movs	r0, #32
 8000a78:	40d1      	lsrs	r1, r2
 8000a7a:	1a82      	subs	r2, r0, r2
 8000a7c:	4096      	lsls	r6, r2
 8000a7e:	0032      	movs	r2, r6
 8000a80:	1e50      	subs	r0, r2, #1
 8000a82:	4182      	sbcs	r2, r0
 8000a84:	430a      	orrs	r2, r1
 8000a86:	189b      	adds	r3, r3, r2
 8000a88:	015a      	lsls	r2, r3, #5
 8000a8a:	d5ae      	bpl.n	80009ea <__aeabi_fsub+0xce>
 8000a8c:	1c6a      	adds	r2, r5, #1
 8000a8e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a90:	d14a      	bne.n	8000b28 <__aeabi_fsub+0x20c>
 8000a92:	20ff      	movs	r0, #255	@ 0xff
 8000a94:	2300      	movs	r3, #0
 8000a96:	e7b9      	b.n	8000a0c <__aeabi_fsub+0xf0>
 8000a98:	22ff      	movs	r2, #255	@ 0xff
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d14b      	bne.n	8000b36 <__aeabi_fsub+0x21a>
 8000a9e:	000c      	movs	r4, r1
 8000aa0:	0033      	movs	r3, r6
 8000aa2:	08db      	lsrs	r3, r3, #3
 8000aa4:	2aff      	cmp	r2, #255	@ 0xff
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_fsub+0x18e>
 8000aa8:	e781      	b.n	80009ae <__aeabi_fsub+0x92>
 8000aaa:	e7df      	b.n	8000a6c <__aeabi_fsub+0x150>
 8000aac:	019f      	lsls	r7, r3, #6
 8000aae:	09bf      	lsrs	r7, r7, #6
 8000ab0:	0038      	movs	r0, r7
 8000ab2:	f000 fa69 	bl	8000f88 <__clzsi2>
 8000ab6:	3805      	subs	r0, #5
 8000ab8:	4087      	lsls	r7, r0
 8000aba:	4285      	cmp	r5, r0
 8000abc:	dc21      	bgt.n	8000b02 <__aeabi_fsub+0x1e6>
 8000abe:	003b      	movs	r3, r7
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	1b42      	subs	r2, r0, r5
 8000ac4:	3201      	adds	r2, #1
 8000ac6:	40d3      	lsrs	r3, r2
 8000ac8:	1a8a      	subs	r2, r1, r2
 8000aca:	4097      	lsls	r7, r2
 8000acc:	1e7a      	subs	r2, r7, #1
 8000ace:	4197      	sbcs	r7, r2
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	433b      	orrs	r3, r7
 8000ad4:	0759      	lsls	r1, r3, #29
 8000ad6:	d000      	beq.n	8000ada <__aeabi_fsub+0x1be>
 8000ad8:	e78b      	b.n	80009f2 <__aeabi_fsub+0xd6>
 8000ada:	e78f      	b.n	80009fc <__aeabi_fsub+0xe0>
 8000adc:	20fe      	movs	r0, #254	@ 0xfe
 8000ade:	1c6a      	adds	r2, r5, #1
 8000ae0:	4210      	tst	r0, r2
 8000ae2:	d112      	bne.n	8000b0a <__aeabi_fsub+0x1ee>
 8000ae4:	2d00      	cmp	r5, #0
 8000ae6:	d152      	bne.n	8000b8e <__aeabi_fsub+0x272>
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d07c      	beq.n	8000be6 <__aeabi_fsub+0x2ca>
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d0bb      	beq.n	8000a68 <__aeabi_fsub+0x14c>
 8000af0:	1b9a      	subs	r2, r3, r6
 8000af2:	0150      	lsls	r0, r2, #5
 8000af4:	d400      	bmi.n	8000af8 <__aeabi_fsub+0x1dc>
 8000af6:	e08b      	b.n	8000c10 <__aeabi_fsub+0x2f4>
 8000af8:	2401      	movs	r4, #1
 8000afa:	2200      	movs	r2, #0
 8000afc:	1af3      	subs	r3, r6, r3
 8000afe:	400c      	ands	r4, r1
 8000b00:	e7e8      	b.n	8000ad4 <__aeabi_fsub+0x1b8>
 8000b02:	4b56      	ldr	r3, [pc, #344]	@ (8000c5c <__aeabi_fsub+0x340>)
 8000b04:	1a2a      	subs	r2, r5, r0
 8000b06:	403b      	ands	r3, r7
 8000b08:	e7e4      	b.n	8000ad4 <__aeabi_fsub+0x1b8>
 8000b0a:	1b9f      	subs	r7, r3, r6
 8000b0c:	017a      	lsls	r2, r7, #5
 8000b0e:	d446      	bmi.n	8000b9e <__aeabi_fsub+0x282>
 8000b10:	2f00      	cmp	r7, #0
 8000b12:	d1cd      	bne.n	8000ab0 <__aeabi_fsub+0x194>
 8000b14:	2400      	movs	r4, #0
 8000b16:	2000      	movs	r0, #0
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e777      	b.n	8000a0c <__aeabi_fsub+0xf0>
 8000b1c:	199b      	adds	r3, r3, r6
 8000b1e:	2501      	movs	r5, #1
 8000b20:	3201      	adds	r2, #1
 8000b22:	0159      	lsls	r1, r3, #5
 8000b24:	d400      	bmi.n	8000b28 <__aeabi_fsub+0x20c>
 8000b26:	e760      	b.n	80009ea <__aeabi_fsub+0xce>
 8000b28:	2101      	movs	r1, #1
 8000b2a:	484d      	ldr	r0, [pc, #308]	@ (8000c60 <__aeabi_fsub+0x344>)
 8000b2c:	4019      	ands	r1, r3
 8000b2e:	085b      	lsrs	r3, r3, #1
 8000b30:	4003      	ands	r3, r0
 8000b32:	430b      	orrs	r3, r1
 8000b34:	e7ce      	b.n	8000ad4 <__aeabi_fsub+0x1b8>
 8000b36:	1e57      	subs	r7, r2, #1
 8000b38:	2a01      	cmp	r2, #1
 8000b3a:	d05a      	beq.n	8000bf2 <__aeabi_fsub+0x2d6>
 8000b3c:	000c      	movs	r4, r1
 8000b3e:	2aff      	cmp	r2, #255	@ 0xff
 8000b40:	d033      	beq.n	8000baa <__aeabi_fsub+0x28e>
 8000b42:	2201      	movs	r2, #1
 8000b44:	2f1b      	cmp	r7, #27
 8000b46:	dc07      	bgt.n	8000b58 <__aeabi_fsub+0x23c>
 8000b48:	2120      	movs	r1, #32
 8000b4a:	1bc9      	subs	r1, r1, r7
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	408b      	lsls	r3, r1
 8000b50:	40fa      	lsrs	r2, r7
 8000b52:	1e59      	subs	r1, r3, #1
 8000b54:	418b      	sbcs	r3, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	0005      	movs	r5, r0
 8000b5a:	1ab3      	subs	r3, r6, r2
 8000b5c:	e743      	b.n	80009e6 <__aeabi_fsub+0xca>
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d123      	bne.n	8000baa <__aeabi_fsub+0x28e>
 8000b62:	22ff      	movs	r2, #255	@ 0xff
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d09b      	beq.n	8000aa0 <__aeabi_fsub+0x184>
 8000b68:	1e51      	subs	r1, r2, #1
 8000b6a:	2a01      	cmp	r2, #1
 8000b6c:	d0d6      	beq.n	8000b1c <__aeabi_fsub+0x200>
 8000b6e:	2aff      	cmp	r2, #255	@ 0xff
 8000b70:	d01b      	beq.n	8000baa <__aeabi_fsub+0x28e>
 8000b72:	291b      	cmp	r1, #27
 8000b74:	dd2c      	ble.n	8000bd0 <__aeabi_fsub+0x2b4>
 8000b76:	0002      	movs	r2, r0
 8000b78:	1c73      	adds	r3, r6, #1
 8000b7a:	e73a      	b.n	80009f2 <__aeabi_fsub+0xd6>
 8000b7c:	2aff      	cmp	r2, #255	@ 0xff
 8000b7e:	d088      	beq.n	8000a92 <__aeabi_fsub+0x176>
 8000b80:	199b      	adds	r3, r3, r6
 8000b82:	085b      	lsrs	r3, r3, #1
 8000b84:	0759      	lsls	r1, r3, #29
 8000b86:	d000      	beq.n	8000b8a <__aeabi_fsub+0x26e>
 8000b88:	e733      	b.n	80009f2 <__aeabi_fsub+0xd6>
 8000b8a:	08db      	lsrs	r3, r3, #3
 8000b8c:	e76e      	b.n	8000a6c <__aeabi_fsub+0x150>
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d110      	bne.n	8000bb4 <__aeabi_fsub+0x298>
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d043      	beq.n	8000c1e <__aeabi_fsub+0x302>
 8000b96:	2401      	movs	r4, #1
 8000b98:	0033      	movs	r3, r6
 8000b9a:	400c      	ands	r4, r1
 8000b9c:	e706      	b.n	80009ac <__aeabi_fsub+0x90>
 8000b9e:	2401      	movs	r4, #1
 8000ba0:	1af7      	subs	r7, r6, r3
 8000ba2:	400c      	ands	r4, r1
 8000ba4:	e784      	b.n	8000ab0 <__aeabi_fsub+0x194>
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d104      	bne.n	8000bb4 <__aeabi_fsub+0x298>
 8000baa:	0033      	movs	r3, r6
 8000bac:	e6fe      	b.n	80009ac <__aeabi_fsub+0x90>
 8000bae:	2501      	movs	r5, #1
 8000bb0:	1b9b      	subs	r3, r3, r6
 8000bb2:	e718      	b.n	80009e6 <__aeabi_fsub+0xca>
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d100      	bne.n	8000bba <__aeabi_fsub+0x29e>
 8000bb8:	e6f8      	b.n	80009ac <__aeabi_fsub+0x90>
 8000bba:	2280      	movs	r2, #128	@ 0x80
 8000bbc:	03d2      	lsls	r2, r2, #15
 8000bbe:	4297      	cmp	r7, r2
 8000bc0:	d304      	bcc.n	8000bcc <__aeabi_fsub+0x2b0>
 8000bc2:	4594      	cmp	ip, r2
 8000bc4:	d202      	bcs.n	8000bcc <__aeabi_fsub+0x2b0>
 8000bc6:	2401      	movs	r4, #1
 8000bc8:	0033      	movs	r3, r6
 8000bca:	400c      	ands	r4, r1
 8000bcc:	08db      	lsrs	r3, r3, #3
 8000bce:	e6f1      	b.n	80009b4 <__aeabi_fsub+0x98>
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2520      	movs	r5, #32
 8000bd4:	40ca      	lsrs	r2, r1
 8000bd6:	1a69      	subs	r1, r5, r1
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	1e59      	subs	r1, r3, #1
 8000bdc:	418b      	sbcs	r3, r1
 8000bde:	4313      	orrs	r3, r2
 8000be0:	0005      	movs	r5, r0
 8000be2:	199b      	adds	r3, r3, r6
 8000be4:	e750      	b.n	8000a88 <__aeabi_fsub+0x16c>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d094      	beq.n	8000b14 <__aeabi_fsub+0x1f8>
 8000bea:	2401      	movs	r4, #1
 8000bec:	0033      	movs	r3, r6
 8000bee:	400c      	ands	r4, r1
 8000bf0:	e73a      	b.n	8000a68 <__aeabi_fsub+0x14c>
 8000bf2:	000c      	movs	r4, r1
 8000bf4:	2501      	movs	r5, #1
 8000bf6:	1af3      	subs	r3, r6, r3
 8000bf8:	e6f5      	b.n	80009e6 <__aeabi_fsub+0xca>
 8000bfa:	0033      	movs	r3, r6
 8000bfc:	e734      	b.n	8000a68 <__aeabi_fsub+0x14c>
 8000bfe:	199b      	adds	r3, r3, r6
 8000c00:	2200      	movs	r2, #0
 8000c02:	0159      	lsls	r1, r3, #5
 8000c04:	d5c1      	bpl.n	8000b8a <__aeabi_fsub+0x26e>
 8000c06:	4a15      	ldr	r2, [pc, #84]	@ (8000c5c <__aeabi_fsub+0x340>)
 8000c08:	4013      	ands	r3, r2
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	e72d      	b.n	8000a6c <__aeabi_fsub+0x150>
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	d100      	bne.n	8000c16 <__aeabi_fsub+0x2fa>
 8000c14:	e77e      	b.n	8000b14 <__aeabi_fsub+0x1f8>
 8000c16:	0013      	movs	r3, r2
 8000c18:	2200      	movs	r2, #0
 8000c1a:	08db      	lsrs	r3, r3, #3
 8000c1c:	e726      	b.n	8000a6c <__aeabi_fsub+0x150>
 8000c1e:	2380      	movs	r3, #128	@ 0x80
 8000c20:	2400      	movs	r4, #0
 8000c22:	20ff      	movs	r0, #255	@ 0xff
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	e6f1      	b.n	8000a0c <__aeabi_fsub+0xf0>
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_fsub+0x312>
 8000c2c:	e756      	b.n	8000adc <__aeabi_fsub+0x1c0>
 8000c2e:	1b47      	subs	r7, r0, r5
 8000c30:	003a      	movs	r2, r7
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	d100      	bne.n	8000c38 <__aeabi_fsub+0x31c>
 8000c36:	e730      	b.n	8000a9a <__aeabi_fsub+0x17e>
 8000c38:	2280      	movs	r2, #128	@ 0x80
 8000c3a:	04d2      	lsls	r2, r2, #19
 8000c3c:	000c      	movs	r4, r1
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	e77f      	b.n	8000b42 <__aeabi_fsub+0x226>
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d100      	bne.n	8000c48 <__aeabi_fsub+0x32c>
 8000c46:	e701      	b.n	8000a4c <__aeabi_fsub+0x130>
 8000c48:	1b41      	subs	r1, r0, r5
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	d101      	bne.n	8000c52 <__aeabi_fsub+0x336>
 8000c4e:	000a      	movs	r2, r1
 8000c50:	e788      	b.n	8000b64 <__aeabi_fsub+0x248>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	04d2      	lsls	r2, r2, #19
 8000c56:	4313      	orrs	r3, r2
 8000c58:	e78b      	b.n	8000b72 <__aeabi_fsub+0x256>
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	fbffffff 	.word	0xfbffffff
 8000c60:	7dffffff 	.word	0x7dffffff

08000c64 <__aeabi_f2iz>:
 8000c64:	0241      	lsls	r1, r0, #9
 8000c66:	0042      	lsls	r2, r0, #1
 8000c68:	0fc3      	lsrs	r3, r0, #31
 8000c6a:	0a49      	lsrs	r1, r1, #9
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	0e12      	lsrs	r2, r2, #24
 8000c70:	2a7e      	cmp	r2, #126	@ 0x7e
 8000c72:	dd03      	ble.n	8000c7c <__aeabi_f2iz+0x18>
 8000c74:	2a9d      	cmp	r2, #157	@ 0x9d
 8000c76:	dd02      	ble.n	8000c7e <__aeabi_f2iz+0x1a>
 8000c78:	4a09      	ldr	r2, [pc, #36]	@ (8000ca0 <__aeabi_f2iz+0x3c>)
 8000c7a:	1898      	adds	r0, r3, r2
 8000c7c:	4770      	bx	lr
 8000c7e:	2080      	movs	r0, #128	@ 0x80
 8000c80:	0400      	lsls	r0, r0, #16
 8000c82:	4301      	orrs	r1, r0
 8000c84:	2a95      	cmp	r2, #149	@ 0x95
 8000c86:	dc07      	bgt.n	8000c98 <__aeabi_f2iz+0x34>
 8000c88:	2096      	movs	r0, #150	@ 0x96
 8000c8a:	1a82      	subs	r2, r0, r2
 8000c8c:	40d1      	lsrs	r1, r2
 8000c8e:	4248      	negs	r0, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f3      	bne.n	8000c7c <__aeabi_f2iz+0x18>
 8000c94:	0008      	movs	r0, r1
 8000c96:	e7f1      	b.n	8000c7c <__aeabi_f2iz+0x18>
 8000c98:	3a96      	subs	r2, #150	@ 0x96
 8000c9a:	4091      	lsls	r1, r2
 8000c9c:	e7f7      	b.n	8000c8e <__aeabi_f2iz+0x2a>
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	7fffffff 	.word	0x7fffffff

08000ca4 <__eqdf2>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4657      	mov	r7, sl
 8000ca8:	46de      	mov	lr, fp
 8000caa:	464e      	mov	r6, r9
 8000cac:	4645      	mov	r5, r8
 8000cae:	b5e0      	push	{r5, r6, r7, lr}
 8000cb0:	000d      	movs	r5, r1
 8000cb2:	0004      	movs	r4, r0
 8000cb4:	0fe8      	lsrs	r0, r5, #31
 8000cb6:	4683      	mov	fp, r0
 8000cb8:	0309      	lsls	r1, r1, #12
 8000cba:	0fd8      	lsrs	r0, r3, #31
 8000cbc:	0b09      	lsrs	r1, r1, #12
 8000cbe:	4682      	mov	sl, r0
 8000cc0:	4819      	ldr	r0, [pc, #100]	@ (8000d28 <__eqdf2+0x84>)
 8000cc2:	468c      	mov	ip, r1
 8000cc4:	031f      	lsls	r7, r3, #12
 8000cc6:	0069      	lsls	r1, r5, #1
 8000cc8:	005e      	lsls	r6, r3, #1
 8000cca:	0d49      	lsrs	r1, r1, #21
 8000ccc:	0b3f      	lsrs	r7, r7, #12
 8000cce:	0d76      	lsrs	r6, r6, #21
 8000cd0:	4281      	cmp	r1, r0
 8000cd2:	d018      	beq.n	8000d06 <__eqdf2+0x62>
 8000cd4:	4286      	cmp	r6, r0
 8000cd6:	d00f      	beq.n	8000cf8 <__eqdf2+0x54>
 8000cd8:	2001      	movs	r0, #1
 8000cda:	42b1      	cmp	r1, r6
 8000cdc:	d10d      	bne.n	8000cfa <__eqdf2+0x56>
 8000cde:	45bc      	cmp	ip, r7
 8000ce0:	d10b      	bne.n	8000cfa <__eqdf2+0x56>
 8000ce2:	4294      	cmp	r4, r2
 8000ce4:	d109      	bne.n	8000cfa <__eqdf2+0x56>
 8000ce6:	45d3      	cmp	fp, sl
 8000ce8:	d01c      	beq.n	8000d24 <__eqdf2+0x80>
 8000cea:	2900      	cmp	r1, #0
 8000cec:	d105      	bne.n	8000cfa <__eqdf2+0x56>
 8000cee:	4660      	mov	r0, ip
 8000cf0:	4320      	orrs	r0, r4
 8000cf2:	1e43      	subs	r3, r0, #1
 8000cf4:	4198      	sbcs	r0, r3
 8000cf6:	e000      	b.n	8000cfa <__eqdf2+0x56>
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	bcf0      	pop	{r4, r5, r6, r7}
 8000cfc:	46bb      	mov	fp, r7
 8000cfe:	46b2      	mov	sl, r6
 8000d00:	46a9      	mov	r9, r5
 8000d02:	46a0      	mov	r8, r4
 8000d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d06:	2001      	movs	r0, #1
 8000d08:	428e      	cmp	r6, r1
 8000d0a:	d1f6      	bne.n	8000cfa <__eqdf2+0x56>
 8000d0c:	4661      	mov	r1, ip
 8000d0e:	4339      	orrs	r1, r7
 8000d10:	000f      	movs	r7, r1
 8000d12:	4317      	orrs	r7, r2
 8000d14:	4327      	orrs	r7, r4
 8000d16:	d1f0      	bne.n	8000cfa <__eqdf2+0x56>
 8000d18:	465b      	mov	r3, fp
 8000d1a:	4652      	mov	r2, sl
 8000d1c:	1a98      	subs	r0, r3, r2
 8000d1e:	1e43      	subs	r3, r0, #1
 8000d20:	4198      	sbcs	r0, r3
 8000d22:	e7ea      	b.n	8000cfa <__eqdf2+0x56>
 8000d24:	2000      	movs	r0, #0
 8000d26:	e7e8      	b.n	8000cfa <__eqdf2+0x56>
 8000d28:	000007ff 	.word	0x000007ff

08000d2c <__gedf2>:
 8000d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2e:	4657      	mov	r7, sl
 8000d30:	464e      	mov	r6, r9
 8000d32:	4645      	mov	r5, r8
 8000d34:	46de      	mov	lr, fp
 8000d36:	b5e0      	push	{r5, r6, r7, lr}
 8000d38:	000d      	movs	r5, r1
 8000d3a:	030f      	lsls	r7, r1, #12
 8000d3c:	0b39      	lsrs	r1, r7, #12
 8000d3e:	b083      	sub	sp, #12
 8000d40:	0004      	movs	r4, r0
 8000d42:	4680      	mov	r8, r0
 8000d44:	9101      	str	r1, [sp, #4]
 8000d46:	0058      	lsls	r0, r3, #1
 8000d48:	0fe9      	lsrs	r1, r5, #31
 8000d4a:	4f31      	ldr	r7, [pc, #196]	@ (8000e10 <__gedf2+0xe4>)
 8000d4c:	0d40      	lsrs	r0, r0, #21
 8000d4e:	468c      	mov	ip, r1
 8000d50:	006e      	lsls	r6, r5, #1
 8000d52:	0319      	lsls	r1, r3, #12
 8000d54:	4682      	mov	sl, r0
 8000d56:	4691      	mov	r9, r2
 8000d58:	0d76      	lsrs	r6, r6, #21
 8000d5a:	0b09      	lsrs	r1, r1, #12
 8000d5c:	0fd8      	lsrs	r0, r3, #31
 8000d5e:	42be      	cmp	r6, r7
 8000d60:	d01f      	beq.n	8000da2 <__gedf2+0x76>
 8000d62:	45ba      	cmp	sl, r7
 8000d64:	d00f      	beq.n	8000d86 <__gedf2+0x5a>
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d12f      	bne.n	8000dca <__gedf2+0x9e>
 8000d6a:	4655      	mov	r5, sl
 8000d6c:	9e01      	ldr	r6, [sp, #4]
 8000d6e:	4334      	orrs	r4, r6
 8000d70:	2d00      	cmp	r5, #0
 8000d72:	d127      	bne.n	8000dc4 <__gedf2+0x98>
 8000d74:	430a      	orrs	r2, r1
 8000d76:	d03a      	beq.n	8000dee <__gedf2+0xc2>
 8000d78:	2c00      	cmp	r4, #0
 8000d7a:	d145      	bne.n	8000e08 <__gedf2+0xdc>
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	d11a      	bne.n	8000db6 <__gedf2+0x8a>
 8000d80:	2001      	movs	r0, #1
 8000d82:	4240      	negs	r0, r0
 8000d84:	e017      	b.n	8000db6 <__gedf2+0x8a>
 8000d86:	4311      	orrs	r1, r2
 8000d88:	d13b      	bne.n	8000e02 <__gedf2+0xd6>
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d102      	bne.n	8000d94 <__gedf2+0x68>
 8000d8e:	9f01      	ldr	r7, [sp, #4]
 8000d90:	4327      	orrs	r7, r4
 8000d92:	d0f3      	beq.n	8000d7c <__gedf2+0x50>
 8000d94:	4584      	cmp	ip, r0
 8000d96:	d109      	bne.n	8000dac <__gedf2+0x80>
 8000d98:	4663      	mov	r3, ip
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f0      	beq.n	8000d80 <__gedf2+0x54>
 8000d9e:	4660      	mov	r0, ip
 8000da0:	e009      	b.n	8000db6 <__gedf2+0x8a>
 8000da2:	9f01      	ldr	r7, [sp, #4]
 8000da4:	4327      	orrs	r7, r4
 8000da6:	d12c      	bne.n	8000e02 <__gedf2+0xd6>
 8000da8:	45b2      	cmp	sl, r6
 8000daa:	d024      	beq.n	8000df6 <__gedf2+0xca>
 8000dac:	4663      	mov	r3, ip
 8000dae:	2002      	movs	r0, #2
 8000db0:	3b01      	subs	r3, #1
 8000db2:	4018      	ands	r0, r3
 8000db4:	3801      	subs	r0, #1
 8000db6:	b003      	add	sp, #12
 8000db8:	bcf0      	pop	{r4, r5, r6, r7}
 8000dba:	46bb      	mov	fp, r7
 8000dbc:	46b2      	mov	sl, r6
 8000dbe:	46a9      	mov	r9, r5
 8000dc0:	46a0      	mov	r8, r4
 8000dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d0d9      	beq.n	8000d7c <__gedf2+0x50>
 8000dc8:	e7e4      	b.n	8000d94 <__gedf2+0x68>
 8000dca:	4654      	mov	r4, sl
 8000dcc:	2c00      	cmp	r4, #0
 8000dce:	d0ed      	beq.n	8000dac <__gedf2+0x80>
 8000dd0:	4584      	cmp	ip, r0
 8000dd2:	d1eb      	bne.n	8000dac <__gedf2+0x80>
 8000dd4:	4556      	cmp	r6, sl
 8000dd6:	dce9      	bgt.n	8000dac <__gedf2+0x80>
 8000dd8:	dbde      	blt.n	8000d98 <__gedf2+0x6c>
 8000dda:	9b01      	ldr	r3, [sp, #4]
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	d8e5      	bhi.n	8000dac <__gedf2+0x80>
 8000de0:	d1da      	bne.n	8000d98 <__gedf2+0x6c>
 8000de2:	45c8      	cmp	r8, r9
 8000de4:	d8e2      	bhi.n	8000dac <__gedf2+0x80>
 8000de6:	2000      	movs	r0, #0
 8000de8:	45c8      	cmp	r8, r9
 8000dea:	d2e4      	bcs.n	8000db6 <__gedf2+0x8a>
 8000dec:	e7d4      	b.n	8000d98 <__gedf2+0x6c>
 8000dee:	2000      	movs	r0, #0
 8000df0:	2c00      	cmp	r4, #0
 8000df2:	d0e0      	beq.n	8000db6 <__gedf2+0x8a>
 8000df4:	e7da      	b.n	8000dac <__gedf2+0x80>
 8000df6:	4311      	orrs	r1, r2
 8000df8:	d103      	bne.n	8000e02 <__gedf2+0xd6>
 8000dfa:	4584      	cmp	ip, r0
 8000dfc:	d1d6      	bne.n	8000dac <__gedf2+0x80>
 8000dfe:	2000      	movs	r0, #0
 8000e00:	e7d9      	b.n	8000db6 <__gedf2+0x8a>
 8000e02:	2002      	movs	r0, #2
 8000e04:	4240      	negs	r0, r0
 8000e06:	e7d6      	b.n	8000db6 <__gedf2+0x8a>
 8000e08:	4584      	cmp	ip, r0
 8000e0a:	d0e6      	beq.n	8000dda <__gedf2+0xae>
 8000e0c:	e7ce      	b.n	8000dac <__gedf2+0x80>
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	000007ff 	.word	0x000007ff

08000e14 <__ledf2>:
 8000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e16:	4657      	mov	r7, sl
 8000e18:	464e      	mov	r6, r9
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	46de      	mov	lr, fp
 8000e1e:	b5e0      	push	{r5, r6, r7, lr}
 8000e20:	000d      	movs	r5, r1
 8000e22:	030f      	lsls	r7, r1, #12
 8000e24:	0004      	movs	r4, r0
 8000e26:	4680      	mov	r8, r0
 8000e28:	0fe8      	lsrs	r0, r5, #31
 8000e2a:	0b39      	lsrs	r1, r7, #12
 8000e2c:	4684      	mov	ip, r0
 8000e2e:	b083      	sub	sp, #12
 8000e30:	0058      	lsls	r0, r3, #1
 8000e32:	4f30      	ldr	r7, [pc, #192]	@ (8000ef4 <__ledf2+0xe0>)
 8000e34:	0d40      	lsrs	r0, r0, #21
 8000e36:	9101      	str	r1, [sp, #4]
 8000e38:	031e      	lsls	r6, r3, #12
 8000e3a:	0069      	lsls	r1, r5, #1
 8000e3c:	4682      	mov	sl, r0
 8000e3e:	4691      	mov	r9, r2
 8000e40:	0d49      	lsrs	r1, r1, #21
 8000e42:	0b36      	lsrs	r6, r6, #12
 8000e44:	0fd8      	lsrs	r0, r3, #31
 8000e46:	42b9      	cmp	r1, r7
 8000e48:	d020      	beq.n	8000e8c <__ledf2+0x78>
 8000e4a:	45ba      	cmp	sl, r7
 8000e4c:	d00f      	beq.n	8000e6e <__ledf2+0x5a>
 8000e4e:	2900      	cmp	r1, #0
 8000e50:	d12b      	bne.n	8000eaa <__ledf2+0x96>
 8000e52:	9901      	ldr	r1, [sp, #4]
 8000e54:	430c      	orrs	r4, r1
 8000e56:	4651      	mov	r1, sl
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d137      	bne.n	8000ecc <__ledf2+0xb8>
 8000e5c:	4332      	orrs	r2, r6
 8000e5e:	d038      	beq.n	8000ed2 <__ledf2+0xbe>
 8000e60:	2c00      	cmp	r4, #0
 8000e62:	d144      	bne.n	8000eee <__ledf2+0xda>
 8000e64:	2800      	cmp	r0, #0
 8000e66:	d119      	bne.n	8000e9c <__ledf2+0x88>
 8000e68:	2001      	movs	r0, #1
 8000e6a:	4240      	negs	r0, r0
 8000e6c:	e016      	b.n	8000e9c <__ledf2+0x88>
 8000e6e:	4316      	orrs	r6, r2
 8000e70:	d113      	bne.n	8000e9a <__ledf2+0x86>
 8000e72:	2900      	cmp	r1, #0
 8000e74:	d102      	bne.n	8000e7c <__ledf2+0x68>
 8000e76:	9f01      	ldr	r7, [sp, #4]
 8000e78:	4327      	orrs	r7, r4
 8000e7a:	d0f3      	beq.n	8000e64 <__ledf2+0x50>
 8000e7c:	4584      	cmp	ip, r0
 8000e7e:	d020      	beq.n	8000ec2 <__ledf2+0xae>
 8000e80:	4663      	mov	r3, ip
 8000e82:	2002      	movs	r0, #2
 8000e84:	3b01      	subs	r3, #1
 8000e86:	4018      	ands	r0, r3
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e007      	b.n	8000e9c <__ledf2+0x88>
 8000e8c:	9f01      	ldr	r7, [sp, #4]
 8000e8e:	4327      	orrs	r7, r4
 8000e90:	d103      	bne.n	8000e9a <__ledf2+0x86>
 8000e92:	458a      	cmp	sl, r1
 8000e94:	d1f4      	bne.n	8000e80 <__ledf2+0x6c>
 8000e96:	4316      	orrs	r6, r2
 8000e98:	d01f      	beq.n	8000eda <__ledf2+0xc6>
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	b003      	add	sp, #12
 8000e9e:	bcf0      	pop	{r4, r5, r6, r7}
 8000ea0:	46bb      	mov	fp, r7
 8000ea2:	46b2      	mov	sl, r6
 8000ea4:	46a9      	mov	r9, r5
 8000ea6:	46a0      	mov	r8, r4
 8000ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eaa:	4654      	mov	r4, sl
 8000eac:	2c00      	cmp	r4, #0
 8000eae:	d0e7      	beq.n	8000e80 <__ledf2+0x6c>
 8000eb0:	4584      	cmp	ip, r0
 8000eb2:	d1e5      	bne.n	8000e80 <__ledf2+0x6c>
 8000eb4:	4551      	cmp	r1, sl
 8000eb6:	dce3      	bgt.n	8000e80 <__ledf2+0x6c>
 8000eb8:	db03      	blt.n	8000ec2 <__ledf2+0xae>
 8000eba:	9b01      	ldr	r3, [sp, #4]
 8000ebc:	42b3      	cmp	r3, r6
 8000ebe:	d8df      	bhi.n	8000e80 <__ledf2+0x6c>
 8000ec0:	d00f      	beq.n	8000ee2 <__ledf2+0xce>
 8000ec2:	4663      	mov	r3, ip
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0cf      	beq.n	8000e68 <__ledf2+0x54>
 8000ec8:	4660      	mov	r0, ip
 8000eca:	e7e7      	b.n	8000e9c <__ledf2+0x88>
 8000ecc:	2c00      	cmp	r4, #0
 8000ece:	d0c9      	beq.n	8000e64 <__ledf2+0x50>
 8000ed0:	e7d4      	b.n	8000e7c <__ledf2+0x68>
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	2c00      	cmp	r4, #0
 8000ed6:	d0e1      	beq.n	8000e9c <__ledf2+0x88>
 8000ed8:	e7d2      	b.n	8000e80 <__ledf2+0x6c>
 8000eda:	4584      	cmp	ip, r0
 8000edc:	d1d0      	bne.n	8000e80 <__ledf2+0x6c>
 8000ede:	2000      	movs	r0, #0
 8000ee0:	e7dc      	b.n	8000e9c <__ledf2+0x88>
 8000ee2:	45c8      	cmp	r8, r9
 8000ee4:	d8cc      	bhi.n	8000e80 <__ledf2+0x6c>
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	45c8      	cmp	r8, r9
 8000eea:	d2d7      	bcs.n	8000e9c <__ledf2+0x88>
 8000eec:	e7e9      	b.n	8000ec2 <__ledf2+0xae>
 8000eee:	4584      	cmp	ip, r0
 8000ef0:	d0e3      	beq.n	8000eba <__ledf2+0xa6>
 8000ef2:	e7c5      	b.n	8000e80 <__ledf2+0x6c>
 8000ef4:	000007ff 	.word	0x000007ff

08000ef8 <__aeabi_f2d>:
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	0242      	lsls	r2, r0, #9
 8000efc:	0043      	lsls	r3, r0, #1
 8000efe:	0fc4      	lsrs	r4, r0, #31
 8000f00:	20fe      	movs	r0, #254	@ 0xfe
 8000f02:	0e1b      	lsrs	r3, r3, #24
 8000f04:	1c59      	adds	r1, r3, #1
 8000f06:	0a55      	lsrs	r5, r2, #9
 8000f08:	4208      	tst	r0, r1
 8000f0a:	d00c      	beq.n	8000f26 <__aeabi_f2d+0x2e>
 8000f0c:	21e0      	movs	r1, #224	@ 0xe0
 8000f0e:	0089      	lsls	r1, r1, #2
 8000f10:	468c      	mov	ip, r1
 8000f12:	076d      	lsls	r5, r5, #29
 8000f14:	0b12      	lsrs	r2, r2, #12
 8000f16:	4463      	add	r3, ip
 8000f18:	051b      	lsls	r3, r3, #20
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	07e4      	lsls	r4, r4, #31
 8000f1e:	4323      	orrs	r3, r4
 8000f20:	0028      	movs	r0, r5
 8000f22:	0019      	movs	r1, r3
 8000f24:	bd70      	pop	{r4, r5, r6, pc}
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d114      	bne.n	8000f54 <__aeabi_f2d+0x5c>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d01b      	beq.n	8000f66 <__aeabi_f2d+0x6e>
 8000f2e:	0028      	movs	r0, r5
 8000f30:	f000 f82a 	bl	8000f88 <__clzsi2>
 8000f34:	280a      	cmp	r0, #10
 8000f36:	dc1c      	bgt.n	8000f72 <__aeabi_f2d+0x7a>
 8000f38:	230b      	movs	r3, #11
 8000f3a:	002a      	movs	r2, r5
 8000f3c:	1a1b      	subs	r3, r3, r0
 8000f3e:	40da      	lsrs	r2, r3
 8000f40:	0003      	movs	r3, r0
 8000f42:	3315      	adds	r3, #21
 8000f44:	409d      	lsls	r5, r3
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <__aeabi_f2d+0x88>)
 8000f48:	0312      	lsls	r2, r2, #12
 8000f4a:	1a1b      	subs	r3, r3, r0
 8000f4c:	055b      	lsls	r3, r3, #21
 8000f4e:	0b12      	lsrs	r2, r2, #12
 8000f50:	0d5b      	lsrs	r3, r3, #21
 8000f52:	e7e1      	b.n	8000f18 <__aeabi_f2d+0x20>
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d009      	beq.n	8000f6c <__aeabi_f2d+0x74>
 8000f58:	0b13      	lsrs	r3, r2, #12
 8000f5a:	2280      	movs	r2, #128	@ 0x80
 8000f5c:	0312      	lsls	r2, r2, #12
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	076d      	lsls	r5, r5, #29
 8000f62:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <__aeabi_f2d+0x8c>)
 8000f64:	e7d8      	b.n	8000f18 <__aeabi_f2d+0x20>
 8000f66:	2300      	movs	r3, #0
 8000f68:	2200      	movs	r2, #0
 8000f6a:	e7d5      	b.n	8000f18 <__aeabi_f2d+0x20>
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <__aeabi_f2d+0x8c>)
 8000f70:	e7d2      	b.n	8000f18 <__aeabi_f2d+0x20>
 8000f72:	0003      	movs	r3, r0
 8000f74:	002a      	movs	r2, r5
 8000f76:	3b0b      	subs	r3, #11
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	2500      	movs	r5, #0
 8000f7c:	e7e3      	b.n	8000f46 <__aeabi_f2d+0x4e>
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	00000389 	.word	0x00000389
 8000f84:	000007ff 	.word	0x000007ff

08000f88 <__clzsi2>:
 8000f88:	211c      	movs	r1, #28
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	041b      	lsls	r3, r3, #16
 8000f8e:	4298      	cmp	r0, r3
 8000f90:	d301      	bcc.n	8000f96 <__clzsi2+0xe>
 8000f92:	0c00      	lsrs	r0, r0, #16
 8000f94:	3910      	subs	r1, #16
 8000f96:	0a1b      	lsrs	r3, r3, #8
 8000f98:	4298      	cmp	r0, r3
 8000f9a:	d301      	bcc.n	8000fa0 <__clzsi2+0x18>
 8000f9c:	0a00      	lsrs	r0, r0, #8
 8000f9e:	3908      	subs	r1, #8
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	4298      	cmp	r0, r3
 8000fa4:	d301      	bcc.n	8000faa <__clzsi2+0x22>
 8000fa6:	0900      	lsrs	r0, r0, #4
 8000fa8:	3904      	subs	r1, #4
 8000faa:	a202      	add	r2, pc, #8	@ (adr r2, 8000fb4 <__clzsi2+0x2c>)
 8000fac:	5c10      	ldrb	r0, [r2, r0]
 8000fae:	1840      	adds	r0, r0, r1
 8000fb0:	4770      	bx	lr
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	02020304 	.word	0x02020304
 8000fb8:	01010101 	.word	0x01010101
	...

08000fc4 <adc_reset>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int8_t adc_reset()
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 8000fca:	240f      	movs	r4, #15
 8000fcc:	193b      	adds	r3, r7, r4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
	status = HAL_ADC_Stop_DMA(&hadc1);
 8000fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80010c8 <adc_reset+0x104>)
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f005 f9fd 	bl	80063d4 <HAL_ADC_Stop_DMA>
 8000fda:	0003      	movs	r3, r0
 8000fdc:	001a      	movs	r2, r3
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	701a      	strb	r2, [r3, #0]
	status |= HAL_ADC_DeInit(&hadc1);
 8000fe2:	4b39      	ldr	r3, [pc, #228]	@ (80010c8 <adc_reset+0x104>)
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f005 f8cb 	bl	8006180 <HAL_ADC_DeInit>
 8000fea:	0003      	movs	r3, r0
 8000fec:	b259      	sxtb	r1, r3
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	193a      	adds	r2, r7, r4
 8000ff2:	7812      	ldrb	r2, [r2, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	701a      	strb	r2, [r3, #0]
	__HAL_RCC_ADC_FORCE_RESET();
 8000ff8:	4b34      	ldr	r3, [pc, #208]	@ (80010cc <adc_reset+0x108>)
 8000ffa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ffc:	4b33      	ldr	r3, [pc, #204]	@ (80010cc <adc_reset+0x108>)
 8000ffe:	2180      	movs	r1, #128	@ 0x80
 8001000:	0349      	lsls	r1, r1, #13
 8001002:	430a      	orrs	r2, r1
 8001004:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_Delay(10);
 8001006:	200a      	movs	r0, #10
 8001008:	f004 fd76 	bl	8005af8 <HAL_Delay>
	__HAL_RCC_ADC_RELEASE_RESET();
 800100c:	4b2f      	ldr	r3, [pc, #188]	@ (80010cc <adc_reset+0x108>)
 800100e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001010:	4b2e      	ldr	r3, [pc, #184]	@ (80010cc <adc_reset+0x108>)
 8001012:	492f      	ldr	r1, [pc, #188]	@ (80010d0 <adc_reset+0x10c>)
 8001014:	400a      	ands	r2, r1
 8001016:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_Delay(10);
 8001018:	200a      	movs	r0, #10
 800101a:	f004 fd6d 	bl	8005af8 <HAL_Delay>
	status |= HAL_ADC_Init(&hadc1);
 800101e:	4b2a      	ldr	r3, [pc, #168]	@ (80010c8 <adc_reset+0x104>)
 8001020:	0018      	movs	r0, r3
 8001022:	f004 ff07 	bl	8005e34 <HAL_ADC_Init>
 8001026:	0003      	movs	r3, r0
 8001028:	b259      	sxtb	r1, r3
 800102a:	193b      	adds	r3, r7, r4
 800102c:	193a      	adds	r2, r7, r4
 800102e:	7812      	ldrb	r2, [r2, #0]
 8001030:	430a      	orrs	r2, r1
 8001032:	701a      	strb	r2, [r3, #0]

	ADC_ChannelConfTypeDef sConfig = {0};
 8001034:	003b      	movs	r3, r7
 8001036:	0018      	movs	r0, r3
 8001038:	230c      	movs	r3, #12
 800103a:	001a      	movs	r2, r3
 800103c:	2100      	movs	r1, #0
 800103e:	f009 fe17 	bl	800ac70 <memset>

	sConfig.Channel = ADC_CHANNEL_0;
 8001042:	003b      	movs	r3, r7
 8001044:	2201      	movs	r2, #1
 8001046:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001048:	003b      	movs	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800104e:	003b      	movs	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
	status |= HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001054:	003a      	movs	r2, r7
 8001056:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <adc_reset+0x104>)
 8001058:	0011      	movs	r1, r2
 800105a:	0018      	movs	r0, r3
 800105c:	f005 fa3c 	bl	80064d8 <HAL_ADC_ConfigChannel>
 8001060:	0003      	movs	r3, r0
 8001062:	b259      	sxtb	r1, r3
 8001064:	193b      	adds	r3, r7, r4
 8001066:	193a      	adds	r2, r7, r4
 8001068:	7812      	ldrb	r2, [r2, #0]
 800106a:	430a      	orrs	r2, r1
 800106c:	701a      	strb	r2, [r3, #0]

	sConfig.Channel = ADC_CHANNEL_1;
 800106e:	003b      	movs	r3, r7
 8001070:	4a18      	ldr	r2, [pc, #96]	@ (80010d4 <adc_reset+0x110>)
 8001072:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001074:	003b      	movs	r3, r7
 8001076:	2204      	movs	r2, #4
 8001078:	605a      	str	r2, [r3, #4]
	status |= HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800107a:	003a      	movs	r2, r7
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <adc_reset+0x104>)
 800107e:	0011      	movs	r1, r2
 8001080:	0018      	movs	r0, r3
 8001082:	f005 fa29 	bl	80064d8 <HAL_ADC_ConfigChannel>
 8001086:	0003      	movs	r3, r0
 8001088:	b259      	sxtb	r1, r3
 800108a:	193b      	adds	r3, r7, r4
 800108c:	193a      	adds	r2, r7, r4
 800108e:	7812      	ldrb	r2, [r2, #0]
 8001090:	430a      	orrs	r2, r1
 8001092:	701a      	strb	r2, [r3, #0]

	sConfig.Channel = ADC_CHANNEL_2;
 8001094:	003b      	movs	r3, r7
 8001096:	4a10      	ldr	r2, [pc, #64]	@ (80010d8 <adc_reset+0x114>)
 8001098:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 800109a:	003b      	movs	r3, r7
 800109c:	2208      	movs	r2, #8
 800109e:	605a      	str	r2, [r3, #4]
	status |= HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80010a0:	003a      	movs	r2, r7
 80010a2:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <adc_reset+0x104>)
 80010a4:	0011      	movs	r1, r2
 80010a6:	0018      	movs	r0, r3
 80010a8:	f005 fa16 	bl	80064d8 <HAL_ADC_ConfigChannel>
 80010ac:	0003      	movs	r3, r0
 80010ae:	b259      	sxtb	r1, r3
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	193a      	adds	r2, r7, r4
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	701a      	strb	r2, [r3, #0]
	return status;
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b25b      	sxtb	r3, r3
}
 80010c0:	0018      	movs	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b005      	add	sp, #20
 80010c6:	bd90      	pop	{r4, r7, pc}
 80010c8:	2000004c 	.word	0x2000004c
 80010cc:	40021000 	.word	0x40021000
 80010d0:	ffefffff 	.word	0xffefffff
 80010d4:	04000002 	.word	0x04000002
 80010d8:	08000004 	.word	0x08000004

080010dc <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	adc_err_int = 1U;
 80010e4:	4b03      	ldr	r3, [pc, #12]	@ (80010f4 <HAL_ADC_ErrorCallback+0x18>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
}
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b002      	add	sp, #8
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			@ (mov r8, r8)
 80010f4:	20000366 	.word	0x20000366

080010f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int8_t modbus_status = HAL_OK;
 80010fe:	230f      	movs	r3, #15
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
	int8_t i2c_status = HAL_OK;
 8001106:	230c      	movs	r3, #12
 8001108:	18fb      	adds	r3, r7, r3
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
	int8_t adc_status = HAL_OK;
 800110e:	230b      	movs	r3, #11
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
	uint8_t modbus_tx_len = 0;
 8001116:	003b      	movs	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
	uint8_t prev_adc_shutdown = 0;
 800111c:	230e      	movs	r3, #14
 800111e:	18fb      	adds	r3, r7, r3
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001124:	f004 fc6b 	bl	80059fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001128:	f000 fb86 	bl	8001838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112c:	f000 fd0c 	bl	8001b48 <MX_GPIO_Init>
  MX_DMA_Init();
 8001130:	f000 fcdc 	bl	8001aec <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001134:	f000 fc8a 	bl	8001a4c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001138:	f000 fbbc 	bl	80018b4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800113c:	f000 fc46 	bl	80019cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

    if(modbus_set_rx() != HAL_OK)
 8001140:	f001 f99e 	bl	8002480 <modbus_set_rx>
 8001144:	1e03      	subs	r3, r0, #0
 8001146:	d001      	beq.n	800114c <main+0x54>
    {
    	Error_Handler();
 8001148:	f000 fda2 	bl	8001c90 <Error_Handler>
    }

	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)(&holding_register_database[ADC_0]), 3) != HAL_OK)
 800114c:	49b1      	ldr	r1, [pc, #708]	@ (8001414 <main+0x31c>)
 800114e:	4bb2      	ldr	r3, [pc, #712]	@ (8001418 <main+0x320>)
 8001150:	2203      	movs	r2, #3
 8001152:	0018      	movs	r0, r3
 8001154:	f005 f8b0 	bl	80062b8 <HAL_ADC_Start_DMA>
 8001158:	1e03      	subs	r3, r0, #0
 800115a:	d001      	beq.n	8001160 <main+0x68>
	{
		Error_Handler();
 800115c:	f000 fd98 	bl	8001c90 <Error_Handler>
	}

	adc_err_int = 0U;
 8001160:	4bae      	ldr	r3, [pc, #696]	@ (800141c <main+0x324>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]

	// Initialise the VL53L0X
	statInfo_t_VL53L0X* distanceStr = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
	i2c_status = vl53l0x_init(1);
 800116a:	250c      	movs	r5, #12
 800116c:	197c      	adds	r4, r7, r5
 800116e:	2001      	movs	r0, #1
 8001170:	f001 ffe8 	bl	8003144 <vl53l0x_init>
 8001174:	0003      	movs	r3, r0
 8001176:	7023      	strb	r3, [r4, #0]
	if(i2c_status != HAL_OK)
 8001178:	197b      	adds	r3, r7, r5
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b25b      	sxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d006      	beq.n	8001190 <main+0x98>
	{
		holding_register_database[VL53L0X_ERRORS] |= (1U << VL53L0X_INIT_ERROR);
 8001182:	4ba7      	ldr	r3, [pc, #668]	@ (8001420 <main+0x328>)
 8001184:	895b      	ldrh	r3, [r3, #10]
 8001186:	2201      	movs	r2, #1
 8001188:	4313      	orrs	r3, r2
 800118a:	b29a      	uxth	r2, r3
 800118c:	4ba4      	ldr	r3, [pc, #656]	@ (8001420 <main+0x328>)
 800118e:	815a      	strh	r2, [r3, #10]
	}

	// Configure the sensor for high accuracy and speed in 20 cm.
	i2c_status = vl53l0x_set_signal_rate_limit(200);
 8001190:	250c      	movs	r5, #12
 8001192:	197c      	adds	r4, r7, r5
 8001194:	4ba3      	ldr	r3, [pc, #652]	@ (8001424 <main+0x32c>)
 8001196:	1c18      	adds	r0, r3, #0
 8001198:	f003 f8b6 	bl	8004308 <vl53l0x_set_signal_rate_limit>
 800119c:	0003      	movs	r3, r0
 800119e:	7023      	strb	r3, [r4, #0]
	if(i2c_status != HAL_OK)
 80011a0:	197b      	adds	r3, r7, r5
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d006      	beq.n	80011b8 <main+0xc0>
	{
		holding_register_database[VL53L0X_ERRORS] |= (1U << VL53L0X_SIGNAL_RATE_LIMIT_ERROR);
 80011aa:	4b9d      	ldr	r3, [pc, #628]	@ (8001420 <main+0x328>)
 80011ac:	895b      	ldrh	r3, [r3, #10]
 80011ae:	2202      	movs	r2, #2
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b9a      	ldr	r3, [pc, #616]	@ (8001420 <main+0x328>)
 80011b6:	815a      	strh	r2, [r3, #10]
	}
	i2c_status |= vl53l0x_set_measurement_timing_budget(300 * 1000UL);
 80011b8:	4b9b      	ldr	r3, [pc, #620]	@ (8001428 <main+0x330>)
 80011ba:	0018      	movs	r0, r3
 80011bc:	f003 f8d2 	bl	8004364 <vl53l0x_set_measurement_timing_budget>
 80011c0:	0003      	movs	r3, r0
 80011c2:	0019      	movs	r1, r3
 80011c4:	200c      	movs	r0, #12
 80011c6:	183b      	adds	r3, r7, r0
 80011c8:	183a      	adds	r2, r7, r0
 80011ca:	7812      	ldrb	r2, [r2, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	701a      	strb	r2, [r3, #0]
	if(i2c_status != HAL_OK)
 80011d0:	183b      	adds	r3, r7, r0
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d006      	beq.n	80011e8 <main+0xf0>
	{
		holding_register_database[VL53L0X_ERRORS] |= (1U << VL53L0X_TIMING_BUDGET_ERROR);
 80011da:	4b91      	ldr	r3, [pc, #580]	@ (8001420 <main+0x328>)
 80011dc:	895b      	ldrh	r3, [r3, #10]
 80011de:	2204      	movs	r2, #4
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001420 <main+0x328>)
 80011e6:	815a      	strh	r2, [r3, #10]
	}
	i2c_status |= vl53l0x_set_vcsel_pulse_period(VcselPeriodPreRange, 18);
 80011e8:	2112      	movs	r1, #18
 80011ea:	2000      	movs	r0, #0
 80011ec:	f003 f9b2 	bl	8004554 <vl53l0x_set_vcsel_pulse_period>
 80011f0:	0003      	movs	r3, r0
 80011f2:	0019      	movs	r1, r3
 80011f4:	200c      	movs	r0, #12
 80011f6:	183b      	adds	r3, r7, r0
 80011f8:	183a      	adds	r2, r7, r0
 80011fa:	7812      	ldrb	r2, [r2, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	701a      	strb	r2, [r3, #0]
	if(i2c_status != HAL_OK)
 8001200:	183b      	adds	r3, r7, r0
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b25b      	sxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d006      	beq.n	8001218 <main+0x120>
	{
		holding_register_database[VL53L0X_ERRORS] |= (1U << VL53L0X_VCSEL_PULSE_ERROR);
 800120a:	4b85      	ldr	r3, [pc, #532]	@ (8001420 <main+0x328>)
 800120c:	895b      	ldrh	r3, [r3, #10]
 800120e:	2208      	movs	r2, #8
 8001210:	4313      	orrs	r3, r2
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b82      	ldr	r3, [pc, #520]	@ (8001420 <main+0x328>)
 8001216:	815a      	strh	r2, [r3, #10]
	}
	i2c_status |= vl53l0x_set_vcsel_pulse_period(VcselPeriodFinalRange, 14);
 8001218:	210e      	movs	r1, #14
 800121a:	2001      	movs	r0, #1
 800121c:	f003 f99a 	bl	8004554 <vl53l0x_set_vcsel_pulse_period>
 8001220:	0003      	movs	r3, r0
 8001222:	0019      	movs	r1, r3
 8001224:	200c      	movs	r0, #12
 8001226:	183b      	adds	r3, r7, r0
 8001228:	183a      	adds	r2, r7, r0
 800122a:	7812      	ldrb	r2, [r2, #0]
 800122c:	430a      	orrs	r2, r1
 800122e:	701a      	strb	r2, [r3, #0]
	if(i2c_status != HAL_OK)
 8001230:	183b      	adds	r3, r7, r0
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b25b      	sxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <main+0x150>
	{
		holding_register_database[VL53L0X_ERRORS] |= (1U << VL53L0X_VCSEL_PULSE_ERROR);
 800123a:	4b79      	ldr	r3, [pc, #484]	@ (8001420 <main+0x328>)
 800123c:	895b      	ldrh	r3, [r3, #10]
 800123e:	2208      	movs	r2, #8
 8001240:	4313      	orrs	r3, r2
 8001242:	b29a      	uxth	r2, r3
 8001244:	4b76      	ldr	r3, [pc, #472]	@ (8001420 <main+0x328>)
 8001246:	815a      	strh	r2, [r3, #10]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    // Update the GPIO_READ register
		GPIO_PinState oil_high = HAL_GPIO_ReadPin(Oil_High_GPIO_Port, Oil_High_Pin);
 8001248:	1cfc      	adds	r4, r7, #3
 800124a:	2380      	movs	r3, #128	@ 0x80
 800124c:	021a      	lsls	r2, r3, #8
 800124e:	23a0      	movs	r3, #160	@ 0xa0
 8001250:	05db      	lsls	r3, r3, #23
 8001252:	0011      	movs	r1, r2
 8001254:	0018      	movs	r0, r3
 8001256:	f006 fbc1 	bl	80079dc <HAL_GPIO_ReadPin>
 800125a:	0003      	movs	r3, r0
 800125c:	7023      	strb	r3, [r4, #0]
		GPIO_PinState oil_low = HAL_GPIO_ReadPin(Oil_Low_GPIO_Port, Oil_Low_Pin);
 800125e:	1cbc      	adds	r4, r7, #2
 8001260:	4b72      	ldr	r3, [pc, #456]	@ (800142c <main+0x334>)
 8001262:	2101      	movs	r1, #1
 8001264:	0018      	movs	r0, r3
 8001266:	f006 fbb9 	bl	80079dc <HAL_GPIO_ReadPin>
 800126a:	0003      	movs	r3, r0
 800126c:	7023      	strb	r3, [r4, #0]
		GPIO_PinState oil_estop = HAL_GPIO_ReadPin(Oil_E_Stop_GPIO_Port, Oil_E_Stop_Pin);
 800126e:	1c7c      	adds	r4, r7, #1
 8001270:	4b6e      	ldr	r3, [pc, #440]	@ (800142c <main+0x334>)
 8001272:	2102      	movs	r1, #2
 8001274:	0018      	movs	r0, r3
 8001276:	f006 fbb1 	bl	80079dc <HAL_GPIO_ReadPin>
 800127a:	0003      	movs	r3, r0
 800127c:	7023      	strb	r3, [r4, #0]

		holding_register_database[GPIO_READ] = ((oil_high << OIL_HIGH) | (oil_low << OIL_LOW) | (oil_estop << OIL_ESTOP));
 800127e:	1cfb      	adds	r3, r7, #3
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b21a      	sxth	r2, r3
 8001284:	1cbb      	adds	r3, r7, #2
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21a      	sxth	r2, r3
 8001290:	1c7b      	adds	r3, r7, #1
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	b21b      	sxth	r3, r3
 8001298:	4313      	orrs	r3, r2
 800129a:	b21b      	sxth	r3, r3
 800129c:	b29a      	uxth	r2, r3
 800129e:	4b60      	ldr	r3, [pc, #384]	@ (8001420 <main+0x328>)
 80012a0:	839a      	strh	r2, [r3, #28]

		if(prev_gpio_write_register != holding_register_database[GPIO_WRITE])
 80012a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001420 <main+0x328>)
 80012a4:	8bda      	ldrh	r2, [r3, #30]
 80012a6:	4b62      	ldr	r3, [pc, #392]	@ (8001430 <main+0x338>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d100      	bne.n	80012b0 <main+0x1b8>
 80012ae:	e0fd      	b.n	80014ac <main+0x3b4>
		{
			if((prev_gpio_write_register & MCU_DCV_A_MASK) != (holding_register_database[GPIO_WRITE] & MCU_DCV_A_MASK))
 80012b0:	4b5b      	ldr	r3, [pc, #364]	@ (8001420 <main+0x328>)
 80012b2:	8bda      	ldrh	r2, [r3, #30]
 80012b4:	4b5e      	ldr	r3, [pc, #376]	@ (8001430 <main+0x338>)
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	4053      	eors	r3, r2
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	001a      	movs	r2, r3
 80012be:	2301      	movs	r3, #1
 80012c0:	4013      	ands	r3, r2
 80012c2:	d053      	beq.n	800136c <main+0x274>
			{
				// If A wants to be high
				if((holding_register_database[GPIO_WRITE] & MCU_DCV_A_MASK) != 0)
 80012c4:	4b56      	ldr	r3, [pc, #344]	@ (8001420 <main+0x328>)
 80012c6:	8bdb      	ldrh	r3, [r3, #30]
 80012c8:	001a      	movs	r2, r3
 80012ca:	2301      	movs	r3, #1
 80012cc:	4013      	ands	r3, r2
 80012ce:	d042      	beq.n	8001356 <main+0x25e>
				{
					// If B wants to be low
					if((holding_register_database[GPIO_WRITE] & MCU_DCV_B_MASK) == 0)
 80012d0:	4b53      	ldr	r3, [pc, #332]	@ (8001420 <main+0x328>)
 80012d2:	8bdb      	ldrh	r3, [r3, #30]
 80012d4:	001a      	movs	r2, r3
 80012d6:	2302      	movs	r3, #2
 80012d8:	4013      	ands	r3, r2
 80012da:	d126      	bne.n	800132a <main+0x232>
					{
						// If B is high but B wants to be low
						if((prev_gpio_write_register & MCU_DCV_B_MASK) != 0)
 80012dc:	4b54      	ldr	r3, [pc, #336]	@ (8001430 <main+0x338>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	001a      	movs	r2, r3
 80012e2:	2302      	movs	r3, #2
 80012e4:	4013      	ands	r3, r2
 80012e6:	d041      	beq.n	800136c <main+0x274>
						{
							// Write B low first
							HAL_GPIO_WritePin(MCU_DCV_B_GPIO_Port, MCU_DCV_B_Pin,(holding_register_database[GPIO_WRITE] & MCU_DCV_B_MASK));
 80012e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001420 <main+0x328>)
 80012ea:	8bdb      	ldrh	r3, [r3, #30]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2202      	movs	r2, #2
 80012f0:	4013      	ands	r3, r2
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	484f      	ldr	r0, [pc, #316]	@ (8001434 <main+0x33c>)
 80012f6:	001a      	movs	r2, r3
 80012f8:	2102      	movs	r1, #2
 80012fa:	f006 fb8c 	bl	8007a16 <HAL_GPIO_WritePin>
							HAL_Delay(100); // Wait a few seconds for safety
 80012fe:	2064      	movs	r0, #100	@ 0x64
 8001300:	f004 fbfa 	bl	8005af8 <HAL_Delay>
							HAL_GPIO_WritePin(MCU_DCV_A_GPIO_Port, MCU_DCV_A_Pin,(holding_register_database[GPIO_WRITE] & MCU_DCV_A_MASK));
 8001304:	4b46      	ldr	r3, [pc, #280]	@ (8001420 <main+0x328>)
 8001306:	8bdb      	ldrh	r3, [r3, #30]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2201      	movs	r2, #1
 800130c:	4013      	ands	r3, r2
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4848      	ldr	r0, [pc, #288]	@ (8001434 <main+0x33c>)
 8001312:	001a      	movs	r2, r3
 8001314:	2101      	movs	r1, #1
 8001316:	f006 fb7e 	bl	8007a16 <HAL_GPIO_WritePin>
							// Clear B for the prev_gpio_write_register
							prev_gpio_write_register &= ~ MCU_DCV_B_MASK;
 800131a:	4b45      	ldr	r3, [pc, #276]	@ (8001430 <main+0x338>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	2202      	movs	r2, #2
 8001320:	4393      	bics	r3, r2
 8001322:	b29a      	uxth	r2, r3
 8001324:	4b42      	ldr	r3, [pc, #264]	@ (8001430 <main+0x338>)
 8001326:	801a      	strh	r2, [r3, #0]
 8001328:	e020      	b.n	800136c <main+0x274>
					}
					// If B wants to be high -> FORBIDDEN
					else
					{
						// If B is high
						if((prev_gpio_write_register & MCU_DCV_B_MASK) != 0)
 800132a:	4b41      	ldr	r3, [pc, #260]	@ (8001430 <main+0x338>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	001a      	movs	r2, r3
 8001330:	2302      	movs	r3, #2
 8001332:	4013      	ands	r3, r2
 8001334:	d007      	beq.n	8001346 <main+0x24e>
						{
							// Cancel the user request, clear the A bit
							holding_register_database[GPIO_WRITE] &= ~ MCU_DCV_A_MASK;
 8001336:	4b3a      	ldr	r3, [pc, #232]	@ (8001420 <main+0x328>)
 8001338:	8bdb      	ldrh	r3, [r3, #30]
 800133a:	2201      	movs	r2, #1
 800133c:	4393      	bics	r3, r2
 800133e:	b29a      	uxth	r2, r3
 8001340:	4b37      	ldr	r3, [pc, #220]	@ (8001420 <main+0x328>)
 8001342:	83da      	strh	r2, [r3, #30]
 8001344:	e012      	b.n	800136c <main+0x274>
						}
						// If A and B both want to be set high from a low state
						else
						{
							// Cancel the user request, clear the A and B bit
							holding_register_database[GPIO_WRITE] &= ~ (MCU_DCV_A_MASK | MCU_DCV_B_MASK);
 8001346:	4b36      	ldr	r3, [pc, #216]	@ (8001420 <main+0x328>)
 8001348:	8bdb      	ldrh	r3, [r3, #30]
 800134a:	2203      	movs	r2, #3
 800134c:	4393      	bics	r3, r2
 800134e:	b29a      	uxth	r2, r3
 8001350:	4b33      	ldr	r3, [pc, #204]	@ (8001420 <main+0x328>)
 8001352:	83da      	strh	r2, [r3, #30]
 8001354:	e00a      	b.n	800136c <main+0x274>
					}
				}
				// If A wants to be low
				else
				{
					HAL_GPIO_WritePin(MCU_DCV_A_GPIO_Port, MCU_DCV_A_Pin, (holding_register_database[GPIO_WRITE] & MCU_DCV_A_MASK));
 8001356:	4b32      	ldr	r3, [pc, #200]	@ (8001420 <main+0x328>)
 8001358:	8bdb      	ldrh	r3, [r3, #30]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2201      	movs	r2, #1
 800135e:	4013      	ands	r3, r2
 8001360:	b2db      	uxtb	r3, r3
 8001362:	4834      	ldr	r0, [pc, #208]	@ (8001434 <main+0x33c>)
 8001364:	001a      	movs	r2, r3
 8001366:	2101      	movs	r1, #1
 8001368:	f006 fb55 	bl	8007a16 <HAL_GPIO_WritePin>
				}
			}
			if((prev_gpio_write_register & MCU_DCV_B_MASK) != (holding_register_database[GPIO_WRITE] & MCU_DCV_B_MASK))
 800136c:	4b2c      	ldr	r3, [pc, #176]	@ (8001420 <main+0x328>)
 800136e:	8bda      	ldrh	r2, [r3, #30]
 8001370:	4b2f      	ldr	r3, [pc, #188]	@ (8001430 <main+0x338>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	4053      	eors	r3, r2
 8001376:	b29b      	uxth	r3, r3
 8001378:	001a      	movs	r2, r3
 800137a:	2302      	movs	r3, #2
 800137c:	4013      	ands	r3, r2
 800137e:	d100      	bne.n	8001382 <main+0x28a>
 8001380:	e065      	b.n	800144e <main+0x356>
			{
				// If B wants to be high
				if((holding_register_database[GPIO_WRITE] & MCU_DCV_B_MASK) != 0)
 8001382:	4b27      	ldr	r3, [pc, #156]	@ (8001420 <main+0x328>)
 8001384:	8bdb      	ldrh	r3, [r3, #30]
 8001386:	001a      	movs	r2, r3
 8001388:	2302      	movs	r3, #2
 800138a:	4013      	ands	r3, r2
 800138c:	d054      	beq.n	8001438 <main+0x340>
				{
					// If A wants to be low
					if((holding_register_database[GPIO_WRITE] & MCU_DCV_A_MASK) == 0)
 800138e:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <main+0x328>)
 8001390:	8bdb      	ldrh	r3, [r3, #30]
 8001392:	001a      	movs	r2, r3
 8001394:	2301      	movs	r3, #1
 8001396:	4013      	ands	r3, r2
 8001398:	d126      	bne.n	80013e8 <main+0x2f0>
					{
						// If A is high but A wants to be low
						if((prev_gpio_write_register & MCU_DCV_A_MASK) != 0)
 800139a:	4b25      	ldr	r3, [pc, #148]	@ (8001430 <main+0x338>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	001a      	movs	r2, r3
 80013a0:	2301      	movs	r3, #1
 80013a2:	4013      	ands	r3, r2
 80013a4:	d053      	beq.n	800144e <main+0x356>
						{
							// Write A low first
							HAL_GPIO_WritePin(MCU_DCV_A_GPIO_Port, MCU_DCV_A_Pin,(holding_register_database[GPIO_WRITE] & MCU_DCV_A_MASK));
 80013a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001420 <main+0x328>)
 80013a8:	8bdb      	ldrh	r3, [r3, #30]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2201      	movs	r2, #1
 80013ae:	4013      	ands	r3, r2
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	4820      	ldr	r0, [pc, #128]	@ (8001434 <main+0x33c>)
 80013b4:	001a      	movs	r2, r3
 80013b6:	2101      	movs	r1, #1
 80013b8:	f006 fb2d 	bl	8007a16 <HAL_GPIO_WritePin>
							HAL_Delay(100); // Wait a few seconds for safety
 80013bc:	2064      	movs	r0, #100	@ 0x64
 80013be:	f004 fb9b 	bl	8005af8 <HAL_Delay>
							HAL_GPIO_WritePin(MCU_DCV_B_GPIO_Port, MCU_DCV_B_Pin,(holding_register_database[GPIO_WRITE] & MCU_DCV_B_MASK));
 80013c2:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <main+0x328>)
 80013c4:	8bdb      	ldrh	r3, [r3, #30]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2202      	movs	r2, #2
 80013ca:	4013      	ands	r3, r2
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	4819      	ldr	r0, [pc, #100]	@ (8001434 <main+0x33c>)
 80013d0:	001a      	movs	r2, r3
 80013d2:	2102      	movs	r1, #2
 80013d4:	f006 fb1f 	bl	8007a16 <HAL_GPIO_WritePin>
							// Clear A for the prev_gpio_write_register
							prev_gpio_write_register &= ~ MCU_DCV_A_MASK;
 80013d8:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <main+0x338>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	2201      	movs	r2, #1
 80013de:	4393      	bics	r3, r2
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <main+0x338>)
 80013e4:	801a      	strh	r2, [r3, #0]
 80013e6:	e032      	b.n	800144e <main+0x356>
					}
					// If A wants to be high -> FORBIDDEN
					else
					{
						// If A is high
						if((prev_gpio_write_register & MCU_DCV_A_MASK) != 0)
 80013e8:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <main+0x338>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	001a      	movs	r2, r3
 80013ee:	2301      	movs	r3, #1
 80013f0:	4013      	ands	r3, r2
 80013f2:	d007      	beq.n	8001404 <main+0x30c>
						{
							// Cancel the user request, clear the B bit
							holding_register_database[GPIO_WRITE] &= ~ MCU_DCV_B_MASK;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <main+0x328>)
 80013f6:	8bdb      	ldrh	r3, [r3, #30]
 80013f8:	2202      	movs	r2, #2
 80013fa:	4393      	bics	r3, r2
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <main+0x328>)
 8001400:	83da      	strh	r2, [r3, #30]
 8001402:	e024      	b.n	800144e <main+0x356>
						}
						// If A and B both want to be set high from a low state
						else
						{
							// Cancel the user request, clear the A and B bit
							holding_register_database[GPIO_WRITE] &= ~ (MCU_DCV_A_MASK | MCU_DCV_B_MASK);
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <main+0x328>)
 8001406:	8bdb      	ldrh	r3, [r3, #30]
 8001408:	2203      	movs	r2, #3
 800140a:	4393      	bics	r3, r2
 800140c:	b29a      	uxth	r2, r3
 800140e:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <main+0x328>)
 8001410:	83da      	strh	r2, [r3, #30]
 8001412:	e01c      	b.n	800144e <main+0x356>
 8001414:	20000014 	.word	0x20000014
 8001418:	2000004c 	.word	0x2000004c
 800141c:	20000366 	.word	0x20000366
 8001420:	20000000 	.word	0x20000000
 8001424:	43480000 	.word	0x43480000
 8001428:	000493e0 	.word	0x000493e0
 800142c:	50000c00 	.word	0x50000c00
 8001430:	20000364 	.word	0x20000364
 8001434:	50000400 	.word	0x50000400
					}
				}
				// If B wants to be low
				else
				{
					HAL_GPIO_WritePin(MCU_DCV_B_GPIO_Port, MCU_DCV_B_Pin, (holding_register_database[GPIO_WRITE] & MCU_DCV_B_MASK));
 8001438:	4bd1      	ldr	r3, [pc, #836]	@ (8001780 <main+0x688>)
 800143a:	8bdb      	ldrh	r3, [r3, #30]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2202      	movs	r2, #2
 8001440:	4013      	ands	r3, r2
 8001442:	b2db      	uxtb	r3, r3
 8001444:	48cf      	ldr	r0, [pc, #828]	@ (8001784 <main+0x68c>)
 8001446:	001a      	movs	r2, r3
 8001448:	2102      	movs	r1, #2
 800144a:	f006 fae4 	bl	8007a16 <HAL_GPIO_WritePin>
				}
			}
			if((prev_gpio_write_register & HPU_GATE_MASK) != (holding_register_database[GPIO_WRITE] & HPU_GATE_MASK))
 800144e:	4bcc      	ldr	r3, [pc, #816]	@ (8001780 <main+0x688>)
 8001450:	8bda      	ldrh	r2, [r3, #30]
 8001452:	4bcd      	ldr	r3, [pc, #820]	@ (8001788 <main+0x690>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	4053      	eors	r3, r2
 8001458:	b29b      	uxth	r3, r3
 800145a:	001a      	movs	r2, r3
 800145c:	2304      	movs	r3, #4
 800145e:	4013      	ands	r3, r2
 8001460:	d00b      	beq.n	800147a <main+0x382>
			{
				HAL_GPIO_WritePin(HPU_Gate_GPIO_Port, HPU_Gate_Pin, (holding_register_database[GPIO_WRITE] & HPU_GATE_MASK));
 8001462:	4bc7      	ldr	r3, [pc, #796]	@ (8001780 <main+0x688>)
 8001464:	8bdb      	ldrh	r3, [r3, #30]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2204      	movs	r2, #4
 800146a:	4013      	ands	r3, r2
 800146c:	b2da      	uxtb	r2, r3
 800146e:	2380      	movs	r3, #128	@ 0x80
 8001470:	015b      	lsls	r3, r3, #5
 8001472:	48c4      	ldr	r0, [pc, #784]	@ (8001784 <main+0x68c>)
 8001474:	0019      	movs	r1, r3
 8001476:	f006 face 	bl	8007a16 <HAL_GPIO_WritePin>
			}
			if((prev_gpio_write_register & WATER_SOLINOID_MASK) != (holding_register_database[GPIO_WRITE] & WATER_SOLINOID_MASK))
 800147a:	4bc1      	ldr	r3, [pc, #772]	@ (8001780 <main+0x688>)
 800147c:	8bda      	ldrh	r2, [r3, #30]
 800147e:	4bc2      	ldr	r3, [pc, #776]	@ (8001788 <main+0x690>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	4053      	eors	r3, r2
 8001484:	b29b      	uxth	r3, r3
 8001486:	001a      	movs	r2, r3
 8001488:	2308      	movs	r3, #8
 800148a:	4013      	ands	r3, r2
 800148c:	d00a      	beq.n	80014a4 <main+0x3ac>
			{
				HAL_GPIO_WritePin(Water_Solinoid_GPIO_Port, Water_Solinoid_Pin, (holding_register_database[GPIO_WRITE] & WATER_SOLINOID_MASK));
 800148e:	4bbc      	ldr	r3, [pc, #752]	@ (8001780 <main+0x688>)
 8001490:	8bdb      	ldrh	r3, [r3, #30]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2208      	movs	r2, #8
 8001496:	4013      	ands	r3, r2
 8001498:	b2db      	uxtb	r3, r3
 800149a:	48bc      	ldr	r0, [pc, #752]	@ (800178c <main+0x694>)
 800149c:	001a      	movs	r2, r3
 800149e:	2104      	movs	r1, #4
 80014a0:	f006 fab9 	bl	8007a16 <HAL_GPIO_WritePin>
			}
			prev_gpio_write_register = holding_register_database[GPIO_WRITE];
 80014a4:	4bb6      	ldr	r3, [pc, #728]	@ (8001780 <main+0x688>)
 80014a6:	8bda      	ldrh	r2, [r3, #30]
 80014a8:	4bb7      	ldr	r3, [pc, #732]	@ (8001788 <main+0x690>)
 80014aa:	801a      	strh	r2, [r3, #0]
		}

		// Handle Modbus Communication
		if(modbus_rx())
 80014ac:	f000 fc78 	bl	8001da0 <modbus_rx>
 80014b0:	1e03      	subs	r3, r0, #0
 80014b2:	d100      	bne.n	80014b6 <main+0x3be>
 80014b4:	e07f      	b.n	80015b6 <main+0x4be>
		{
			if(get_rx_buffer(0) == holding_register_database[MODBUS_ID]) // Check Slave ID
 80014b6:	2000      	movs	r0, #0
 80014b8:	f001 f8fa 	bl	80026b0 <get_rx_buffer>
 80014bc:	0003      	movs	r3, r0
 80014be:	001a      	movs	r2, r3
 80014c0:	4baf      	ldr	r3, [pc, #700]	@ (8001780 <main+0x688>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d137      	bne.n	8001538 <main+0x440>
			{
				switch(get_rx_buffer(1))
 80014c8:	2001      	movs	r0, #1
 80014ca:	f001 f8f1 	bl	80026b0 <get_rx_buffer>
 80014ce:	0003      	movs	r3, r0
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d002      	beq.n	80014da <main+0x3e2>
 80014d4:	2b10      	cmp	r3, #16
 80014d6:	d009      	beq.n	80014ec <main+0x3f4>
 80014d8:	e011      	b.n	80014fe <main+0x406>
				{
					case 0x03:
					{
						// Return holding registers
						modbus_status = return_holding_registers(&modbus_tx_len);
 80014da:	230f      	movs	r3, #15
 80014dc:	18fc      	adds	r4, r7, r3
 80014de:	003b      	movs	r3, r7
 80014e0:	0018      	movs	r0, r3
 80014e2:	f000 fc6f 	bl	8001dc4 <return_holding_registers>
 80014e6:	0003      	movs	r3, r0
 80014e8:	7023      	strb	r3, [r4, #0]
						break;
 80014ea:	e010      	b.n	800150e <main+0x416>
					}
					case 0x10:
					{
						// Write holding registers
						modbus_status = edit_multiple_registers(&modbus_tx_len);
 80014ec:	230f      	movs	r3, #15
 80014ee:	18fc      	adds	r4, r7, r3
 80014f0:	003b      	movs	r3, r7
 80014f2:	0018      	movs	r0, r3
 80014f4:	f000 fd12 	bl	8001f1c <edit_multiple_registers>
 80014f8:	0003      	movs	r3, r0
 80014fa:	7023      	strb	r3, [r4, #0]
						break;
 80014fc:	e007      	b.n	800150e <main+0x416>
					}
					default:
					{
						modbus_status = modbus_exception(MB_ILLEGAL_FUNCTION);
 80014fe:	230f      	movs	r3, #15
 8001500:	18fc      	adds	r4, r7, r3
 8001502:	2004      	movs	r0, #4
 8001504:	f000 fe0c 	bl	8002120 <modbus_exception>
 8001508:	0003      	movs	r3, r0
 800150a:	7023      	strb	r3, [r4, #0]
						break;
 800150c:	46c0      	nop			@ (mov r8, r8)
					}
				}
				if(modbus_status != 0)
 800150e:	210f      	movs	r1, #15
 8001510:	187b      	adds	r3, r7, r1
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b25b      	sxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d04d      	beq.n	80015b6 <main+0x4be>
				{
					holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 800151a:	4b99      	ldr	r3, [pc, #612]	@ (8001780 <main+0x688>)
 800151c:	891a      	ldrh	r2, [r3, #8]
 800151e:	187b      	adds	r3, r7, r1
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	b25b      	sxtb	r3, r3
 8001524:	3307      	adds	r3, #7
 8001526:	2101      	movs	r1, #1
 8001528:	4099      	lsls	r1, r3
 800152a:	000b      	movs	r3, r1
 800152c:	b29b      	uxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b29a      	uxth	r2, r3
 8001532:	4b93      	ldr	r3, [pc, #588]	@ (8001780 <main+0x688>)
 8001534:	811a      	strh	r2, [r3, #8]
 8001536:	e03e      	b.n	80015b6 <main+0x4be>
				}
			}
			// Special case where you retrieve the modbus ID
			else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8001538:	2000      	movs	r0, #0
 800153a:	f001 f8b9 	bl	80026b0 <get_rx_buffer>
 800153e:	0003      	movs	r3, r0
 8001540:	2bff      	cmp	r3, #255	@ 0xff
 8001542:	d138      	bne.n	80015b6 <main+0x4be>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8001544:	2001      	movs	r0, #1
 8001546:	f001 f8b3 	bl	80026b0 <get_rx_buffer>
 800154a:	0003      	movs	r3, r0
			else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 800154c:	2b03      	cmp	r3, #3
 800154e:	d132      	bne.n	80015b6 <main+0x4be>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8001550:	2002      	movs	r0, #2
 8001552:	f001 f8ad 	bl	80026b0 <get_rx_buffer>
 8001556:	0003      	movs	r3, r0
 8001558:	021c      	lsls	r4, r3, #8
 800155a:	2003      	movs	r0, #3
 800155c:	f001 f8a8 	bl	80026b0 <get_rx_buffer>
 8001560:	0003      	movs	r3, r0
 8001562:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8001564:	d127      	bne.n	80015b6 <main+0x4be>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 8001566:	2004      	movs	r0, #4
 8001568:	f001 f8a2 	bl	80026b0 <get_rx_buffer>
 800156c:	0003      	movs	r3, r0
 800156e:	021c      	lsls	r4, r3, #8
 8001570:	2005      	movs	r0, #5
 8001572:	f001 f89d 	bl	80026b0 <get_rx_buffer>
 8001576:	0003      	movs	r3, r0
 8001578:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 800157a:	2b01      	cmp	r3, #1
 800157c:	d11b      	bne.n	80015b6 <main+0x4be>
			{
				modbus_status = return_holding_registers(&modbus_tx_len);
 800157e:	250f      	movs	r5, #15
 8001580:	197c      	adds	r4, r7, r5
 8001582:	003b      	movs	r3, r7
 8001584:	0018      	movs	r0, r3
 8001586:	f000 fc1d 	bl	8001dc4 <return_holding_registers>
 800158a:	0003      	movs	r3, r0
 800158c:	7023      	strb	r3, [r4, #0]
				if(modbus_status != 0)
 800158e:	0029      	movs	r1, r5
 8001590:	187b      	adds	r3, r7, r1
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b25b      	sxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00d      	beq.n	80015b6 <main+0x4be>
				{
					holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 800159a:	4b79      	ldr	r3, [pc, #484]	@ (8001780 <main+0x688>)
 800159c:	891a      	ldrh	r2, [r3, #8]
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b25b      	sxtb	r3, r3
 80015a4:	3307      	adds	r3, #7
 80015a6:	2101      	movs	r1, #1
 80015a8:	4099      	lsls	r1, r3
 80015aa:	000b      	movs	r3, r1
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b73      	ldr	r3, [pc, #460]	@ (8001780 <main+0x688>)
 80015b4:	811a      	strh	r2, [r3, #8]
				}
			}
		}
		modbus_status = monitor_modbus();
 80015b6:	250f      	movs	r5, #15
 80015b8:	197c      	adds	r4, r7, r5
 80015ba:	f000 ff85 	bl	80024c8 <monitor_modbus>
 80015be:	0003      	movs	r3, r0
 80015c0:	7023      	strb	r3, [r4, #0]
		if(modbus_status != HAL_OK && modbus_status != HAL_BUSY)
 80015c2:	197b      	adds	r3, r7, r5
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d100      	bne.n	80015ce <main+0x4d6>
 80015cc:	e08b      	b.n	80016e6 <main+0x5ee>
 80015ce:	197b      	adds	r3, r7, r5
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d100      	bne.n	80015da <main+0x4e2>
 80015d8:	e085      	b.n	80016e6 <main+0x5ee>
		{
			switch(modbus_status)
 80015da:	197b      	adds	r3, r7, r5
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	2b15      	cmp	r3, #21
 80015e2:	d060      	beq.n	80016a6 <main+0x5ae>
 80015e4:	dd00      	ble.n	80015e8 <main+0x4f0>
 80015e6:	e085      	b.n	80016f4 <main+0x5fc>
 80015e8:	2b14      	cmp	r3, #20
 80015ea:	d03b      	beq.n	8001664 <main+0x56c>
 80015ec:	dd00      	ble.n	80015f0 <main+0x4f8>
 80015ee:	e081      	b.n	80016f4 <main+0x5fc>
 80015f0:	2b12      	cmp	r3, #18
 80015f2:	d000      	beq.n	80015f6 <main+0x4fe>
 80015f4:	e079      	b.n	80016ea <main+0x5f2>
			{
				case MB_TX_TIMEOUT:
				{
					for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 80015f6:	230d      	movs	r3, #13
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
 80015fe:	e028      	b.n	8001652 <main+0x55a>
					{
						modbus_status = modbus_send(modbus_tx_len);
 8001600:	003b      	movs	r3, r7
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	220f      	movs	r2, #15
 8001606:	18bc      	adds	r4, r7, r2
 8001608:	0018      	movs	r0, r3
 800160a:	f000 fe6d 	bl	80022e8 <modbus_send>
 800160e:	0003      	movs	r3, r0
 8001610:	7023      	strb	r3, [r4, #0]
						while(monitor_modbus() == HAL_BUSY);
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	f000 ff58 	bl	80024c8 <monitor_modbus>
 8001618:	0003      	movs	r3, r0
 800161a:	2b02      	cmp	r3, #2
 800161c:	d0fa      	beq.n	8001614 <main+0x51c>
						if(modbus_status != HAL_OK)
 800161e:	210f      	movs	r1, #15
 8001620:	187b      	adds	r3, r7, r1
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b25b      	sxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00d      	beq.n	8001646 <main+0x54e>
						{
							holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 800162a:	4b55      	ldr	r3, [pc, #340]	@ (8001780 <main+0x688>)
 800162c:	891a      	ldrh	r2, [r3, #8]
 800162e:	187b      	adds	r3, r7, r1
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b25b      	sxtb	r3, r3
 8001634:	3307      	adds	r3, #7
 8001636:	2101      	movs	r1, #1
 8001638:	4099      	lsls	r1, r3
 800163a:	000b      	movs	r3, r1
 800163c:	b29b      	uxth	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b29a      	uxth	r2, r3
 8001642:	4b4f      	ldr	r3, [pc, #316]	@ (8001780 <main+0x688>)
 8001644:	811a      	strh	r2, [r3, #8]
					for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 8001646:	210d      	movs	r1, #13
 8001648:	187b      	adds	r3, r7, r1
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	187b      	adds	r3, r7, r1
 800164e:	3201      	adds	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
 8001652:	230d      	movs	r3, #13
 8001654:	18fb      	adds	r3, r7, r3
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b49      	ldr	r3, [pc, #292]	@ (8001780 <main+0x688>)
 800165c:	88db      	ldrh	r3, [r3, #6]
 800165e:	429a      	cmp	r2, r3
 8001660:	d3ce      	bcc.n	8001600 <main+0x508>
						}
					}
				  break;
 8001662:	e047      	b.n	80016f4 <main+0x5fc>
					// Error only relates to Modbus Master Nodes
					break;
				}
				case MB_UART_ERROR:
				{
					modbus_status = modbus_set_rx();
 8001664:	250f      	movs	r5, #15
 8001666:	197c      	adds	r4, r7, r5
 8001668:	f000 ff0a 	bl	8002480 <modbus_set_rx>
 800166c:	0003      	movs	r3, r0
 800166e:	7023      	strb	r3, [r4, #0]
					if(modbus_status != 0)
 8001670:	0029      	movs	r1, r5
 8001672:	187b      	adds	r3, r7, r1
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b25b      	sxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d038      	beq.n	80016ee <main+0x5f6>
					{
						holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 800167c:	4b40      	ldr	r3, [pc, #256]	@ (8001780 <main+0x688>)
 800167e:	891a      	ldrh	r2, [r3, #8]
 8001680:	187b      	adds	r3, r7, r1
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b25b      	sxtb	r3, r3
 8001686:	3307      	adds	r3, #7
 8001688:	2101      	movs	r1, #1
 800168a:	4099      	lsls	r1, r3
 800168c:	000b      	movs	r3, r1
 800168e:	b29b      	uxth	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	b29a      	uxth	r2, r3
 8001694:	4b3a      	ldr	r3, [pc, #232]	@ (8001780 <main+0x688>)
 8001696:	811a      	strh	r2, [r3, #8]
					}
					break;
 8001698:	e029      	b.n	80016ee <main+0x5f6>
				}
				case MB_FATAL_ERROR:
				{
					while(modbus_status != HAL_OK)
					{
						modbus_status = modbus_reset();
 800169a:	230f      	movs	r3, #15
 800169c:	18fc      	adds	r4, r7, r3
 800169e:	f000 fe79 	bl	8002394 <modbus_reset>
 80016a2:	0003      	movs	r3, r0
 80016a4:	7023      	strb	r3, [r4, #0]
					while(modbus_status != HAL_OK)
 80016a6:	250f      	movs	r5, #15
 80016a8:	197b      	adds	r3, r7, r5
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f3      	bne.n	800169a <main+0x5a2>
					}
					modbus_status = modbus_set_rx();
 80016b2:	197c      	adds	r4, r7, r5
 80016b4:	f000 fee4 	bl	8002480 <modbus_set_rx>
 80016b8:	0003      	movs	r3, r0
 80016ba:	7023      	strb	r3, [r4, #0]
					if(modbus_status != 0)
 80016bc:	0029      	movs	r1, r5
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d014      	beq.n	80016f2 <main+0x5fa>
					{
						holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 80016c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001780 <main+0x688>)
 80016ca:	891a      	ldrh	r2, [r3, #8]
 80016cc:	187b      	adds	r3, r7, r1
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	3307      	adds	r3, #7
 80016d4:	2101      	movs	r1, #1
 80016d6:	4099      	lsls	r1, r3
 80016d8:	000b      	movs	r3, r1
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4313      	orrs	r3, r2
 80016de:	b29a      	uxth	r2, r3
 80016e0:	4b27      	ldr	r3, [pc, #156]	@ (8001780 <main+0x688>)
 80016e2:	811a      	strh	r2, [r3, #8]
					}
					break;
 80016e4:	e005      	b.n	80016f2 <main+0x5fa>
				}
				default:
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	e004      	b.n	80016f4 <main+0x5fc>
					break;
 80016ea:	46c0      	nop			@ (mov r8, r8)
 80016ec:	e002      	b.n	80016f4 <main+0x5fc>
					break;
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	e000      	b.n	80016f4 <main+0x5fc>
					break;
 80016f2:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}

		// Handle I2C Communication
		if(!holding_register_database[I2C_SHUTDOWN])
 80016f4:	4b22      	ldr	r3, [pc, #136]	@ (8001780 <main+0x688>)
 80016f6:	89db      	ldrh	r3, [r3, #14]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d115      	bne.n	8001728 <main+0x630>
		{
			// statInfo_t_VL53L0X distanceStr is the statistics read from the sensor.
			i2c_status = vl53l0x_read_range_single(distanceStr, &holding_register_database[LASER_DISTANCE]);
 80016fc:	250c      	movs	r5, #12
 80016fe:	197c      	adds	r4, r7, r5
 8001700:	4a23      	ldr	r2, [pc, #140]	@ (8001790 <main+0x698>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	0011      	movs	r1, r2
 8001706:	0018      	movs	r0, r3
 8001708:	f003 fbcc 	bl	8004ea4 <vl53l0x_read_range_single>
 800170c:	0003      	movs	r3, r0
 800170e:	7023      	strb	r3, [r4, #0]
			if(i2c_status != HAL_OK)
 8001710:	197b      	adds	r3, r7, r5
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b25b      	sxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d006      	beq.n	8001728 <main+0x630>
			{
				holding_register_database[VL53L0X_ERRORS] |= (1U << VL53L0X_AQUISITION_ERROR);
 800171a:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <main+0x688>)
 800171c:	895b      	ldrh	r3, [r3, #10]
 800171e:	2210      	movs	r2, #16
 8001720:	4313      	orrs	r3, r2
 8001722:	b29a      	uxth	r2, r3
 8001724:	4b16      	ldr	r3, [pc, #88]	@ (8001780 <main+0x688>)
 8001726:	815a      	strh	r2, [r3, #10]
			}
		}

		// Handle ADC Errors
		if(adc_err_int != 0U)
 8001728:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <main+0x69c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d03a      	beq.n	80017a8 <main+0x6b0>
		{
			adc_err_int = 0U;
 8001732:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <main+0x69c>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
			holding_register_database[ADC_ERRORS] |= hadc1.ErrorCode;
 8001738:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <main+0x6a0>)
 800173a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800173c:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <main+0x688>)
 800173e:	8a1a      	ldrh	r2, [r3, #16]
 8001740:	b28b      	uxth	r3, r1
 8001742:	4313      	orrs	r3, r2
 8001744:	b29a      	uxth	r2, r3
 8001746:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <main+0x688>)
 8001748:	821a      	strh	r2, [r3, #16]
			adc_status = adc_reset();
 800174a:	250b      	movs	r5, #11
 800174c:	197c      	adds	r4, r7, r5
 800174e:	f7ff fc39 	bl	8000fc4 <adc_reset>
 8001752:	0003      	movs	r3, r0
 8001754:	7023      	strb	r3, [r4, #0]
			if(adc_status != HAL_OK)
 8001756:	197b      	adds	r3, r7, r5
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b25b      	sxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d01d      	beq.n	800179c <main+0x6a4>
			{
				// Fatal Error
				holding_register_database[ADC_ERRORS] |= (1U << 5U);
 8001760:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <main+0x688>)
 8001762:	8a1b      	ldrh	r3, [r3, #16]
 8001764:	2220      	movs	r2, #32
 8001766:	4313      	orrs	r3, r2
 8001768:	b29a      	uxth	r2, r3
 800176a:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <main+0x688>)
 800176c:	821a      	strh	r2, [r3, #16]
				holding_register_database[ADC_SHUTDOWN] = 1;
 800176e:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <main+0x688>)
 8001770:	2201      	movs	r2, #1
 8001772:	825a      	strh	r2, [r3, #18]
				prev_adc_shutdown = 1;
 8001774:	230e      	movs	r3, #14
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	e014      	b.n	80017a8 <main+0x6b0>
 800177e:	46c0      	nop			@ (mov r8, r8)
 8001780:	20000000 	.word	0x20000000
 8001784:	50000400 	.word	0x50000400
 8001788:	20000364 	.word	0x20000364
 800178c:	50000c00 	.word	0x50000c00
 8001790:	2000001a 	.word	0x2000001a
 8001794:	20000366 	.word	0x20000366
 8001798:	2000004c 	.word	0x2000004c
			}
			else
			{
				HAL_ADC_Start_DMA(&hadc1, (uint32_t*)(&holding_register_database[ADC_0]), 3);
 800179c:	4923      	ldr	r1, [pc, #140]	@ (800182c <main+0x734>)
 800179e:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <main+0x738>)
 80017a0:	2203      	movs	r2, #3
 80017a2:	0018      	movs	r0, r3
 80017a4:	f004 fd88 	bl	80062b8 <HAL_ADC_Start_DMA>
			}
		}
		if(prev_adc_shutdown != holding_register_database[ADC_SHUTDOWN])
 80017a8:	210e      	movs	r1, #14
 80017aa:	187b      	adds	r3, r7, r1
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	4b20      	ldr	r3, [pc, #128]	@ (8001834 <main+0x73c>)
 80017b2:	8a5b      	ldrh	r3, [r3, #18]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d100      	bne.n	80017ba <main+0x6c2>
 80017b8:	e546      	b.n	8001248 <main+0x150>
		{
			if(prev_adc_shutdown == 1)
 80017ba:	187b      	adds	r3, r7, r1
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d11c      	bne.n	80017fc <main+0x704>
			{
				adc_status = adc_reset();
 80017c2:	250b      	movs	r5, #11
 80017c4:	197c      	adds	r4, r7, r5
 80017c6:	f7ff fbfd 	bl	8000fc4 <adc_reset>
 80017ca:	0003      	movs	r3, r0
 80017cc:	7023      	strb	r3, [r4, #0]
				if(adc_status != HAL_OK)
 80017ce:	197b      	adds	r3, r7, r5
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00a      	beq.n	80017ee <main+0x6f6>
				{
					// Fatal Error
					holding_register_database[ADC_ERRORS] |= (1U << 5U);
 80017d8:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <main+0x73c>)
 80017da:	8a1b      	ldrh	r3, [r3, #16]
 80017dc:	2220      	movs	r2, #32
 80017de:	4313      	orrs	r3, r2
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <main+0x73c>)
 80017e4:	821a      	strh	r2, [r3, #16]
					holding_register_database[ADC_SHUTDOWN] = 1;
 80017e6:	4b13      	ldr	r3, [pc, #76]	@ (8001834 <main+0x73c>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	825a      	strh	r2, [r3, #18]
 80017ec:	e018      	b.n	8001820 <main+0x728>
				}
				else
				{
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)(&holding_register_database[ADC_0]), 3);
 80017ee:	490f      	ldr	r1, [pc, #60]	@ (800182c <main+0x734>)
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <main+0x738>)
 80017f2:	2203      	movs	r2, #3
 80017f4:	0018      	movs	r0, r3
 80017f6:	f004 fd5f 	bl	80062b8 <HAL_ADC_Start_DMA>
 80017fa:	e011      	b.n	8001820 <main+0x728>
				}
			}
			else
			{
				adc_status = adc_reset();
 80017fc:	250b      	movs	r5, #11
 80017fe:	197c      	adds	r4, r7, r5
 8001800:	f7ff fbe0 	bl	8000fc4 <adc_reset>
 8001804:	0003      	movs	r3, r0
 8001806:	7023      	strb	r3, [r4, #0]
				if(adc_status != HAL_OK)
 8001808:	197b      	adds	r3, r7, r5
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b25b      	sxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d006      	beq.n	8001820 <main+0x728>
				{
					// Fatal Error
					holding_register_database[ADC_ERRORS] |= (1U << 5U);
 8001812:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <main+0x73c>)
 8001814:	8a1b      	ldrh	r3, [r3, #16]
 8001816:	2220      	movs	r2, #32
 8001818:	4313      	orrs	r3, r2
 800181a:	b29a      	uxth	r2, r3
 800181c:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <main+0x73c>)
 800181e:	821a      	strh	r2, [r3, #16]
				}
			}
			prev_adc_shutdown = holding_register_database[ADC_SHUTDOWN];
 8001820:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <main+0x73c>)
 8001822:	8a5a      	ldrh	r2, [r3, #18]
 8001824:	230e      	movs	r3, #14
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	701a      	strb	r2, [r3, #0]
  {
 800182a:	e50d      	b.n	8001248 <main+0x150>
 800182c:	20000014 	.word	0x20000014
 8001830:	2000004c 	.word	0x2000004c
 8001834:	20000000 	.word	0x20000000

08001838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b08f      	sub	sp, #60	@ 0x3c
 800183c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183e:	2418      	movs	r4, #24
 8001840:	193b      	adds	r3, r7, r4
 8001842:	0018      	movs	r0, r3
 8001844:	2320      	movs	r3, #32
 8001846:	001a      	movs	r2, r3
 8001848:	2100      	movs	r1, #0
 800184a:	f009 fa11 	bl	800ac70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	0018      	movs	r0, r3
 8001852:	2314      	movs	r3, #20
 8001854:	001a      	movs	r2, r3
 8001856:	2100      	movs	r1, #0
 8001858:	f009 fa0a 	bl	800ac70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800185c:	193b      	adds	r3, r7, r4
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001862:	193b      	adds	r3, r7, r4
 8001864:	2280      	movs	r2, #128	@ 0x80
 8001866:	0252      	lsls	r2, r2, #9
 8001868:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186a:	193b      	adds	r3, r7, r4
 800186c:	0018      	movs	r0, r3
 800186e:	f006 ffbb 	bl	80087e8 <HAL_RCC_OscConfig>
 8001872:	1e03      	subs	r3, r0, #0
 8001874:	d001      	beq.n	800187a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8001876:	f000 fa0b 	bl	8001c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2201      	movs	r2, #1
 8001884:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2100      	movs	r1, #0
 800189c:	0018      	movs	r0, r3
 800189e:	f007 f9c9 	bl	8008c34 <HAL_RCC_ClockConfig>
 80018a2:	1e03      	subs	r3, r0, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80018a6:	f000 f9f3 	bl	8001c90 <Error_Handler>
  }
}
 80018aa:	46c0      	nop			@ (mov r8, r8)
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b00f      	add	sp, #60	@ 0x3c
 80018b0:	bd90      	pop	{r4, r7, pc}
	...

080018b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	0018      	movs	r0, r3
 80018be:	230c      	movs	r3, #12
 80018c0:	001a      	movs	r2, r3
 80018c2:	2100      	movs	r1, #0
 80018c4:	f009 f9d4 	bl	800ac70 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018c8:	4b3c      	ldr	r3, [pc, #240]	@ (80019bc <MX_ADC1_Init+0x108>)
 80018ca:	4a3d      	ldr	r2, [pc, #244]	@ (80019c0 <MX_ADC1_Init+0x10c>)
 80018cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80018ce:	4b3b      	ldr	r3, [pc, #236]	@ (80019bc <MX_ADC1_Init+0x108>)
 80018d0:	22c0      	movs	r2, #192	@ 0xc0
 80018d2:	0612      	lsls	r2, r2, #24
 80018d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018d6:	4b39      	ldr	r3, [pc, #228]	@ (80019bc <MX_ADC1_Init+0x108>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018dc:	4b37      	ldr	r3, [pc, #220]	@ (80019bc <MX_ADC1_Init+0x108>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018e2:	4b36      	ldr	r3, [pc, #216]	@ (80019bc <MX_ADC1_Init+0x108>)
 80018e4:	2280      	movs	r2, #128	@ 0x80
 80018e6:	0392      	lsls	r2, r2, #14
 80018e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018ea:	4b34      	ldr	r3, [pc, #208]	@ (80019bc <MX_ADC1_Init+0x108>)
 80018ec:	2204      	movs	r2, #4
 80018ee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018f0:	4b32      	ldr	r3, [pc, #200]	@ (80019bc <MX_ADC1_Init+0x108>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80018f6:	4b31      	ldr	r3, [pc, #196]	@ (80019bc <MX_ADC1_Init+0x108>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018fc:	4b2f      	ldr	r3, [pc, #188]	@ (80019bc <MX_ADC1_Init+0x108>)
 80018fe:	2201      	movs	r2, #1
 8001900:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8001902:	4b2e      	ldr	r3, [pc, #184]	@ (80019bc <MX_ADC1_Init+0x108>)
 8001904:	2203      	movs	r2, #3
 8001906:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001908:	4b2c      	ldr	r3, [pc, #176]	@ (80019bc <MX_ADC1_Init+0x108>)
 800190a:	2200      	movs	r2, #0
 800190c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800190e:	4b2b      	ldr	r3, [pc, #172]	@ (80019bc <MX_ADC1_Init+0x108>)
 8001910:	2200      	movs	r2, #0
 8001912:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001914:	4b29      	ldr	r3, [pc, #164]	@ (80019bc <MX_ADC1_Init+0x108>)
 8001916:	222c      	movs	r2, #44	@ 0x2c
 8001918:	2100      	movs	r1, #0
 800191a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800191c:	4b27      	ldr	r3, [pc, #156]	@ (80019bc <MX_ADC1_Init+0x108>)
 800191e:	2200      	movs	r2, #0
 8001920:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001922:	4b26      	ldr	r3, [pc, #152]	@ (80019bc <MX_ADC1_Init+0x108>)
 8001924:	2207      	movs	r2, #7
 8001926:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001928:	4b24      	ldr	r3, [pc, #144]	@ (80019bc <MX_ADC1_Init+0x108>)
 800192a:	2200      	movs	r2, #0
 800192c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800192e:	4b23      	ldr	r3, [pc, #140]	@ (80019bc <MX_ADC1_Init+0x108>)
 8001930:	223c      	movs	r2, #60	@ 0x3c
 8001932:	2100      	movs	r1, #0
 8001934:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8001936:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <MX_ADC1_Init+0x108>)
 8001938:	2280      	movs	r2, #128	@ 0x80
 800193a:	0592      	lsls	r2, r2, #22
 800193c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800193e:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <MX_ADC1_Init+0x108>)
 8001940:	0018      	movs	r0, r3
 8001942:	f004 fa77 	bl	8005e34 <HAL_ADC_Init>
 8001946:	1e03      	subs	r3, r0, #0
 8001948:	d001      	beq.n	800194e <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800194a:	f000 f9a1 	bl	8001c90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2201      	movs	r2, #1
 8001952:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2200      	movs	r2, #0
 8001958:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001960:	1d3a      	adds	r2, r7, #4
 8001962:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <MX_ADC1_Init+0x108>)
 8001964:	0011      	movs	r1, r2
 8001966:	0018      	movs	r0, r3
 8001968:	f004 fdb6 	bl	80064d8 <HAL_ADC_ConfigChannel>
 800196c:	1e03      	subs	r3, r0, #0
 800196e:	d001      	beq.n	8001974 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8001970:	f000 f98e 	bl	8001c90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	4a13      	ldr	r2, [pc, #76]	@ (80019c4 <MX_ADC1_Init+0x110>)
 8001978:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2204      	movs	r2, #4
 800197e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001980:	1d3a      	adds	r2, r7, #4
 8001982:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <MX_ADC1_Init+0x108>)
 8001984:	0011      	movs	r1, r2
 8001986:	0018      	movs	r0, r3
 8001988:	f004 fda6 	bl	80064d8 <HAL_ADC_ConfigChannel>
 800198c:	1e03      	subs	r3, r0, #0
 800198e:	d001      	beq.n	8001994 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001990:	f000 f97e 	bl	8001c90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	4a0c      	ldr	r2, [pc, #48]	@ (80019c8 <MX_ADC1_Init+0x114>)
 8001998:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2208      	movs	r2, #8
 800199e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a0:	1d3a      	adds	r2, r7, #4
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <MX_ADC1_Init+0x108>)
 80019a4:	0011      	movs	r1, r2
 80019a6:	0018      	movs	r0, r3
 80019a8:	f004 fd96 	bl	80064d8 <HAL_ADC_ConfigChannel>
 80019ac:	1e03      	subs	r3, r0, #0
 80019ae:	d001      	beq.n	80019b4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80019b0:	f000 f96e 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019b4:	46c0      	nop			@ (mov r8, r8)
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b004      	add	sp, #16
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	2000004c 	.word	0x2000004c
 80019c0:	40012400 	.word	0x40012400
 80019c4:	04000002 	.word	0x04000002
 80019c8:	08000004 	.word	0x08000004

080019cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a40 <MX_I2C1_Init+0x74>)
 80019d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a44 <MX_I2C1_Init+0x78>)
 80019d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <MX_I2C1_Init+0x74>)
 80019d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a48 <MX_I2C1_Init+0x7c>)
 80019da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019dc:	4b18      	ldr	r3, [pc, #96]	@ (8001a40 <MX_I2C1_Init+0x74>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e2:	4b17      	ldr	r3, [pc, #92]	@ (8001a40 <MX_I2C1_Init+0x74>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e8:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <MX_I2C1_Init+0x74>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019ee:	4b14      	ldr	r3, [pc, #80]	@ (8001a40 <MX_I2C1_Init+0x74>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019f4:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <MX_I2C1_Init+0x74>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019fa:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <MX_I2C1_Init+0x74>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	@ (8001a40 <MX_I2C1_Init+0x74>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a06:	4b0e      	ldr	r3, [pc, #56]	@ (8001a40 <MX_I2C1_Init+0x74>)
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f006 f821 	bl	8007a50 <HAL_I2C_Init>
 8001a0e:	1e03      	subs	r3, r0, #0
 8001a10:	d001      	beq.n	8001a16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a12:	f000 f93d 	bl	8001c90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a16:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <MX_I2C1_Init+0x74>)
 8001a18:	2100      	movs	r1, #0
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f006 fe4c 	bl	80086b8 <HAL_I2CEx_ConfigAnalogFilter>
 8001a20:	1e03      	subs	r3, r0, #0
 8001a22:	d001      	beq.n	8001a28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a24:	f000 f934 	bl	8001c90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <MX_I2C1_Init+0x74>)
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f006 fe8f 	bl	8008750 <HAL_I2CEx_ConfigDigitalFilter>
 8001a32:	1e03      	subs	r3, r0, #0
 8001a34:	d001      	beq.n	8001a3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a36:	f000 f92b 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	2000010c 	.word	0x2000010c
 8001a44:	40005400 	.word	0x40005400
 8001a48:	00201d2b 	.word	0x00201d2b

08001a4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a50:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <MX_USART1_UART_Init+0x98>)
 8001a52:	4a25      	ldr	r2, [pc, #148]	@ (8001ae8 <MX_USART1_UART_Init+0x9c>)
 8001a54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a56:	4b23      	ldr	r3, [pc, #140]	@ (8001ae4 <MX_USART1_UART_Init+0x98>)
 8001a58:	2296      	movs	r2, #150	@ 0x96
 8001a5a:	0192      	lsls	r2, r2, #6
 8001a5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ae4 <MX_USART1_UART_Init+0x98>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae4 <MX_USART1_UART_Init+0x98>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae4 <MX_USART1_UART_Init+0x98>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae4 <MX_USART1_UART_Init+0x98>)
 8001a72:	220c      	movs	r2, #12
 8001a74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae4 <MX_USART1_UART_Init+0x98>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ae4 <MX_USART1_UART_Init+0x98>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a82:	4b18      	ldr	r3, [pc, #96]	@ (8001ae4 <MX_USART1_UART_Init+0x98>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a88:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <MX_USART1_UART_Init+0x98>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <MX_USART1_UART_Init+0x98>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001a94:	4813      	ldr	r0, [pc, #76]	@ (8001ae4 <MX_USART1_UART_Init+0x98>)
 8001a96:	2300      	movs	r3, #0
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	f008 fedc 	bl	800a858 <HAL_RS485Ex_Init>
 8001aa0:	1e03      	subs	r3, r0, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001aa4:	f000 f8f4 	bl	8001c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <MX_USART1_UART_Init+0x98>)
 8001aaa:	2100      	movs	r1, #0
 8001aac:	0018      	movs	r0, r3
 8001aae:	f008 ff97 	bl	800a9e0 <HAL_UARTEx_SetTxFifoThreshold>
 8001ab2:	1e03      	subs	r3, r0, #0
 8001ab4:	d001      	beq.n	8001aba <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8001ab6:	f000 f8eb 	bl	8001c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <MX_USART1_UART_Init+0x98>)
 8001abc:	2100      	movs	r1, #0
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f008 ffce 	bl	800aa60 <HAL_UARTEx_SetRxFifoThreshold>
 8001ac4:	1e03      	subs	r3, r0, #0
 8001ac6:	d001      	beq.n	8001acc <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001ac8:	f000 f8e2 	bl	8001c90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <MX_USART1_UART_Init+0x98>)
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f008 ff4c 	bl	800a96c <HAL_UARTEx_DisableFifoMode>
 8001ad4:	1e03      	subs	r3, r0, #0
 8001ad6:	d001      	beq.n	8001adc <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8001ad8:	f000 f8da 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001adc:	46c0      	nop			@ (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	20000218 	.word	0x20000218
 8001ae8:	40013800 	.word	0x40013800

08001aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001af2:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <MX_DMA_Init+0x58>)
 8001af4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001af6:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <MX_DMA_Init+0x58>)
 8001af8:	2101      	movs	r1, #1
 8001afa:	430a      	orrs	r2, r1
 8001afc:	639a      	str	r2, [r3, #56]	@ 0x38
 8001afe:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <MX_DMA_Init+0x58>)
 8001b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b02:	2201      	movs	r2, #1
 8001b04:	4013      	ands	r3, r2
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2009      	movs	r0, #9
 8001b10:	f005 f926 	bl	8006d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b14:	2009      	movs	r0, #9
 8001b16:	f005 f938 	bl	8006d8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	200a      	movs	r0, #10
 8001b20:	f005 f91e 	bl	8006d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001b24:	200a      	movs	r0, #10
 8001b26:	f005 f930 	bl	8006d8a <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_DMA1_CH4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_DMA1_CH4_5_IRQn, 0, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	200b      	movs	r0, #11
 8001b30:	f005 f916 	bl	8006d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_DMA1_CH4_5_IRQn);
 8001b34:	200b      	movs	r0, #11
 8001b36:	f005 f928 	bl	8006d8a <HAL_NVIC_EnableIRQ>

}
 8001b3a:	46c0      	nop			@ (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b002      	add	sp, #8
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			@ (mov r8, r8)
 8001b44:	40021000 	.word	0x40021000

08001b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b08b      	sub	sp, #44	@ 0x2c
 8001b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	2414      	movs	r4, #20
 8001b50:	193b      	adds	r3, r7, r4
 8001b52:	0018      	movs	r0, r3
 8001b54:	2314      	movs	r3, #20
 8001b56:	001a      	movs	r2, r3
 8001b58:	2100      	movs	r1, #0
 8001b5a:	f009 f889 	bl	800ac70 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5e:	4b48      	ldr	r3, [pc, #288]	@ (8001c80 <MX_GPIO_Init+0x138>)
 8001b60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b62:	4b47      	ldr	r3, [pc, #284]	@ (8001c80 <MX_GPIO_Init+0x138>)
 8001b64:	2104      	movs	r1, #4
 8001b66:	430a      	orrs	r2, r1
 8001b68:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b6a:	4b45      	ldr	r3, [pc, #276]	@ (8001c80 <MX_GPIO_Init+0x138>)
 8001b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b6e:	2204      	movs	r2, #4
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b76:	4b42      	ldr	r3, [pc, #264]	@ (8001c80 <MX_GPIO_Init+0x138>)
 8001b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b7a:	4b41      	ldr	r3, [pc, #260]	@ (8001c80 <MX_GPIO_Init+0x138>)
 8001b7c:	2120      	movs	r1, #32
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b82:	4b3f      	ldr	r3, [pc, #252]	@ (8001c80 <MX_GPIO_Init+0x138>)
 8001b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b86:	2220      	movs	r2, #32
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c80 <MX_GPIO_Init+0x138>)
 8001b90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b92:	4b3b      	ldr	r3, [pc, #236]	@ (8001c80 <MX_GPIO_Init+0x138>)
 8001b94:	2101      	movs	r1, #1
 8001b96:	430a      	orrs	r2, r1
 8001b98:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b9a:	4b39      	ldr	r3, [pc, #228]	@ (8001c80 <MX_GPIO_Init+0x138>)
 8001b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba6:	4b36      	ldr	r3, [pc, #216]	@ (8001c80 <MX_GPIO_Init+0x138>)
 8001ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001baa:	4b35      	ldr	r3, [pc, #212]	@ (8001c80 <MX_GPIO_Init+0x138>)
 8001bac:	2102      	movs	r1, #2
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bb2:	4b33      	ldr	r3, [pc, #204]	@ (8001c80 <MX_GPIO_Init+0x138>)
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	4013      	ands	r3, r2
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bbe:	4b30      	ldr	r3, [pc, #192]	@ (8001c80 <MX_GPIO_Init+0x138>)
 8001bc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c80 <MX_GPIO_Init+0x138>)
 8001bc4:	2108      	movs	r1, #8
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bca:	4b2d      	ldr	r3, [pc, #180]	@ (8001c80 <MX_GPIO_Init+0x138>)
 8001bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bce:	2208      	movs	r2, #8
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_DCV_A_Pin|MCU_DCV_B_Pin|HPU_Gate_Pin, GPIO_PIN_RESET);
 8001bd6:	492b      	ldr	r1, [pc, #172]	@ (8001c84 <MX_GPIO_Init+0x13c>)
 8001bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c88 <MX_GPIO_Init+0x140>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f005 ff1a 	bl	8007a16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Water_Solinoid_GPIO_Port, Water_Solinoid_Pin, GPIO_PIN_RESET);
 8001be2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c8c <MX_GPIO_Init+0x144>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	2104      	movs	r1, #4
 8001be8:	0018      	movs	r0, r3
 8001bea:	f005 ff14 	bl	8007a16 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MCU_DCV_A_Pin MCU_DCV_B_Pin HPU_Gate_Pin */
  GPIO_InitStruct.Pin = MCU_DCV_A_Pin|MCU_DCV_B_Pin|HPU_Gate_Pin;
 8001bee:	193b      	adds	r3, r7, r4
 8001bf0:	4a24      	ldr	r2, [pc, #144]	@ (8001c84 <MX_GPIO_Init+0x13c>)
 8001bf2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf4:	193b      	adds	r3, r7, r4
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	193b      	adds	r3, r7, r4
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	193b      	adds	r3, r7, r4
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c06:	193b      	adds	r3, r7, r4
 8001c08:	4a1f      	ldr	r2, [pc, #124]	@ (8001c88 <MX_GPIO_Init+0x140>)
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	0010      	movs	r0, r2
 8001c0e:	f005 fc9b 	bl	8007548 <HAL_GPIO_Init>

  /*Configure GPIO pin : Oil_High_Pin */
  GPIO_InitStruct.Pin = Oil_High_Pin;
 8001c12:	193b      	adds	r3, r7, r4
 8001c14:	2280      	movs	r2, #128	@ 0x80
 8001c16:	0212      	lsls	r2, r2, #8
 8001c18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1a:	193b      	adds	r3, r7, r4
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c20:	193b      	adds	r3, r7, r4
 8001c22:	2201      	movs	r2, #1
 8001c24:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Oil_High_GPIO_Port, &GPIO_InitStruct);
 8001c26:	193a      	adds	r2, r7, r4
 8001c28:	23a0      	movs	r3, #160	@ 0xa0
 8001c2a:	05db      	lsls	r3, r3, #23
 8001c2c:	0011      	movs	r1, r2
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f005 fc8a 	bl	8007548 <HAL_GPIO_Init>

  /*Configure GPIO pins : Oil_Low_Pin Oil_E_Stop_Pin */
  GPIO_InitStruct.Pin = Oil_Low_Pin|Oil_E_Stop_Pin;
 8001c34:	193b      	adds	r3, r7, r4
 8001c36:	2203      	movs	r2, #3
 8001c38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c3a:	193b      	adds	r3, r7, r4
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c40:	193b      	adds	r3, r7, r4
 8001c42:	2201      	movs	r2, #1
 8001c44:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c46:	193b      	adds	r3, r7, r4
 8001c48:	4a10      	ldr	r2, [pc, #64]	@ (8001c8c <MX_GPIO_Init+0x144>)
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	0010      	movs	r0, r2
 8001c4e:	f005 fc7b 	bl	8007548 <HAL_GPIO_Init>

  /*Configure GPIO pin : Water_Solinoid_Pin */
  GPIO_InitStruct.Pin = Water_Solinoid_Pin;
 8001c52:	0021      	movs	r1, r4
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	2204      	movs	r2, #4
 8001c58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5a:	187b      	adds	r3, r7, r1
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	187b      	adds	r3, r7, r1
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	187b      	adds	r3, r7, r1
 8001c68:	2200      	movs	r2, #0
 8001c6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Water_Solinoid_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	4a07      	ldr	r2, [pc, #28]	@ (8001c8c <MX_GPIO_Init+0x144>)
 8001c70:	0019      	movs	r1, r3
 8001c72:	0010      	movs	r0, r2
 8001c74:	f005 fc68 	bl	8007548 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c78:	46c0      	nop			@ (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b00b      	add	sp, #44	@ 0x2c
 8001c7e:	bd90      	pop	{r4, r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	00001003 	.word	0x00001003
 8001c88:	50000400 	.word	0x50000400
 8001c8c:	50000c00 	.word	0x50000c00

08001c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c94:	b672      	cpsid	i
}
 8001c96:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c98:	46c0      	nop			@ (mov r8, r8)
 8001c9a:	e7fd      	b.n	8001c98 <Error_Handler+0x8>

08001c9c <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	000a      	movs	r2, r1
 8001ca6:	1cbb      	adds	r3, r7, #2
 8001ca8:	801a      	strh	r2, [r3, #0]
	if(modbus_header)
 8001caa:	4b24      	ldr	r3, [pc, #144]	@ (8001d3c <HAL_UARTEx_RxEventCallback+0xa0>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d026      	beq.n	8001d02 <HAL_UARTEx_RxEventCallback+0x66>
	{
		// Log the time for chunk miss error handling
		chunk_time = HAL_GetTick();
 8001cb4:	f003 ff16 	bl	8005ae4 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	4b21      	ldr	r3, [pc, #132]	@ (8001d40 <HAL_UARTEx_RxEventCallback+0xa4>)
 8001cbc:	601a      	str	r2, [r3, #0]
		modbus_header = 0;
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <HAL_UARTEx_RxEventCallback+0xa0>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	801a      	strh	r2, [r3, #0]

		// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, &modbus_rx_buffer[6], (uint16_t)(((modbus_rx_buffer[4] << 8) | modbus_rx_buffer[5])*2 + 2 + 1));
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d44 <HAL_UARTEx_RxEventCallback+0xa8>)
 8001cc6:	791b      	ldrb	r3, [r3, #4]
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	4a1e      	ldr	r2, [pc, #120]	@ (8001d44 <HAL_UARTEx_RxEventCallback+0xa8>)
 8001ccc:	7952      	ldrb	r2, [r2, #5]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	18db      	adds	r3, r3, r3
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	491a      	ldr	r1, [pc, #104]	@ (8001d48 <HAL_UARTEx_RxEventCallback+0xac>)
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <HAL_UARTEx_RxEventCallback+0xb0>)
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f008 fefe 	bl	800aae4 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 8001ce8:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <HAL_UARTEx_RxEventCallback+0xb0>)
 8001cea:	2280      	movs	r2, #128	@ 0x80
 8001cec:	589b      	ldr	r3, [r3, r2]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <HAL_UARTEx_RxEventCallback+0xb0>)
 8001cf4:	2180      	movs	r1, #128	@ 0x80
 8001cf6:	585b      	ldr	r3, [r3, r1]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2104      	movs	r1, #4
 8001cfc:	438a      	bics	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]
#ifdef MB_SLAVE
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, 6);
		__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
#endif
	}
}
 8001d00:	e017      	b.n	8001d32 <HAL_UARTEx_RxEventCallback+0x96>
		modbus_header = 1;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <HAL_UARTEx_RxEventCallback+0xa0>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	801a      	strh	r2, [r3, #0]
		uart_rx_int = 1;
 8001d08:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, 6);
 8001d0e:	490d      	ldr	r1, [pc, #52]	@ (8001d44 <HAL_UARTEx_RxEventCallback+0xa8>)
 8001d10:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <HAL_UARTEx_RxEventCallback+0xb0>)
 8001d12:	2206      	movs	r2, #6
 8001d14:	0018      	movs	r0, r3
 8001d16:	f008 fee5 	bl	800aae4 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <HAL_UARTEx_RxEventCallback+0xb0>)
 8001d1c:	2280      	movs	r2, #128	@ 0x80
 8001d1e:	589b      	ldr	r3, [r3, r2]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <HAL_UARTEx_RxEventCallback+0xb0>)
 8001d26:	2180      	movs	r1, #128	@ 0x80
 8001d28:	585b      	ldr	r3, [r3, r1]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	438a      	bics	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]
}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b002      	add	sp, #8
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	20000020 	.word	0x20000020
 8001d40:	2000056c 	.word	0x2000056c
 8001d44:	20000368 	.word	0x20000368
 8001d48:	2000036e 	.word	0x2000036e
 8001d4c:	20000218 	.word	0x20000218
 8001d50:	20000570 	.word	0x20000570

08001d54 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	uart_tx_int = 1;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	@ (8001d6c <HAL_UART_TxCpltCallback+0x18>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
}
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b002      	add	sp, #8
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			@ (mov r8, r8)
 8001d6c:	20000022 	.word	0x20000022

08001d70 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	uart_err_int = 1;
 8001d78:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <HAL_UART_ErrorCallback+0x28>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_MASK);
 8001d7e:	4b07      	ldr	r3, [pc, #28]	@ (8001d9c <HAL_UART_ErrorCallback+0x2c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <HAL_UART_ErrorCallback+0x2c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0052      	lsls	r2, r2, #1
 8001d8a:	0852      	lsrs	r2, r2, #1
 8001d8c:	609a      	str	r2, [r3, #8]
}
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b002      	add	sp, #8
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	46c0      	nop			@ (mov r8, r8)
 8001d98:	20000571 	.word	0x20000571
 8001d9c:	20000218 	.word	0x20000218

08001da0 <modbus_rx>:

// Modbus Slave Functions ---------------------------------------------------------------------

#ifdef MB_SLAVE
uint8_t modbus_rx()
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	if(uart_rx_int)
 8001da4:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <modbus_rx+0x20>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d004      	beq.n	8001db8 <modbus_rx+0x18>
	{
		uart_rx_int = 0;
 8001dae:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <modbus_rx+0x20>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
		return 1;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <modbus_rx+0x1a>
	}
	return 0;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	0018      	movs	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000570 	.word	0x20000570

08001dc4 <return_holding_registers>:

int8_t return_holding_registers(uint8_t* tx_len)
{
 8001dc4:	b5b0      	push	{r4, r5, r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]

	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	f000 fc6c 	bl	80026b0 <get_rx_buffer>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	b21c      	sxth	r4, r3
 8001dde:	2003      	movs	r0, #3
 8001de0:	f000 fc66 	bl	80026b0 <get_rx_buffer>
 8001de4:	0003      	movs	r3, r0
 8001de6:	b21b      	sxth	r3, r3
 8001de8:	4323      	orrs	r3, r4
 8001dea:	b21a      	sxth	r2, r3
 8001dec:	230c      	movs	r3, #12
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8001df2:	2004      	movs	r0, #4
 8001df4:	f000 fc5c 	bl	80026b0 <get_rx_buffer>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	021b      	lsls	r3, r3, #8
 8001dfc:	b21c      	sxth	r4, r3
 8001dfe:	2005      	movs	r0, #5
 8001e00:	f000 fc56 	bl	80026b0 <get_rx_buffer>
 8001e04:	0003      	movs	r3, r0
 8001e06:	b21b      	sxth	r3, r3
 8001e08:	4323      	orrs	r3, r4
 8001e0a:	b21a      	sxth	r2, r3
 8001e0c:	210a      	movs	r1, #10
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 8001e12:	000a      	movs	r2, r1
 8001e14:	18bb      	adds	r3, r7, r2
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	2b7d      	cmp	r3, #125	@ 0x7d
 8001e1a:	d803      	bhi.n	8001e24 <return_holding_registers+0x60>
 8001e1c:	18bb      	adds	r3, r7, r2
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d104      	bne.n	8001e2e <return_holding_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8001e24:	2006      	movs	r0, #6
 8001e26:	f000 f97b 	bl	8002120 <modbus_exception>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	e06e      	b.n	8001f0c <return_holding_registers+0x148>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8001e2e:	230a      	movs	r3, #10
 8001e30:	18fa      	adds	r2, r7, r3
 8001e32:	230c      	movs	r3, #12
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	8812      	ldrh	r2, [r2, #0]
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	18d3      	adds	r3, r2, r3
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	2108      	movs	r1, #8
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	3a01      	subs	r2, #1
 8001e44:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8001e46:	187b      	adds	r3, r7, r1
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	2b10      	cmp	r3, #16
 8001e4c:	d904      	bls.n	8001e58 <return_holding_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8001e4e:	2005      	movs	r0, #5
 8001e50:	f000 f966 	bl	8002120 <modbus_exception>
 8001e54:	0003      	movs	r3, r0
 8001e56:	e059      	b.n	8001f0c <return_holding_registers+0x148>
	}

	// Return register values
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f000 fc29 	bl	80026b0 <get_rx_buffer>
 8001e5e:	0003      	movs	r3, r0
 8001e60:	001a      	movs	r2, r3
 8001e62:	4b2c      	ldr	r3, [pc, #176]	@ (8001f14 <return_holding_registers+0x150>)
 8001e64:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8001e66:	2001      	movs	r0, #1
 8001e68:	f000 fc22 	bl	80026b0 <get_rx_buffer>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	001a      	movs	r2, r3
 8001e70:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <return_holding_registers+0x150>)
 8001e72:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8001e74:	230a      	movs	r3, #10
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	18db      	adds	r3, r3, r3
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	4b24      	ldr	r3, [pc, #144]	@ (8001f14 <return_holding_registers+0x150>)
 8001e82:	709a      	strb	r2, [r3, #2]
	(*tx_len) = 3;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2203      	movs	r2, #3
 8001e88:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8001e8a:	230f      	movs	r3, #15
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
 8001e92:	e02c      	b.n	8001eee <return_holding_registers+0x12a>
	{
		modbus_tx_buffer[(*tx_len)++] = high_byte(holding_register_database[first_register_address + i]);
 8001e94:	250c      	movs	r5, #12
 8001e96:	197b      	adds	r3, r7, r5
 8001e98:	881a      	ldrh	r2, [r3, #0]
 8001e9a:	240f      	movs	r4, #15
 8001e9c:	193b      	adds	r3, r7, r4
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	18d2      	adds	r2, r2, r3
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f18 <return_holding_registers+0x154>)
 8001ea4:	0052      	lsls	r2, r2, #1
 8001ea6:	5ad3      	ldrh	r3, [r2, r3]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	b299      	uxth	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	b2d0      	uxtb	r0, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	7010      	strb	r0, [r2, #0]
 8001eb8:	001a      	movs	r2, r3
 8001eba:	b2c9      	uxtb	r1, r1
 8001ebc:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <return_holding_registers+0x150>)
 8001ebe:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[(*tx_len)++] = low_byte(holding_register_database[first_register_address + i]);
 8001ec0:	197b      	adds	r3, r7, r5
 8001ec2:	881a      	ldrh	r2, [r3, #0]
 8001ec4:	193b      	adds	r3, r7, r4
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	18d2      	adds	r2, r2, r3
 8001eca:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <return_holding_registers+0x154>)
 8001ecc:	0052      	lsls	r2, r2, #1
 8001ece:	5ad1      	ldrh	r1, [r2, r3]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	b2d0      	uxtb	r0, r2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	7010      	strb	r0, [r2, #0]
 8001edc:	001a      	movs	r2, r3
 8001ede:	b2c9      	uxtb	r1, r1
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <return_holding_registers+0x150>)
 8001ee2:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 8001ee4:	193b      	adds	r3, r7, r4
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	193b      	adds	r3, r7, r4
 8001eea:	3201      	adds	r2, #1
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	230f      	movs	r3, #15
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	220a      	movs	r2, #10
 8001ef8:	18ba      	adds	r2, r7, r2
 8001efa:	8812      	ldrh	r2, [r2, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d8c9      	bhi.n	8001e94 <return_holding_registers+0xd0>
	}

	return modbus_send((*tx_len));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	0018      	movs	r0, r3
 8001f06:	f000 f9ef 	bl	80022e8 <modbus_send>
 8001f0a:	0003      	movs	r3, r0
}
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b004      	add	sp, #16
 8001f12:	bdb0      	pop	{r4, r5, r7, pc}
 8001f14:	20000468 	.word	0x20000468
 8001f18:	20000000 	.word	0x20000000

08001f1c <edit_multiple_registers>:

int8_t edit_multiple_registers(uint8_t *tx_len)
{
 8001f1c:	b5b0      	push	{r4, r5, r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]

	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8001f2a:	2002      	movs	r0, #2
 8001f2c:	f000 fbc0 	bl	80026b0 <get_rx_buffer>
 8001f30:	0003      	movs	r3, r0
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	b21c      	sxth	r4, r3
 8001f36:	2003      	movs	r0, #3
 8001f38:	f000 fbba 	bl	80026b0 <get_rx_buffer>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	b21b      	sxth	r3, r3
 8001f40:	4323      	orrs	r3, r4
 8001f42:	b21a      	sxth	r2, r3
 8001f44:	2314      	movs	r3, #20
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8001f4a:	2004      	movs	r0, #4
 8001f4c:	f000 fbb0 	bl	80026b0 <get_rx_buffer>
 8001f50:	0003      	movs	r3, r0
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	b21c      	sxth	r4, r3
 8001f56:	2005      	movs	r0, #5
 8001f58:	f000 fbaa 	bl	80026b0 <get_rx_buffer>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	b21b      	sxth	r3, r3
 8001f60:	4323      	orrs	r3, r4
 8001f62:	b21a      	sxth	r2, r3
 8001f64:	2112      	movs	r1, #18
 8001f66:	187b      	adds	r3, r7, r1
 8001f68:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8001f6a:	000a      	movs	r2, r1
 8001f6c:	18bb      	adds	r3, r7, r2
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	2b7d      	cmp	r3, #125	@ 0x7d
 8001f72:	d803      	bhi.n	8001f7c <edit_multiple_registers+0x60>
 8001f74:	18bb      	adds	r3, r7, r2
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d104      	bne.n	8001f86 <edit_multiple_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8001f7c:	2006      	movs	r0, #6
 8001f7e:	f000 f8cf 	bl	8002120 <modbus_exception>
 8001f82:	0003      	movs	r3, r0
 8001f84:	e0c3      	b.n	800210e <edit_multiple_registers+0x1f2>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8001f86:	2312      	movs	r3, #18
 8001f88:	18fa      	adds	r2, r7, r3
 8001f8a:	2314      	movs	r3, #20
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	8812      	ldrh	r2, [r2, #0]
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	18d3      	adds	r3, r2, r3
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	2110      	movs	r1, #16
 8001f98:	187b      	adds	r3, r7, r1
 8001f9a:	3a01      	subs	r2, #1
 8001f9c:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8001f9e:	187b      	adds	r3, r7, r1
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	2b10      	cmp	r3, #16
 8001fa4:	d904      	bls.n	8001fb0 <edit_multiple_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8001fa6:	2005      	movs	r0, #5
 8001fa8:	f000 f8ba 	bl	8002120 <modbus_exception>
 8001fac:	0003      	movs	r3, r0
 8001fae:	e0ae      	b.n	800210e <edit_multiple_registers+0x1f2>
	}

	// Protect Read only values
	if(((first_register_address >= ADC_0) && (first_register_address <= GPIO_READ)) ||
 8001fb0:	2214      	movs	r2, #20
 8001fb2:	18bb      	adds	r3, r7, r2
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	2b09      	cmp	r3, #9
 8001fb8:	d903      	bls.n	8001fc2 <edit_multiple_registers+0xa6>
 8001fba:	18bb      	adds	r3, r7, r2
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	2b0e      	cmp	r3, #14
 8001fc0:	d912      	bls.n	8001fe8 <edit_multiple_registers+0xcc>
 8001fc2:	2210      	movs	r2, #16
 8001fc4:	18bb      	adds	r3, r7, r2
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	2b09      	cmp	r3, #9
 8001fca:	d903      	bls.n	8001fd4 <edit_multiple_registers+0xb8>
		 ((last_register_address >= ADC_0) && (last_register_address <= GPIO_READ)) ||
 8001fcc:	18bb      	adds	r3, r7, r2
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	2b0e      	cmp	r3, #14
 8001fd2:	d909      	bls.n	8001fe8 <edit_multiple_registers+0xcc>
 8001fd4:	2314      	movs	r3, #20
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	2b09      	cmp	r3, #9
 8001fdc:	d809      	bhi.n	8001ff2 <edit_multiple_registers+0xd6>
		 ((first_register_address < ADC_0) && (last_register_address > GPIO_READ)))
 8001fde:	2310      	movs	r3, #16
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	2b0e      	cmp	r3, #14
 8001fe6:	d904      	bls.n	8001ff2 <edit_multiple_registers+0xd6>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 8001fe8:	2004      	movs	r0, #4
 8001fea:	f000 f899 	bl	8002120 <modbus_exception>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	e08d      	b.n	800210e <edit_multiple_registers+0x1f2>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f000 fb5c 	bl	80026b0 <get_rx_buffer>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	001a      	movs	r2, r3
 8001ffc:	4b46      	ldr	r3, [pc, #280]	@ (8002118 <edit_multiple_registers+0x1fc>)
 8001ffe:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8002000:	2001      	movs	r0, #1
 8002002:	f000 fb55 	bl	80026b0 <get_rx_buffer>
 8002006:	0003      	movs	r3, r0
 8002008:	001a      	movs	r2, r3
 800200a:	4b43      	ldr	r3, [pc, #268]	@ (8002118 <edit_multiple_registers+0x1fc>)
 800200c:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 800200e:	2002      	movs	r0, #2
 8002010:	f000 fb4e 	bl	80026b0 <get_rx_buffer>
 8002014:	0003      	movs	r3, r0
 8002016:	001a      	movs	r2, r3
 8002018:	4b3f      	ldr	r3, [pc, #252]	@ (8002118 <edit_multiple_registers+0x1fc>)
 800201a:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 800201c:	2003      	movs	r0, #3
 800201e:	f000 fb47 	bl	80026b0 <get_rx_buffer>
 8002022:	0003      	movs	r3, r0
 8002024:	001a      	movs	r2, r3
 8002026:	4b3c      	ldr	r3, [pc, #240]	@ (8002118 <edit_multiple_registers+0x1fc>)
 8002028:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 800202a:	2004      	movs	r0, #4
 800202c:	f000 fb40 	bl	80026b0 <get_rx_buffer>
 8002030:	0003      	movs	r3, r0
 8002032:	001a      	movs	r2, r3
 8002034:	4b38      	ldr	r3, [pc, #224]	@ (8002118 <edit_multiple_registers+0x1fc>)
 8002036:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 8002038:	2005      	movs	r0, #5
 800203a:	f000 fb39 	bl	80026b0 <get_rx_buffer>
 800203e:	0003      	movs	r3, r0
 8002040:	001a      	movs	r2, r3
 8002042:	4b35      	ldr	r3, [pc, #212]	@ (8002118 <edit_multiple_registers+0x1fc>)
 8002044:	715a      	strb	r2, [r3, #5]
	(*tx_len) = 6;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2206      	movs	r2, #6
 800204a:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 800204c:	2317      	movs	r3, #23
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
 8002054:	e032      	b.n	80020bc <edit_multiple_registers+0x1a0>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 8002056:	2517      	movs	r5, #23
 8002058:	197b      	adds	r3, r7, r5
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	18db      	adds	r3, r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	3307      	adds	r3, #7
 8002062:	b2db      	uxtb	r3, r3
 8002064:	0018      	movs	r0, r3
 8002066:	f000 fb23 	bl	80026b0 <get_rx_buffer>
 800206a:	0003      	movs	r3, r0
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	b21c      	sxth	r4, r3
 8002070:	197b      	adds	r3, r7, r5
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	3304      	adds	r3, #4
 8002076:	b2db      	uxtb	r3, r3
 8002078:	18db      	adds	r3, r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	0018      	movs	r0, r3
 800207e:	f000 fb17 	bl	80026b0 <get_rx_buffer>
 8002082:	0003      	movs	r3, r0
 8002084:	b21b      	sxth	r3, r3
 8002086:	4323      	orrs	r3, r4
 8002088:	b219      	sxth	r1, r3
 800208a:	2014      	movs	r0, #20
 800208c:	183b      	adds	r3, r7, r0
 800208e:	881a      	ldrh	r2, [r3, #0]
 8002090:	197b      	adds	r3, r7, r5
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	18d2      	adds	r2, r2, r3
 8002096:	b289      	uxth	r1, r1
 8002098:	4b20      	ldr	r3, [pc, #128]	@ (800211c <edit_multiple_registers+0x200>)
 800209a:	0052      	lsls	r2, r2, #1
 800209c:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 800209e:	197b      	adds	r3, r7, r5
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	183b      	adds	r3, r7, r0
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	18d3      	adds	r3, r2, r3
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	0018      	movs	r0, r3
 80020ae:	f000 f85f 	bl	8002170 <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 80020b2:	197b      	adds	r3, r7, r5
 80020b4:	781a      	ldrb	r2, [r3, #0]
 80020b6:	197b      	adds	r3, r7, r5
 80020b8:	3201      	adds	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	2317      	movs	r3, #23
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2212      	movs	r2, #18
 80020c6:	18ba      	adds	r2, r7, r2
 80020c8:	8812      	ldrh	r2, [r2, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d8c3      	bhi.n	8002056 <edit_multiple_registers+0x13a>

	// TIMING WORKAROUND START
//	HAL_Delay(1);
	// TIMING WORKAROUND END

	int8_t status = modbus_send((*tx_len));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	250f      	movs	r5, #15
 80020d4:	197c      	adds	r4, r7, r5
 80020d6:	0018      	movs	r0, r3
 80020d8:	f000 f906 	bl	80022e8 <modbus_send>
 80020dc:	0003      	movs	r3, r0
 80020de:	7023      	strb	r3, [r4, #0]

	if(status == MB_SUCCESS)
 80020e0:	197b      	adds	r3, r7, r5
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10d      	bne.n	8002106 <edit_multiple_registers+0x1ea>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 80020ea:	2314      	movs	r3, #20
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d808      	bhi.n	8002106 <edit_multiple_registers+0x1ea>
 80020f4:	2310      	movs	r3, #16
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <edit_multiple_registers+0x1ea>
		{
			return modbus_change_baud_rate();
 80020fe:	f000 fa4b 	bl	8002598 <modbus_change_baud_rate>
 8002102:	0003      	movs	r3, r0
 8002104:	e003      	b.n	800210e <edit_multiple_registers+0x1f2>
		}
	}
	return status;
 8002106:	230f      	movs	r3, #15
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	b25b      	sxtb	r3, r3
}
 800210e:	0018      	movs	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	b006      	add	sp, #24
 8002114:	bdb0      	pop	{r4, r5, r7, pc}
 8002116:	46c0      	nop			@ (mov r8, r8)
 8002118:	20000468 	.word	0x20000468
 800211c:	20000000 	.word	0x20000000

08002120 <modbus_exception>:

int8_t modbus_exception(int8_t exception_code)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	0002      	movs	r2, r0
 8002128:	1dfb      	adds	r3, r7, #7
 800212a:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 800212c:	2000      	movs	r0, #0
 800212e:	f000 fabf 	bl	80026b0 <get_rx_buffer>
 8002132:	0003      	movs	r3, r0
 8002134:	001a      	movs	r2, r3
 8002136:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <modbus_exception+0x4c>)
 8002138:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 800213a:	2001      	movs	r0, #1
 800213c:	f000 fab8 	bl	80026b0 <get_rx_buffer>
 8002140:	0003      	movs	r3, r0
 8002142:	001a      	movs	r2, r3
 8002144:	2380      	movs	r3, #128	@ 0x80
 8002146:	425b      	negs	r3, r3
 8002148:	4313      	orrs	r3, r2
 800214a:	b2da      	uxtb	r2, r3
 800214c:	4b07      	ldr	r3, [pc, #28]	@ (800216c <modbus_exception+0x4c>)
 800214e:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8002150:	1dfb      	adds	r3, r7, #7
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	3b03      	subs	r3, #3
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b04      	ldr	r3, [pc, #16]	@ (800216c <modbus_exception+0x4c>)
 800215a:	709a      	strb	r2, [r3, #2]

	return modbus_send(3);
 800215c:	2003      	movs	r0, #3
 800215e:	f000 f8c3 	bl	80022e8 <modbus_send>
 8002162:	0003      	movs	r3, r0
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b002      	add	sp, #8
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000468 	.word	0x20000468

08002170 <handle_range>:

void handle_range(uint16_t holding_register)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	0002      	movs	r2, r0
 8002178:	1dbb      	adds	r3, r7, #6
 800217a:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 800217c:	1dbb      	adds	r3, r7, #6
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	2b0f      	cmp	r3, #15
 8002182:	d900      	bls.n	8002186 <handle_range+0x16>
 8002184:	e0a6      	b.n	80022d4 <handle_range+0x164>
 8002186:	009a      	lsls	r2, r3, #2
 8002188:	4b54      	ldr	r3, [pc, #336]	@ (80022dc <handle_range+0x16c>)
 800218a:	18d3      	adds	r3, r2, r3
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	469f      	mov	pc, r3
	{
		case MODBUS_ID:
		{
			if(holding_register_database[holding_register] > 0xFF)
 8002190:	1dbb      	adds	r3, r7, #6
 8002192:	881a      	ldrh	r2, [r3, #0]
 8002194:	4b52      	ldr	r3, [pc, #328]	@ (80022e0 <handle_range+0x170>)
 8002196:	0052      	lsls	r2, r2, #1
 8002198:	5ad3      	ldrh	r3, [r2, r3]
 800219a:	2bff      	cmp	r3, #255	@ 0xff
 800219c:	d800      	bhi.n	80021a0 <handle_range+0x30>
 800219e:	e08a      	b.n	80022b6 <handle_range+0x146>
			{
				holding_register_database[holding_register] = 0xFF;
 80021a0:	1dbb      	adds	r3, r7, #6
 80021a2:	881a      	ldrh	r2, [r3, #0]
 80021a4:	4b4e      	ldr	r3, [pc, #312]	@ (80022e0 <handle_range+0x170>)
 80021a6:	0052      	lsls	r2, r2, #1
 80021a8:	21ff      	movs	r1, #255	@ 0xff
 80021aa:	52d1      	strh	r1, [r2, r3]
			}
			break;
 80021ac:	e083      	b.n	80022b6 <handle_range+0x146>
		}
		case MB_BAUD_RATE:
		{
			if(holding_register_database[holding_register] < BAUD_RATE_4800)
 80021ae:	1dbb      	adds	r3, r7, #6
 80021b0:	881a      	ldrh	r2, [r3, #0]
 80021b2:	4b4b      	ldr	r3, [pc, #300]	@ (80022e0 <handle_range+0x170>)
 80021b4:	0052      	lsls	r2, r2, #1
 80021b6:	5ad3      	ldrh	r3, [r2, r3]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d806      	bhi.n	80021ca <handle_range+0x5a>
			{
				holding_register_database[holding_register] = BAUD_RATE_4800;
 80021bc:	1dbb      	adds	r3, r7, #6
 80021be:	881a      	ldrh	r2, [r3, #0]
 80021c0:	4b47      	ldr	r3, [pc, #284]	@ (80022e0 <handle_range+0x170>)
 80021c2:	0052      	lsls	r2, r2, #1
 80021c4:	2102      	movs	r1, #2
 80021c6:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
			{
				holding_register_database[holding_register] = BAUD_RATE_256000;
			}
			break;
 80021c8:	e077      	b.n	80022ba <handle_range+0x14a>
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
 80021ca:	1dbb      	adds	r3, r7, #6
 80021cc:	881a      	ldrh	r2, [r3, #0]
 80021ce:	4b44      	ldr	r3, [pc, #272]	@ (80022e0 <handle_range+0x170>)
 80021d0:	0052      	lsls	r2, r2, #1
 80021d2:	5ad3      	ldrh	r3, [r2, r3]
 80021d4:	2b09      	cmp	r3, #9
 80021d6:	d800      	bhi.n	80021da <handle_range+0x6a>
 80021d8:	e06f      	b.n	80022ba <handle_range+0x14a>
				holding_register_database[holding_register] = BAUD_RATE_256000;
 80021da:	1dbb      	adds	r3, r7, #6
 80021dc:	881a      	ldrh	r2, [r3, #0]
 80021de:	4b40      	ldr	r3, [pc, #256]	@ (80022e0 <handle_range+0x170>)
 80021e0:	0052      	lsls	r2, r2, #1
 80021e2:	2109      	movs	r1, #9
 80021e4:	52d1      	strh	r1, [r2, r3]
			break;
 80021e6:	e068      	b.n	80022ba <handle_range+0x14a>
		}
		case MB_TRANSMIT_TIMEOUT:
		{
			if(holding_register_database[holding_register] < 5)
 80021e8:	1dbb      	adds	r3, r7, #6
 80021ea:	881a      	ldrh	r2, [r3, #0]
 80021ec:	4b3c      	ldr	r3, [pc, #240]	@ (80022e0 <handle_range+0x170>)
 80021ee:	0052      	lsls	r2, r2, #1
 80021f0:	5ad3      	ldrh	r3, [r2, r3]
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d806      	bhi.n	8002204 <handle_range+0x94>
			{
				holding_register_database[holding_register] = 5;
 80021f6:	1dbb      	adds	r3, r7, #6
 80021f8:	881a      	ldrh	r2, [r3, #0]
 80021fa:	4b39      	ldr	r3, [pc, #228]	@ (80022e0 <handle_range+0x170>)
 80021fc:	0052      	lsls	r2, r2, #1
 80021fe:	2105      	movs	r1, #5
 8002200:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 1000)
			{
				holding_register_database[holding_register] = 1000;
			}
			break;
 8002202:	e05c      	b.n	80022be <handle_range+0x14e>
			else if(holding_register_database[holding_register] > 1000)
 8002204:	1dbb      	adds	r3, r7, #6
 8002206:	881a      	ldrh	r2, [r3, #0]
 8002208:	4b35      	ldr	r3, [pc, #212]	@ (80022e0 <handle_range+0x170>)
 800220a:	0052      	lsls	r2, r2, #1
 800220c:	5ad2      	ldrh	r2, [r2, r3]
 800220e:	23fa      	movs	r3, #250	@ 0xfa
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	429a      	cmp	r2, r3
 8002214:	d953      	bls.n	80022be <handle_range+0x14e>
				holding_register_database[holding_register] = 1000;
 8002216:	1dbb      	adds	r3, r7, #6
 8002218:	881a      	ldrh	r2, [r3, #0]
 800221a:	4b31      	ldr	r3, [pc, #196]	@ (80022e0 <handle_range+0x170>)
 800221c:	0052      	lsls	r2, r2, #1
 800221e:	21fa      	movs	r1, #250	@ 0xfa
 8002220:	0089      	lsls	r1, r1, #2
 8002222:	52d1      	strh	r1, [r2, r3]
			break;
 8002224:	e04b      	b.n	80022be <handle_range+0x14e>
		}
		case MB_TRANSMIT_RETRIES:
		{
			if(holding_register_database[holding_register] > 5)
 8002226:	1dbb      	adds	r3, r7, #6
 8002228:	881a      	ldrh	r2, [r3, #0]
 800222a:	4b2d      	ldr	r3, [pc, #180]	@ (80022e0 <handle_range+0x170>)
 800222c:	0052      	lsls	r2, r2, #1
 800222e:	5ad3      	ldrh	r3, [r2, r3]
 8002230:	2b05      	cmp	r3, #5
 8002232:	d946      	bls.n	80022c2 <handle_range+0x152>
			{
				holding_register_database[holding_register] = 5;
 8002234:	1dbb      	adds	r3, r7, #6
 8002236:	881a      	ldrh	r2, [r3, #0]
 8002238:	4b29      	ldr	r3, [pc, #164]	@ (80022e0 <handle_range+0x170>)
 800223a:	0052      	lsls	r2, r2, #1
 800223c:	2105      	movs	r1, #5
 800223e:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8002240:	e03f      	b.n	80022c2 <handle_range+0x152>
		}
		case MB_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x3FF)
 8002242:	1dbb      	adds	r3, r7, #6
 8002244:	881a      	ldrh	r2, [r3, #0]
 8002246:	4b26      	ldr	r3, [pc, #152]	@ (80022e0 <handle_range+0x170>)
 8002248:	0052      	lsls	r2, r2, #1
 800224a:	5ad2      	ldrh	r2, [r2, r3]
 800224c:	2380      	movs	r3, #128	@ 0x80
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	429a      	cmp	r2, r3
 8002252:	d338      	bcc.n	80022c6 <handle_range+0x156>
			{
				holding_register_database[holding_register] = 0x3FF;
 8002254:	1dbb      	adds	r3, r7, #6
 8002256:	881a      	ldrh	r2, [r3, #0]
 8002258:	4b21      	ldr	r3, [pc, #132]	@ (80022e0 <handle_range+0x170>)
 800225a:	0052      	lsls	r2, r2, #1
 800225c:	4921      	ldr	r1, [pc, #132]	@ (80022e4 <handle_range+0x174>)
 800225e:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8002260:	e031      	b.n	80022c6 <handle_range+0x156>
		}
		case I2C_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x7F)
 8002262:	1dbb      	adds	r3, r7, #6
 8002264:	881a      	ldrh	r2, [r3, #0]
 8002266:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <handle_range+0x170>)
 8002268:	0052      	lsls	r2, r2, #1
 800226a:	5ad3      	ldrh	r3, [r2, r3]
 800226c:	2b7f      	cmp	r3, #127	@ 0x7f
 800226e:	d92c      	bls.n	80022ca <handle_range+0x15a>
			{
				holding_register_database[holding_register] = 0x7F;
 8002270:	1dbb      	adds	r3, r7, #6
 8002272:	881a      	ldrh	r2, [r3, #0]
 8002274:	4b1a      	ldr	r3, [pc, #104]	@ (80022e0 <handle_range+0x170>)
 8002276:	0052      	lsls	r2, r2, #1
 8002278:	217f      	movs	r1, #127	@ 0x7f
 800227a:	52d1      	strh	r1, [r2, r3]
			}
			break;
 800227c:	e025      	b.n	80022ca <handle_range+0x15a>
		}
		case I2C_SHUTDOWN:
		{
			if(holding_register_database[holding_register] > 1)
 800227e:	1dbb      	adds	r3, r7, #6
 8002280:	881a      	ldrh	r2, [r3, #0]
 8002282:	4b17      	ldr	r3, [pc, #92]	@ (80022e0 <handle_range+0x170>)
 8002284:	0052      	lsls	r2, r2, #1
 8002286:	5ad3      	ldrh	r3, [r2, r3]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d920      	bls.n	80022ce <handle_range+0x15e>
			{
				holding_register_database[holding_register] = 1;
 800228c:	1dbb      	adds	r3, r7, #6
 800228e:	881a      	ldrh	r2, [r3, #0]
 8002290:	4b13      	ldr	r3, [pc, #76]	@ (80022e0 <handle_range+0x170>)
 8002292:	0052      	lsls	r2, r2, #1
 8002294:	2101      	movs	r1, #1
 8002296:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8002298:	e019      	b.n	80022ce <handle_range+0x15e>
		}
		case GPIO_WRITE:
		{
			if(holding_register_database[holding_register] > 0xF)
 800229a:	1dbb      	adds	r3, r7, #6
 800229c:	881a      	ldrh	r2, [r3, #0]
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <handle_range+0x170>)
 80022a0:	0052      	lsls	r2, r2, #1
 80022a2:	5ad3      	ldrh	r3, [r2, r3]
 80022a4:	2b0f      	cmp	r3, #15
 80022a6:	d914      	bls.n	80022d2 <handle_range+0x162>
			{
				holding_register_database[holding_register] = 0xF;
 80022a8:	1dbb      	adds	r3, r7, #6
 80022aa:	881a      	ldrh	r2, [r3, #0]
 80022ac:	4b0c      	ldr	r3, [pc, #48]	@ (80022e0 <handle_range+0x170>)
 80022ae:	0052      	lsls	r2, r2, #1
 80022b0:	210f      	movs	r1, #15
 80022b2:	52d1      	strh	r1, [r2, r3]
			}
			break;
 80022b4:	e00d      	b.n	80022d2 <handle_range+0x162>
			break;
 80022b6:	46c0      	nop			@ (mov r8, r8)
 80022b8:	e00c      	b.n	80022d4 <handle_range+0x164>
			break;
 80022ba:	46c0      	nop			@ (mov r8, r8)
 80022bc:	e00a      	b.n	80022d4 <handle_range+0x164>
			break;
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	e008      	b.n	80022d4 <handle_range+0x164>
			break;
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	e006      	b.n	80022d4 <handle_range+0x164>
			break;
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	e004      	b.n	80022d4 <handle_range+0x164>
			break;
 80022ca:	46c0      	nop			@ (mov r8, r8)
 80022cc:	e002      	b.n	80022d4 <handle_range+0x164>
			break;
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	e000      	b.n	80022d4 <handle_range+0x164>
			break;
 80022d2:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 80022d4:	46c0      	nop			@ (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b002      	add	sp, #8
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	0800aef4 	.word	0x0800aef4
 80022e0:	20000000 	.word	0x20000000
 80022e4:	000003ff 	.word	0x000003ff

080022e8 <modbus_send>:
#endif // MB_SLAVE

// General Modbus Functions -------------------------------------------------------------------

int8_t modbus_send(uint8_t size)
{
 80022e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	0002      	movs	r2, r0
 80022f0:	1dfb      	adds	r3, r7, #7
 80022f2:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 80022f4:	250f      	movs	r5, #15
 80022f6:	197b      	adds	r3, r7, r5
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 80022fc:	260c      	movs	r6, #12
 80022fe:	19bc      	adds	r4, r7, r6
 8002300:	1dfb      	adds	r3, r7, #7
 8002302:	781a      	ldrb	r2, [r3, #0]
 8002304:	4b1f      	ldr	r3, [pc, #124]	@ (8002384 <modbus_send+0x9c>)
 8002306:	0011      	movs	r1, r2
 8002308:	0018      	movs	r0, r3
 800230a:	f000 f9ff 	bl	800270c <crc_16>
 800230e:	0003      	movs	r3, r0
 8002310:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 8002312:	1dfb      	adds	r3, r7, #7
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	19ba      	adds	r2, r7, r6
 8002318:	8812      	ldrh	r2, [r2, #0]
 800231a:	b2d1      	uxtb	r1, r2
 800231c:	4a19      	ldr	r2, [pc, #100]	@ (8002384 <modbus_send+0x9c>)
 800231e:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 8002320:	19bb      	adds	r3, r7, r6
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	b29a      	uxth	r2, r3
 8002328:	1dfb      	adds	r3, r7, #7
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	b2d1      	uxtb	r1, r2
 8002330:	4a14      	ldr	r2, [pc, #80]	@ (8002384 <modbus_send+0x9c>)
 8002332:	54d1      	strb	r1, [r2, r3]

	uart_tx_int = 0; // This will enable tx timeout monitoring
 8002334:	4b14      	ldr	r3, [pc, #80]	@ (8002388 <modbus_send+0xa0>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
	tx_time = HAL_GetTick();
 800233a:	f003 fbd3 	bl	8005ae4 <HAL_GetTick>
 800233e:	0002      	movs	r2, r0
 8002340:	4b12      	ldr	r3, [pc, #72]	@ (800238c <modbus_send+0xa4>)
 8002342:	601a      	str	r2, [r3, #0]
	status = HAL_UART_Transmit_DMA(&huart1, modbus_tx_buffer, size + 2);
 8002344:	1dfb      	adds	r3, r7, #7
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	b29b      	uxth	r3, r3
 800234a:	3302      	adds	r3, #2
 800234c:	b29a      	uxth	r2, r3
 800234e:	490d      	ldr	r1, [pc, #52]	@ (8002384 <modbus_send+0x9c>)
 8002350:	4b0f      	ldr	r3, [pc, #60]	@ (8002390 <modbus_send+0xa8>)
 8002352:	0018      	movs	r0, r3
 8002354:	f006 ff50 	bl	80091f8 <HAL_UART_Transmit_DMA>
 8002358:	0003      	movs	r3, r0
 800235a:	001a      	movs	r2, r3
 800235c:	197b      	adds	r3, r7, r5
 800235e:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huart1.hdmatx, DMA_IT_HT);
 8002360:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <modbus_send+0xa8>)
 8002362:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b09      	ldr	r3, [pc, #36]	@ (8002390 <modbus_send+0xa8>)
 800236a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2104      	movs	r1, #4
 8002370:	438a      	bics	r2, r1
 8002372:	601a      	str	r2, [r3, #0]
	return status;
 8002374:	197b      	adds	r3, r7, r5
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	b25b      	sxtb	r3, r3
}
 800237a:	0018      	movs	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	b005      	add	sp, #20
 8002380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002382:	46c0      	nop			@ (mov r8, r8)
 8002384:	20000468 	.word	0x20000468
 8002388:	20000022 	.word	0x20000022
 800238c:	20000568 	.word	0x20000568
 8002390:	20000218 	.word	0x20000218

08002394 <modbus_reset>:

int8_t modbus_reset()
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
	int8_t status = 0;
 800239a:	1dfb      	adds	r3, r7, #7
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Abort(&huart1);
 80023a0:	4b34      	ldr	r3, [pc, #208]	@ (8002474 <modbus_reset+0xe0>)
 80023a2:	0018      	movs	r0, r3
 80023a4:	f006 ffba 	bl	800931c <HAL_UART_Abort>
 80023a8:	0003      	movs	r3, r0
 80023aa:	001a      	movs	r2, r3
 80023ac:	1dfb      	adds	r3, r7, #7
 80023ae:	701a      	strb	r2, [r3, #0]
	status |= HAL_UART_DeInit(&huart1);
 80023b0:	4b30      	ldr	r3, [pc, #192]	@ (8002474 <modbus_reset+0xe0>)
 80023b2:	0018      	movs	r0, r3
 80023b4:	f006 fee0 	bl	8009178 <HAL_UART_DeInit>
 80023b8:	0003      	movs	r3, r0
 80023ba:	b259      	sxtb	r1, r3
 80023bc:	1dfb      	adds	r3, r7, #7
 80023be:	1dfa      	adds	r2, r7, #7
 80023c0:	7812      	ldrb	r2, [r2, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	701a      	strb	r2, [r3, #0]
	__USART1_FORCE_RESET();
 80023c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002478 <modbus_reset+0xe4>)
 80023c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002478 <modbus_reset+0xe4>)
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	01c9      	lsls	r1, r1, #7
 80023d0:	430a      	orrs	r2, r1
 80023d2:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_Delay(100);
 80023d4:	2064      	movs	r0, #100	@ 0x64
 80023d6:	f003 fb8f 	bl	8005af8 <HAL_Delay>
	__USART1_RELEASE_RESET();
 80023da:	4b27      	ldr	r3, [pc, #156]	@ (8002478 <modbus_reset+0xe4>)
 80023dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023de:	4b26      	ldr	r3, [pc, #152]	@ (8002478 <modbus_reset+0xe4>)
 80023e0:	4926      	ldr	r1, [pc, #152]	@ (800247c <modbus_reset+0xe8>)
 80023e2:	400a      	ands	r2, r1
 80023e4:	631a      	str	r2, [r3, #48]	@ 0x30
	status = HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0);
 80023e6:	4823      	ldr	r0, [pc, #140]	@ (8002474 <modbus_reset+0xe0>)
 80023e8:	2300      	movs	r3, #0
 80023ea:	2200      	movs	r2, #0
 80023ec:	2100      	movs	r1, #0
 80023ee:	f008 fa33 	bl	800a858 <HAL_RS485Ex_Init>
 80023f2:	0003      	movs	r3, r0
 80023f4:	001a      	movs	r2, r3
 80023f6:	1dfb      	adds	r3, r7, #7
 80023f8:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8);
 80023fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002474 <modbus_reset+0xe0>)
 80023fc:	2100      	movs	r1, #0
 80023fe:	0018      	movs	r0, r3
 8002400:	f008 faee 	bl	800a9e0 <HAL_UARTEx_SetTxFifoThreshold>
 8002404:	0003      	movs	r3, r0
 8002406:	b259      	sxtb	r1, r3
 8002408:	1dfb      	adds	r3, r7, #7
 800240a:	1dfa      	adds	r2, r7, #7
 800240c:	7812      	ldrb	r2, [r2, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8);
 8002412:	4b18      	ldr	r3, [pc, #96]	@ (8002474 <modbus_reset+0xe0>)
 8002414:	2100      	movs	r1, #0
 8002416:	0018      	movs	r0, r3
 8002418:	f008 fb22 	bl	800aa60 <HAL_UARTEx_SetRxFifoThreshold>
 800241c:	0003      	movs	r3, r0
 800241e:	b259      	sxtb	r1, r3
 8002420:	1dfb      	adds	r3, r7, #7
 8002422:	1dfa      	adds	r2, r7, #7
 8002424:	7812      	ldrb	r2, [r2, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_DisableFifoMode(&huart1);
 800242a:	4b12      	ldr	r3, [pc, #72]	@ (8002474 <modbus_reset+0xe0>)
 800242c:	0018      	movs	r0, r3
 800242e:	f008 fa9d 	bl	800a96c <HAL_UARTEx_DisableFifoMode>
 8002432:	0003      	movs	r3, r0
 8002434:	b259      	sxtb	r1, r3
 8002436:	1dfb      	adds	r3, r7, #7
 8002438:	1dfa      	adds	r2, r7, #7
 800243a:	7812      	ldrb	r2, [r2, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	701a      	strb	r2, [r3, #0]
	status |= modbus_set_rx();
 8002440:	f000 f81e 	bl	8002480 <modbus_set_rx>
 8002444:	0003      	movs	r3, r0
 8002446:	0019      	movs	r1, r3
 8002448:	1dfb      	adds	r3, r7, #7
 800244a:	1dfa      	adds	r2, r7, #7
 800244c:	7812      	ldrb	r2, [r2, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8002452:	1dfb      	adds	r3, r7, #7
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b25b      	sxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <modbus_reset+0xd2>
	{
		return handle_modbus_error(MB_FATAL_ERROR);
 800245c:	2015      	movs	r0, #21
 800245e:	f000 f937 	bl	80026d0 <handle_modbus_error>
 8002462:	0003      	movs	r3, r0
 8002464:	e002      	b.n	800246c <modbus_reset+0xd8>
	}
	return status;
 8002466:	1dfb      	adds	r3, r7, #7
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	b25b      	sxtb	r3, r3
}
 800246c:	0018      	movs	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	b002      	add	sp, #8
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000218 	.word	0x20000218
 8002478:	40021000 	.word	0x40021000
 800247c:	ffffbfff 	.word	0xffffbfff

08002480 <modbus_set_rx>:

int8_t modbus_set_rx()
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, 6);
 8002486:	490e      	ldr	r1, [pc, #56]	@ (80024c0 <modbus_set_rx+0x40>)
 8002488:	4b0e      	ldr	r3, [pc, #56]	@ (80024c4 <modbus_set_rx+0x44>)
 800248a:	2206      	movs	r2, #6
 800248c:	0018      	movs	r0, r3
 800248e:	f008 fb29 	bl	800aae4 <HAL_UARTEx_ReceiveToIdle_DMA>
 8002492:	0003      	movs	r3, r0
 8002494:	001a      	movs	r2, r3
 8002496:	1dfb      	adds	r3, r7, #7
 8002498:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 800249a:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <modbus_set_rx+0x44>)
 800249c:	2280      	movs	r2, #128	@ 0x80
 800249e:	589b      	ldr	r3, [r3, r2]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4b07      	ldr	r3, [pc, #28]	@ (80024c4 <modbus_set_rx+0x44>)
 80024a6:	2180      	movs	r1, #128	@ 0x80
 80024a8:	585b      	ldr	r3, [r3, r1]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2104      	movs	r1, #4
 80024ae:	438a      	bics	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]

	return status;
 80024b2:	1dfb      	adds	r3, r7, #7
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	b25b      	sxtb	r3, r3
}
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b002      	add	sp, #8
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000368 	.word	0x20000368
 80024c4:	20000218 	.word	0x20000218

080024c8 <monitor_modbus>:

int8_t monitor_modbus()
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
	int8_t status = MB_SUCCESS;
 80024ce:	1dfb      	adds	r3, r7, #7
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]

	// Chunk miss handling
	status = handle_chunk_miss();
 80024d4:	1dfc      	adds	r4, r7, #7
 80024d6:	f000 f95f 	bl	8002798 <handle_chunk_miss>
 80024da:	0003      	movs	r3, r0
 80024dc:	7023      	strb	r3, [r4, #0]
	if(status != MB_SUCCESS)
 80024de:	1dfb      	adds	r3, r7, #7
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	b25b      	sxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d012      	beq.n	800250e <monitor_modbus+0x46>
	{
		status = modbus_reset();
 80024e8:	1dfc      	adds	r4, r7, #7
 80024ea:	f7ff ff53 	bl	8002394 <modbus_reset>
 80024ee:	0003      	movs	r3, r0
 80024f0:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 80024f2:	1dfb      	adds	r3, r7, #7
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	b25b      	sxtb	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <monitor_modbus+0x3c>
		{
			return status;
 80024fc:	1dfb      	adds	r3, r7, #7
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	b25b      	sxtb	r3, r3
 8002502:	e03c      	b.n	800257e <monitor_modbus+0xb6>
		}
		return handle_modbus_error(MB_UART_ERROR);
 8002504:	2014      	movs	r0, #20
 8002506:	f000 f8e3 	bl	80026d0 <handle_modbus_error>
 800250a:	0003      	movs	r3, r0
 800250c:	e037      	b.n	800257e <monitor_modbus+0xb6>
	}

	// Uart error handling
	if(uart_err_int)
 800250e:	4b1e      	ldr	r3, [pc, #120]	@ (8002588 <monitor_modbus+0xc0>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d015      	beq.n	8002544 <monitor_modbus+0x7c>
	{
		uart_err_int = 0;
 8002518:	4b1b      	ldr	r3, [pc, #108]	@ (8002588 <monitor_modbus+0xc0>)
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
		status = modbus_reset();
 800251e:	1dfc      	adds	r4, r7, #7
 8002520:	f7ff ff38 	bl	8002394 <modbus_reset>
 8002524:	0003      	movs	r3, r0
 8002526:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 8002528:	1dfb      	adds	r3, r7, #7
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	b25b      	sxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <monitor_modbus+0x72>
		{
			return status;
 8002532:	1dfb      	adds	r3, r7, #7
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b25b      	sxtb	r3, r3
 8002538:	e021      	b.n	800257e <monitor_modbus+0xb6>
		}
		return handle_modbus_error(MB_UART_ERROR);
 800253a:	2014      	movs	r0, #20
 800253c:	f000 f8c8 	bl	80026d0 <handle_modbus_error>
 8002540:	0003      	movs	r3, r0
 8002542:	e01c      	b.n	800257e <monitor_modbus+0xb6>
	}

	// TX timeout handling
	if(!uart_tx_int)
 8002544:	4b11      	ldr	r3, [pc, #68]	@ (800258c <monitor_modbus+0xc4>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d114      	bne.n	8002578 <monitor_modbus+0xb0>
	{
		if(HAL_GetTick() - tx_time >= holding_register_database[MB_TRANSMIT_TIMEOUT])
 800254e:	f003 fac9 	bl	8005ae4 <HAL_GetTick>
 8002552:	0002      	movs	r2, r0
 8002554:	4b0e      	ldr	r3, [pc, #56]	@ (8002590 <monitor_modbus+0xc8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	4a0e      	ldr	r2, [pc, #56]	@ (8002594 <monitor_modbus+0xcc>)
 800255c:	8892      	ldrh	r2, [r2, #4]
 800255e:	4293      	cmp	r3, r2
 8002560:	d307      	bcc.n	8002572 <monitor_modbus+0xaa>
		{
			uart_tx_int = 1;
 8002562:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <monitor_modbus+0xc4>)
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
			return handle_modbus_error(MB_TX_TIMEOUT);
 8002568:	2012      	movs	r0, #18
 800256a:	f000 f8b1 	bl	80026d0 <handle_modbus_error>
 800256e:	0003      	movs	r3, r0
 8002570:	e005      	b.n	800257e <monitor_modbus+0xb6>
		}
		status = HAL_BUSY;
 8002572:	1dfb      	adds	r3, r7, #7
 8002574:	2202      	movs	r2, #2
 8002576:	701a      	strb	r2, [r3, #0]
			}
			status = HAL_BUSY;
		}
	}
#endif
	return status;
 8002578:	1dfb      	adds	r3, r7, #7
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	b25b      	sxtb	r3, r3
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b003      	add	sp, #12
 8002584:	bd90      	pop	{r4, r7, pc}
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	20000571 	.word	0x20000571
 800258c:	20000022 	.word	0x20000022
 8002590:	20000568 	.word	0x20000568
 8002594:	20000000 	.word	0x20000000

08002598 <modbus_change_baud_rate>:

	return status;
}

int8_t modbus_change_baud_rate()
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
	int8_t status = 0;
 800259e:	1dfb      	adds	r3, r7, #7
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[MB_BAUD_RATE])
 80025a4:	4b3f      	ldr	r3, [pc, #252]	@ (80026a4 <modbus_change_baud_rate+0x10c>)
 80025a6:	885b      	ldrh	r3, [r3, #2]
 80025a8:	2b09      	cmp	r3, #9
 80025aa:	d831      	bhi.n	8002610 <modbus_change_baud_rate+0x78>
 80025ac:	009a      	lsls	r2, r3, #2
 80025ae:	4b3e      	ldr	r3, [pc, #248]	@ (80026a8 <modbus_change_baud_rate+0x110>)
 80025b0:	18d3      	adds	r3, r2, r3
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	469f      	mov	pc, r3
	{
		case BAUD_RATE_2400:
		{
			huart1.Init.BaudRate = 2400;
 80025b6:	4b3d      	ldr	r3, [pc, #244]	@ (80026ac <modbus_change_baud_rate+0x114>)
 80025b8:	2296      	movs	r2, #150	@ 0x96
 80025ba:	0112      	lsls	r2, r2, #4
 80025bc:	605a      	str	r2, [r3, #4]
			break;
 80025be:	e04e      	b.n	800265e <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 80025c0:	4b3a      	ldr	r3, [pc, #232]	@ (80026ac <modbus_change_baud_rate+0x114>)
 80025c2:	2296      	movs	r2, #150	@ 0x96
 80025c4:	0152      	lsls	r2, r2, #5
 80025c6:	605a      	str	r2, [r3, #4]
			break;
 80025c8:	e049      	b.n	800265e <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 80025ca:	4b38      	ldr	r3, [pc, #224]	@ (80026ac <modbus_change_baud_rate+0x114>)
 80025cc:	2296      	movs	r2, #150	@ 0x96
 80025ce:	0192      	lsls	r2, r2, #6
 80025d0:	605a      	str	r2, [r3, #4]
			break;
 80025d2:	e044      	b.n	800265e <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 80025d4:	4b35      	ldr	r3, [pc, #212]	@ (80026ac <modbus_change_baud_rate+0x114>)
 80025d6:	2296      	movs	r2, #150	@ 0x96
 80025d8:	01d2      	lsls	r2, r2, #7
 80025da:	605a      	str	r2, [r3, #4]
			break;
 80025dc:	e03f      	b.n	800265e <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 80025de:	4b33      	ldr	r3, [pc, #204]	@ (80026ac <modbus_change_baud_rate+0x114>)
 80025e0:	2296      	movs	r2, #150	@ 0x96
 80025e2:	0212      	lsls	r2, r2, #8
 80025e4:	605a      	str	r2, [r3, #4]
			break;
 80025e6:	e03a      	b.n	800265e <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 80025e8:	4b30      	ldr	r3, [pc, #192]	@ (80026ac <modbus_change_baud_rate+0x114>)
 80025ea:	22e1      	movs	r2, #225	@ 0xe1
 80025ec:	0212      	lsls	r2, r2, #8
 80025ee:	605a      	str	r2, [r3, #4]
			break;
 80025f0:	e035      	b.n	800265e <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 80025f2:	4b2e      	ldr	r3, [pc, #184]	@ (80026ac <modbus_change_baud_rate+0x114>)
 80025f4:	22e1      	movs	r2, #225	@ 0xe1
 80025f6:	0252      	lsls	r2, r2, #9
 80025f8:	605a      	str	r2, [r3, #4]
			break;
 80025fa:	e030      	b.n	800265e <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 80025fc:	4b2b      	ldr	r3, [pc, #172]	@ (80026ac <modbus_change_baud_rate+0x114>)
 80025fe:	22fa      	movs	r2, #250	@ 0xfa
 8002600:	0252      	lsls	r2, r2, #9
 8002602:	605a      	str	r2, [r3, #4]
			break;
 8002604:	e02b      	b.n	800265e <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 8002606:	4b29      	ldr	r3, [pc, #164]	@ (80026ac <modbus_change_baud_rate+0x114>)
 8002608:	22fa      	movs	r2, #250	@ 0xfa
 800260a:	0292      	lsls	r2, r2, #10
 800260c:	605a      	str	r2, [r3, #4]
			break;
 800260e:	e026      	b.n	800265e <modbus_change_baud_rate+0xc6>
		}
		default:
		{
			holding_register_database[MB_BAUD_RATE] = BAUD_RATE_9600;
 8002610:	4b24      	ldr	r3, [pc, #144]	@ (80026a4 <modbus_change_baud_rate+0x10c>)
 8002612:	2203      	movs	r2, #3
 8002614:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 8002616:	4b25      	ldr	r3, [pc, #148]	@ (80026ac <modbus_change_baud_rate+0x114>)
 8002618:	2296      	movs	r2, #150	@ 0x96
 800261a:	0192      	lsls	r2, r2, #6
 800261c:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 800261e:	4b23      	ldr	r3, [pc, #140]	@ (80026ac <modbus_change_baud_rate+0x114>)
 8002620:	0018      	movs	r0, r3
 8002622:	f007 fae5 	bl	8009bf0 <UART_SetConfig>
 8002626:	0003      	movs	r3, r0
 8002628:	001a      	movs	r2, r3
 800262a:	1dfb      	adds	r3, r7, #7
 800262c:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 800262e:	1dfb      	adds	r3, r7, #7
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	b25b      	sxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10d      	bne.n	8002654 <modbus_change_baud_rate+0xbc>
			{
				status = modbus_reset();
 8002638:	1dfc      	adds	r4, r7, #7
 800263a:	f7ff feab 	bl	8002394 <modbus_reset>
 800263e:	0003      	movs	r3, r0
 8002640:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK)
 8002642:	1dfb      	adds	r3, r7, #7
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	b25b      	sxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <modbus_change_baud_rate+0xbc>
				{
					return status;
 800264c:	1dfb      	adds	r3, r7, #7
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	b25b      	sxtb	r3, r3
 8002652:	e022      	b.n	800269a <modbus_change_baud_rate+0x102>
				}
			}
			return handle_modbus_error(RANGE_ERROR);
 8002654:	200e      	movs	r0, #14
 8002656:	f000 f83b 	bl	80026d0 <handle_modbus_error>
 800265a:	0003      	movs	r3, r0
 800265c:	e01d      	b.n	800269a <modbus_change_baud_rate+0x102>
		}
	}
	status = UART_SetConfig(&huart1);
 800265e:	4b13      	ldr	r3, [pc, #76]	@ (80026ac <modbus_change_baud_rate+0x114>)
 8002660:	0018      	movs	r0, r3
 8002662:	f007 fac5 	bl	8009bf0 <UART_SetConfig>
 8002666:	0003      	movs	r3, r0
 8002668:	001a      	movs	r2, r3
 800266a:	1dfb      	adds	r3, r7, #7
 800266c:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
 800266e:	1dfb      	adds	r3, r7, #7
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	b25b      	sxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10d      	bne.n	8002694 <modbus_change_baud_rate+0xfc>
	{
		// Log error, reset UART
		status = modbus_reset();
 8002678:	1dfc      	adds	r4, r7, #7
 800267a:	f7ff fe8b 	bl	8002394 <modbus_reset>
 800267e:	0003      	movs	r3, r0
 8002680:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 8002682:	1dfb      	adds	r3, r7, #7
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b25b      	sxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <modbus_change_baud_rate+0xfc>
		{
			return status;
 800268c:	1dfb      	adds	r3, r7, #7
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	b25b      	sxtb	r3, r3
 8002692:	e002      	b.n	800269a <modbus_change_baud_rate+0x102>
		}
	}

	return modbus_set_rx();
 8002694:	f7ff fef4 	bl	8002480 <modbus_set_rx>
 8002698:	0003      	movs	r3, r0
}
 800269a:	0018      	movs	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	b003      	add	sp, #12
 80026a0:	bd90      	pop	{r4, r7, pc}
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	20000000 	.word	0x20000000
 80026a8:	0800af34 	.word	0x0800af34
 80026ac:	20000218 	.word	0x20000218

080026b0 <get_rx_buffer>:
}


// Low Level Functions -------------------------------------------------------------------------
uint8_t get_rx_buffer(uint8_t index)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	0002      	movs	r2, r0
 80026b8:	1dfb      	adds	r3, r7, #7
 80026ba:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE)
	{
		return modbus_rx_buffer[index];
 80026bc:	1dfb      	adds	r3, r7, #7
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	4a02      	ldr	r2, [pc, #8]	@ (80026cc <get_rx_buffer+0x1c>)
 80026c2:	5cd3      	ldrb	r3, [r2, r3]
	}
	return 0xFF;
}
 80026c4:	0018      	movs	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b002      	add	sp, #8
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000368 	.word	0x20000368

080026d0 <handle_modbus_error>:

int8_t handle_modbus_error(int8_t error_code)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	0002      	movs	r2, r0
 80026d8:	1dfb      	adds	r3, r7, #7
 80026da:	701a      	strb	r2, [r3, #0]
	holding_register_database[MB_ERRORS] |= 1U << (error_code - RANGE_ERROR);
 80026dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002708 <handle_modbus_error+0x38>)
 80026de:	891a      	ldrh	r2, [r3, #8]
 80026e0:	1dfb      	adds	r3, r7, #7
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	b25b      	sxtb	r3, r3
 80026e6:	3b0e      	subs	r3, #14
 80026e8:	2101      	movs	r1, #1
 80026ea:	4099      	lsls	r1, r3
 80026ec:	000b      	movs	r3, r1
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	4313      	orrs	r3, r2
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <handle_modbus_error+0x38>)
 80026f6:	811a      	strh	r2, [r3, #8]
	return error_code;
 80026f8:	1dfb      	adds	r3, r7, #7
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	b25b      	sxtb	r3, r3
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b002      	add	sp, #8
 8002704:	bd80      	pop	{r7, pc}
 8002706:	46c0      	nop			@ (mov r8, r8)
 8002708:	20000000 	.word	0x20000000

0800270c <crc_16>:

// Private Functions ---------------------------------------------------------------------------

uint16_t crc_16(uint8_t *data, uint8_t size)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	000a      	movs	r2, r1
 8002716:	1cfb      	adds	r3, r7, #3
 8002718:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 800271a:	230f      	movs	r3, #15
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	22ff      	movs	r2, #255	@ 0xff
 8002720:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 8002722:	230e      	movs	r3, #14
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	22ff      	movs	r2, #255	@ 0xff
 8002728:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 800272a:	e019      	b.n	8002760 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	781a      	ldrb	r2, [r3, #0]
 8002734:	200e      	movs	r0, #14
 8002736:	183b      	adds	r3, r7, r0
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	4053      	eors	r3, r2
 800273c:	b2db      	uxtb	r3, r3
 800273e:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8002740:	4a13      	ldr	r2, [pc, #76]	@ (8002790 <crc_16+0x84>)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	18d3      	adds	r3, r2, r3
 8002746:	7819      	ldrb	r1, [r3, #0]
 8002748:	183b      	adds	r3, r7, r0
 800274a:	200f      	movs	r0, #15
 800274c:	183a      	adds	r2, r7, r0
 800274e:	7812      	ldrb	r2, [r2, #0]
 8002750:	404a      	eors	r2, r1
 8002752:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 8002754:	183b      	adds	r3, r7, r0
 8002756:	490f      	ldr	r1, [pc, #60]	@ (8002794 <crc_16+0x88>)
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	188a      	adds	r2, r1, r2
 800275c:	7812      	ldrb	r2, [r2, #0]
 800275e:	701a      	strb	r2, [r3, #0]
	while (size--)
 8002760:	1cfb      	adds	r3, r7, #3
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	1cfa      	adds	r2, r7, #3
 8002766:	1e59      	subs	r1, r3, #1
 8002768:	7011      	strb	r1, [r2, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1de      	bne.n	800272c <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 800276e:	230f      	movs	r3, #15
 8002770:	18fb      	adds	r3, r7, r3
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	021b      	lsls	r3, r3, #8
 8002776:	b21a      	sxth	r2, r3
 8002778:	230e      	movs	r3, #14
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	b21b      	sxth	r3, r3
 8002780:	4313      	orrs	r3, r2
 8002782:	b21b      	sxth	r3, r3
 8002784:	b29b      	uxth	r3, r3
}
 8002786:	0018      	movs	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	b004      	add	sp, #16
 800278c:	bd80      	pop	{r7, pc}
 800278e:	46c0      	nop			@ (mov r8, r8)
 8002790:	0800acf4 	.word	0x0800acf4
 8002794:	0800adf4 	.word	0x0800adf4

08002798 <handle_chunk_miss>:

int8_t handle_chunk_miss()
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 800279e:	4b15      	ldr	r3, [pc, #84]	@ (80027f4 <handle_chunk_miss+0x5c>)
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d120      	bne.n	80027ea <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 80027a8:	f003 f99c 	bl	8005ae4 <HAL_GetTick>
 80027ac:	0002      	movs	r2, r0
 80027ae:	4b12      	ldr	r3, [pc, #72]	@ (80027f8 <handle_chunk_miss+0x60>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b0a      	cmp	r3, #10
 80027b6:	d918      	bls.n	80027ea <handle_chunk_miss+0x52>
		{
			modbus_header = 1;
 80027b8:	4b0e      	ldr	r3, [pc, #56]	@ (80027f4 <handle_chunk_miss+0x5c>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort(&huart1);
 80027be:	4b0f      	ldr	r3, [pc, #60]	@ (80027fc <handle_chunk_miss+0x64>)
 80027c0:	0018      	movs	r0, r3
 80027c2:	f006 fdab 	bl	800931c <HAL_UART_Abort>
 80027c6:	0003      	movs	r3, r0
 80027c8:	001a      	movs	r2, r3
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	b25b      	sxtb	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d104      	bne.n	80027e2 <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 80027d8:	1dfc      	adds	r4, r7, #7
 80027da:	f7ff fe51 	bl	8002480 <modbus_set_rx>
 80027de:	0003      	movs	r3, r0
 80027e0:	7023      	strb	r3, [r4, #0]
			}
			return status;
 80027e2:	1dfb      	adds	r3, r7, #7
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	b25b      	sxtb	r3, r3
 80027e8:	e000      	b.n	80027ec <handle_chunk_miss+0x54>
		}
	}
	return MB_SUCCESS;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	0018      	movs	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b003      	add	sp, #12
 80027f2:	bd90      	pop	{r4, r7, pc}
 80027f4:	20000020 	.word	0x20000020
 80027f8:	2000056c 	.word	0x2000056c
 80027fc:	20000218 	.word	0x20000218

08002800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002806:	4b0f      	ldr	r3, [pc, #60]	@ (8002844 <HAL_MspInit+0x44>)
 8002808:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800280a:	4b0e      	ldr	r3, [pc, #56]	@ (8002844 <HAL_MspInit+0x44>)
 800280c:	2101      	movs	r1, #1
 800280e:	430a      	orrs	r2, r1
 8002810:	641a      	str	r2, [r3, #64]	@ 0x40
 8002812:	4b0c      	ldr	r3, [pc, #48]	@ (8002844 <HAL_MspInit+0x44>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	2201      	movs	r2, #1
 8002818:	4013      	ands	r3, r2
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800281e:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <HAL_MspInit+0x44>)
 8002820:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002822:	4b08      	ldr	r3, [pc, #32]	@ (8002844 <HAL_MspInit+0x44>)
 8002824:	2180      	movs	r1, #128	@ 0x80
 8002826:	0549      	lsls	r1, r1, #21
 8002828:	430a      	orrs	r2, r1
 800282a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800282c:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_MspInit+0x44>)
 800282e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002830:	2380      	movs	r3, #128	@ 0x80
 8002832:	055b      	lsls	r3, r3, #21
 8002834:	4013      	ands	r3, r2
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	46bd      	mov	sp, r7
 800283e:	b002      	add	sp, #8
 8002840:	bd80      	pop	{r7, pc}
 8002842:	46c0      	nop			@ (mov r8, r8)
 8002844:	40021000 	.word	0x40021000

08002848 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b093      	sub	sp, #76	@ 0x4c
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	2334      	movs	r3, #52	@ 0x34
 8002852:	18fb      	adds	r3, r7, r3
 8002854:	0018      	movs	r0, r3
 8002856:	2314      	movs	r3, #20
 8002858:	001a      	movs	r2, r3
 800285a:	2100      	movs	r1, #0
 800285c:	f008 fa08 	bl	800ac70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002860:	2414      	movs	r4, #20
 8002862:	193b      	adds	r3, r7, r4
 8002864:	0018      	movs	r0, r3
 8002866:	2320      	movs	r3, #32
 8002868:	001a      	movs	r2, r3
 800286a:	2100      	movs	r1, #0
 800286c:	f008 fa00 	bl	800ac70 <memset>
  if(hadc->Instance==ADC1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a35      	ldr	r2, [pc, #212]	@ (800294c <HAL_ADC_MspInit+0x104>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d163      	bne.n	8002942 <HAL_ADC_MspInit+0xfa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800287a:	193b      	adds	r3, r7, r4
 800287c:	2220      	movs	r2, #32
 800287e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002880:	193b      	adds	r3, r7, r4
 8002882:	2200      	movs	r2, #0
 8002884:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002886:	193b      	adds	r3, r7, r4
 8002888:	0018      	movs	r0, r3
 800288a:	f006 fb79 	bl	8008f80 <HAL_RCCEx_PeriphCLKConfig>
 800288e:	1e03      	subs	r3, r0, #0
 8002890:	d001      	beq.n	8002896 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 8002892:	f7ff f9fd 	bl	8001c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002896:	4b2e      	ldr	r3, [pc, #184]	@ (8002950 <HAL_ADC_MspInit+0x108>)
 8002898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800289a:	4b2d      	ldr	r3, [pc, #180]	@ (8002950 <HAL_ADC_MspInit+0x108>)
 800289c:	2180      	movs	r1, #128	@ 0x80
 800289e:	0349      	lsls	r1, r1, #13
 80028a0:	430a      	orrs	r2, r1
 80028a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80028a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002950 <HAL_ADC_MspInit+0x108>)
 80028a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028a8:	2380      	movs	r3, #128	@ 0x80
 80028aa:	035b      	lsls	r3, r3, #13
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	4b27      	ldr	r3, [pc, #156]	@ (8002950 <HAL_ADC_MspInit+0x108>)
 80028b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028b6:	4b26      	ldr	r3, [pc, #152]	@ (8002950 <HAL_ADC_MspInit+0x108>)
 80028b8:	2101      	movs	r1, #1
 80028ba:	430a      	orrs	r2, r1
 80028bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80028be:	4b24      	ldr	r3, [pc, #144]	@ (8002950 <HAL_ADC_MspInit+0x108>)
 80028c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c2:	2201      	movs	r2, #1
 80028c4:	4013      	ands	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Oil_Temp_Pin|Water_Pressure_Pin|Oil_Pressure_Pin;
 80028ca:	2134      	movs	r1, #52	@ 0x34
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	2207      	movs	r2, #7
 80028d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028d2:	187b      	adds	r3, r7, r1
 80028d4:	2203      	movs	r2, #3
 80028d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	187b      	adds	r3, r7, r1
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028de:	187a      	adds	r2, r7, r1
 80028e0:	23a0      	movs	r3, #160	@ 0xa0
 80028e2:	05db      	lsls	r3, r3, #23
 80028e4:	0011      	movs	r1, r2
 80028e6:	0018      	movs	r0, r3
 80028e8:	f004 fe2e 	bl	8007548 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80028ec:	4b19      	ldr	r3, [pc, #100]	@ (8002954 <HAL_ADC_MspInit+0x10c>)
 80028ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002958 <HAL_ADC_MspInit+0x110>)
 80028f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80028f2:	4b18      	ldr	r3, [pc, #96]	@ (8002954 <HAL_ADC_MspInit+0x10c>)
 80028f4:	2205      	movs	r2, #5
 80028f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028f8:	4b16      	ldr	r3, [pc, #88]	@ (8002954 <HAL_ADC_MspInit+0x10c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028fe:	4b15      	ldr	r3, [pc, #84]	@ (8002954 <HAL_ADC_MspInit+0x10c>)
 8002900:	2200      	movs	r2, #0
 8002902:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002904:	4b13      	ldr	r3, [pc, #76]	@ (8002954 <HAL_ADC_MspInit+0x10c>)
 8002906:	2280      	movs	r2, #128	@ 0x80
 8002908:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800290a:	4b12      	ldr	r3, [pc, #72]	@ (8002954 <HAL_ADC_MspInit+0x10c>)
 800290c:	2280      	movs	r2, #128	@ 0x80
 800290e:	0052      	lsls	r2, r2, #1
 8002910:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002912:	4b10      	ldr	r3, [pc, #64]	@ (8002954 <HAL_ADC_MspInit+0x10c>)
 8002914:	2280      	movs	r2, #128	@ 0x80
 8002916:	00d2      	lsls	r2, r2, #3
 8002918:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800291a:	4b0e      	ldr	r3, [pc, #56]	@ (8002954 <HAL_ADC_MspInit+0x10c>)
 800291c:	2220      	movs	r2, #32
 800291e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002920:	4b0c      	ldr	r3, [pc, #48]	@ (8002954 <HAL_ADC_MspInit+0x10c>)
 8002922:	2200      	movs	r2, #0
 8002924:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002926:	4b0b      	ldr	r3, [pc, #44]	@ (8002954 <HAL_ADC_MspInit+0x10c>)
 8002928:	0018      	movs	r0, r3
 800292a:	f004 fa5b 	bl	8006de4 <HAL_DMA_Init>
 800292e:	1e03      	subs	r3, r0, #0
 8002930:	d001      	beq.n	8002936 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8002932:	f7ff f9ad 	bl	8001c90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a06      	ldr	r2, [pc, #24]	@ (8002954 <HAL_ADC_MspInit+0x10c>)
 800293a:	651a      	str	r2, [r3, #80]	@ 0x50
 800293c:	4b05      	ldr	r3, [pc, #20]	@ (8002954 <HAL_ADC_MspInit+0x10c>)
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002942:	46c0      	nop			@ (mov r8, r8)
 8002944:	46bd      	mov	sp, r7
 8002946:	b013      	add	sp, #76	@ 0x4c
 8002948:	bd90      	pop	{r4, r7, pc}
 800294a:	46c0      	nop			@ (mov r8, r8)
 800294c:	40012400 	.word	0x40012400
 8002950:	40021000 	.word	0x40021000
 8002954:	200000b0 	.word	0x200000b0
 8002958:	40020008 	.word	0x40020008

0800295c <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0b      	ldr	r2, [pc, #44]	@ (8002998 <HAL_ADC_MspDeInit+0x3c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d110      	bne.n	8002990 <HAL_ADC_MspDeInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800296e:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <HAL_ADC_MspDeInit+0x40>)
 8002970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002972:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <HAL_ADC_MspDeInit+0x40>)
 8002974:	490a      	ldr	r1, [pc, #40]	@ (80029a0 <HAL_ADC_MspDeInit+0x44>)
 8002976:	400a      	ands	r2, r1
 8002978:	641a      	str	r2, [r3, #64]	@ 0x40
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    HAL_GPIO_DeInit(GPIOA, Oil_Temp_Pin|Water_Pressure_Pin|Oil_Pressure_Pin);
 800297a:	23a0      	movs	r3, #160	@ 0xa0
 800297c:	05db      	lsls	r3, r3, #23
 800297e:	2107      	movs	r1, #7
 8002980:	0018      	movs	r0, r3
 8002982:	f004 ff53 	bl	800782c <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800298a:	0018      	movs	r0, r3
 800298c:	f004 fab4 	bl	8006ef8 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8002990:	46c0      	nop			@ (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	b002      	add	sp, #8
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40012400 	.word	0x40012400
 800299c:	40021000 	.word	0x40021000
 80029a0:	ffefffff 	.word	0xffefffff

080029a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b093      	sub	sp, #76	@ 0x4c
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	2334      	movs	r3, #52	@ 0x34
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	0018      	movs	r0, r3
 80029b2:	2314      	movs	r3, #20
 80029b4:	001a      	movs	r2, r3
 80029b6:	2100      	movs	r1, #0
 80029b8:	f008 f95a 	bl	800ac70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029bc:	2414      	movs	r4, #20
 80029be:	193b      	adds	r3, r7, r4
 80029c0:	0018      	movs	r0, r3
 80029c2:	2320      	movs	r3, #32
 80029c4:	001a      	movs	r2, r3
 80029c6:	2100      	movs	r1, #0
 80029c8:	f008 f952 	bl	800ac70 <memset>
  if(hi2c->Instance==I2C1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002b08 <HAL_I2C_MspInit+0x164>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d000      	beq.n	80029d8 <HAL_I2C_MspInit+0x34>
 80029d6:	e093      	b.n	8002b00 <HAL_I2C_MspInit+0x15c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80029d8:	193b      	adds	r3, r7, r4
 80029da:	2202      	movs	r2, #2
 80029dc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80029de:	193b      	adds	r3, r7, r4
 80029e0:	2200      	movs	r2, #0
 80029e2:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029e4:	193b      	adds	r3, r7, r4
 80029e6:	0018      	movs	r0, r3
 80029e8:	f006 faca 	bl	8008f80 <HAL_RCCEx_PeriphCLKConfig>
 80029ec:	1e03      	subs	r3, r0, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80029f0:	f7ff f94e 	bl	8001c90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f4:	4b45      	ldr	r3, [pc, #276]	@ (8002b0c <HAL_I2C_MspInit+0x168>)
 80029f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029f8:	4b44      	ldr	r3, [pc, #272]	@ (8002b0c <HAL_I2C_MspInit+0x168>)
 80029fa:	2101      	movs	r1, #1
 80029fc:	430a      	orrs	r2, r1
 80029fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a00:	4b42      	ldr	r3, [pc, #264]	@ (8002b0c <HAL_I2C_MspInit+0x168>)
 8002a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a04:	2201      	movs	r2, #1
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a0c:	2134      	movs	r1, #52	@ 0x34
 8002a0e:	187b      	adds	r3, r7, r1
 8002a10:	22c0      	movs	r2, #192	@ 0xc0
 8002a12:	00d2      	lsls	r2, r2, #3
 8002a14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a16:	187b      	adds	r3, r7, r1
 8002a18:	2212      	movs	r2, #18
 8002a1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	187b      	adds	r3, r7, r1
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	2200      	movs	r2, #0
 8002a26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	2206      	movs	r2, #6
 8002a2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2e:	187a      	adds	r2, r7, r1
 8002a30:	23a0      	movs	r3, #160	@ 0xa0
 8002a32:	05db      	lsls	r3, r3, #23
 8002a34:	0011      	movs	r1, r2
 8002a36:	0018      	movs	r0, r3
 8002a38:	f004 fd86 	bl	8007548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a3c:	4b33      	ldr	r3, [pc, #204]	@ (8002b0c <HAL_I2C_MspInit+0x168>)
 8002a3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a40:	4b32      	ldr	r3, [pc, #200]	@ (8002b0c <HAL_I2C_MspInit+0x168>)
 8002a42:	2180      	movs	r1, #128	@ 0x80
 8002a44:	0389      	lsls	r1, r1, #14
 8002a46:	430a      	orrs	r2, r1
 8002a48:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a4a:	4b30      	ldr	r3, [pc, #192]	@ (8002b0c <HAL_I2C_MspInit+0x168>)
 8002a4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a4e:	2380      	movs	r3, #128	@ 0x80
 8002a50:	039b      	lsls	r3, r3, #14
 8002a52:	4013      	ands	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 8002a58:	4b2d      	ldr	r3, [pc, #180]	@ (8002b10 <HAL_I2C_MspInit+0x16c>)
 8002a5a:	4a2e      	ldr	r2, [pc, #184]	@ (8002b14 <HAL_I2C_MspInit+0x170>)
 8002a5c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002b10 <HAL_I2C_MspInit+0x16c>)
 8002a60:	220a      	movs	r2, #10
 8002a62:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a64:	4b2a      	ldr	r3, [pc, #168]	@ (8002b10 <HAL_I2C_MspInit+0x16c>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a6a:	4b29      	ldr	r3, [pc, #164]	@ (8002b10 <HAL_I2C_MspInit+0x16c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a70:	4b27      	ldr	r3, [pc, #156]	@ (8002b10 <HAL_I2C_MspInit+0x16c>)
 8002a72:	2280      	movs	r2, #128	@ 0x80
 8002a74:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a76:	4b26      	ldr	r3, [pc, #152]	@ (8002b10 <HAL_I2C_MspInit+0x16c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a7c:	4b24      	ldr	r3, [pc, #144]	@ (8002b10 <HAL_I2C_MspInit+0x16c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002a82:	4b23      	ldr	r3, [pc, #140]	@ (8002b10 <HAL_I2C_MspInit+0x16c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002a88:	4b21      	ldr	r3, [pc, #132]	@ (8002b10 <HAL_I2C_MspInit+0x16c>)
 8002a8a:	2280      	movs	r2, #128	@ 0x80
 8002a8c:	0152      	lsls	r2, r2, #5
 8002a8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002a90:	4b1f      	ldr	r3, [pc, #124]	@ (8002b10 <HAL_I2C_MspInit+0x16c>)
 8002a92:	0018      	movs	r0, r3
 8002a94:	f004 f9a6 	bl	8006de4 <HAL_DMA_Init>
 8002a98:	1e03      	subs	r3, r0, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8002a9c:	f7ff f8f8 	bl	8001c90 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b10 <HAL_I2C_MspInit+0x16c>)
 8002aa4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b10 <HAL_I2C_MspInit+0x16c>)
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel5;
 8002aac:	4b1a      	ldr	r3, [pc, #104]	@ (8002b18 <HAL_I2C_MspInit+0x174>)
 8002aae:	4a1b      	ldr	r2, [pc, #108]	@ (8002b1c <HAL_I2C_MspInit+0x178>)
 8002ab0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002ab2:	4b19      	ldr	r3, [pc, #100]	@ (8002b18 <HAL_I2C_MspInit+0x174>)
 8002ab4:	220b      	movs	r2, #11
 8002ab6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ab8:	4b17      	ldr	r3, [pc, #92]	@ (8002b18 <HAL_I2C_MspInit+0x174>)
 8002aba:	2210      	movs	r2, #16
 8002abc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002abe:	4b16      	ldr	r3, [pc, #88]	@ (8002b18 <HAL_I2C_MspInit+0x174>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ac4:	4b14      	ldr	r3, [pc, #80]	@ (8002b18 <HAL_I2C_MspInit+0x174>)
 8002ac6:	2280      	movs	r2, #128	@ 0x80
 8002ac8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aca:	4b13      	ldr	r3, [pc, #76]	@ (8002b18 <HAL_I2C_MspInit+0x174>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ad0:	4b11      	ldr	r3, [pc, #68]	@ (8002b18 <HAL_I2C_MspInit+0x174>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002ad6:	4b10      	ldr	r3, [pc, #64]	@ (8002b18 <HAL_I2C_MspInit+0x174>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002adc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b18 <HAL_I2C_MspInit+0x174>)
 8002ade:	2280      	movs	r2, #128	@ 0x80
 8002ae0:	0152      	lsls	r2, r2, #5
 8002ae2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b18 <HAL_I2C_MspInit+0x174>)
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f004 f97c 	bl	8006de4 <HAL_DMA_Init>
 8002aec:	1e03      	subs	r3, r0, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_I2C_MspInit+0x150>
    {
      Error_Handler();
 8002af0:	f7ff f8ce 	bl	8001c90 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a08      	ldr	r2, [pc, #32]	@ (8002b18 <HAL_I2C_MspInit+0x174>)
 8002af8:	639a      	str	r2, [r3, #56]	@ 0x38
 8002afa:	4b07      	ldr	r3, [pc, #28]	@ (8002b18 <HAL_I2C_MspInit+0x174>)
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002b00:	46c0      	nop			@ (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b013      	add	sp, #76	@ 0x4c
 8002b06:	bd90      	pop	{r4, r7, pc}
 8002b08:	40005400 	.word	0x40005400
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	20000160 	.word	0x20000160
 8002b14:	40020044 	.word	0x40020044
 8002b18:	200001bc 	.word	0x200001bc
 8002b1c:	40020058 	.word	0x40020058

08002b20 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a13      	ldr	r2, [pc, #76]	@ (8002b7c <HAL_I2C_MspDeInit+0x5c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d11f      	bne.n	8002b72 <HAL_I2C_MspDeInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002b32:	4b13      	ldr	r3, [pc, #76]	@ (8002b80 <HAL_I2C_MspDeInit+0x60>)
 8002b34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b36:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <HAL_I2C_MspDeInit+0x60>)
 8002b38:	4912      	ldr	r1, [pc, #72]	@ (8002b84 <HAL_I2C_MspDeInit+0x64>)
 8002b3a:	400a      	ands	r2, r1
 8002b3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 8002b3e:	2380      	movs	r3, #128	@ 0x80
 8002b40:	009a      	lsls	r2, r3, #2
 8002b42:	23a0      	movs	r3, #160	@ 0xa0
 8002b44:	05db      	lsls	r3, r3, #23
 8002b46:	0011      	movs	r1, r2
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f004 fe6f 	bl	800782c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8002b4e:	2380      	movs	r3, #128	@ 0x80
 8002b50:	00da      	lsls	r2, r3, #3
 8002b52:	23a0      	movs	r3, #160	@ 0xa0
 8002b54:	05db      	lsls	r3, r3, #23
 8002b56:	0011      	movs	r1, r2
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f004 fe67 	bl	800782c <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b62:	0018      	movs	r0, r3
 8002b64:	f004 f9c8 	bl	8006ef8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f004 f9c3 	bl	8006ef8 <HAL_DMA_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b002      	add	sp, #8
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	40005400 	.word	0x40005400
 8002b80:	40021000 	.word	0x40021000
 8002b84:	ffdfffff 	.word	0xffdfffff

08002b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b88:	b590      	push	{r4, r7, lr}
 8002b8a:	b095      	sub	sp, #84	@ 0x54
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b90:	233c      	movs	r3, #60	@ 0x3c
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	0018      	movs	r0, r3
 8002b96:	2314      	movs	r3, #20
 8002b98:	001a      	movs	r2, r3
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	f008 f868 	bl	800ac70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ba0:	241c      	movs	r4, #28
 8002ba2:	193b      	adds	r3, r7, r4
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	001a      	movs	r2, r3
 8002baa:	2100      	movs	r1, #0
 8002bac:	f008 f860 	bl	800ac70 <memset>
  if(huart->Instance==USART1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a74      	ldr	r2, [pc, #464]	@ (8002d88 <HAL_UART_MspInit+0x200>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d000      	beq.n	8002bbc <HAL_UART_MspInit+0x34>
 8002bba:	e0e1      	b.n	8002d80 <HAL_UART_MspInit+0x1f8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bbc:	193b      	adds	r3, r7, r4
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002bc2:	193b      	adds	r3, r7, r4
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bc8:	193b      	adds	r3, r7, r4
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f006 f9d8 	bl	8008f80 <HAL_RCCEx_PeriphCLKConfig>
 8002bd0:	1e03      	subs	r3, r0, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002bd4:	f7ff f85c 	bl	8001c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bd8:	4b6c      	ldr	r3, [pc, #432]	@ (8002d8c <HAL_UART_MspInit+0x204>)
 8002bda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bdc:	4b6b      	ldr	r3, [pc, #428]	@ (8002d8c <HAL_UART_MspInit+0x204>)
 8002bde:	2180      	movs	r1, #128	@ 0x80
 8002be0:	01c9      	lsls	r1, r1, #7
 8002be2:	430a      	orrs	r2, r1
 8002be4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002be6:	4b69      	ldr	r3, [pc, #420]	@ (8002d8c <HAL_UART_MspInit+0x204>)
 8002be8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bea:	2380      	movs	r3, #128	@ 0x80
 8002bec:	01db      	lsls	r3, r3, #7
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bf4:	4b65      	ldr	r3, [pc, #404]	@ (8002d8c <HAL_UART_MspInit+0x204>)
 8002bf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bf8:	4b64      	ldr	r3, [pc, #400]	@ (8002d8c <HAL_UART_MspInit+0x204>)
 8002bfa:	2104      	movs	r1, #4
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c00:	4b62      	ldr	r3, [pc, #392]	@ (8002d8c <HAL_UART_MspInit+0x204>)
 8002c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c04:	2204      	movs	r2, #4
 8002c06:	4013      	ands	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0c:	4b5f      	ldr	r3, [pc, #380]	@ (8002d8c <HAL_UART_MspInit+0x204>)
 8002c0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c10:	4b5e      	ldr	r3, [pc, #376]	@ (8002d8c <HAL_UART_MspInit+0x204>)
 8002c12:	2102      	movs	r1, #2
 8002c14:	430a      	orrs	r2, r1
 8002c16:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c18:	4b5c      	ldr	r3, [pc, #368]	@ (8002d8c <HAL_UART_MspInit+0x204>)
 8002c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	4013      	ands	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c24:	4b59      	ldr	r3, [pc, #356]	@ (8002d8c <HAL_UART_MspInit+0x204>)
 8002c26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c28:	4b58      	ldr	r3, [pc, #352]	@ (8002d8c <HAL_UART_MspInit+0x204>)
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c30:	4b56      	ldr	r3, [pc, #344]	@ (8002d8c <HAL_UART_MspInit+0x204>)
 8002c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c34:	2201      	movs	r2, #1
 8002c36:	4013      	ands	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c3c:	213c      	movs	r1, #60	@ 0x3c
 8002c3e:	187b      	adds	r3, r7, r1
 8002c40:	2280      	movs	r2, #128	@ 0x80
 8002c42:	01d2      	lsls	r2, r2, #7
 8002c44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c46:	000c      	movs	r4, r1
 8002c48:	193b      	adds	r3, r7, r4
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	193b      	adds	r3, r7, r4
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c54:	193b      	adds	r3, r7, r4
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002c5a:	193b      	adds	r3, r7, r4
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c60:	193b      	adds	r3, r7, r4
 8002c62:	4a4b      	ldr	r2, [pc, #300]	@ (8002d90 <HAL_UART_MspInit+0x208>)
 8002c64:	0019      	movs	r1, r3
 8002c66:	0010      	movs	r0, r2
 8002c68:	f004 fc6e 	bl	8007548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c6c:	193b      	adds	r3, r7, r4
 8002c6e:	2204      	movs	r2, #4
 8002c70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c72:	193b      	adds	r3, r7, r4
 8002c74:	2202      	movs	r2, #2
 8002c76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	193b      	adds	r3, r7, r4
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7e:	193b      	adds	r3, r7, r4
 8002c80:	2200      	movs	r2, #0
 8002c82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002c84:	193b      	adds	r3, r7, r4
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8a:	193b      	adds	r3, r7, r4
 8002c8c:	4a41      	ldr	r2, [pc, #260]	@ (8002d94 <HAL_UART_MspInit+0x20c>)
 8002c8e:	0019      	movs	r1, r3
 8002c90:	0010      	movs	r0, r2
 8002c92:	f004 fc59 	bl	8007548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c96:	0021      	movs	r1, r4
 8002c98:	187b      	adds	r3, r7, r1
 8002c9a:	2280      	movs	r2, #128	@ 0x80
 8002c9c:	0152      	lsls	r2, r2, #5
 8002c9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	187b      	adds	r3, r7, r1
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	187b      	adds	r3, r7, r1
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cac:	187b      	adds	r3, r7, r1
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002cb2:	187b      	adds	r3, r7, r1
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb8:	187a      	adds	r2, r7, r1
 8002cba:	23a0      	movs	r3, #160	@ 0xa0
 8002cbc:	05db      	lsls	r3, r3, #23
 8002cbe:	0011      	movs	r1, r2
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f004 fc41 	bl	8007548 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8002cc6:	4b34      	ldr	r3, [pc, #208]	@ (8002d98 <HAL_UART_MspInit+0x210>)
 8002cc8:	4a34      	ldr	r2, [pc, #208]	@ (8002d9c <HAL_UART_MspInit+0x214>)
 8002cca:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002ccc:	4b32      	ldr	r3, [pc, #200]	@ (8002d98 <HAL_UART_MspInit+0x210>)
 8002cce:	2232      	movs	r2, #50	@ 0x32
 8002cd0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cd2:	4b31      	ldr	r3, [pc, #196]	@ (8002d98 <HAL_UART_MspInit+0x210>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8002d98 <HAL_UART_MspInit+0x210>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cde:	4b2e      	ldr	r3, [pc, #184]	@ (8002d98 <HAL_UART_MspInit+0x210>)
 8002ce0:	2280      	movs	r2, #128	@ 0x80
 8002ce2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d98 <HAL_UART_MspInit+0x210>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cea:	4b2b      	ldr	r3, [pc, #172]	@ (8002d98 <HAL_UART_MspInit+0x210>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002cf0:	4b29      	ldr	r3, [pc, #164]	@ (8002d98 <HAL_UART_MspInit+0x210>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cf6:	4b28      	ldr	r3, [pc, #160]	@ (8002d98 <HAL_UART_MspInit+0x210>)
 8002cf8:	22c0      	movs	r2, #192	@ 0xc0
 8002cfa:	0192      	lsls	r2, r2, #6
 8002cfc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002cfe:	4b26      	ldr	r3, [pc, #152]	@ (8002d98 <HAL_UART_MspInit+0x210>)
 8002d00:	0018      	movs	r0, r3
 8002d02:	f004 f86f 	bl	8006de4 <HAL_DMA_Init>
 8002d06:	1e03      	subs	r3, r0, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 8002d0a:	f7fe ffc1 	bl	8001c90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2180      	movs	r1, #128	@ 0x80
 8002d12:	4a21      	ldr	r2, [pc, #132]	@ (8002d98 <HAL_UART_MspInit+0x210>)
 8002d14:	505a      	str	r2, [r3, r1]
 8002d16:	4b20      	ldr	r3, [pc, #128]	@ (8002d98 <HAL_UART_MspInit+0x210>)
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8002d1c:	4b20      	ldr	r3, [pc, #128]	@ (8002da0 <HAL_UART_MspInit+0x218>)
 8002d1e:	4a21      	ldr	r2, [pc, #132]	@ (8002da4 <HAL_UART_MspInit+0x21c>)
 8002d20:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002d22:	4b1f      	ldr	r3, [pc, #124]	@ (8002da0 <HAL_UART_MspInit+0x218>)
 8002d24:	2233      	movs	r2, #51	@ 0x33
 8002d26:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d28:	4b1d      	ldr	r3, [pc, #116]	@ (8002da0 <HAL_UART_MspInit+0x218>)
 8002d2a:	2210      	movs	r2, #16
 8002d2c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002da0 <HAL_UART_MspInit+0x218>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d34:	4b1a      	ldr	r3, [pc, #104]	@ (8002da0 <HAL_UART_MspInit+0x218>)
 8002d36:	2280      	movs	r2, #128	@ 0x80
 8002d38:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d3a:	4b19      	ldr	r3, [pc, #100]	@ (8002da0 <HAL_UART_MspInit+0x218>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d40:	4b17      	ldr	r3, [pc, #92]	@ (8002da0 <HAL_UART_MspInit+0x218>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002d46:	4b16      	ldr	r3, [pc, #88]	@ (8002da0 <HAL_UART_MspInit+0x218>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002d4c:	4b14      	ldr	r3, [pc, #80]	@ (8002da0 <HAL_UART_MspInit+0x218>)
 8002d4e:	2280      	movs	r2, #128	@ 0x80
 8002d50:	0192      	lsls	r2, r2, #6
 8002d52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d54:	4b12      	ldr	r3, [pc, #72]	@ (8002da0 <HAL_UART_MspInit+0x218>)
 8002d56:	0018      	movs	r0, r3
 8002d58:	f004 f844 	bl	8006de4 <HAL_DMA_Init>
 8002d5c:	1e03      	subs	r3, r0, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_UART_MspInit+0x1dc>
    {
      Error_Handler();
 8002d60:	f7fe ff96 	bl	8001c90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a0e      	ldr	r2, [pc, #56]	@ (8002da0 <HAL_UART_MspInit+0x218>)
 8002d68:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002da0 <HAL_UART_MspInit+0x218>)
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d70:	2200      	movs	r2, #0
 8002d72:	2100      	movs	r1, #0
 8002d74:	201b      	movs	r0, #27
 8002d76:	f003 fff3 	bl	8006d60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d7a:	201b      	movs	r0, #27
 8002d7c:	f004 f805 	bl	8006d8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002d80:	46c0      	nop			@ (mov r8, r8)
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b015      	add	sp, #84	@ 0x54
 8002d86:	bd90      	pop	{r4, r7, pc}
 8002d88:	40013800 	.word	0x40013800
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	50000800 	.word	0x50000800
 8002d94:	50000400 	.word	0x50000400
 8002d98:	200002ac 	.word	0x200002ac
 8002d9c:	4002001c 	.word	0x4002001c
 8002da0:	20000308 	.word	0x20000308
 8002da4:	40020030 	.word	0x40020030

08002da8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a17      	ldr	r2, [pc, #92]	@ (8002e14 <HAL_UART_MspDeInit+0x6c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d127      	bne.n	8002e0a <HAL_UART_MspDeInit+0x62>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002dba:	4b17      	ldr	r3, [pc, #92]	@ (8002e18 <HAL_UART_MspDeInit+0x70>)
 8002dbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dbe:	4b16      	ldr	r3, [pc, #88]	@ (8002e18 <HAL_UART_MspDeInit+0x70>)
 8002dc0:	4916      	ldr	r1, [pc, #88]	@ (8002e1c <HAL_UART_MspDeInit+0x74>)
 8002dc2:	400a      	ands	r2, r1
 8002dc4:	641a      	str	r2, [r3, #64]	@ 0x40
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);
 8002dc6:	2380      	movs	r3, #128	@ 0x80
 8002dc8:	01db      	lsls	r3, r3, #7
 8002dca:	4a15      	ldr	r2, [pc, #84]	@ (8002e20 <HAL_UART_MspDeInit+0x78>)
 8002dcc:	0019      	movs	r1, r3
 8002dce:	0010      	movs	r0, r2
 8002dd0:	f004 fd2c 	bl	800782c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8002dd4:	4b13      	ldr	r3, [pc, #76]	@ (8002e24 <HAL_UART_MspDeInit+0x7c>)
 8002dd6:	2104      	movs	r1, #4
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f004 fd27 	bl	800782c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 8002dde:	2380      	movs	r3, #128	@ 0x80
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	23a0      	movs	r3, #160	@ 0xa0
 8002de4:	05db      	lsls	r3, r3, #23
 8002de6:	0011      	movs	r1, r2
 8002de8:	0018      	movs	r0, r3
 8002dea:	f004 fd1f 	bl	800782c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2280      	movs	r2, #128	@ 0x80
 8002df2:	589b      	ldr	r3, [r3, r2]
 8002df4:	0018      	movs	r0, r3
 8002df6:	f004 f87f 	bl	8006ef8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f004 f87a 	bl	8006ef8 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002e04:	201b      	movs	r0, #27
 8002e06:	f003 ffd0 	bl	8006daa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002e0a:	46c0      	nop			@ (mov r8, r8)
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b002      	add	sp, #8
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	46c0      	nop			@ (mov r8, r8)
 8002e14:	40013800 	.word	0x40013800
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	ffffbfff 	.word	0xffffbfff
 8002e20:	50000800 	.word	0x50000800
 8002e24:	50000400 	.word	0x50000400

08002e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e2c:	46c0      	nop			@ (mov r8, r8)
 8002e2e:	e7fd      	b.n	8002e2c <NMI_Handler+0x4>

08002e30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e34:	46c0      	nop			@ (mov r8, r8)
 8002e36:	e7fd      	b.n	8002e34 <HardFault_Handler+0x4>

08002e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e3c:	46c0      	nop			@ (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e46:	46c0      	nop			@ (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e50:	f002 fe36 	bl	8005ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e54:	46c0      	nop			@ (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e60:	4b03      	ldr	r3, [pc, #12]	@ (8002e70 <DMA1_Channel1_IRQHandler+0x14>)
 8002e62:	0018      	movs	r0, r3
 8002e64:	f004 fa24 	bl	80072b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e68:	46c0      	nop			@ (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	200000b0 	.word	0x200000b0

08002e74 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002e78:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f004 fa18 	bl	80072b0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e80:	4b04      	ldr	r3, [pc, #16]	@ (8002e94 <DMA1_Channel2_3_IRQHandler+0x20>)
 8002e82:	0018      	movs	r0, r3
 8002e84:	f004 fa14 	bl	80072b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002e88:	46c0      	nop			@ (mov r8, r8)
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			@ (mov r8, r8)
 8002e90:	200002ac 	.word	0x200002ac
 8002e94:	20000308 	.word	0x20000308

08002e98 <DMAMUX1_DMA1_CH4_5_IRQHandler>:

/**
  * @brief This function handles DMAMUX1, DMA1 Channel 4 and 5.
  */
void DMAMUX1_DMA1_CH4_5_IRQHandler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 0 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002e9c:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x1c>)
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f004 fa06 	bl	80072b0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002ea4:	4b04      	ldr	r3, [pc, #16]	@ (8002eb8 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x20>)
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f004 fa02 	bl	80072b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 1 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 1 */
}
 8002eac:	46c0      	nop			@ (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	20000160 	.word	0x20000160
 8002eb8:	200001bc 	.word	0x200001bc

08002ebc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ec0:	4b03      	ldr	r3, [pc, #12]	@ (8002ed0 <USART1_IRQHandler+0x14>)
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f006 fb36 	bl	8009534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ec8:	46c0      	nop			@ (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			@ (mov r8, r8)
 8002ed0:	20000218 	.word	0x20000218

08002ed4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ed8:	4b03      	ldr	r3, [pc, #12]	@ (8002ee8 <SystemInit+0x14>)
 8002eda:	2280      	movs	r2, #128	@ 0x80
 8002edc:	0512      	lsls	r2, r2, #20
 8002ede:	609a      	str	r2, [r3, #8]
#endif
}
 8002ee0:	46c0      	nop			@ (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			@ (mov r8, r8)
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <writeReg>:
//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
int8_t writeReg(uint8_t reg, uint8_t value)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af04      	add	r7, sp, #16
 8002ef2:	0002      	movs	r2, r0
 8002ef4:	1dfb      	adds	r3, r7, #7
 8002ef6:	701a      	strb	r2, [r3, #0]
 8002ef8:	1dbb      	adds	r3, r7, #6
 8002efa:	1c0a      	adds	r2, r1, #0
 8002efc:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = value; // Assign the value to the buffer.
 8002efe:	4b0f      	ldr	r3, [pc, #60]	@ (8002f3c <writeReg+0x50>)
 8002f00:	1dba      	adds	r2, r7, #6
 8002f02:	7812      	ldrb	r2, [r2, #0]
 8002f04:	701a      	strb	r2, [r3, #0]
	return handle_i2c_error(HAL_I2C_Mem_Write(&hi2c1, vl53l0x_address | I2C_WRITE, reg, 1, i2c_tx_buffer, 1, I2C_TIMEOUT));
 8002f06:	4b0e      	ldr	r3, [pc, #56]	@ (8002f40 <writeReg+0x54>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	1dfb      	adds	r3, r7, #7
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	480c      	ldr	r0, [pc, #48]	@ (8002f44 <writeReg+0x58>)
 8002f14:	2364      	movs	r3, #100	@ 0x64
 8002f16:	9302      	str	r3, [sp, #8]
 8002f18:	2301      	movs	r3, #1
 8002f1a:	9301      	str	r3, [sp, #4]
 8002f1c:	4b07      	ldr	r3, [pc, #28]	@ (8002f3c <writeReg+0x50>)
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2301      	movs	r3, #1
 8002f22:	f004 fe6b 	bl	8007bfc <HAL_I2C_Mem_Write>
 8002f26:	0003      	movs	r3, r0
 8002f28:	b25b      	sxtb	r3, r3
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f002 fcb6 	bl	800589c <handle_i2c_error>
 8002f30:	0003      	movs	r3, r0
}
 8002f32:	0018      	movs	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b002      	add	sp, #8
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	46c0      	nop			@ (mov r8, r8)
 8002f3c:	20000574 	.word	0x20000574
 8002f40:	2000058c 	.word	0x2000058c
 8002f44:	2000010c 	.word	0x2000010c

08002f48 <writeReg16Bit>:

// Write a 16-bit register
int8_t writeReg16Bit(uint8_t reg, uint16_t value)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af04      	add	r7, sp, #16
 8002f4e:	0002      	movs	r2, r0
 8002f50:	1dfb      	adds	r3, r7, #7
 8002f52:	701a      	strb	r2, [r3, #0]
 8002f54:	1d3b      	adds	r3, r7, #4
 8002f56:	1c0a      	adds	r2, r1, #0
 8002f58:	801a      	strh	r2, [r3, #0]
	memcpy(i2c_tx_buffer, &value, 2); // Assign the value to the buffer.
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	881a      	ldrh	r2, [r3, #0]
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f98 <writeReg16Bit+0x50>)
 8002f60:	801a      	strh	r2, [r3, #0]
	return handle_i2c_error(HAL_I2C_Mem_Write(&hi2c1, vl53l0x_address | I2C_WRITE, reg, 1, i2c_tx_buffer, 2, I2C_TIMEOUT));
 8002f62:	4b0e      	ldr	r3, [pc, #56]	@ (8002f9c <writeReg16Bit+0x54>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	0019      	movs	r1, r3
 8002f68:	1dfb      	adds	r3, r7, #7
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	480c      	ldr	r0, [pc, #48]	@ (8002fa0 <writeReg16Bit+0x58>)
 8002f70:	2364      	movs	r3, #100	@ 0x64
 8002f72:	9302      	str	r3, [sp, #8]
 8002f74:	2302      	movs	r3, #2
 8002f76:	9301      	str	r3, [sp, #4]
 8002f78:	4b07      	ldr	r3, [pc, #28]	@ (8002f98 <writeReg16Bit+0x50>)
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f004 fe3d 	bl	8007bfc <HAL_I2C_Mem_Write>
 8002f82:	0003      	movs	r3, r0
 8002f84:	b25b      	sxtb	r3, r3
 8002f86:	0018      	movs	r0, r3
 8002f88:	f002 fc88 	bl	800589c <handle_i2c_error>
 8002f8c:	0003      	movs	r3, r0
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b002      	add	sp, #8
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			@ (mov r8, r8)
 8002f98:	20000574 	.word	0x20000574
 8002f9c:	2000058c 	.word	0x2000058c
 8002fa0:	2000010c 	.word	0x2000010c

08002fa4 <readReg>:

}

// Read an 8-bit register
int8_t readReg(uint8_t reg, uint8_t* value)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af04      	add	r7, sp, #16
 8002faa:	0002      	movs	r2, r0
 8002fac:	6039      	str	r1, [r7, #0]
 8002fae:	1dfb      	adds	r3, r7, #7
 8002fb0:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_I2C_Mem_Read(&hi2c1, vl53l0x_address | I2C_READ, reg, 1, i2c_rx_buffer, 1, I2C_TIMEOUT);
 8002fb2:	4b13      	ldr	r3, [pc, #76]	@ (8003000 <readReg+0x5c>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	1dfb      	adds	r3, r7, #7
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	480f      	ldr	r0, [pc, #60]	@ (8003004 <readReg+0x60>)
 8002fc6:	2364      	movs	r3, #100	@ 0x64
 8002fc8:	9302      	str	r3, [sp, #8]
 8002fca:	2301      	movs	r3, #1
 8002fcc:	9301      	str	r3, [sp, #4]
 8002fce:	4b0e      	ldr	r3, [pc, #56]	@ (8003008 <readReg+0x64>)
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	f004 ff40 	bl	8007e58 <HAL_I2C_Mem_Read>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	001a      	movs	r2, r3
 8002fdc:	210f      	movs	r1, #15
 8002fde:	187b      	adds	r3, r7, r1
 8002fe0:	701a      	strb	r2, [r3, #0]
	(*value) = i2c_rx_buffer[0];
 8002fe2:	4b09      	ldr	r3, [pc, #36]	@ (8003008 <readReg+0x64>)
 8002fe4:	781a      	ldrb	r2, [r3, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	701a      	strb	r2, [r3, #0]
	return handle_i2c_error(status);
 8002fea:	187b      	adds	r3, r7, r1
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	b25b      	sxtb	r3, r3
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f002 fc53 	bl	800589c <handle_i2c_error>
 8002ff6:	0003      	movs	r3, r0
}
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b004      	add	sp, #16
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	2000058c 	.word	0x2000058c
 8003004:	2000010c 	.word	0x2000010c
 8003008:	20000580 	.word	0x20000580

0800300c <readReg16Bit>:

// Read a 16-bit register
int8_t readReg16Bit(uint8_t reg, uint16_t* value)
{
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b089      	sub	sp, #36	@ 0x24
 8003010:	af04      	add	r7, sp, #16
 8003012:	0002      	movs	r2, r0
 8003014:	6039      	str	r1, [r7, #0]
 8003016:	1dfb      	adds	r3, r7, #7
 8003018:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_I2C_Mem_Read(&hi2c1, vl53l0x_address | I2C_READ, reg, 1, i2c_rx_buffer, 2, I2C_TIMEOUT);
 800301a:	4b14      	ldr	r3, [pc, #80]	@ (800306c <readReg16Bit+0x60>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2201      	movs	r2, #1
 8003020:	4313      	orrs	r3, r2
 8003022:	b2db      	uxtb	r3, r3
 8003024:	0019      	movs	r1, r3
 8003026:	1dfb      	adds	r3, r7, #7
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	b29a      	uxth	r2, r3
 800302c:	4810      	ldr	r0, [pc, #64]	@ (8003070 <readReg16Bit+0x64>)
 800302e:	2364      	movs	r3, #100	@ 0x64
 8003030:	9302      	str	r3, [sp, #8]
 8003032:	2302      	movs	r3, #2
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	4b0f      	ldr	r3, [pc, #60]	@ (8003074 <readReg16Bit+0x68>)
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2301      	movs	r3, #1
 800303c:	f004 ff0c 	bl	8007e58 <HAL_I2C_Mem_Read>
 8003040:	0003      	movs	r3, r0
 8003042:	001a      	movs	r2, r3
 8003044:	240f      	movs	r4, #15
 8003046:	193b      	adds	r3, r7, r4
 8003048:	701a      	strb	r2, [r3, #0]
	memcpy(value, i2c_rx_buffer, 2);
 800304a:	490a      	ldr	r1, [pc, #40]	@ (8003074 <readReg16Bit+0x68>)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2202      	movs	r2, #2
 8003050:	0018      	movs	r0, r3
 8003052:	f007 fe39 	bl	800acc8 <memcpy>
	return handle_i2c_error(status);
 8003056:	193b      	adds	r3, r7, r4
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	b25b      	sxtb	r3, r3
 800305c:	0018      	movs	r0, r3
 800305e:	f002 fc1d 	bl	800589c <handle_i2c_error>
 8003062:	0003      	movs	r3, r0
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	b005      	add	sp, #20
 800306a:	bd90      	pop	{r4, r7, pc}
 800306c:	2000058c 	.word	0x2000058c
 8003070:	2000010c 	.word	0x2000010c
 8003074:	20000580 	.word	0x20000580

08003078 <writeMulti>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
int8_t writeMulti(uint8_t reg, uint8_t const *src, uint8_t count)
{
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b087      	sub	sp, #28
 800307c:	af04      	add	r7, sp, #16
 800307e:	6039      	str	r1, [r7, #0]
 8003080:	0011      	movs	r1, r2
 8003082:	1dfb      	adds	r3, r7, #7
 8003084:	1c02      	adds	r2, r0, #0
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	1dbb      	adds	r3, r7, #6
 800308a:	1c0a      	adds	r2, r1, #0
 800308c:	701a      	strb	r2, [r3, #0]
	memcpy(i2c_tx_buffer, src, 4);
 800308e:	6839      	ldr	r1, [r7, #0]
 8003090:	4b10      	ldr	r3, [pc, #64]	@ (80030d4 <writeMulti+0x5c>)
 8003092:	2204      	movs	r2, #4
 8003094:	0018      	movs	r0, r3
 8003096:	f007 fe17 	bl	800acc8 <memcpy>
	return handle_i2c_error(HAL_I2C_Mem_Write(&hi2c1, vl53l0x_address | I2C_WRITE, reg, 1, msgBuffer, count, I2C_TIMEOUT));
 800309a:	4b0f      	ldr	r3, [pc, #60]	@ (80030d8 <writeMulti+0x60>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	001c      	movs	r4, r3
 80030a0:	1dfb      	adds	r3, r7, #7
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	1dbb      	adds	r3, r7, #6
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	480b      	ldr	r0, [pc, #44]	@ (80030dc <writeMulti+0x64>)
 80030ae:	2164      	movs	r1, #100	@ 0x64
 80030b0:	9102      	str	r1, [sp, #8]
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	4b0a      	ldr	r3, [pc, #40]	@ (80030e0 <writeMulti+0x68>)
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	2301      	movs	r3, #1
 80030ba:	0021      	movs	r1, r4
 80030bc:	f004 fd9e 	bl	8007bfc <HAL_I2C_Mem_Write>
 80030c0:	0003      	movs	r3, r0
 80030c2:	b25b      	sxtb	r3, r3
 80030c4:	0018      	movs	r0, r3
 80030c6:	f002 fbe9 	bl	800589c <handle_i2c_error>
 80030ca:	0003      	movs	r3, r0
}
 80030cc:	0018      	movs	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b003      	add	sp, #12
 80030d2:	bd90      	pop	{r4, r7, pc}
 80030d4:	20000574 	.word	0x20000574
 80030d8:	2000058c 	.word	0x2000058c
 80030dc:	2000010c 	.word	0x2000010c
 80030e0:	2000059c 	.word	0x2000059c

080030e4 <readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
int8_t readMulti(uint8_t reg, uint8_t* dst, uint8_t count)
{
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af04      	add	r7, sp, #16
 80030ea:	6039      	str	r1, [r7, #0]
 80030ec:	0011      	movs	r1, r2
 80030ee:	1dfb      	adds	r3, r7, #7
 80030f0:	1c02      	adds	r2, r0, #0
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	1dbb      	adds	r3, r7, #6
 80030f6:	1c0a      	adds	r2, r1, #0
 80030f8:	701a      	strb	r2, [r3, #0]
	 return handle_i2c_error(HAL_I2C_Mem_Read(&hi2c1, vl53l0x_address | I2C_READ, reg, 1, dst, count, I2C_TIMEOUT));
 80030fa:	4b10      	ldr	r3, [pc, #64]	@ (800313c <readMulti+0x58>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2201      	movs	r2, #1
 8003100:	4313      	orrs	r3, r2
 8003102:	b2db      	uxtb	r3, r3
 8003104:	001c      	movs	r4, r3
 8003106:	1dfb      	adds	r3, r7, #7
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	b29a      	uxth	r2, r3
 800310c:	1dbb      	adds	r3, r7, #6
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	480b      	ldr	r0, [pc, #44]	@ (8003140 <readMulti+0x5c>)
 8003114:	2164      	movs	r1, #100	@ 0x64
 8003116:	9102      	str	r1, [sp, #8]
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	2301      	movs	r3, #1
 8003120:	0021      	movs	r1, r4
 8003122:	f004 fe99 	bl	8007e58 <HAL_I2C_Mem_Read>
 8003126:	0003      	movs	r3, r0
 8003128:	b25b      	sxtb	r3, r3
 800312a:	0018      	movs	r0, r3
 800312c:	f002 fbb6 	bl	800589c <handle_i2c_error>
 8003130:	0003      	movs	r3, r0
}
 8003132:	0018      	movs	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	b003      	add	sp, #12
 8003138:	bd90      	pop	{r4, r7, pc}
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	2000058c 	.word	0x2000058c
 8003140:	2000010c 	.word	0x2000010c

08003144 <vl53l0x_init>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is HAL_OK or not given, the sensor is configured for 2V8
// mode.
int8_t vl53l0x_init(uint8_t io_2v8)
{
 8003144:	b5b0      	push	{r4, r5, r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	0002      	movs	r2, r0
 800314c:	1dfb      	adds	r3, r7, #7
 800314e:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8003150:	2314      	movs	r3, #20
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val = 0;
 8003158:	2312      	movs	r3, #18
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]

	// Reset buffers
	for(uint8_t i = 0; i < I2C_BUFFER_SIZE; i++)
 8003160:	2317      	movs	r3, #23
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	e00f      	b.n	800318a <vl53l0x_init+0x46>
	{
		i2c_tx_buffer[i] = 0;
 800316a:	2017      	movs	r0, #23
 800316c:	183b      	adds	r3, r7, r0
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	4ae3      	ldr	r2, [pc, #908]	@ (8003500 <vl53l0x_init+0x3bc>)
 8003172:	2100      	movs	r1, #0
 8003174:	54d1      	strb	r1, [r2, r3]
		i2c_rx_buffer[i] = 0;
 8003176:	183b      	adds	r3, r7, r0
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	4ae2      	ldr	r2, [pc, #904]	@ (8003504 <vl53l0x_init+0x3c0>)
 800317c:	2100      	movs	r1, #0
 800317e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < I2C_BUFFER_SIZE; i++)
 8003180:	183b      	adds	r3, r7, r0
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	183b      	adds	r3, r7, r0
 8003186:	3201      	adds	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	2317      	movs	r3, #23
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b0b      	cmp	r3, #11
 8003192:	d9ea      	bls.n	800316a <vl53l0x_init+0x26>
	}
	vl53l0x_address = ADDRESS_DEFAULT;
 8003194:	4bdc      	ldr	r3, [pc, #880]	@ (8003508 <vl53l0x_init+0x3c4>)
 8003196:	2252      	movs	r2, #82	@ 0x52
 8003198:	701a      	strb	r2, [r3, #0]

	// Data Initialization
	// sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
	if (io_2v8)
 800319a:	1dfb      	adds	r3, r7, #7
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d02f      	beq.n	8003202 <vl53l0x_init+0xbe>
	{
		status = readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, &reg_val);
 80031a2:	2514      	movs	r5, #20
 80031a4:	197c      	adds	r4, r7, r5
 80031a6:	2312      	movs	r3, #18
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	0019      	movs	r1, r3
 80031ac:	2089      	movs	r0, #137	@ 0x89
 80031ae:	f7ff fef9 	bl	8002fa4 <readReg>
 80031b2:	0003      	movs	r3, r0
 80031b4:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 80031b6:	197b      	adds	r3, r7, r5
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	b25b      	sxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d004      	beq.n	80031ca <vl53l0x_init+0x86>
 80031c0:	197b      	adds	r3, r7, r5
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	b25b      	sxtb	r3, r3
 80031c6:	f001 f89a 	bl	80042fe <vl53l0x_init+0x11ba>
		status = writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, (reg_val | 0x01)); // set bit 0
 80031ca:	2312      	movs	r3, #18
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2201      	movs	r2, #1
 80031d2:	4313      	orrs	r3, r2
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2514      	movs	r5, #20
 80031d8:	197c      	adds	r4, r7, r5
 80031da:	0019      	movs	r1, r3
 80031dc:	2089      	movs	r0, #137	@ 0x89
 80031de:	f7ff fe85 	bl	8002eec <writeReg>
 80031e2:	0003      	movs	r3, r0
 80031e4:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 80031e6:	197b      	adds	r3, r7, r5
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	b25b      	sxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d004      	beq.n	80031fa <vl53l0x_init+0xb6>
 80031f0:	197b      	adds	r3, r7, r5
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	b25b      	sxtb	r3, r3
 80031f6:	f001 f882 	bl	80042fe <vl53l0x_init+0x11ba>
		reg_val = 0;
 80031fa:	2312      	movs	r3, #18
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
	}

	// "Set I2C standard mode"
	status = writeReg(0x88, 0x00);
 8003202:	2514      	movs	r5, #20
 8003204:	197c      	adds	r4, r7, r5
 8003206:	2100      	movs	r1, #0
 8003208:	2088      	movs	r0, #136	@ 0x88
 800320a:	f7ff fe6f 	bl	8002eec <writeReg>
 800320e:	0003      	movs	r3, r0
 8003210:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003212:	002a      	movs	r2, r5
 8003214:	18bb      	adds	r3, r7, r2
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	b25b      	sxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d004      	beq.n	8003228 <vl53l0x_init+0xe4>
 800321e:	18bb      	adds	r3, r7, r2
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	b25b      	sxtb	r3, r3
 8003224:	f001 f86b 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x80, 0x01);
 8003228:	2514      	movs	r5, #20
 800322a:	197c      	adds	r4, r7, r5
 800322c:	2101      	movs	r1, #1
 800322e:	2080      	movs	r0, #128	@ 0x80
 8003230:	f7ff fe5c 	bl	8002eec <writeReg>
 8003234:	0003      	movs	r3, r0
 8003236:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003238:	002a      	movs	r2, r5
 800323a:	18bb      	adds	r3, r7, r2
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	b25b      	sxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d004      	beq.n	800324e <vl53l0x_init+0x10a>
 8003244:	18bb      	adds	r3, r7, r2
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	b25b      	sxtb	r3, r3
 800324a:	f001 f858 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0xFF, 0x01);
 800324e:	2514      	movs	r5, #20
 8003250:	197c      	adds	r4, r7, r5
 8003252:	2101      	movs	r1, #1
 8003254:	20ff      	movs	r0, #255	@ 0xff
 8003256:	f7ff fe49 	bl	8002eec <writeReg>
 800325a:	0003      	movs	r3, r0
 800325c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800325e:	002a      	movs	r2, r5
 8003260:	18bb      	adds	r3, r7, r2
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	b25b      	sxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d004      	beq.n	8003274 <vl53l0x_init+0x130>
 800326a:	18bb      	adds	r3, r7, r2
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	b25b      	sxtb	r3, r3
 8003270:	f001 f845 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x00, 0x00);
 8003274:	2514      	movs	r5, #20
 8003276:	197c      	adds	r4, r7, r5
 8003278:	2100      	movs	r1, #0
 800327a:	2000      	movs	r0, #0
 800327c:	f7ff fe36 	bl	8002eec <writeReg>
 8003280:	0003      	movs	r3, r0
 8003282:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003284:	002a      	movs	r2, r5
 8003286:	18bb      	adds	r3, r7, r2
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	b25b      	sxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d004      	beq.n	800329a <vl53l0x_init+0x156>
 8003290:	18bb      	adds	r3, r7, r2
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	b25b      	sxtb	r3, r3
 8003296:	f001 f832 	bl	80042fe <vl53l0x_init+0x11ba>
	status = readReg(0x91, &g_stopVariable);
 800329a:	2514      	movs	r5, #20
 800329c:	197c      	adds	r4, r7, r5
 800329e:	4b9b      	ldr	r3, [pc, #620]	@ (800350c <vl53l0x_init+0x3c8>)
 80032a0:	0019      	movs	r1, r3
 80032a2:	2091      	movs	r0, #145	@ 0x91
 80032a4:	f7ff fe7e 	bl	8002fa4 <readReg>
 80032a8:	0003      	movs	r3, r0
 80032aa:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80032ac:	197b      	adds	r3, r7, r5
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b25b      	sxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d004      	beq.n	80032c0 <vl53l0x_init+0x17c>
 80032b6:	197b      	adds	r3, r7, r5
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	b25b      	sxtb	r3, r3
 80032bc:	f001 f81f 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x00, 0x01);
 80032c0:	2514      	movs	r5, #20
 80032c2:	197c      	adds	r4, r7, r5
 80032c4:	2101      	movs	r1, #1
 80032c6:	2000      	movs	r0, #0
 80032c8:	f7ff fe10 	bl	8002eec <writeReg>
 80032cc:	0003      	movs	r3, r0
 80032ce:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80032d0:	002a      	movs	r2, r5
 80032d2:	18bb      	adds	r3, r7, r2
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	b25b      	sxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d004      	beq.n	80032e6 <vl53l0x_init+0x1a2>
 80032dc:	18bb      	adds	r3, r7, r2
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	b25b      	sxtb	r3, r3
 80032e2:	f001 f80c 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0xFF, 0x00);
 80032e6:	2514      	movs	r5, #20
 80032e8:	197c      	adds	r4, r7, r5
 80032ea:	2100      	movs	r1, #0
 80032ec:	20ff      	movs	r0, #255	@ 0xff
 80032ee:	f7ff fdfd 	bl	8002eec <writeReg>
 80032f2:	0003      	movs	r3, r0
 80032f4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80032f6:	002a      	movs	r2, r5
 80032f8:	18bb      	adds	r3, r7, r2
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	b25b      	sxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d004      	beq.n	800330c <vl53l0x_init+0x1c8>
 8003302:	18bb      	adds	r3, r7, r2
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	b25b      	sxtb	r3, r3
 8003308:	f000 fff9 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x80, 0x00);
 800330c:	2514      	movs	r5, #20
 800330e:	197c      	adds	r4, r7, r5
 8003310:	2100      	movs	r1, #0
 8003312:	2080      	movs	r0, #128	@ 0x80
 8003314:	f7ff fdea 	bl	8002eec <writeReg>
 8003318:	0003      	movs	r3, r0
 800331a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800331c:	002a      	movs	r2, r5
 800331e:	18bb      	adds	r3, r7, r2
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	b25b      	sxtb	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d004      	beq.n	8003332 <vl53l0x_init+0x1ee>
 8003328:	18bb      	adds	r3, r7, r2
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b25b      	sxtb	r3, r3
 800332e:	f000 ffe6 	bl	80042fe <vl53l0x_init+0x11ba>

	// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
	status = readReg(MSRC_CONFIG_CONTROL, &reg_val);
 8003332:	2514      	movs	r5, #20
 8003334:	197c      	adds	r4, r7, r5
 8003336:	2312      	movs	r3, #18
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	0019      	movs	r1, r3
 800333c:	2060      	movs	r0, #96	@ 0x60
 800333e:	f7ff fe31 	bl	8002fa4 <readReg>
 8003342:	0003      	movs	r3, r0
 8003344:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003346:	197b      	adds	r3, r7, r5
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	b25b      	sxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d004      	beq.n	800335a <vl53l0x_init+0x216>
 8003350:	197b      	adds	r3, r7, r5
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	b25b      	sxtb	r3, r3
 8003356:	f000 ffd2 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(MSRC_CONFIG_CONTROL, reg_val | 0x12);
 800335a:	2312      	movs	r3, #18
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2212      	movs	r2, #18
 8003362:	4313      	orrs	r3, r2
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2514      	movs	r5, #20
 8003368:	197c      	adds	r4, r7, r5
 800336a:	0019      	movs	r1, r3
 800336c:	2060      	movs	r0, #96	@ 0x60
 800336e:	f7ff fdbd 	bl	8002eec <writeReg>
 8003372:	0003      	movs	r3, r0
 8003374:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003376:	197b      	adds	r3, r7, r5
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	b25b      	sxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d004      	beq.n	800338a <vl53l0x_init+0x246>
 8003380:	197b      	adds	r3, r7, r5
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b25b      	sxtb	r3, r3
 8003386:	f000 ffba 	bl	80042fe <vl53l0x_init+0x11ba>
	reg_val = 0;
 800338a:	2312      	movs	r3, #18
 800338c:	18fb      	adds	r3, r7, r3
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]

	// set final range signal rate limit to 0.25 MCPS (million counts per second)
	status = vl53l0x_set_signal_rate_limit(0.25);
 8003392:	2514      	movs	r5, #20
 8003394:	197c      	adds	r4, r7, r5
 8003396:	23fa      	movs	r3, #250	@ 0xfa
 8003398:	059b      	lsls	r3, r3, #22
 800339a:	1c18      	adds	r0, r3, #0
 800339c:	f000 ffb4 	bl	8004308 <vl53l0x_set_signal_rate_limit>
 80033a0:	0003      	movs	r3, r0
 80033a2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80033a4:	197b      	adds	r3, r7, r5
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	b25b      	sxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d004      	beq.n	80033b8 <vl53l0x_init+0x274>
 80033ae:	197b      	adds	r3, r7, r5
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	b25b      	sxtb	r3, r3
 80033b4:	f000 ffa3 	bl	80042fe <vl53l0x_init+0x11ba>

	status = writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80033b8:	2514      	movs	r5, #20
 80033ba:	197c      	adds	r4, r7, r5
 80033bc:	21ff      	movs	r1, #255	@ 0xff
 80033be:	2001      	movs	r0, #1
 80033c0:	f7ff fd94 	bl	8002eec <writeReg>
 80033c4:	0003      	movs	r3, r0
 80033c6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80033c8:	002a      	movs	r2, r5
 80033ca:	18bb      	adds	r3, r7, r2
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	b25b      	sxtb	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d004      	beq.n	80033de <vl53l0x_init+0x29a>
 80033d4:	18bb      	adds	r3, r7, r2
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	b25b      	sxtb	r3, r3
 80033da:	f000 ff90 	bl	80042fe <vl53l0x_init+0x11ba>

	// Static Initialization
	uint8_t spad_count;
	uint8_t spad_type_is_aperture;
	status = vl53l0x_get_spad_info(&spad_count, &spad_type_is_aperture);
 80033de:	2514      	movs	r5, #20
 80033e0:	197c      	adds	r4, r7, r5
 80033e2:	2310      	movs	r3, #16
 80033e4:	18fa      	adds	r2, r7, r3
 80033e6:	2311      	movs	r3, #17
 80033e8:	18fb      	adds	r3, r7, r3
 80033ea:	0011      	movs	r1, r2
 80033ec:	0018      	movs	r0, r3
 80033ee:	f001 fe41 	bl	8005074 <vl53l0x_get_spad_info>
 80033f2:	0003      	movs	r3, r0
 80033f4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80033f6:	197b      	adds	r3, r7, r5
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	b25b      	sxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d004      	beq.n	800340a <vl53l0x_init+0x2c6>
 8003400:	197b      	adds	r3, r7, r5
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	b25b      	sxtb	r3, r3
 8003406:	f000 ff7a 	bl	80042fe <vl53l0x_init+0x11ba>

	// The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
	// the API, but the same data seems to be more easily readable from
	// GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
	uint8_t ref_spad_map[6];
	status = readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 800340a:	2514      	movs	r5, #20
 800340c:	197c      	adds	r4, r7, r5
 800340e:	2308      	movs	r3, #8
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	2206      	movs	r2, #6
 8003414:	0019      	movs	r1, r3
 8003416:	20b0      	movs	r0, #176	@ 0xb0
 8003418:	f7ff fe64 	bl	80030e4 <readMulti>
 800341c:	0003      	movs	r3, r0
 800341e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003420:	197b      	adds	r3, r7, r5
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	b25b      	sxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d004      	beq.n	8003434 <vl53l0x_init+0x2f0>
 800342a:	197b      	adds	r3, r7, r5
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	b25b      	sxtb	r3, r3
 8003430:	f000 ff65 	bl	80042fe <vl53l0x_init+0x11ba>

	// -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)
	status = writeReg(0xFF, 0x01);
 8003434:	2514      	movs	r5, #20
 8003436:	197c      	adds	r4, r7, r5
 8003438:	2101      	movs	r1, #1
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	f7ff fd56 	bl	8002eec <writeReg>
 8003440:	0003      	movs	r3, r0
 8003442:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003444:	002a      	movs	r2, r5
 8003446:	18bb      	adds	r3, r7, r2
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	b25b      	sxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d004      	beq.n	800345a <vl53l0x_init+0x316>
 8003450:	18bb      	adds	r3, r7, r2
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	b25b      	sxtb	r3, r3
 8003456:	f000 ff52 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 800345a:	2514      	movs	r5, #20
 800345c:	197c      	adds	r4, r7, r5
 800345e:	2100      	movs	r1, #0
 8003460:	204f      	movs	r0, #79	@ 0x4f
 8003462:	f7ff fd43 	bl	8002eec <writeReg>
 8003466:	0003      	movs	r3, r0
 8003468:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800346a:	002a      	movs	r2, r5
 800346c:	18bb      	adds	r3, r7, r2
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	b25b      	sxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d004      	beq.n	8003480 <vl53l0x_init+0x33c>
 8003476:	18bb      	adds	r3, r7, r2
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	b25b      	sxtb	r3, r3
 800347c:	f000 ff3f 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8003480:	2514      	movs	r5, #20
 8003482:	197c      	adds	r4, r7, r5
 8003484:	212c      	movs	r1, #44	@ 0x2c
 8003486:	204e      	movs	r0, #78	@ 0x4e
 8003488:	f7ff fd30 	bl	8002eec <writeReg>
 800348c:	0003      	movs	r3, r0
 800348e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003490:	002a      	movs	r2, r5
 8003492:	18bb      	adds	r3, r7, r2
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	b25b      	sxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d004      	beq.n	80034a6 <vl53l0x_init+0x362>
 800349c:	18bb      	adds	r3, r7, r2
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	b25b      	sxtb	r3, r3
 80034a2:	f000 ff2c 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0xFF, 0x00);
 80034a6:	2514      	movs	r5, #20
 80034a8:	197c      	adds	r4, r7, r5
 80034aa:	2100      	movs	r1, #0
 80034ac:	20ff      	movs	r0, #255	@ 0xff
 80034ae:	f7ff fd1d 	bl	8002eec <writeReg>
 80034b2:	0003      	movs	r3, r0
 80034b4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80034b6:	002a      	movs	r2, r5
 80034b8:	18bb      	adds	r3, r7, r2
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	b25b      	sxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d004      	beq.n	80034cc <vl53l0x_init+0x388>
 80034c2:	18bb      	adds	r3, r7, r2
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	b25b      	sxtb	r3, r3
 80034c8:	f000 ff19 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80034cc:	2514      	movs	r5, #20
 80034ce:	197c      	adds	r4, r7, r5
 80034d0:	21b4      	movs	r1, #180	@ 0xb4
 80034d2:	20b6      	movs	r0, #182	@ 0xb6
 80034d4:	f7ff fd0a 	bl	8002eec <writeReg>
 80034d8:	0003      	movs	r3, r0
 80034da:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80034dc:	002a      	movs	r2, r5
 80034de:	18bb      	adds	r3, r7, r2
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	b25b      	sxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d004      	beq.n	80034f2 <vl53l0x_init+0x3ae>
 80034e8:	18bb      	adds	r3, r7, r2
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	b25b      	sxtb	r3, r3
 80034ee:	f000 ff06 	bl	80042fe <vl53l0x_init+0x11ba>

	uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80034f2:	2310      	movs	r3, #16
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d009      	beq.n	8003510 <vl53l0x_init+0x3cc>
 80034fc:	220c      	movs	r2, #12
 80034fe:	e008      	b.n	8003512 <vl53l0x_init+0x3ce>
 8003500:	20000574 	.word	0x20000574
 8003504:	20000580 	.word	0x20000580
 8003508:	2000058c 	.word	0x2000058c
 800350c:	20000594 	.word	0x20000594
 8003510:	2200      	movs	r2, #0
 8003512:	2313      	movs	r3, #19
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	701a      	strb	r2, [r3, #0]
	uint8_t spads_enabled = 0;
 8003518:	2316      	movs	r3, #22
 800351a:	18fb      	adds	r3, r7, r3
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < 48; i++)
 8003520:	2315      	movs	r3, #21
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
 8003528:	e049      	b.n	80035be <vl53l0x_init+0x47a>
	{
		if (i < first_spad_to_enable || spads_enabled == spad_count)
 800352a:	2315      	movs	r3, #21
 800352c:	18fa      	adds	r2, r7, r3
 800352e:	2313      	movs	r3, #19
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	7812      	ldrb	r2, [r2, #0]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d307      	bcc.n	800354a <vl53l0x_init+0x406>
 800353a:	2311      	movs	r3, #17
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2216      	movs	r2, #22
 8003542:	18ba      	adds	r2, r7, r2
 8003544:	7812      	ldrb	r2, [r2, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d11a      	bne.n	8003580 <vl53l0x_init+0x43c>
		{
			// This bit is lower than the first one that should be enabled, or
			// (reference_spad_count) bits have already been enabled, so zero this bit
			ref_spad_map[i / 8] &= ~(1 << (i % 8));
 800354a:	2115      	movs	r1, #21
 800354c:	187b      	adds	r3, r7, r1
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	08db      	lsrs	r3, r3, #3
 8003552:	b2d8      	uxtb	r0, r3
 8003554:	0002      	movs	r2, r0
 8003556:	2408      	movs	r4, #8
 8003558:	193b      	adds	r3, r7, r4
 800355a:	5c9b      	ldrb	r3, [r3, r2]
 800355c:	b25b      	sxtb	r3, r3
 800355e:	187a      	adds	r2, r7, r1
 8003560:	7812      	ldrb	r2, [r2, #0]
 8003562:	2107      	movs	r1, #7
 8003564:	400a      	ands	r2, r1
 8003566:	2101      	movs	r1, #1
 8003568:	4091      	lsls	r1, r2
 800356a:	000a      	movs	r2, r1
 800356c:	b252      	sxtb	r2, r2
 800356e:	43d2      	mvns	r2, r2
 8003570:	b252      	sxtb	r2, r2
 8003572:	4013      	ands	r3, r2
 8003574:	b25b      	sxtb	r3, r3
 8003576:	0002      	movs	r2, r0
 8003578:	b2d9      	uxtb	r1, r3
 800357a:	193b      	adds	r3, r7, r4
 800357c:	5499      	strb	r1, [r3, r2]
 800357e:	e018      	b.n	80035b2 <vl53l0x_init+0x46e>
		}
		else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8003580:	2015      	movs	r0, #21
 8003582:	183b      	adds	r3, r7, r0
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	08db      	lsrs	r3, r3, #3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	001a      	movs	r2, r3
 800358c:	2308      	movs	r3, #8
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	5c9b      	ldrb	r3, [r3, r2]
 8003592:	0019      	movs	r1, r3
 8003594:	183b      	adds	r3, r7, r0
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2207      	movs	r2, #7
 800359a:	4013      	ands	r3, r2
 800359c:	4119      	asrs	r1, r3
 800359e:	000b      	movs	r3, r1
 80035a0:	2201      	movs	r2, #1
 80035a2:	4013      	ands	r3, r2
 80035a4:	d005      	beq.n	80035b2 <vl53l0x_init+0x46e>
		{
			spads_enabled++;
 80035a6:	2116      	movs	r1, #22
 80035a8:	187b      	adds	r3, r7, r1
 80035aa:	781a      	ldrb	r2, [r3, #0]
 80035ac:	187b      	adds	r3, r7, r1
 80035ae:	3201      	adds	r2, #1
 80035b0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 48; i++)
 80035b2:	2115      	movs	r1, #21
 80035b4:	187b      	adds	r3, r7, r1
 80035b6:	781a      	ldrb	r2, [r3, #0]
 80035b8:	187b      	adds	r3, r7, r1
 80035ba:	3201      	adds	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	2315      	movs	r3, #21
 80035c0:	18fb      	adds	r3, r7, r3
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80035c6:	d9b0      	bls.n	800352a <vl53l0x_init+0x3e6>
		}
	}

	status = writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80035c8:	2514      	movs	r5, #20
 80035ca:	197c      	adds	r4, r7, r5
 80035cc:	2308      	movs	r3, #8
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	2206      	movs	r2, #6
 80035d2:	0019      	movs	r1, r3
 80035d4:	20b0      	movs	r0, #176	@ 0xb0
 80035d6:	f7ff fd4f 	bl	8003078 <writeMulti>
 80035da:	0003      	movs	r3, r0
 80035dc:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80035de:	197b      	adds	r3, r7, r5
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	b25b      	sxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d004      	beq.n	80035f2 <vl53l0x_init+0x4ae>
 80035e8:	197b      	adds	r3, r7, r5
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	b25b      	sxtb	r3, r3
 80035ee:	f000 fe86 	bl	80042fe <vl53l0x_init+0x11ba>
	// -- VL53L0X_set_reference_spads() end

	// -- VL53L0X_load_tuning_settings() begin
	// DefaultTuningSettings from vl53l0x_tuning.h
	status = writeReg(0xFF, 0x01);
 80035f2:	2514      	movs	r5, #20
 80035f4:	197c      	adds	r4, r7, r5
 80035f6:	2101      	movs	r1, #1
 80035f8:	20ff      	movs	r0, #255	@ 0xff
 80035fa:	f7ff fc77 	bl	8002eec <writeReg>
 80035fe:	0003      	movs	r3, r0
 8003600:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003602:	002a      	movs	r2, r5
 8003604:	18bb      	adds	r3, r7, r2
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	b25b      	sxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <vl53l0x_init+0x4d4>
 800360e:	18bb      	adds	r3, r7, r2
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	b25b      	sxtb	r3, r3
 8003614:	f000 fe73 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x00, 0x00);
 8003618:	2514      	movs	r5, #20
 800361a:	197c      	adds	r4, r7, r5
 800361c:	2100      	movs	r1, #0
 800361e:	2000      	movs	r0, #0
 8003620:	f7ff fc64 	bl	8002eec <writeReg>
 8003624:	0003      	movs	r3, r0
 8003626:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003628:	002a      	movs	r2, r5
 800362a:	18bb      	adds	r3, r7, r2
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	b25b      	sxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d004      	beq.n	800363e <vl53l0x_init+0x4fa>
 8003634:	18bb      	adds	r3, r7, r2
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	b25b      	sxtb	r3, r3
 800363a:	f000 fe60 	bl	80042fe <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x00);
 800363e:	2514      	movs	r5, #20
 8003640:	197c      	adds	r4, r7, r5
 8003642:	2100      	movs	r1, #0
 8003644:	20ff      	movs	r0, #255	@ 0xff
 8003646:	f7ff fc51 	bl	8002eec <writeReg>
 800364a:	0003      	movs	r3, r0
 800364c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800364e:	002a      	movs	r2, r5
 8003650:	18bb      	adds	r3, r7, r2
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	b25b      	sxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d004      	beq.n	8003664 <vl53l0x_init+0x520>
 800365a:	18bb      	adds	r3, r7, r2
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	b25b      	sxtb	r3, r3
 8003660:	f000 fe4d 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x09, 0x00);
 8003664:	2514      	movs	r5, #20
 8003666:	197c      	adds	r4, r7, r5
 8003668:	2100      	movs	r1, #0
 800366a:	2009      	movs	r0, #9
 800366c:	f7ff fc3e 	bl	8002eec <writeReg>
 8003670:	0003      	movs	r3, r0
 8003672:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003674:	002a      	movs	r2, r5
 8003676:	18bb      	adds	r3, r7, r2
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	b25b      	sxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d004      	beq.n	800368a <vl53l0x_init+0x546>
 8003680:	18bb      	adds	r3, r7, r2
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	b25b      	sxtb	r3, r3
 8003686:	f000 fe3a 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x10, 0x00);
 800368a:	2514      	movs	r5, #20
 800368c:	197c      	adds	r4, r7, r5
 800368e:	2100      	movs	r1, #0
 8003690:	2010      	movs	r0, #16
 8003692:	f7ff fc2b 	bl	8002eec <writeReg>
 8003696:	0003      	movs	r3, r0
 8003698:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800369a:	002a      	movs	r2, r5
 800369c:	18bb      	adds	r3, r7, r2
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	b25b      	sxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d004      	beq.n	80036b0 <vl53l0x_init+0x56c>
 80036a6:	18bb      	adds	r3, r7, r2
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	b25b      	sxtb	r3, r3
 80036ac:	f000 fe27 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x11, 0x00);
 80036b0:	2514      	movs	r5, #20
 80036b2:	197c      	adds	r4, r7, r5
 80036b4:	2100      	movs	r1, #0
 80036b6:	2011      	movs	r0, #17
 80036b8:	f7ff fc18 	bl	8002eec <writeReg>
 80036bc:	0003      	movs	r3, r0
 80036be:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80036c0:	002a      	movs	r2, r5
 80036c2:	18bb      	adds	r3, r7, r2
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	b25b      	sxtb	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d004      	beq.n	80036d6 <vl53l0x_init+0x592>
 80036cc:	18bb      	adds	r3, r7, r2
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	b25b      	sxtb	r3, r3
 80036d2:	f000 fe14 	bl	80042fe <vl53l0x_init+0x11ba>

	status = writeReg(0x24, 0x01);
 80036d6:	2514      	movs	r5, #20
 80036d8:	197c      	adds	r4, r7, r5
 80036da:	2101      	movs	r1, #1
 80036dc:	2024      	movs	r0, #36	@ 0x24
 80036de:	f7ff fc05 	bl	8002eec <writeReg>
 80036e2:	0003      	movs	r3, r0
 80036e4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80036e6:	002a      	movs	r2, r5
 80036e8:	18bb      	adds	r3, r7, r2
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	b25b      	sxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d004      	beq.n	80036fc <vl53l0x_init+0x5b8>
 80036f2:	18bb      	adds	r3, r7, r2
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	b25b      	sxtb	r3, r3
 80036f8:	f000 fe01 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x25, 0xFF);
 80036fc:	2514      	movs	r5, #20
 80036fe:	197c      	adds	r4, r7, r5
 8003700:	21ff      	movs	r1, #255	@ 0xff
 8003702:	2025      	movs	r0, #37	@ 0x25
 8003704:	f7ff fbf2 	bl	8002eec <writeReg>
 8003708:	0003      	movs	r3, r0
 800370a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800370c:	002a      	movs	r2, r5
 800370e:	18bb      	adds	r3, r7, r2
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	b25b      	sxtb	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d004      	beq.n	8003722 <vl53l0x_init+0x5de>
 8003718:	18bb      	adds	r3, r7, r2
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	b25b      	sxtb	r3, r3
 800371e:	f000 fdee 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x75, 0x00);
 8003722:	2514      	movs	r5, #20
 8003724:	197c      	adds	r4, r7, r5
 8003726:	2100      	movs	r1, #0
 8003728:	2075      	movs	r0, #117	@ 0x75
 800372a:	f7ff fbdf 	bl	8002eec <writeReg>
 800372e:	0003      	movs	r3, r0
 8003730:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003732:	002a      	movs	r2, r5
 8003734:	18bb      	adds	r3, r7, r2
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	b25b      	sxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d004      	beq.n	8003748 <vl53l0x_init+0x604>
 800373e:	18bb      	adds	r3, r7, r2
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	b25b      	sxtb	r3, r3
 8003744:	f000 fddb 	bl	80042fe <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x01);
 8003748:	2514      	movs	r5, #20
 800374a:	197c      	adds	r4, r7, r5
 800374c:	2101      	movs	r1, #1
 800374e:	20ff      	movs	r0, #255	@ 0xff
 8003750:	f7ff fbcc 	bl	8002eec <writeReg>
 8003754:	0003      	movs	r3, r0
 8003756:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003758:	002a      	movs	r2, r5
 800375a:	18bb      	adds	r3, r7, r2
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	b25b      	sxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d004      	beq.n	800376e <vl53l0x_init+0x62a>
 8003764:	18bb      	adds	r3, r7, r2
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b25b      	sxtb	r3, r3
 800376a:	f000 fdc8 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x4E, 0x2C);
 800376e:	2514      	movs	r5, #20
 8003770:	197c      	adds	r4, r7, r5
 8003772:	212c      	movs	r1, #44	@ 0x2c
 8003774:	204e      	movs	r0, #78	@ 0x4e
 8003776:	f7ff fbb9 	bl	8002eec <writeReg>
 800377a:	0003      	movs	r3, r0
 800377c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800377e:	002a      	movs	r2, r5
 8003780:	18bb      	adds	r3, r7, r2
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	b25b      	sxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <vl53l0x_init+0x650>
 800378a:	18bb      	adds	r3, r7, r2
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b25b      	sxtb	r3, r3
 8003790:	f000 fdb5 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x48, 0x00);
 8003794:	2514      	movs	r5, #20
 8003796:	197c      	adds	r4, r7, r5
 8003798:	2100      	movs	r1, #0
 800379a:	2048      	movs	r0, #72	@ 0x48
 800379c:	f7ff fba6 	bl	8002eec <writeReg>
 80037a0:	0003      	movs	r3, r0
 80037a2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80037a4:	002a      	movs	r2, r5
 80037a6:	18bb      	adds	r3, r7, r2
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	b25b      	sxtb	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d004      	beq.n	80037ba <vl53l0x_init+0x676>
 80037b0:	18bb      	adds	r3, r7, r2
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	b25b      	sxtb	r3, r3
 80037b6:	f000 fda2 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x30, 0x20);
 80037ba:	2514      	movs	r5, #20
 80037bc:	197c      	adds	r4, r7, r5
 80037be:	2120      	movs	r1, #32
 80037c0:	2030      	movs	r0, #48	@ 0x30
 80037c2:	f7ff fb93 	bl	8002eec <writeReg>
 80037c6:	0003      	movs	r3, r0
 80037c8:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80037ca:	002a      	movs	r2, r5
 80037cc:	18bb      	adds	r3, r7, r2
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	b25b      	sxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d004      	beq.n	80037e0 <vl53l0x_init+0x69c>
 80037d6:	18bb      	adds	r3, r7, r2
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	b25b      	sxtb	r3, r3
 80037dc:	f000 fd8f 	bl	80042fe <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x00);
 80037e0:	2514      	movs	r5, #20
 80037e2:	197c      	adds	r4, r7, r5
 80037e4:	2100      	movs	r1, #0
 80037e6:	20ff      	movs	r0, #255	@ 0xff
 80037e8:	f7ff fb80 	bl	8002eec <writeReg>
 80037ec:	0003      	movs	r3, r0
 80037ee:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80037f0:	002a      	movs	r2, r5
 80037f2:	18bb      	adds	r3, r7, r2
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	b25b      	sxtb	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d004      	beq.n	8003806 <vl53l0x_init+0x6c2>
 80037fc:	18bb      	adds	r3, r7, r2
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	b25b      	sxtb	r3, r3
 8003802:	f000 fd7c 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x30, 0x09);
 8003806:	2514      	movs	r5, #20
 8003808:	197c      	adds	r4, r7, r5
 800380a:	2109      	movs	r1, #9
 800380c:	2030      	movs	r0, #48	@ 0x30
 800380e:	f7ff fb6d 	bl	8002eec <writeReg>
 8003812:	0003      	movs	r3, r0
 8003814:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003816:	002a      	movs	r2, r5
 8003818:	18bb      	adds	r3, r7, r2
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	b25b      	sxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <vl53l0x_init+0x6e8>
 8003822:	18bb      	adds	r3, r7, r2
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	b25b      	sxtb	r3, r3
 8003828:	f000 fd69 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x54, 0x00);
 800382c:	2514      	movs	r5, #20
 800382e:	197c      	adds	r4, r7, r5
 8003830:	2100      	movs	r1, #0
 8003832:	2054      	movs	r0, #84	@ 0x54
 8003834:	f7ff fb5a 	bl	8002eec <writeReg>
 8003838:	0003      	movs	r3, r0
 800383a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800383c:	002a      	movs	r2, r5
 800383e:	18bb      	adds	r3, r7, r2
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b25b      	sxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <vl53l0x_init+0x70e>
 8003848:	18bb      	adds	r3, r7, r2
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b25b      	sxtb	r3, r3
 800384e:	f000 fd56 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x31, 0x04);
 8003852:	2514      	movs	r5, #20
 8003854:	197c      	adds	r4, r7, r5
 8003856:	2104      	movs	r1, #4
 8003858:	2031      	movs	r0, #49	@ 0x31
 800385a:	f7ff fb47 	bl	8002eec <writeReg>
 800385e:	0003      	movs	r3, r0
 8003860:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003862:	002a      	movs	r2, r5
 8003864:	18bb      	adds	r3, r7, r2
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	b25b      	sxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d004      	beq.n	8003878 <vl53l0x_init+0x734>
 800386e:	18bb      	adds	r3, r7, r2
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	b25b      	sxtb	r3, r3
 8003874:	f000 fd43 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x32, 0x03);
 8003878:	2514      	movs	r5, #20
 800387a:	197c      	adds	r4, r7, r5
 800387c:	2103      	movs	r1, #3
 800387e:	2032      	movs	r0, #50	@ 0x32
 8003880:	f7ff fb34 	bl	8002eec <writeReg>
 8003884:	0003      	movs	r3, r0
 8003886:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003888:	002a      	movs	r2, r5
 800388a:	18bb      	adds	r3, r7, r2
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	b25b      	sxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <vl53l0x_init+0x75a>
 8003894:	18bb      	adds	r3, r7, r2
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	b25b      	sxtb	r3, r3
 800389a:	f000 fd30 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x40, 0x83);
 800389e:	2514      	movs	r5, #20
 80038a0:	197c      	adds	r4, r7, r5
 80038a2:	2183      	movs	r1, #131	@ 0x83
 80038a4:	2040      	movs	r0, #64	@ 0x40
 80038a6:	f7ff fb21 	bl	8002eec <writeReg>
 80038aa:	0003      	movs	r3, r0
 80038ac:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80038ae:	002a      	movs	r2, r5
 80038b0:	18bb      	adds	r3, r7, r2
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	b25b      	sxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <vl53l0x_init+0x780>
 80038ba:	18bb      	adds	r3, r7, r2
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	b25b      	sxtb	r3, r3
 80038c0:	f000 fd1d 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x46, 0x25);
 80038c4:	2514      	movs	r5, #20
 80038c6:	197c      	adds	r4, r7, r5
 80038c8:	2125      	movs	r1, #37	@ 0x25
 80038ca:	2046      	movs	r0, #70	@ 0x46
 80038cc:	f7ff fb0e 	bl	8002eec <writeReg>
 80038d0:	0003      	movs	r3, r0
 80038d2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80038d4:	002a      	movs	r2, r5
 80038d6:	18bb      	adds	r3, r7, r2
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	b25b      	sxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d004      	beq.n	80038ea <vl53l0x_init+0x7a6>
 80038e0:	18bb      	adds	r3, r7, r2
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	b25b      	sxtb	r3, r3
 80038e6:	f000 fd0a 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x60, 0x00);
 80038ea:	2514      	movs	r5, #20
 80038ec:	197c      	adds	r4, r7, r5
 80038ee:	2100      	movs	r1, #0
 80038f0:	2060      	movs	r0, #96	@ 0x60
 80038f2:	f7ff fafb 	bl	8002eec <writeReg>
 80038f6:	0003      	movs	r3, r0
 80038f8:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80038fa:	002a      	movs	r2, r5
 80038fc:	18bb      	adds	r3, r7, r2
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	b25b      	sxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d004      	beq.n	8003910 <vl53l0x_init+0x7cc>
 8003906:	18bb      	adds	r3, r7, r2
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	b25b      	sxtb	r3, r3
 800390c:	f000 fcf7 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x27, 0x00);
 8003910:	2514      	movs	r5, #20
 8003912:	197c      	adds	r4, r7, r5
 8003914:	2100      	movs	r1, #0
 8003916:	2027      	movs	r0, #39	@ 0x27
 8003918:	f7ff fae8 	bl	8002eec <writeReg>
 800391c:	0003      	movs	r3, r0
 800391e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003920:	002a      	movs	r2, r5
 8003922:	18bb      	adds	r3, r7, r2
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	b25b      	sxtb	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d004      	beq.n	8003936 <vl53l0x_init+0x7f2>
 800392c:	18bb      	adds	r3, r7, r2
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	b25b      	sxtb	r3, r3
 8003932:	f000 fce4 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x50, 0x06);
 8003936:	2514      	movs	r5, #20
 8003938:	197c      	adds	r4, r7, r5
 800393a:	2106      	movs	r1, #6
 800393c:	2050      	movs	r0, #80	@ 0x50
 800393e:	f7ff fad5 	bl	8002eec <writeReg>
 8003942:	0003      	movs	r3, r0
 8003944:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003946:	002a      	movs	r2, r5
 8003948:	18bb      	adds	r3, r7, r2
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	b25b      	sxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <vl53l0x_init+0x818>
 8003952:	18bb      	adds	r3, r7, r2
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b25b      	sxtb	r3, r3
 8003958:	f000 fcd1 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x51, 0x00);
 800395c:	2514      	movs	r5, #20
 800395e:	197c      	adds	r4, r7, r5
 8003960:	2100      	movs	r1, #0
 8003962:	2051      	movs	r0, #81	@ 0x51
 8003964:	f7ff fac2 	bl	8002eec <writeReg>
 8003968:	0003      	movs	r3, r0
 800396a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800396c:	002a      	movs	r2, r5
 800396e:	18bb      	adds	r3, r7, r2
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	b25b      	sxtb	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <vl53l0x_init+0x83e>
 8003978:	18bb      	adds	r3, r7, r2
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	b25b      	sxtb	r3, r3
 800397e:	f000 fcbe 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x52, 0x96);
 8003982:	2514      	movs	r5, #20
 8003984:	197c      	adds	r4, r7, r5
 8003986:	2196      	movs	r1, #150	@ 0x96
 8003988:	2052      	movs	r0, #82	@ 0x52
 800398a:	f7ff faaf 	bl	8002eec <writeReg>
 800398e:	0003      	movs	r3, r0
 8003990:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003992:	002a      	movs	r2, r5
 8003994:	18bb      	adds	r3, r7, r2
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	b25b      	sxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d004      	beq.n	80039a8 <vl53l0x_init+0x864>
 800399e:	18bb      	adds	r3, r7, r2
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	b25b      	sxtb	r3, r3
 80039a4:	f000 fcab 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x56, 0x08);
 80039a8:	2514      	movs	r5, #20
 80039aa:	197c      	adds	r4, r7, r5
 80039ac:	2108      	movs	r1, #8
 80039ae:	2056      	movs	r0, #86	@ 0x56
 80039b0:	f7ff fa9c 	bl	8002eec <writeReg>
 80039b4:	0003      	movs	r3, r0
 80039b6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80039b8:	002a      	movs	r2, r5
 80039ba:	18bb      	adds	r3, r7, r2
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	b25b      	sxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d004      	beq.n	80039ce <vl53l0x_init+0x88a>
 80039c4:	18bb      	adds	r3, r7, r2
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	b25b      	sxtb	r3, r3
 80039ca:	f000 fc98 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x57, 0x30);
 80039ce:	2514      	movs	r5, #20
 80039d0:	197c      	adds	r4, r7, r5
 80039d2:	2130      	movs	r1, #48	@ 0x30
 80039d4:	2057      	movs	r0, #87	@ 0x57
 80039d6:	f7ff fa89 	bl	8002eec <writeReg>
 80039da:	0003      	movs	r3, r0
 80039dc:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80039de:	002a      	movs	r2, r5
 80039e0:	18bb      	adds	r3, r7, r2
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	b25b      	sxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d004      	beq.n	80039f4 <vl53l0x_init+0x8b0>
 80039ea:	18bb      	adds	r3, r7, r2
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	b25b      	sxtb	r3, r3
 80039f0:	f000 fc85 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x61, 0x00);
 80039f4:	2514      	movs	r5, #20
 80039f6:	197c      	adds	r4, r7, r5
 80039f8:	2100      	movs	r1, #0
 80039fa:	2061      	movs	r0, #97	@ 0x61
 80039fc:	f7ff fa76 	bl	8002eec <writeReg>
 8003a00:	0003      	movs	r3, r0
 8003a02:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003a04:	002a      	movs	r2, r5
 8003a06:	18bb      	adds	r3, r7, r2
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	b25b      	sxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d004      	beq.n	8003a1a <vl53l0x_init+0x8d6>
 8003a10:	18bb      	adds	r3, r7, r2
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	b25b      	sxtb	r3, r3
 8003a16:	f000 fc72 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x62, 0x00);
 8003a1a:	2514      	movs	r5, #20
 8003a1c:	197c      	adds	r4, r7, r5
 8003a1e:	2100      	movs	r1, #0
 8003a20:	2062      	movs	r0, #98	@ 0x62
 8003a22:	f7ff fa63 	bl	8002eec <writeReg>
 8003a26:	0003      	movs	r3, r0
 8003a28:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003a2a:	002a      	movs	r2, r5
 8003a2c:	18bb      	adds	r3, r7, r2
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	b25b      	sxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <vl53l0x_init+0x8fc>
 8003a36:	18bb      	adds	r3, r7, r2
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	b25b      	sxtb	r3, r3
 8003a3c:	f000 fc5f 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x64, 0x00);
 8003a40:	2514      	movs	r5, #20
 8003a42:	197c      	adds	r4, r7, r5
 8003a44:	2100      	movs	r1, #0
 8003a46:	2064      	movs	r0, #100	@ 0x64
 8003a48:	f7ff fa50 	bl	8002eec <writeReg>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003a50:	002a      	movs	r2, r5
 8003a52:	18bb      	adds	r3, r7, r2
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	b25b      	sxtb	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <vl53l0x_init+0x922>
 8003a5c:	18bb      	adds	r3, r7, r2
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	b25b      	sxtb	r3, r3
 8003a62:	f000 fc4c 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x65, 0x00);
 8003a66:	2514      	movs	r5, #20
 8003a68:	197c      	adds	r4, r7, r5
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	2065      	movs	r0, #101	@ 0x65
 8003a6e:	f7ff fa3d 	bl	8002eec <writeReg>
 8003a72:	0003      	movs	r3, r0
 8003a74:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003a76:	002a      	movs	r2, r5
 8003a78:	18bb      	adds	r3, r7, r2
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b25b      	sxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <vl53l0x_init+0x948>
 8003a82:	18bb      	adds	r3, r7, r2
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	b25b      	sxtb	r3, r3
 8003a88:	f000 fc39 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x66, 0xA0);
 8003a8c:	2514      	movs	r5, #20
 8003a8e:	197c      	adds	r4, r7, r5
 8003a90:	21a0      	movs	r1, #160	@ 0xa0
 8003a92:	2066      	movs	r0, #102	@ 0x66
 8003a94:	f7ff fa2a 	bl	8002eec <writeReg>
 8003a98:	0003      	movs	r3, r0
 8003a9a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003a9c:	002a      	movs	r2, r5
 8003a9e:	18bb      	adds	r3, r7, r2
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	b25b      	sxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d004      	beq.n	8003ab2 <vl53l0x_init+0x96e>
 8003aa8:	18bb      	adds	r3, r7, r2
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	b25b      	sxtb	r3, r3
 8003aae:	f000 fc26 	bl	80042fe <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x01);
 8003ab2:	2514      	movs	r5, #20
 8003ab4:	197c      	adds	r4, r7, r5
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	20ff      	movs	r0, #255	@ 0xff
 8003aba:	f7ff fa17 	bl	8002eec <writeReg>
 8003abe:	0003      	movs	r3, r0
 8003ac0:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003ac2:	002a      	movs	r2, r5
 8003ac4:	18bb      	adds	r3, r7, r2
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	b25b      	sxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d004      	beq.n	8003ad8 <vl53l0x_init+0x994>
 8003ace:	18bb      	adds	r3, r7, r2
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	b25b      	sxtb	r3, r3
 8003ad4:	f000 fc13 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x22, 0x32);
 8003ad8:	2514      	movs	r5, #20
 8003ada:	197c      	adds	r4, r7, r5
 8003adc:	2132      	movs	r1, #50	@ 0x32
 8003ade:	2022      	movs	r0, #34	@ 0x22
 8003ae0:	f7ff fa04 	bl	8002eec <writeReg>
 8003ae4:	0003      	movs	r3, r0
 8003ae6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003ae8:	002a      	movs	r2, r5
 8003aea:	18bb      	adds	r3, r7, r2
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	b25b      	sxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d004      	beq.n	8003afe <vl53l0x_init+0x9ba>
 8003af4:	18bb      	adds	r3, r7, r2
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	b25b      	sxtb	r3, r3
 8003afa:	f000 fc00 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x47, 0x14);
 8003afe:	2514      	movs	r5, #20
 8003b00:	197c      	adds	r4, r7, r5
 8003b02:	2114      	movs	r1, #20
 8003b04:	2047      	movs	r0, #71	@ 0x47
 8003b06:	f7ff f9f1 	bl	8002eec <writeReg>
 8003b0a:	0003      	movs	r3, r0
 8003b0c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003b0e:	002a      	movs	r2, r5
 8003b10:	18bb      	adds	r3, r7, r2
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	b25b      	sxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d004      	beq.n	8003b24 <vl53l0x_init+0x9e0>
 8003b1a:	18bb      	adds	r3, r7, r2
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	b25b      	sxtb	r3, r3
 8003b20:	f000 fbed 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x49, 0xFF);
 8003b24:	2514      	movs	r5, #20
 8003b26:	197c      	adds	r4, r7, r5
 8003b28:	21ff      	movs	r1, #255	@ 0xff
 8003b2a:	2049      	movs	r0, #73	@ 0x49
 8003b2c:	f7ff f9de 	bl	8002eec <writeReg>
 8003b30:	0003      	movs	r3, r0
 8003b32:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003b34:	002a      	movs	r2, r5
 8003b36:	18bb      	adds	r3, r7, r2
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	b25b      	sxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d004      	beq.n	8003b4a <vl53l0x_init+0xa06>
 8003b40:	18bb      	adds	r3, r7, r2
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	b25b      	sxtb	r3, r3
 8003b46:	f000 fbda 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x4A, 0x00);
 8003b4a:	2514      	movs	r5, #20
 8003b4c:	197c      	adds	r4, r7, r5
 8003b4e:	2100      	movs	r1, #0
 8003b50:	204a      	movs	r0, #74	@ 0x4a
 8003b52:	f7ff f9cb 	bl	8002eec <writeReg>
 8003b56:	0003      	movs	r3, r0
 8003b58:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003b5a:	002a      	movs	r2, r5
 8003b5c:	18bb      	adds	r3, r7, r2
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	b25b      	sxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d004      	beq.n	8003b70 <vl53l0x_init+0xa2c>
 8003b66:	18bb      	adds	r3, r7, r2
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	b25b      	sxtb	r3, r3
 8003b6c:	f000 fbc7 	bl	80042fe <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x00);
 8003b70:	2514      	movs	r5, #20
 8003b72:	197c      	adds	r4, r7, r5
 8003b74:	2100      	movs	r1, #0
 8003b76:	20ff      	movs	r0, #255	@ 0xff
 8003b78:	f7ff f9b8 	bl	8002eec <writeReg>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003b80:	002a      	movs	r2, r5
 8003b82:	18bb      	adds	r3, r7, r2
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	b25b      	sxtb	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <vl53l0x_init+0xa52>
 8003b8c:	18bb      	adds	r3, r7, r2
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	b25b      	sxtb	r3, r3
 8003b92:	f000 fbb4 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x7A, 0x0A);
 8003b96:	2514      	movs	r5, #20
 8003b98:	197c      	adds	r4, r7, r5
 8003b9a:	210a      	movs	r1, #10
 8003b9c:	207a      	movs	r0, #122	@ 0x7a
 8003b9e:	f7ff f9a5 	bl	8002eec <writeReg>
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003ba6:	002a      	movs	r2, r5
 8003ba8:	18bb      	adds	r3, r7, r2
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	b25b      	sxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d004      	beq.n	8003bbc <vl53l0x_init+0xa78>
 8003bb2:	18bb      	adds	r3, r7, r2
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	b25b      	sxtb	r3, r3
 8003bb8:	f000 fba1 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x7B, 0x00);
 8003bbc:	2514      	movs	r5, #20
 8003bbe:	197c      	adds	r4, r7, r5
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	207b      	movs	r0, #123	@ 0x7b
 8003bc4:	f7ff f992 	bl	8002eec <writeReg>
 8003bc8:	0003      	movs	r3, r0
 8003bca:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003bcc:	002a      	movs	r2, r5
 8003bce:	18bb      	adds	r3, r7, r2
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	b25b      	sxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d004      	beq.n	8003be2 <vl53l0x_init+0xa9e>
 8003bd8:	18bb      	adds	r3, r7, r2
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	b25b      	sxtb	r3, r3
 8003bde:	f000 fb8e 	bl	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x78, 0x21);
 8003be2:	2514      	movs	r5, #20
 8003be4:	197c      	adds	r4, r7, r5
 8003be6:	2121      	movs	r1, #33	@ 0x21
 8003be8:	2078      	movs	r0, #120	@ 0x78
 8003bea:	f7ff f97f 	bl	8002eec <writeReg>
 8003bee:	0003      	movs	r3, r0
 8003bf0:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003bf2:	002a      	movs	r2, r5
 8003bf4:	18bb      	adds	r3, r7, r2
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	b25b      	sxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d004      	beq.n	8003c08 <vl53l0x_init+0xac4>
 8003bfe:	18bb      	adds	r3, r7, r2
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	b25b      	sxtb	r3, r3
 8003c04:	f000 fb7b 	bl	80042fe <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x01);
 8003c08:	2514      	movs	r5, #20
 8003c0a:	197c      	adds	r4, r7, r5
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	20ff      	movs	r0, #255	@ 0xff
 8003c10:	f7ff f96c 	bl	8002eec <writeReg>
 8003c14:	0003      	movs	r3, r0
 8003c16:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003c18:	002a      	movs	r2, r5
 8003c1a:	18bb      	adds	r3, r7, r2
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	b25b      	sxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <vl53l0x_init+0xae8>
 8003c24:	18bb      	adds	r3, r7, r2
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	b25b      	sxtb	r3, r3
 8003c2a:	e368      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x23, 0x34);
 8003c2c:	2514      	movs	r5, #20
 8003c2e:	197c      	adds	r4, r7, r5
 8003c30:	2134      	movs	r1, #52	@ 0x34
 8003c32:	2023      	movs	r0, #35	@ 0x23
 8003c34:	f7ff f95a 	bl	8002eec <writeReg>
 8003c38:	0003      	movs	r3, r0
 8003c3a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003c3c:	002a      	movs	r2, r5
 8003c3e:	18bb      	adds	r3, r7, r2
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	b25b      	sxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <vl53l0x_init+0xb0c>
 8003c48:	18bb      	adds	r3, r7, r2
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	b25b      	sxtb	r3, r3
 8003c4e:	e356      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x42, 0x00);
 8003c50:	2514      	movs	r5, #20
 8003c52:	197c      	adds	r4, r7, r5
 8003c54:	2100      	movs	r1, #0
 8003c56:	2042      	movs	r0, #66	@ 0x42
 8003c58:	f7ff f948 	bl	8002eec <writeReg>
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003c60:	002a      	movs	r2, r5
 8003c62:	18bb      	adds	r3, r7, r2
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	b25b      	sxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <vl53l0x_init+0xb30>
 8003c6c:	18bb      	adds	r3, r7, r2
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	b25b      	sxtb	r3, r3
 8003c72:	e344      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x44, 0xFF);
 8003c74:	2514      	movs	r5, #20
 8003c76:	197c      	adds	r4, r7, r5
 8003c78:	21ff      	movs	r1, #255	@ 0xff
 8003c7a:	2044      	movs	r0, #68	@ 0x44
 8003c7c:	f7ff f936 	bl	8002eec <writeReg>
 8003c80:	0003      	movs	r3, r0
 8003c82:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003c84:	002a      	movs	r2, r5
 8003c86:	18bb      	adds	r3, r7, r2
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	b25b      	sxtb	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <vl53l0x_init+0xb54>
 8003c90:	18bb      	adds	r3, r7, r2
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	b25b      	sxtb	r3, r3
 8003c96:	e332      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x45, 0x26);
 8003c98:	2514      	movs	r5, #20
 8003c9a:	197c      	adds	r4, r7, r5
 8003c9c:	2126      	movs	r1, #38	@ 0x26
 8003c9e:	2045      	movs	r0, #69	@ 0x45
 8003ca0:	f7ff f924 	bl	8002eec <writeReg>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003ca8:	002a      	movs	r2, r5
 8003caa:	18bb      	adds	r3, r7, r2
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	b25b      	sxtb	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <vl53l0x_init+0xb78>
 8003cb4:	18bb      	adds	r3, r7, r2
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	b25b      	sxtb	r3, r3
 8003cba:	e320      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x46, 0x05);
 8003cbc:	2514      	movs	r5, #20
 8003cbe:	197c      	adds	r4, r7, r5
 8003cc0:	2105      	movs	r1, #5
 8003cc2:	2046      	movs	r0, #70	@ 0x46
 8003cc4:	f7ff f912 	bl	8002eec <writeReg>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003ccc:	002a      	movs	r2, r5
 8003cce:	18bb      	adds	r3, r7, r2
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	b25b      	sxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <vl53l0x_init+0xb9c>
 8003cd8:	18bb      	adds	r3, r7, r2
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	b25b      	sxtb	r3, r3
 8003cde:	e30e      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x40, 0x40);
 8003ce0:	2514      	movs	r5, #20
 8003ce2:	197c      	adds	r4, r7, r5
 8003ce4:	2140      	movs	r1, #64	@ 0x40
 8003ce6:	2040      	movs	r0, #64	@ 0x40
 8003ce8:	f7ff f900 	bl	8002eec <writeReg>
 8003cec:	0003      	movs	r3, r0
 8003cee:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003cf0:	002a      	movs	r2, r5
 8003cf2:	18bb      	adds	r3, r7, r2
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	b25b      	sxtb	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <vl53l0x_init+0xbc0>
 8003cfc:	18bb      	adds	r3, r7, r2
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	b25b      	sxtb	r3, r3
 8003d02:	e2fc      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x0E, 0x06);
 8003d04:	2514      	movs	r5, #20
 8003d06:	197c      	adds	r4, r7, r5
 8003d08:	2106      	movs	r1, #6
 8003d0a:	200e      	movs	r0, #14
 8003d0c:	f7ff f8ee 	bl	8002eec <writeReg>
 8003d10:	0003      	movs	r3, r0
 8003d12:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003d14:	002a      	movs	r2, r5
 8003d16:	18bb      	adds	r3, r7, r2
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	b25b      	sxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <vl53l0x_init+0xbe4>
 8003d20:	18bb      	adds	r3, r7, r2
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	b25b      	sxtb	r3, r3
 8003d26:	e2ea      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x20, 0x1A);
 8003d28:	2514      	movs	r5, #20
 8003d2a:	197c      	adds	r4, r7, r5
 8003d2c:	211a      	movs	r1, #26
 8003d2e:	2020      	movs	r0, #32
 8003d30:	f7ff f8dc 	bl	8002eec <writeReg>
 8003d34:	0003      	movs	r3, r0
 8003d36:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003d38:	002a      	movs	r2, r5
 8003d3a:	18bb      	adds	r3, r7, r2
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	b25b      	sxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <vl53l0x_init+0xc08>
 8003d44:	18bb      	adds	r3, r7, r2
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	b25b      	sxtb	r3, r3
 8003d4a:	e2d8      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x43, 0x40);
 8003d4c:	2514      	movs	r5, #20
 8003d4e:	197c      	adds	r4, r7, r5
 8003d50:	2140      	movs	r1, #64	@ 0x40
 8003d52:	2043      	movs	r0, #67	@ 0x43
 8003d54:	f7ff f8ca 	bl	8002eec <writeReg>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003d5c:	002a      	movs	r2, r5
 8003d5e:	18bb      	adds	r3, r7, r2
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	b25b      	sxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <vl53l0x_init+0xc2c>
 8003d68:	18bb      	adds	r3, r7, r2
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	b25b      	sxtb	r3, r3
 8003d6e:	e2c6      	b.n	80042fe <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x00);
 8003d70:	2514      	movs	r5, #20
 8003d72:	197c      	adds	r4, r7, r5
 8003d74:	2100      	movs	r1, #0
 8003d76:	20ff      	movs	r0, #255	@ 0xff
 8003d78:	f7ff f8b8 	bl	8002eec <writeReg>
 8003d7c:	0003      	movs	r3, r0
 8003d7e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003d80:	002a      	movs	r2, r5
 8003d82:	18bb      	adds	r3, r7, r2
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	b25b      	sxtb	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <vl53l0x_init+0xc50>
 8003d8c:	18bb      	adds	r3, r7, r2
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	b25b      	sxtb	r3, r3
 8003d92:	e2b4      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x34, 0x03);
 8003d94:	2514      	movs	r5, #20
 8003d96:	197c      	adds	r4, r7, r5
 8003d98:	2103      	movs	r1, #3
 8003d9a:	2034      	movs	r0, #52	@ 0x34
 8003d9c:	f7ff f8a6 	bl	8002eec <writeReg>
 8003da0:	0003      	movs	r3, r0
 8003da2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003da4:	002a      	movs	r2, r5
 8003da6:	18bb      	adds	r3, r7, r2
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	b25b      	sxtb	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <vl53l0x_init+0xc74>
 8003db0:	18bb      	adds	r3, r7, r2
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	b25b      	sxtb	r3, r3
 8003db6:	e2a2      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x35, 0x44);
 8003db8:	2514      	movs	r5, #20
 8003dba:	197c      	adds	r4, r7, r5
 8003dbc:	2144      	movs	r1, #68	@ 0x44
 8003dbe:	2035      	movs	r0, #53	@ 0x35
 8003dc0:	f7ff f894 	bl	8002eec <writeReg>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003dc8:	002a      	movs	r2, r5
 8003dca:	18bb      	adds	r3, r7, r2
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	b25b      	sxtb	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <vl53l0x_init+0xc98>
 8003dd4:	18bb      	adds	r3, r7, r2
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	b25b      	sxtb	r3, r3
 8003dda:	e290      	b.n	80042fe <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x01);
 8003ddc:	2514      	movs	r5, #20
 8003dde:	197c      	adds	r4, r7, r5
 8003de0:	2101      	movs	r1, #1
 8003de2:	20ff      	movs	r0, #255	@ 0xff
 8003de4:	f7ff f882 	bl	8002eec <writeReg>
 8003de8:	0003      	movs	r3, r0
 8003dea:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003dec:	002a      	movs	r2, r5
 8003dee:	18bb      	adds	r3, r7, r2
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	b25b      	sxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <vl53l0x_init+0xcbc>
 8003df8:	18bb      	adds	r3, r7, r2
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	b25b      	sxtb	r3, r3
 8003dfe:	e27e      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x31, 0x04);
 8003e00:	2514      	movs	r5, #20
 8003e02:	197c      	adds	r4, r7, r5
 8003e04:	2104      	movs	r1, #4
 8003e06:	2031      	movs	r0, #49	@ 0x31
 8003e08:	f7ff f870 	bl	8002eec <writeReg>
 8003e0c:	0003      	movs	r3, r0
 8003e0e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003e10:	002a      	movs	r2, r5
 8003e12:	18bb      	adds	r3, r7, r2
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	b25b      	sxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <vl53l0x_init+0xce0>
 8003e1c:	18bb      	adds	r3, r7, r2
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	b25b      	sxtb	r3, r3
 8003e22:	e26c      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x4B, 0x09);
 8003e24:	2514      	movs	r5, #20
 8003e26:	197c      	adds	r4, r7, r5
 8003e28:	2109      	movs	r1, #9
 8003e2a:	204b      	movs	r0, #75	@ 0x4b
 8003e2c:	f7ff f85e 	bl	8002eec <writeReg>
 8003e30:	0003      	movs	r3, r0
 8003e32:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003e34:	002a      	movs	r2, r5
 8003e36:	18bb      	adds	r3, r7, r2
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	b25b      	sxtb	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <vl53l0x_init+0xd04>
 8003e40:	18bb      	adds	r3, r7, r2
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	b25b      	sxtb	r3, r3
 8003e46:	e25a      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x4C, 0x05);
 8003e48:	2514      	movs	r5, #20
 8003e4a:	197c      	adds	r4, r7, r5
 8003e4c:	2105      	movs	r1, #5
 8003e4e:	204c      	movs	r0, #76	@ 0x4c
 8003e50:	f7ff f84c 	bl	8002eec <writeReg>
 8003e54:	0003      	movs	r3, r0
 8003e56:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003e58:	002a      	movs	r2, r5
 8003e5a:	18bb      	adds	r3, r7, r2
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	b25b      	sxtb	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <vl53l0x_init+0xd28>
 8003e64:	18bb      	adds	r3, r7, r2
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	b25b      	sxtb	r3, r3
 8003e6a:	e248      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x4D, 0x04);
 8003e6c:	2514      	movs	r5, #20
 8003e6e:	197c      	adds	r4, r7, r5
 8003e70:	2104      	movs	r1, #4
 8003e72:	204d      	movs	r0, #77	@ 0x4d
 8003e74:	f7ff f83a 	bl	8002eec <writeReg>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003e7c:	002a      	movs	r2, r5
 8003e7e:	18bb      	adds	r3, r7, r2
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	b25b      	sxtb	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <vl53l0x_init+0xd4c>
 8003e88:	18bb      	adds	r3, r7, r2
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	b25b      	sxtb	r3, r3
 8003e8e:	e236      	b.n	80042fe <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x00);
 8003e90:	2514      	movs	r5, #20
 8003e92:	197c      	adds	r4, r7, r5
 8003e94:	2100      	movs	r1, #0
 8003e96:	20ff      	movs	r0, #255	@ 0xff
 8003e98:	f7ff f828 	bl	8002eec <writeReg>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003ea0:	002a      	movs	r2, r5
 8003ea2:	18bb      	adds	r3, r7, r2
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	b25b      	sxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <vl53l0x_init+0xd70>
 8003eac:	18bb      	adds	r3, r7, r2
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	b25b      	sxtb	r3, r3
 8003eb2:	e224      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x44, 0x00);
 8003eb4:	2514      	movs	r5, #20
 8003eb6:	197c      	adds	r4, r7, r5
 8003eb8:	2100      	movs	r1, #0
 8003eba:	2044      	movs	r0, #68	@ 0x44
 8003ebc:	f7ff f816 	bl	8002eec <writeReg>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003ec4:	002a      	movs	r2, r5
 8003ec6:	18bb      	adds	r3, r7, r2
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	b25b      	sxtb	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <vl53l0x_init+0xd94>
 8003ed0:	18bb      	adds	r3, r7, r2
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	b25b      	sxtb	r3, r3
 8003ed6:	e212      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x45, 0x20);
 8003ed8:	2514      	movs	r5, #20
 8003eda:	197c      	adds	r4, r7, r5
 8003edc:	2120      	movs	r1, #32
 8003ede:	2045      	movs	r0, #69	@ 0x45
 8003ee0:	f7ff f804 	bl	8002eec <writeReg>
 8003ee4:	0003      	movs	r3, r0
 8003ee6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003ee8:	002a      	movs	r2, r5
 8003eea:	18bb      	adds	r3, r7, r2
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	b25b      	sxtb	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <vl53l0x_init+0xdb8>
 8003ef4:	18bb      	adds	r3, r7, r2
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	b25b      	sxtb	r3, r3
 8003efa:	e200      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x47, 0x08);
 8003efc:	2514      	movs	r5, #20
 8003efe:	197c      	adds	r4, r7, r5
 8003f00:	2108      	movs	r1, #8
 8003f02:	2047      	movs	r0, #71	@ 0x47
 8003f04:	f7fe fff2 	bl	8002eec <writeReg>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003f0c:	002a      	movs	r2, r5
 8003f0e:	18bb      	adds	r3, r7, r2
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	b25b      	sxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <vl53l0x_init+0xddc>
 8003f18:	18bb      	adds	r3, r7, r2
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	b25b      	sxtb	r3, r3
 8003f1e:	e1ee      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x48, 0x28);
 8003f20:	2514      	movs	r5, #20
 8003f22:	197c      	adds	r4, r7, r5
 8003f24:	2128      	movs	r1, #40	@ 0x28
 8003f26:	2048      	movs	r0, #72	@ 0x48
 8003f28:	f7fe ffe0 	bl	8002eec <writeReg>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003f30:	002a      	movs	r2, r5
 8003f32:	18bb      	adds	r3, r7, r2
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	b25b      	sxtb	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <vl53l0x_init+0xe00>
 8003f3c:	18bb      	adds	r3, r7, r2
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	b25b      	sxtb	r3, r3
 8003f42:	e1dc      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x67, 0x00);
 8003f44:	2514      	movs	r5, #20
 8003f46:	197c      	adds	r4, r7, r5
 8003f48:	2100      	movs	r1, #0
 8003f4a:	2067      	movs	r0, #103	@ 0x67
 8003f4c:	f7fe ffce 	bl	8002eec <writeReg>
 8003f50:	0003      	movs	r3, r0
 8003f52:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003f54:	002a      	movs	r2, r5
 8003f56:	18bb      	adds	r3, r7, r2
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	b25b      	sxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <vl53l0x_init+0xe24>
 8003f60:	18bb      	adds	r3, r7, r2
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	b25b      	sxtb	r3, r3
 8003f66:	e1ca      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x70, 0x04);
 8003f68:	2514      	movs	r5, #20
 8003f6a:	197c      	adds	r4, r7, r5
 8003f6c:	2104      	movs	r1, #4
 8003f6e:	2070      	movs	r0, #112	@ 0x70
 8003f70:	f7fe ffbc 	bl	8002eec <writeReg>
 8003f74:	0003      	movs	r3, r0
 8003f76:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003f78:	002a      	movs	r2, r5
 8003f7a:	18bb      	adds	r3, r7, r2
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	b25b      	sxtb	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <vl53l0x_init+0xe48>
 8003f84:	18bb      	adds	r3, r7, r2
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	b25b      	sxtb	r3, r3
 8003f8a:	e1b8      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x71, 0x01);
 8003f8c:	2514      	movs	r5, #20
 8003f8e:	197c      	adds	r4, r7, r5
 8003f90:	2101      	movs	r1, #1
 8003f92:	2071      	movs	r0, #113	@ 0x71
 8003f94:	f7fe ffaa 	bl	8002eec <writeReg>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003f9c:	002a      	movs	r2, r5
 8003f9e:	18bb      	adds	r3, r7, r2
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	b25b      	sxtb	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <vl53l0x_init+0xe6c>
 8003fa8:	18bb      	adds	r3, r7, r2
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	b25b      	sxtb	r3, r3
 8003fae:	e1a6      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x72, 0xFE);
 8003fb0:	2514      	movs	r5, #20
 8003fb2:	197c      	adds	r4, r7, r5
 8003fb4:	21fe      	movs	r1, #254	@ 0xfe
 8003fb6:	2072      	movs	r0, #114	@ 0x72
 8003fb8:	f7fe ff98 	bl	8002eec <writeReg>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003fc0:	002a      	movs	r2, r5
 8003fc2:	18bb      	adds	r3, r7, r2
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	b25b      	sxtb	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <vl53l0x_init+0xe90>
 8003fcc:	18bb      	adds	r3, r7, r2
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	b25b      	sxtb	r3, r3
 8003fd2:	e194      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x76, 0x00);
 8003fd4:	2514      	movs	r5, #20
 8003fd6:	197c      	adds	r4, r7, r5
 8003fd8:	2100      	movs	r1, #0
 8003fda:	2076      	movs	r0, #118	@ 0x76
 8003fdc:	f7fe ff86 	bl	8002eec <writeReg>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8003fe4:	002a      	movs	r2, r5
 8003fe6:	18bb      	adds	r3, r7, r2
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	b25b      	sxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <vl53l0x_init+0xeb4>
 8003ff0:	18bb      	adds	r3, r7, r2
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	b25b      	sxtb	r3, r3
 8003ff6:	e182      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x77, 0x00);
 8003ff8:	2514      	movs	r5, #20
 8003ffa:	197c      	adds	r4, r7, r5
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	2077      	movs	r0, #119	@ 0x77
 8004000:	f7fe ff74 	bl	8002eec <writeReg>
 8004004:	0003      	movs	r3, r0
 8004006:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004008:	002a      	movs	r2, r5
 800400a:	18bb      	adds	r3, r7, r2
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	b25b      	sxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <vl53l0x_init+0xed8>
 8004014:	18bb      	adds	r3, r7, r2
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	b25b      	sxtb	r3, r3
 800401a:	e170      	b.n	80042fe <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x01);
 800401c:	2514      	movs	r5, #20
 800401e:	197c      	adds	r4, r7, r5
 8004020:	2101      	movs	r1, #1
 8004022:	20ff      	movs	r0, #255	@ 0xff
 8004024:	f7fe ff62 	bl	8002eec <writeReg>
 8004028:	0003      	movs	r3, r0
 800402a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800402c:	002a      	movs	r2, r5
 800402e:	18bb      	adds	r3, r7, r2
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	b25b      	sxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <vl53l0x_init+0xefc>
 8004038:	18bb      	adds	r3, r7, r2
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	b25b      	sxtb	r3, r3
 800403e:	e15e      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x0D, 0x01);
 8004040:	2514      	movs	r5, #20
 8004042:	197c      	adds	r4, r7, r5
 8004044:	2101      	movs	r1, #1
 8004046:	200d      	movs	r0, #13
 8004048:	f7fe ff50 	bl	8002eec <writeReg>
 800404c:	0003      	movs	r3, r0
 800404e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004050:	002a      	movs	r2, r5
 8004052:	18bb      	adds	r3, r7, r2
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	b25b      	sxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <vl53l0x_init+0xf20>
 800405c:	18bb      	adds	r3, r7, r2
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	b25b      	sxtb	r3, r3
 8004062:	e14c      	b.n	80042fe <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x00);
 8004064:	2514      	movs	r5, #20
 8004066:	197c      	adds	r4, r7, r5
 8004068:	2100      	movs	r1, #0
 800406a:	20ff      	movs	r0, #255	@ 0xff
 800406c:	f7fe ff3e 	bl	8002eec <writeReg>
 8004070:	0003      	movs	r3, r0
 8004072:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004074:	002a      	movs	r2, r5
 8004076:	18bb      	adds	r3, r7, r2
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	b25b      	sxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <vl53l0x_init+0xf44>
 8004080:	18bb      	adds	r3, r7, r2
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	b25b      	sxtb	r3, r3
 8004086:	e13a      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x80, 0x01);
 8004088:	2514      	movs	r5, #20
 800408a:	197c      	adds	r4, r7, r5
 800408c:	2101      	movs	r1, #1
 800408e:	2080      	movs	r0, #128	@ 0x80
 8004090:	f7fe ff2c 	bl	8002eec <writeReg>
 8004094:	0003      	movs	r3, r0
 8004096:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004098:	002a      	movs	r2, r5
 800409a:	18bb      	adds	r3, r7, r2
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	b25b      	sxtb	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <vl53l0x_init+0xf68>
 80040a4:	18bb      	adds	r3, r7, r2
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	b25b      	sxtb	r3, r3
 80040aa:	e128      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x01, 0xF8);
 80040ac:	2514      	movs	r5, #20
 80040ae:	197c      	adds	r4, r7, r5
 80040b0:	21f8      	movs	r1, #248	@ 0xf8
 80040b2:	2001      	movs	r0, #1
 80040b4:	f7fe ff1a 	bl	8002eec <writeReg>
 80040b8:	0003      	movs	r3, r0
 80040ba:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80040bc:	002a      	movs	r2, r5
 80040be:	18bb      	adds	r3, r7, r2
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	b25b      	sxtb	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <vl53l0x_init+0xf8c>
 80040c8:	18bb      	adds	r3, r7, r2
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	b25b      	sxtb	r3, r3
 80040ce:	e116      	b.n	80042fe <vl53l0x_init+0x11ba>

	status = writeReg(0xFF, 0x01);
 80040d0:	2514      	movs	r5, #20
 80040d2:	197c      	adds	r4, r7, r5
 80040d4:	2101      	movs	r1, #1
 80040d6:	20ff      	movs	r0, #255	@ 0xff
 80040d8:	f7fe ff08 	bl	8002eec <writeReg>
 80040dc:	0003      	movs	r3, r0
 80040de:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80040e0:	002a      	movs	r2, r5
 80040e2:	18bb      	adds	r3, r7, r2
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b25b      	sxtb	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <vl53l0x_init+0xfb0>
 80040ec:	18bb      	adds	r3, r7, r2
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	b25b      	sxtb	r3, r3
 80040f2:	e104      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x8E, 0x01);
 80040f4:	2514      	movs	r5, #20
 80040f6:	197c      	adds	r4, r7, r5
 80040f8:	2101      	movs	r1, #1
 80040fa:	208e      	movs	r0, #142	@ 0x8e
 80040fc:	f7fe fef6 	bl	8002eec <writeReg>
 8004100:	0003      	movs	r3, r0
 8004102:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004104:	002a      	movs	r2, r5
 8004106:	18bb      	adds	r3, r7, r2
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	b25b      	sxtb	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <vl53l0x_init+0xfd4>
 8004110:	18bb      	adds	r3, r7, r2
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	b25b      	sxtb	r3, r3
 8004116:	e0f2      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x00, 0x01);
 8004118:	2514      	movs	r5, #20
 800411a:	197c      	adds	r4, r7, r5
 800411c:	2101      	movs	r1, #1
 800411e:	2000      	movs	r0, #0
 8004120:	f7fe fee4 	bl	8002eec <writeReg>
 8004124:	0003      	movs	r3, r0
 8004126:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004128:	002a      	movs	r2, r5
 800412a:	18bb      	adds	r3, r7, r2
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	b25b      	sxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <vl53l0x_init+0xff8>
 8004134:	18bb      	adds	r3, r7, r2
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	b25b      	sxtb	r3, r3
 800413a:	e0e0      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0xFF, 0x00);
 800413c:	2514      	movs	r5, #20
 800413e:	197c      	adds	r4, r7, r5
 8004140:	2100      	movs	r1, #0
 8004142:	20ff      	movs	r0, #255	@ 0xff
 8004144:	f7fe fed2 	bl	8002eec <writeReg>
 8004148:	0003      	movs	r3, r0
 800414a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800414c:	002a      	movs	r2, r5
 800414e:	18bb      	adds	r3, r7, r2
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	b25b      	sxtb	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <vl53l0x_init+0x101c>
 8004158:	18bb      	adds	r3, r7, r2
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	b25b      	sxtb	r3, r3
 800415e:	e0ce      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(0x80, 0x00);
 8004160:	2514      	movs	r5, #20
 8004162:	197c      	adds	r4, r7, r5
 8004164:	2100      	movs	r1, #0
 8004166:	2080      	movs	r0, #128	@ 0x80
 8004168:	f7fe fec0 	bl	8002eec <writeReg>
 800416c:	0003      	movs	r3, r0
 800416e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004170:	002a      	movs	r2, r5
 8004172:	18bb      	adds	r3, r7, r2
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	b25b      	sxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <vl53l0x_init+0x1040>
 800417c:	18bb      	adds	r3, r7, r2
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	b25b      	sxtb	r3, r3
 8004182:	e0bc      	b.n	80042fe <vl53l0x_init+0x11ba>
	// -- VL53L0X_load_tuning_settings() end

	// "Set interrupt config to new sample ready"
	// -- VL53L0X_SetGpioConfig() begin

	status = writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8004184:	2514      	movs	r5, #20
 8004186:	197c      	adds	r4, r7, r5
 8004188:	2104      	movs	r1, #4
 800418a:	200a      	movs	r0, #10
 800418c:	f7fe feae 	bl	8002eec <writeReg>
 8004190:	0003      	movs	r3, r0
 8004192:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004194:	002a      	movs	r2, r5
 8004196:	18bb      	adds	r3, r7, r2
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	b25b      	sxtb	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <vl53l0x_init+0x1064>
 80041a0:	18bb      	adds	r3, r7, r2
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	b25b      	sxtb	r3, r3
 80041a6:	e0aa      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = readReg(GPIO_HV_MUX_ACTIVE_HIGH, &reg_val);
 80041a8:	2514      	movs	r5, #20
 80041aa:	197c      	adds	r4, r7, r5
 80041ac:	2312      	movs	r3, #18
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	0019      	movs	r1, r3
 80041b2:	2084      	movs	r0, #132	@ 0x84
 80041b4:	f7fe fef6 	bl	8002fa4 <readReg>
 80041b8:	0003      	movs	r3, r0
 80041ba:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80041bc:	197b      	adds	r3, r7, r5
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b25b      	sxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <vl53l0x_init+0x108a>
 80041c6:	197b      	adds	r3, r7, r5
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	b25b      	sxtb	r3, r3
 80041cc:	e097      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = writeReg(GPIO_HV_MUX_ACTIVE_HIGH, reg_val & ~0x10); // active low
 80041ce:	2312      	movs	r3, #18
 80041d0:	18fb      	adds	r3, r7, r3
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2210      	movs	r2, #16
 80041d6:	4393      	bics	r3, r2
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2514      	movs	r5, #20
 80041dc:	197c      	adds	r4, r7, r5
 80041de:	0019      	movs	r1, r3
 80041e0:	2084      	movs	r0, #132	@ 0x84
 80041e2:	f7fe fe83 	bl	8002eec <writeReg>
 80041e6:	0003      	movs	r3, r0
 80041e8:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80041ea:	197b      	adds	r3, r7, r5
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <vl53l0x_init+0x10b8>
 80041f4:	197b      	adds	r3, r7, r5
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	b25b      	sxtb	r3, r3
 80041fa:	e080      	b.n	80042fe <vl53l0x_init+0x11ba>
	reg_val = 0;
 80041fc:	2312      	movs	r3, #18
 80041fe:	18fb      	adds	r3, r7, r3
 8004200:	2200      	movs	r2, #0
 8004202:	701a      	strb	r2, [r3, #0]
	status = writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8004204:	2514      	movs	r5, #20
 8004206:	197c      	adds	r4, r7, r5
 8004208:	2101      	movs	r1, #1
 800420a:	200b      	movs	r0, #11
 800420c:	f7fe fe6e 	bl	8002eec <writeReg>
 8004210:	0003      	movs	r3, r0
 8004212:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004214:	002a      	movs	r2, r5
 8004216:	18bb      	adds	r3, r7, r2
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	b25b      	sxtb	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <vl53l0x_init+0x10e4>
 8004220:	18bb      	adds	r3, r7, r2
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	b25b      	sxtb	r3, r3
 8004226:	e06a      	b.n	80042fe <vl53l0x_init+0x11ba>

	// "Disable MSRC and TCC by default"
	// MSRC = Minimum Signal Rate Check
	// TCC = Target CentreCheck
	// -- VL53L0X_SetSequenceStepEnable() begin
	status = writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8004228:	2514      	movs	r5, #20
 800422a:	197c      	adds	r4, r7, r5
 800422c:	21e8      	movs	r1, #232	@ 0xe8
 800422e:	2001      	movs	r0, #1
 8004230:	f7fe fe5c 	bl	8002eec <writeReg>
 8004234:	0003      	movs	r3, r0
 8004236:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004238:	002a      	movs	r2, r5
 800423a:	18bb      	adds	r3, r7, r2
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	b25b      	sxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <vl53l0x_init+0x1108>
 8004244:	18bb      	adds	r3, r7, r2
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	b25b      	sxtb	r3, r3
 800424a:	e058      	b.n	80042fe <vl53l0x_init+0x11ba>
	// VL53L0X_StaticInit() end

	// VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

	// -- VL53L0X_perform_vhv_calibration() begin
	status = writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 800424c:	2514      	movs	r5, #20
 800424e:	197c      	adds	r4, r7, r5
 8004250:	2101      	movs	r1, #1
 8004252:	2001      	movs	r0, #1
 8004254:	f7fe fe4a 	bl	8002eec <writeReg>
 8004258:	0003      	movs	r3, r0
 800425a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800425c:	002a      	movs	r2, r5
 800425e:	18bb      	adds	r3, r7, r2
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	b25b      	sxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <vl53l0x_init+0x112c>
 8004268:	18bb      	adds	r3, r7, r2
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	b25b      	sxtb	r3, r3
 800426e:	e046      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = vl53l0x_single_reference_calibration(0x40);
 8004270:	2514      	movs	r5, #20
 8004272:	197c      	adds	r4, r7, r5
 8004274:	2040      	movs	r0, #64	@ 0x40
 8004276:	f001 fa9f 	bl	80057b8 <vl53l0x_single_reference_calibration>
 800427a:	0003      	movs	r3, r0
 800427c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800427e:	002a      	movs	r2, r5
 8004280:	18bb      	adds	r3, r7, r2
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	b25b      	sxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <vl53l0x_init+0x114e>
 800428a:	18bb      	adds	r3, r7, r2
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	b25b      	sxtb	r3, r3
 8004290:	e035      	b.n	80042fe <vl53l0x_init+0x11ba>
	// -- VL53L0X_perform_vhv_calibration() end

	// -- VL53L0X_perform_phase_calibration() begin
	status = writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8004292:	2514      	movs	r5, #20
 8004294:	197c      	adds	r4, r7, r5
 8004296:	2102      	movs	r1, #2
 8004298:	2001      	movs	r0, #1
 800429a:	f7fe fe27 	bl	8002eec <writeReg>
 800429e:	0003      	movs	r3, r0
 80042a0:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80042a2:	002a      	movs	r2, r5
 80042a4:	18bb      	adds	r3, r7, r2
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	b25b      	sxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <vl53l0x_init+0x1172>
 80042ae:	18bb      	adds	r3, r7, r2
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	b25b      	sxtb	r3, r3
 80042b4:	e023      	b.n	80042fe <vl53l0x_init+0x11ba>
	status = vl53l0x_single_reference_calibration(0x00);
 80042b6:	2514      	movs	r5, #20
 80042b8:	197c      	adds	r4, r7, r5
 80042ba:	2000      	movs	r0, #0
 80042bc:	f001 fa7c 	bl	80057b8 <vl53l0x_single_reference_calibration>
 80042c0:	0003      	movs	r3, r0
 80042c2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80042c4:	002a      	movs	r2, r5
 80042c6:	18bb      	adds	r3, r7, r2
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	b25b      	sxtb	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <vl53l0x_init+0x1194>
 80042d0:	18bb      	adds	r3, r7, r2
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	b25b      	sxtb	r3, r3
 80042d6:	e012      	b.n	80042fe <vl53l0x_init+0x11ba>
	// -- VL53L0X_perform_phase_calibration() end

	// "restore the previous Sequence Config"
	status = writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80042d8:	2514      	movs	r5, #20
 80042da:	197c      	adds	r4, r7, r5
 80042dc:	21e8      	movs	r1, #232	@ 0xe8
 80042de:	2001      	movs	r0, #1
 80042e0:	f7fe fe04 	bl	8002eec <writeReg>
 80042e4:	0003      	movs	r3, r0
 80042e6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80042e8:	002a      	movs	r2, r5
 80042ea:	18bb      	adds	r3, r7, r2
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	b25b      	sxtb	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <vl53l0x_init+0x11b8>
 80042f4:	18bb      	adds	r3, r7, r2
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	b25b      	sxtb	r3, r3
 80042fa:	e000      	b.n	80042fe <vl53l0x_init+0x11ba>
	// VL53L0X_PerformRefCalibration() end

	return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	0018      	movs	r0, r3
 8004300:	46bd      	mov	sp, r7
 8004302:	b006      	add	sp, #24
 8004304:	bdb0      	pop	{r4, r5, r7, pc}
 8004306:	46c0      	nop			@ (mov r8, r8)

08004308 <vl53l0x_set_signal_rate_limit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
int8_t vl53l0x_set_signal_rate_limit(float limit_Mcps)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return HAL_ERROR; }
 8004310:	2100      	movs	r1, #0
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fc f8be 	bl	8000494 <__aeabi_fcmplt>
 8004318:	1e03      	subs	r3, r0, #0
 800431a:	d108      	bne.n	800432e <vl53l0x_set_signal_rate_limit+0x26>
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7fc fdeb 	bl	8000ef8 <__aeabi_f2d>
 8004322:	4a0e      	ldr	r2, [pc, #56]	@ (800435c <vl53l0x_set_signal_rate_limit+0x54>)
 8004324:	4b0e      	ldr	r3, [pc, #56]	@ (8004360 <vl53l0x_set_signal_rate_limit+0x58>)
 8004326:	f7fc f88f 	bl	8000448 <__aeabi_dcmpgt>
 800432a:	1e03      	subs	r3, r0, #0
 800432c:	d001      	beq.n	8004332 <vl53l0x_set_signal_rate_limit+0x2a>
 800432e:	2301      	movs	r3, #1
 8004330:	e00f      	b.n	8004352 <vl53l0x_set_signal_rate_limit+0x4a>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  return writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8004332:	2186      	movs	r1, #134	@ 0x86
 8004334:	05c9      	lsls	r1, r1, #23
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7fc f9b2 	bl	80006a0 <__aeabi_fmul>
 800433c:	1c03      	adds	r3, r0, #0
 800433e:	1c18      	adds	r0, r3, #0
 8004340:	f7fc f8d0 	bl	80004e4 <__aeabi_f2uiz>
 8004344:	0003      	movs	r3, r0
 8004346:	b29b      	uxth	r3, r3
 8004348:	0019      	movs	r1, r3
 800434a:	2044      	movs	r0, #68	@ 0x44
 800434c:	f7fe fdfc 	bl	8002f48 <writeReg16Bit>
 8004350:	0003      	movs	r3, r0
}
 8004352:	0018      	movs	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	b002      	add	sp, #8
 8004358:	bd80      	pop	{r7, pc}
 800435a:	46c0      	nop			@ (mov r8, r8)
 800435c:	0a3d70a4 	.word	0x0a3d70a4
 8004360:	407fffd7 	.word	0x407fffd7

08004364 <vl53l0x_set_measurement_timing_budget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
int8_t vl53l0x_set_measurement_timing_budget(uint32_t budget_us)
{
 8004364:	b5b0      	push	{r4, r5, r7, lr}
 8004366:	b092      	sub	sp, #72	@ 0x48
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 800436c:	2347      	movs	r3, #71	@ 0x47
 800436e:	18fb      	adds	r3, r7, r3
 8004370:	2200      	movs	r2, #0
 8004372:	701a      	strb	r2, [r3, #0]
	SequenceStepEnables enables;
	SequenceStepTimeouts timeouts;

	uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8004374:	233c      	movs	r3, #60	@ 0x3c
 8004376:	18fb      	adds	r3, r7, r3
 8004378:	22a5      	movs	r2, #165	@ 0xa5
 800437a:	00d2      	lsls	r2, r2, #3
 800437c:	801a      	strh	r2, [r3, #0]
	uint16_t const EndOverhead        = 960;
 800437e:	233a      	movs	r3, #58	@ 0x3a
 8004380:	18fb      	adds	r3, r7, r3
 8004382:	22f0      	movs	r2, #240	@ 0xf0
 8004384:	0092      	lsls	r2, r2, #2
 8004386:	801a      	strh	r2, [r3, #0]
	uint16_t const MsrcOverhead       = 660;
 8004388:	2338      	movs	r3, #56	@ 0x38
 800438a:	18fb      	adds	r3, r7, r3
 800438c:	22a5      	movs	r2, #165	@ 0xa5
 800438e:	0092      	lsls	r2, r2, #2
 8004390:	801a      	strh	r2, [r3, #0]
	uint16_t const TccOverhead        = 590;
 8004392:	2336      	movs	r3, #54	@ 0x36
 8004394:	18fb      	adds	r3, r7, r3
 8004396:	4a6a      	ldr	r2, [pc, #424]	@ (8004540 <vl53l0x_set_measurement_timing_budget+0x1dc>)
 8004398:	801a      	strh	r2, [r3, #0]
	uint16_t const DssOverhead        = 690;
 800439a:	2334      	movs	r3, #52	@ 0x34
 800439c:	18fb      	adds	r3, r7, r3
 800439e:	4a69      	ldr	r2, [pc, #420]	@ (8004544 <vl53l0x_set_measurement_timing_budget+0x1e0>)
 80043a0:	801a      	strh	r2, [r3, #0]
	uint16_t const PreRangeOverhead   = 660;
 80043a2:	2332      	movs	r3, #50	@ 0x32
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	22a5      	movs	r2, #165	@ 0xa5
 80043a8:	0092      	lsls	r2, r2, #2
 80043aa:	801a      	strh	r2, [r3, #0]
	uint16_t const FinalRangeOverhead = 550;
 80043ac:	2330      	movs	r3, #48	@ 0x30
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	4a65      	ldr	r2, [pc, #404]	@ (8004548 <vl53l0x_set_measurement_timing_budget+0x1e4>)
 80043b2:	801a      	strh	r2, [r3, #0]

	uint32_t const MinTimingBudget = 20000;
 80043b4:	4b65      	ldr	r3, [pc, #404]	@ (800454c <vl53l0x_set_measurement_timing_budget+0x1e8>)
 80043b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (budget_us < MinTimingBudget) { return HAL_ERROR; }
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043bc:	429a      	cmp	r2, r3
 80043be:	d201      	bcs.n	80043c4 <vl53l0x_set_measurement_timing_budget+0x60>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0b9      	b.n	8004538 <vl53l0x_set_measurement_timing_budget+0x1d4>

	uint32_t used_budget_us = StartOverhead + EndOverhead;
 80043c4:	233c      	movs	r3, #60	@ 0x3c
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	881a      	ldrh	r2, [r3, #0]
 80043ca:	233a      	movs	r3, #58	@ 0x3a
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	18d3      	adds	r3, r2, r3
 80043d2:	643b      	str	r3, [r7, #64]	@ 0x40

	status = vl53l0x_get_sequence_step_enables(&enables);
 80043d4:	2547      	movs	r5, #71	@ 0x47
 80043d6:	197c      	adds	r4, r7, r5
 80043d8:	2320      	movs	r3, #32
 80043da:	18fb      	adds	r3, r7, r3
 80043dc:	0018      	movs	r0, r3
 80043de:	f001 f825 	bl	800542c <vl53l0x_get_sequence_step_enables>
 80043e2:	0003      	movs	r3, r0
 80043e4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80043e6:	197b      	adds	r3, r7, r5
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	b25b      	sxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <vl53l0x_set_measurement_timing_budget+0x94>
 80043f0:	197b      	adds	r3, r7, r5
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	b25b      	sxtb	r3, r3
 80043f6:	e09f      	b.n	8004538 <vl53l0x_set_measurement_timing_budget+0x1d4>
	status = vl53l0x_get_sequence_step_timeouts(&enables, &timeouts);
 80043f8:	2547      	movs	r5, #71	@ 0x47
 80043fa:	197c      	adds	r4, r7, r5
 80043fc:	2308      	movs	r3, #8
 80043fe:	18fa      	adds	r2, r7, r3
 8004400:	2320      	movs	r3, #32
 8004402:	18fb      	adds	r3, r7, r3
 8004404:	0011      	movs	r1, r2
 8004406:	0018      	movs	r0, r3
 8004408:	f001 f860 	bl	80054cc <vl53l0x_get_sequence_step_timeouts>
 800440c:	0003      	movs	r3, r0
 800440e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004410:	197b      	adds	r3, r7, r5
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	b25b      	sxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <vl53l0x_set_measurement_timing_budget+0xbe>
 800441a:	197b      	adds	r3, r7, r5
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	b25b      	sxtb	r3, r3
 8004420:	e08a      	b.n	8004538 <vl53l0x_set_measurement_timing_budget+0x1d4>

	if(enables.tcc)
 8004422:	2320      	movs	r3, #32
 8004424:	18fb      	adds	r3, r7, r3
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <vl53l0x_set_measurement_timing_budget+0xdc>
	{
		used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 800442c:	2308      	movs	r3, #8
 800442e:	18fb      	adds	r3, r7, r3
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	2336      	movs	r3, #54	@ 0x36
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	18d3      	adds	r3, r2, r3
 800443a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800443c:	18d3      	adds	r3, r2, r3
 800443e:	643b      	str	r3, [r7, #64]	@ 0x40
	}

	if(enables.dss)
 8004440:	2320      	movs	r3, #32
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	789b      	ldrb	r3, [r3, #2]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00b      	beq.n	8004462 <vl53l0x_set_measurement_timing_budget+0xfe>
	{
		used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800444a:	2308      	movs	r3, #8
 800444c:	18fb      	adds	r3, r7, r3
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	2334      	movs	r3, #52	@ 0x34
 8004452:	18fb      	adds	r3, r7, r3
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	18d3      	adds	r3, r2, r3
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800445c:	18d3      	adds	r3, r2, r3
 800445e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004460:	e00e      	b.n	8004480 <vl53l0x_set_measurement_timing_budget+0x11c>
	}
	else if(enables.msrc)
 8004462:	2320      	movs	r3, #32
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d009      	beq.n	8004480 <vl53l0x_set_measurement_timing_budget+0x11c>
	{
		used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 800446c:	2308      	movs	r3, #8
 800446e:	18fb      	adds	r3, r7, r3
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	2338      	movs	r3, #56	@ 0x38
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	18d3      	adds	r3, r2, r3
 800447a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800447c:	18d3      	adds	r3, r2, r3
 800447e:	643b      	str	r3, [r7, #64]	@ 0x40
	}

	if(enables.pre_range)
 8004480:	2320      	movs	r3, #32
 8004482:	18fb      	adds	r3, r7, r3
 8004484:	78db      	ldrb	r3, [r3, #3]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d009      	beq.n	800449e <vl53l0x_set_measurement_timing_budget+0x13a>
	{
		used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800448a:	2308      	movs	r3, #8
 800448c:	18fb      	adds	r3, r7, r3
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	2332      	movs	r3, #50	@ 0x32
 8004492:	18fb      	adds	r3, r7, r3
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	18d3      	adds	r3, r2, r3
 8004498:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800449a:	18d3      	adds	r3, r2, r3
 800449c:	643b      	str	r3, [r7, #64]	@ 0x40
	}

	if(enables.final_range)
 800449e:	2320      	movs	r3, #32
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	791b      	ldrb	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d043      	beq.n	8004530 <vl53l0x_set_measurement_timing_budget+0x1cc>
	{
		used_budget_us += FinalRangeOverhead;
 80044a8:	2330      	movs	r3, #48	@ 0x30
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044b0:	18d3      	adds	r3, r2, r3
 80044b2:	643b      	str	r3, [r7, #64]	@ 0x40
		// budget and the sum of all other timeouts within the sequence.
		// If there is no room for the final range timeout, then an error
		// will be set. Otherwise the remaining time will be applied to
		// the final range."

		if(used_budget_us > budget_us)
 80044b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d901      	bls.n	80044c0 <vl53l0x_set_measurement_timing_budget+0x15c>
		{
			// "Requested timeout too big."
			return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e03b      	b.n	8004538 <vl53l0x_set_measurement_timing_budget+0x1d4>
		}

		uint32_t final_range_timeout_us = budget_us - used_budget_us;
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	62bb      	str	r3, [r7, #40]	@ 0x28
		// "For the final range timeout, the pre-range timeout
		//  must be added. To do this both final and pre-range
		//  timeouts must be expressed in macro periods MClks
		//  because they have different vcsel periods."

		uint16_t final_range_timeout_mclks = vl53l0x_timeout_us_to_mclks(final_range_timeout_us, timeouts.final_range_vcsel_period_pclks);
 80044c8:	2408      	movs	r4, #8
 80044ca:	193b      	adds	r3, r7, r4
 80044cc:	885b      	ldrh	r3, [r3, #2]
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d2:	0011      	movs	r1, r2
 80044d4:	0018      	movs	r0, r3
 80044d6:	f001 f93e 	bl	8005756 <vl53l0x_timeout_us_to_mclks>
 80044da:	0002      	movs	r2, r0
 80044dc:	203e      	movs	r0, #62	@ 0x3e
 80044de:	183b      	adds	r3, r7, r0
 80044e0:	801a      	strh	r2, [r3, #0]

		if (enables.pre_range)
 80044e2:	2320      	movs	r3, #32
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	78db      	ldrb	r3, [r3, #3]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d006      	beq.n	80044fa <vl53l0x_set_measurement_timing_budget+0x196>
		{
			final_range_timeout_mclks += timeouts.pre_range_mclks;
 80044ec:	193b      	adds	r3, r7, r4
 80044ee:	88d9      	ldrh	r1, [r3, #6]
 80044f0:	183b      	adds	r3, r7, r0
 80044f2:	183a      	adds	r2, r7, r0
 80044f4:	8812      	ldrh	r2, [r2, #0]
 80044f6:	188a      	adds	r2, r1, r2
 80044f8:	801a      	strh	r2, [r3, #0]
		}

		status = writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, vl53l0x_encode_timeout(final_range_timeout_mclks));
 80044fa:	233e      	movs	r3, #62	@ 0x3e
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	0018      	movs	r0, r3
 8004502:	f001 f8c6 	bl	8005692 <vl53l0x_encode_timeout>
 8004506:	0003      	movs	r3, r0
 8004508:	2547      	movs	r5, #71	@ 0x47
 800450a:	197c      	adds	r4, r7, r5
 800450c:	0019      	movs	r1, r3
 800450e:	2071      	movs	r0, #113	@ 0x71
 8004510:	f7fe fd1a 	bl	8002f48 <writeReg16Bit>
 8004514:	0003      	movs	r3, r0
 8004516:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8004518:	197b      	adds	r3, r7, r5
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	b25b      	sxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <vl53l0x_set_measurement_timing_budget+0x1c6>
 8004522:	197b      	adds	r3, r7, r5
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	b25b      	sxtb	r3, r3
 8004528:	e006      	b.n	8004538 <vl53l0x_set_measurement_timing_budget+0x1d4>
		// set_sequence_step_timeout() end

		g_measTimBudUs = budget_us; // store for internal reuse
 800452a:	4b09      	ldr	r3, [pc, #36]	@ (8004550 <vl53l0x_set_measurement_timing_budget+0x1ec>)
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	601a      	str	r2, [r3, #0]
	}
	return status;
 8004530:	2347      	movs	r3, #71	@ 0x47
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	b25b      	sxtb	r3, r3
}
 8004538:	0018      	movs	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	b012      	add	sp, #72	@ 0x48
 800453e:	bdb0      	pop	{r4, r5, r7, pc}
 8004540:	0000024e 	.word	0x0000024e
 8004544:	000002b2 	.word	0x000002b2
 8004548:	00000226 	.word	0x00000226
 800454c:	00004e20 	.word	0x00004e20
 8004550:	20000598 	.word	0x20000598

08004554 <vl53l0x_set_vcsel_pulse_period>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
int8_t vl53l0x_set_vcsel_pulse_period(vcselPeriodType type, uint8_t period_pclks)
{
 8004554:	b5b0      	push	{r4, r5, r7, lr}
 8004556:	b08e      	sub	sp, #56	@ 0x38
 8004558:	af00      	add	r7, sp, #0
 800455a:	0002      	movs	r2, r0
 800455c:	1dfb      	adds	r3, r7, #7
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	1dbb      	adds	r3, r7, #6
 8004562:	1c0a      	adds	r2, r1, #0
 8004564:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8004566:	2137      	movs	r1, #55	@ 0x37
 8004568:	187b      	adds	r3, r7, r1
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
	uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 800456e:	1dbb      	adds	r3, r7, #6
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	085b      	lsrs	r3, r3, #1
 8004574:	b2da      	uxtb	r2, r3
 8004576:	2333      	movs	r3, #51	@ 0x33
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	3a01      	subs	r2, #1
 800457c:	701a      	strb	r2, [r3, #0]

	SequenceStepEnables enables;
	SequenceStepTimeouts timeouts;

	status = vl53l0x_get_sequence_step_enables(&enables);
 800457e:	000d      	movs	r5, r1
 8004580:	187c      	adds	r4, r7, r1
 8004582:	2328      	movs	r3, #40	@ 0x28
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	0018      	movs	r0, r3
 8004588:	f000 ff50 	bl	800542c <vl53l0x_get_sequence_step_enables>
 800458c:	0003      	movs	r3, r0
 800458e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004590:	197b      	adds	r3, r7, r5
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b25b      	sxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d004      	beq.n	80045a4 <vl53l0x_set_vcsel_pulse_period+0x50>
 800459a:	197b      	adds	r3, r7, r5
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	b25b      	sxtb	r3, r3
 80045a0:	f000 fb64 	bl	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
	status = vl53l0x_get_sequence_step_timeouts(&enables, &timeouts);
 80045a4:	2537      	movs	r5, #55	@ 0x37
 80045a6:	197c      	adds	r4, r7, r5
 80045a8:	2310      	movs	r3, #16
 80045aa:	18fa      	adds	r2, r7, r3
 80045ac:	2328      	movs	r3, #40	@ 0x28
 80045ae:	18fb      	adds	r3, r7, r3
 80045b0:	0011      	movs	r1, r2
 80045b2:	0018      	movs	r0, r3
 80045b4:	f000 ff8a 	bl	80054cc <vl53l0x_get_sequence_step_timeouts>
 80045b8:	0003      	movs	r3, r0
 80045ba:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80045bc:	197b      	adds	r3, r7, r5
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	b25b      	sxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <vl53l0x_set_vcsel_pulse_period+0x7a>
 80045c6:	197b      	adds	r3, r7, r5
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	b25b      	sxtb	r3, r3
 80045cc:	e34e      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
	//
	// For the MSRC timeout, the same applies - this timeout being
	// dependant on the pre-range vcsel period."


	if (type == VcselPeriodPreRange)
 80045ce:	1dfb      	adds	r3, r7, #7
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d000      	beq.n	80045d8 <vl53l0x_set_vcsel_pulse_period+0x84>
 80045d6:	e0b2      	b.n	800473e <vl53l0x_set_vcsel_pulse_period+0x1ea>
	{
		// "Set phase check limits"
		switch (period_pclks)
 80045d8:	1dbb      	adds	r3, r7, #6
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b12      	cmp	r3, #18
 80045de:	d023      	beq.n	8004628 <vl53l0x_set_vcsel_pulse_period+0xd4>
 80045e0:	dc2b      	bgt.n	800463a <vl53l0x_set_vcsel_pulse_period+0xe6>
 80045e2:	2b10      	cmp	r3, #16
 80045e4:	d017      	beq.n	8004616 <vl53l0x_set_vcsel_pulse_period+0xc2>
 80045e6:	dc28      	bgt.n	800463a <vl53l0x_set_vcsel_pulse_period+0xe6>
 80045e8:	2b0c      	cmp	r3, #12
 80045ea:	d002      	beq.n	80045f2 <vl53l0x_set_vcsel_pulse_period+0x9e>
 80045ec:	2b0e      	cmp	r3, #14
 80045ee:	d009      	beq.n	8004604 <vl53l0x_set_vcsel_pulse_period+0xb0>
 80045f0:	e023      	b.n	800463a <vl53l0x_set_vcsel_pulse_period+0xe6>
		{
			case 12:
			{
				status = writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 80045f2:	2337      	movs	r3, #55	@ 0x37
 80045f4:	18fc      	adds	r4, r7, r3
 80045f6:	2118      	movs	r1, #24
 80045f8:	2057      	movs	r0, #87	@ 0x57
 80045fa:	f7fe fc77 	bl	8002eec <writeReg>
 80045fe:	0003      	movs	r3, r0
 8004600:	7023      	strb	r3, [r4, #0]
				break;
 8004602:	e01c      	b.n	800463e <vl53l0x_set_vcsel_pulse_period+0xea>
			}
			case 14:
			{
				status = writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 8004604:	2337      	movs	r3, #55	@ 0x37
 8004606:	18fc      	adds	r4, r7, r3
 8004608:	2130      	movs	r1, #48	@ 0x30
 800460a:	2057      	movs	r0, #87	@ 0x57
 800460c:	f7fe fc6e 	bl	8002eec <writeReg>
 8004610:	0003      	movs	r3, r0
 8004612:	7023      	strb	r3, [r4, #0]
				break;
 8004614:	e013      	b.n	800463e <vl53l0x_set_vcsel_pulse_period+0xea>
			}
			case 16:
			{
				status = writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 8004616:	2337      	movs	r3, #55	@ 0x37
 8004618:	18fc      	adds	r4, r7, r3
 800461a:	2140      	movs	r1, #64	@ 0x40
 800461c:	2057      	movs	r0, #87	@ 0x57
 800461e:	f7fe fc65 	bl	8002eec <writeReg>
 8004622:	0003      	movs	r3, r0
 8004624:	7023      	strb	r3, [r4, #0]
				break;
 8004626:	e00a      	b.n	800463e <vl53l0x_set_vcsel_pulse_period+0xea>
			}
			case 18:
			{
				status = writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8004628:	2337      	movs	r3, #55	@ 0x37
 800462a:	18fc      	adds	r4, r7, r3
 800462c:	2150      	movs	r1, #80	@ 0x50
 800462e:	2057      	movs	r0, #87	@ 0x57
 8004630:	f7fe fc5c 	bl	8002eec <writeReg>
 8004634:	0003      	movs	r3, r0
 8004636:	7023      	strb	r3, [r4, #0]
				break;
 8004638:	e001      	b.n	800463e <vl53l0x_set_vcsel_pulse_period+0xea>
			}
			default:
			{
				// invalid period
				return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e316      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
			}
		}
		if(status != HAL_OK){return status;}
 800463e:	2237      	movs	r2, #55	@ 0x37
 8004640:	18bb      	adds	r3, r7, r2
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	b25b      	sxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <vl53l0x_set_vcsel_pulse_period+0xfe>
 800464a:	18bb      	adds	r3, r7, r2
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	b25b      	sxtb	r3, r3
 8004650:	e30c      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
		status = writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 8004652:	2537      	movs	r5, #55	@ 0x37
 8004654:	197c      	adds	r4, r7, r5
 8004656:	2108      	movs	r1, #8
 8004658:	2056      	movs	r0, #86	@ 0x56
 800465a:	f7fe fc47 	bl	8002eec <writeReg>
 800465e:	0003      	movs	r3, r0
 8004660:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8004662:	002a      	movs	r2, r5
 8004664:	18bb      	adds	r3, r7, r2
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	b25b      	sxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <vl53l0x_set_vcsel_pulse_period+0x122>
 800466e:	18bb      	adds	r3, r7, r2
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	b25b      	sxtb	r3, r3
 8004674:	e2fa      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>

		// apply new VCSEL period
		status = writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8004676:	2537      	movs	r5, #55	@ 0x37
 8004678:	197c      	adds	r4, r7, r5
 800467a:	2333      	movs	r3, #51	@ 0x33
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	0019      	movs	r1, r3
 8004682:	2050      	movs	r0, #80	@ 0x50
 8004684:	f7fe fc32 	bl	8002eec <writeReg>
 8004688:	0003      	movs	r3, r0
 800468a:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 800468c:	197b      	adds	r3, r7, r5
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	b25b      	sxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <vl53l0x_set_vcsel_pulse_period+0x14a>
 8004696:	197b      	adds	r3, r7, r5
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	b25b      	sxtb	r3, r3
 800469c:	e2e6      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>

		// update timeouts
		// set_sequence_step_timeout() begin
		// (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)
		uint16_t new_pre_range_timeout_mclks = vl53l0x_timeout_us_to_mclks(timeouts.pre_range_us, period_pclks);
 800469e:	2310      	movs	r3, #16
 80046a0:	18fb      	adds	r3, r7, r3
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	1dbb      	adds	r3, r7, #6
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	0019      	movs	r1, r3
 80046aa:	0010      	movs	r0, r2
 80046ac:	f001 f853 	bl	8005756 <vl53l0x_timeout_us_to_mclks>
 80046b0:	0002      	movs	r2, r0
 80046b2:	2130      	movs	r1, #48	@ 0x30
 80046b4:	187b      	adds	r3, r7, r1
 80046b6:	801a      	strh	r2, [r3, #0]

		status = writeReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, vl53l0x_encode_timeout(new_pre_range_timeout_mclks));
 80046b8:	187b      	adds	r3, r7, r1
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	0018      	movs	r0, r3
 80046be:	f000 ffe8 	bl	8005692 <vl53l0x_encode_timeout>
 80046c2:	0003      	movs	r3, r0
 80046c4:	2537      	movs	r5, #55	@ 0x37
 80046c6:	197c      	adds	r4, r7, r5
 80046c8:	0019      	movs	r1, r3
 80046ca:	2051      	movs	r0, #81	@ 0x51
 80046cc:	f7fe fc3c 	bl	8002f48 <writeReg16Bit>
 80046d0:	0003      	movs	r3, r0
 80046d2:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 80046d4:	197b      	adds	r3, r7, r5
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	b25b      	sxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <vl53l0x_set_vcsel_pulse_period+0x192>
 80046de:	197b      	adds	r3, r7, r5
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	b25b      	sxtb	r3, r3
 80046e4:	e2c2      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
		// set_sequence_step_timeout() end

		// set_sequence_step_timeout() begin
		// (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)
		uint16_t new_msrc_timeout_mclks = vl53l0x_timeout_us_to_mclks(timeouts.msrc_dss_tcc_us, period_pclks);
 80046e6:	2310      	movs	r3, #16
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	1dbb      	adds	r3, r7, #6
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	0019      	movs	r1, r3
 80046f2:	0010      	movs	r0, r2
 80046f4:	f001 f82f 	bl	8005756 <vl53l0x_timeout_us_to_mclks>
 80046f8:	0002      	movs	r2, r0
 80046fa:	212e      	movs	r1, #46	@ 0x2e
 80046fc:	187b      	adds	r3, r7, r1
 80046fe:	801a      	strh	r2, [r3, #0]
		status = writeReg(MSRC_CONFIG_TIMEOUT_MACROP, (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 8004700:	187b      	adds	r3, r7, r1
 8004702:	881a      	ldrh	r2, [r3, #0]
 8004704:	2380      	movs	r3, #128	@ 0x80
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	429a      	cmp	r2, r3
 800470a:	d805      	bhi.n	8004718 <vl53l0x_set_vcsel_pulse_period+0x1c4>
 800470c:	187b      	adds	r3, r7, r1
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b2db      	uxtb	r3, r3
 8004716:	e000      	b.n	800471a <vl53l0x_set_vcsel_pulse_period+0x1c6>
 8004718:	23ff      	movs	r3, #255	@ 0xff
 800471a:	2537      	movs	r5, #55	@ 0x37
 800471c:	197c      	adds	r4, r7, r5
 800471e:	0019      	movs	r1, r3
 8004720:	2046      	movs	r0, #70	@ 0x46
 8004722:	f7fe fbe3 	bl	8002eec <writeReg>
 8004726:	0003      	movs	r3, r0
 8004728:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 800472a:	197b      	adds	r3, r7, r5
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	b25b      	sxtb	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d100      	bne.n	8004736 <vl53l0x_set_vcsel_pulse_period+0x1e2>
 8004734:	e241      	b.n	8004bba <vl53l0x_set_vcsel_pulse_period+0x666>
 8004736:	197b      	adds	r3, r7, r5
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	b25b      	sxtb	r3, r3
 800473c:	e296      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
		// set_sequence_step_timeout() end
	}
	else if (type == VcselPeriodFinalRange)
 800473e:	1dfb      	adds	r3, r7, #7
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d000      	beq.n	8004748 <vl53l0x_set_vcsel_pulse_period+0x1f4>
 8004746:	e236      	b.n	8004bb6 <vl53l0x_set_vcsel_pulse_period+0x662>
	{
		switch (period_pclks)
 8004748:	1dbb      	adds	r3, r7, #6
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b0e      	cmp	r3, #14
 800474e:	d100      	bne.n	8004752 <vl53l0x_set_vcsel_pulse_period+0x1fe>
 8004750:	e16b      	b.n	8004a2a <vl53l0x_set_vcsel_pulse_period+0x4d6>
 8004752:	dd00      	ble.n	8004756 <vl53l0x_set_vcsel_pulse_period+0x202>
 8004754:	e1de      	b.n	8004b14 <vl53l0x_set_vcsel_pulse_period+0x5c0>
 8004756:	2b0c      	cmp	r3, #12
 8004758:	d100      	bne.n	800475c <vl53l0x_set_vcsel_pulse_period+0x208>
 800475a:	e0f1      	b.n	8004940 <vl53l0x_set_vcsel_pulse_period+0x3ec>
 800475c:	dd00      	ble.n	8004760 <vl53l0x_set_vcsel_pulse_period+0x20c>
 800475e:	e1d9      	b.n	8004b14 <vl53l0x_set_vcsel_pulse_period+0x5c0>
 8004760:	2b08      	cmp	r3, #8
 8004762:	d003      	beq.n	800476c <vl53l0x_set_vcsel_pulse_period+0x218>
 8004764:	2b0a      	cmp	r3, #10
 8004766:	d100      	bne.n	800476a <vl53l0x_set_vcsel_pulse_period+0x216>
 8004768:	e075      	b.n	8004856 <vl53l0x_set_vcsel_pulse_period+0x302>
 800476a:	e1d3      	b.n	8004b14 <vl53l0x_set_vcsel_pulse_period+0x5c0>
		{
			case 8:
			{
				status = writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 800476c:	2537      	movs	r5, #55	@ 0x37
 800476e:	197c      	adds	r4, r7, r5
 8004770:	2110      	movs	r1, #16
 8004772:	2048      	movs	r0, #72	@ 0x48
 8004774:	f7fe fbba 	bl	8002eec <writeReg>
 8004778:	0003      	movs	r3, r0
 800477a:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 800477c:	002a      	movs	r2, r5
 800477e:	18bb      	adds	r3, r7, r2
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	b25b      	sxtb	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <vl53l0x_set_vcsel_pulse_period+0x23c>
 8004788:	18bb      	adds	r3, r7, r2
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	b25b      	sxtb	r3, r3
 800478e:	e26d      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8004790:	2537      	movs	r5, #55	@ 0x37
 8004792:	197c      	adds	r4, r7, r5
 8004794:	2108      	movs	r1, #8
 8004796:	2047      	movs	r0, #71	@ 0x47
 8004798:	f7fe fba8 	bl	8002eec <writeReg>
 800479c:	0003      	movs	r3, r0
 800479e:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 80047a0:	002a      	movs	r2, r5
 80047a2:	18bb      	adds	r3, r7, r2
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	b25b      	sxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <vl53l0x_set_vcsel_pulse_period+0x260>
 80047ac:	18bb      	adds	r3, r7, r2
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	b25b      	sxtb	r3, r3
 80047b2:	e25b      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 80047b4:	2537      	movs	r5, #55	@ 0x37
 80047b6:	197c      	adds	r4, r7, r5
 80047b8:	2102      	movs	r1, #2
 80047ba:	2032      	movs	r0, #50	@ 0x32
 80047bc:	f7fe fb96 	bl	8002eec <writeReg>
 80047c0:	0003      	movs	r3, r0
 80047c2:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 80047c4:	002a      	movs	r2, r5
 80047c6:	18bb      	adds	r3, r7, r2
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	b25b      	sxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <vl53l0x_set_vcsel_pulse_period+0x284>
 80047d0:	18bb      	adds	r3, r7, r2
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	b25b      	sxtb	r3, r3
 80047d6:	e249      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 80047d8:	2537      	movs	r5, #55	@ 0x37
 80047da:	197c      	adds	r4, r7, r5
 80047dc:	210c      	movs	r1, #12
 80047de:	2030      	movs	r0, #48	@ 0x30
 80047e0:	f7fe fb84 	bl	8002eec <writeReg>
 80047e4:	0003      	movs	r3, r0
 80047e6:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 80047e8:	002a      	movs	r2, r5
 80047ea:	18bb      	adds	r3, r7, r2
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	b25b      	sxtb	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <vl53l0x_set_vcsel_pulse_period+0x2a8>
 80047f4:	18bb      	adds	r3, r7, r2
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	b25b      	sxtb	r3, r3
 80047fa:	e237      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(0xFF, 0x01);
 80047fc:	2537      	movs	r5, #55	@ 0x37
 80047fe:	197c      	adds	r4, r7, r5
 8004800:	2101      	movs	r1, #1
 8004802:	20ff      	movs	r0, #255	@ 0xff
 8004804:	f7fe fb72 	bl	8002eec <writeReg>
 8004808:	0003      	movs	r3, r0
 800480a:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 800480c:	002a      	movs	r2, r5
 800480e:	18bb      	adds	r3, r7, r2
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	b25b      	sxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <vl53l0x_set_vcsel_pulse_period+0x2cc>
 8004818:	18bb      	adds	r3, r7, r2
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	b25b      	sxtb	r3, r3
 800481e:	e225      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(ALGO_PHASECAL_LIM, 0x30);
 8004820:	2537      	movs	r5, #55	@ 0x37
 8004822:	197c      	adds	r4, r7, r5
 8004824:	2130      	movs	r1, #48	@ 0x30
 8004826:	2030      	movs	r0, #48	@ 0x30
 8004828:	f7fe fb60 	bl	8002eec <writeReg>
 800482c:	0003      	movs	r3, r0
 800482e:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004830:	002a      	movs	r2, r5
 8004832:	18bb      	adds	r3, r7, r2
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	b25b      	sxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <vl53l0x_set_vcsel_pulse_period+0x2f0>
 800483c:	18bb      	adds	r3, r7, r2
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	b25b      	sxtb	r3, r3
 8004842:	e213      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(0xFF, 0x00);
 8004844:	2337      	movs	r3, #55	@ 0x37
 8004846:	18fc      	adds	r4, r7, r3
 8004848:	2100      	movs	r1, #0
 800484a:	20ff      	movs	r0, #255	@ 0xff
 800484c:	f7fe fb4e 	bl	8002eec <writeReg>
 8004850:	0003      	movs	r3, r0
 8004852:	7023      	strb	r3, [r4, #0]
				break;
 8004854:	e160      	b.n	8004b18 <vl53l0x_set_vcsel_pulse_period+0x5c4>
			}
			case 10:
			{
				status = writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 8004856:	2537      	movs	r5, #55	@ 0x37
 8004858:	197c      	adds	r4, r7, r5
 800485a:	2128      	movs	r1, #40	@ 0x28
 800485c:	2048      	movs	r0, #72	@ 0x48
 800485e:	f7fe fb45 	bl	8002eec <writeReg>
 8004862:	0003      	movs	r3, r0
 8004864:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004866:	002a      	movs	r2, r5
 8004868:	18bb      	adds	r3, r7, r2
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	b25b      	sxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <vl53l0x_set_vcsel_pulse_period+0x326>
 8004872:	18bb      	adds	r3, r7, r2
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	b25b      	sxtb	r3, r3
 8004878:	e1f8      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800487a:	2537      	movs	r5, #55	@ 0x37
 800487c:	197c      	adds	r4, r7, r5
 800487e:	2108      	movs	r1, #8
 8004880:	2047      	movs	r0, #71	@ 0x47
 8004882:	f7fe fb33 	bl	8002eec <writeReg>
 8004886:	0003      	movs	r3, r0
 8004888:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 800488a:	002a      	movs	r2, r5
 800488c:	18bb      	adds	r3, r7, r2
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	b25b      	sxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <vl53l0x_set_vcsel_pulse_period+0x34a>
 8004896:	18bb      	adds	r3, r7, r2
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	b25b      	sxtb	r3, r3
 800489c:	e1e6      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 800489e:	2537      	movs	r5, #55	@ 0x37
 80048a0:	197c      	adds	r4, r7, r5
 80048a2:	2103      	movs	r1, #3
 80048a4:	2032      	movs	r0, #50	@ 0x32
 80048a6:	f7fe fb21 	bl	8002eec <writeReg>
 80048aa:	0003      	movs	r3, r0
 80048ac:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 80048ae:	002a      	movs	r2, r5
 80048b0:	18bb      	adds	r3, r7, r2
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	b25b      	sxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <vl53l0x_set_vcsel_pulse_period+0x36e>
 80048ba:	18bb      	adds	r3, r7, r2
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	b25b      	sxtb	r3, r3
 80048c0:	e1d4      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 80048c2:	2537      	movs	r5, #55	@ 0x37
 80048c4:	197c      	adds	r4, r7, r5
 80048c6:	2109      	movs	r1, #9
 80048c8:	2030      	movs	r0, #48	@ 0x30
 80048ca:	f7fe fb0f 	bl	8002eec <writeReg>
 80048ce:	0003      	movs	r3, r0
 80048d0:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 80048d2:	002a      	movs	r2, r5
 80048d4:	18bb      	adds	r3, r7, r2
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	b25b      	sxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <vl53l0x_set_vcsel_pulse_period+0x392>
 80048de:	18bb      	adds	r3, r7, r2
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	b25b      	sxtb	r3, r3
 80048e4:	e1c2      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(0xFF, 0x01);
 80048e6:	2537      	movs	r5, #55	@ 0x37
 80048e8:	197c      	adds	r4, r7, r5
 80048ea:	2101      	movs	r1, #1
 80048ec:	20ff      	movs	r0, #255	@ 0xff
 80048ee:	f7fe fafd 	bl	8002eec <writeReg>
 80048f2:	0003      	movs	r3, r0
 80048f4:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 80048f6:	002a      	movs	r2, r5
 80048f8:	18bb      	adds	r3, r7, r2
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	b25b      	sxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <vl53l0x_set_vcsel_pulse_period+0x3b6>
 8004902:	18bb      	adds	r3, r7, r2
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	b25b      	sxtb	r3, r3
 8004908:	e1b0      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(ALGO_PHASECAL_LIM, 0x20);
 800490a:	2537      	movs	r5, #55	@ 0x37
 800490c:	197c      	adds	r4, r7, r5
 800490e:	2120      	movs	r1, #32
 8004910:	2030      	movs	r0, #48	@ 0x30
 8004912:	f7fe faeb 	bl	8002eec <writeReg>
 8004916:	0003      	movs	r3, r0
 8004918:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 800491a:	002a      	movs	r2, r5
 800491c:	18bb      	adds	r3, r7, r2
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	b25b      	sxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <vl53l0x_set_vcsel_pulse_period+0x3da>
 8004926:	18bb      	adds	r3, r7, r2
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	b25b      	sxtb	r3, r3
 800492c:	e19e      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(0xFF, 0x00);
 800492e:	2337      	movs	r3, #55	@ 0x37
 8004930:	18fc      	adds	r4, r7, r3
 8004932:	2100      	movs	r1, #0
 8004934:	20ff      	movs	r0, #255	@ 0xff
 8004936:	f7fe fad9 	bl	8002eec <writeReg>
 800493a:	0003      	movs	r3, r0
 800493c:	7023      	strb	r3, [r4, #0]
				break;
 800493e:	e0eb      	b.n	8004b18 <vl53l0x_set_vcsel_pulse_period+0x5c4>
			}
			case 12:
			{
				status = writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 8004940:	2537      	movs	r5, #55	@ 0x37
 8004942:	197c      	adds	r4, r7, r5
 8004944:	2138      	movs	r1, #56	@ 0x38
 8004946:	2048      	movs	r0, #72	@ 0x48
 8004948:	f7fe fad0 	bl	8002eec <writeReg>
 800494c:	0003      	movs	r3, r0
 800494e:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004950:	002a      	movs	r2, r5
 8004952:	18bb      	adds	r3, r7, r2
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	b25b      	sxtb	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <vl53l0x_set_vcsel_pulse_period+0x410>
 800495c:	18bb      	adds	r3, r7, r2
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	b25b      	sxtb	r3, r3
 8004962:	e183      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8004964:	2537      	movs	r5, #55	@ 0x37
 8004966:	197c      	adds	r4, r7, r5
 8004968:	2108      	movs	r1, #8
 800496a:	2047      	movs	r0, #71	@ 0x47
 800496c:	f7fe fabe 	bl	8002eec <writeReg>
 8004970:	0003      	movs	r3, r0
 8004972:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004974:	002a      	movs	r2, r5
 8004976:	18bb      	adds	r3, r7, r2
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	b25b      	sxtb	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <vl53l0x_set_vcsel_pulse_period+0x434>
 8004980:	18bb      	adds	r3, r7, r2
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	b25b      	sxtb	r3, r3
 8004986:	e171      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8004988:	2537      	movs	r5, #55	@ 0x37
 800498a:	197c      	adds	r4, r7, r5
 800498c:	2103      	movs	r1, #3
 800498e:	2032      	movs	r0, #50	@ 0x32
 8004990:	f7fe faac 	bl	8002eec <writeReg>
 8004994:	0003      	movs	r3, r0
 8004996:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004998:	002a      	movs	r2, r5
 800499a:	18bb      	adds	r3, r7, r2
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	b25b      	sxtb	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <vl53l0x_set_vcsel_pulse_period+0x458>
 80049a4:	18bb      	adds	r3, r7, r2
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	b25b      	sxtb	r3, r3
 80049aa:	e15f      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 80049ac:	2537      	movs	r5, #55	@ 0x37
 80049ae:	197c      	adds	r4, r7, r5
 80049b0:	2108      	movs	r1, #8
 80049b2:	2030      	movs	r0, #48	@ 0x30
 80049b4:	f7fe fa9a 	bl	8002eec <writeReg>
 80049b8:	0003      	movs	r3, r0
 80049ba:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 80049bc:	002a      	movs	r2, r5
 80049be:	18bb      	adds	r3, r7, r2
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	b25b      	sxtb	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <vl53l0x_set_vcsel_pulse_period+0x47c>
 80049c8:	18bb      	adds	r3, r7, r2
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	b25b      	sxtb	r3, r3
 80049ce:	e14d      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(0xFF, 0x01);
 80049d0:	2537      	movs	r5, #55	@ 0x37
 80049d2:	197c      	adds	r4, r7, r5
 80049d4:	2101      	movs	r1, #1
 80049d6:	20ff      	movs	r0, #255	@ 0xff
 80049d8:	f7fe fa88 	bl	8002eec <writeReg>
 80049dc:	0003      	movs	r3, r0
 80049de:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 80049e0:	002a      	movs	r2, r5
 80049e2:	18bb      	adds	r3, r7, r2
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	b25b      	sxtb	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <vl53l0x_set_vcsel_pulse_period+0x4a0>
 80049ec:	18bb      	adds	r3, r7, r2
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	b25b      	sxtb	r3, r3
 80049f2:	e13b      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(ALGO_PHASECAL_LIM, 0x20);
 80049f4:	2537      	movs	r5, #55	@ 0x37
 80049f6:	197c      	adds	r4, r7, r5
 80049f8:	2120      	movs	r1, #32
 80049fa:	2030      	movs	r0, #48	@ 0x30
 80049fc:	f7fe fa76 	bl	8002eec <writeReg>
 8004a00:	0003      	movs	r3, r0
 8004a02:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004a04:	002a      	movs	r2, r5
 8004a06:	18bb      	adds	r3, r7, r2
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	b25b      	sxtb	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <vl53l0x_set_vcsel_pulse_period+0x4c4>
 8004a10:	18bb      	adds	r3, r7, r2
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	b25b      	sxtb	r3, r3
 8004a16:	e129      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(0xFF, 0x00);
 8004a18:	2337      	movs	r3, #55	@ 0x37
 8004a1a:	18fc      	adds	r4, r7, r3
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	20ff      	movs	r0, #255	@ 0xff
 8004a20:	f7fe fa64 	bl	8002eec <writeReg>
 8004a24:	0003      	movs	r3, r0
 8004a26:	7023      	strb	r3, [r4, #0]
				break;
 8004a28:	e076      	b.n	8004b18 <vl53l0x_set_vcsel_pulse_period+0x5c4>
			}
			case 14:
			{
				status = writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8004a2a:	2537      	movs	r5, #55	@ 0x37
 8004a2c:	197c      	adds	r4, r7, r5
 8004a2e:	2148      	movs	r1, #72	@ 0x48
 8004a30:	2048      	movs	r0, #72	@ 0x48
 8004a32:	f7fe fa5b 	bl	8002eec <writeReg>
 8004a36:	0003      	movs	r3, r0
 8004a38:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004a3a:	002a      	movs	r2, r5
 8004a3c:	18bb      	adds	r3, r7, r2
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	b25b      	sxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <vl53l0x_set_vcsel_pulse_period+0x4fa>
 8004a46:	18bb      	adds	r3, r7, r2
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	b25b      	sxtb	r3, r3
 8004a4c:	e10e      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8004a4e:	2537      	movs	r5, #55	@ 0x37
 8004a50:	197c      	adds	r4, r7, r5
 8004a52:	2108      	movs	r1, #8
 8004a54:	2047      	movs	r0, #71	@ 0x47
 8004a56:	f7fe fa49 	bl	8002eec <writeReg>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004a5e:	002a      	movs	r2, r5
 8004a60:	18bb      	adds	r3, r7, r2
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	b25b      	sxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <vl53l0x_set_vcsel_pulse_period+0x51e>
 8004a6a:	18bb      	adds	r3, r7, r2
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	b25b      	sxtb	r3, r3
 8004a70:	e0fc      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8004a72:	2537      	movs	r5, #55	@ 0x37
 8004a74:	197c      	adds	r4, r7, r5
 8004a76:	2103      	movs	r1, #3
 8004a78:	2032      	movs	r0, #50	@ 0x32
 8004a7a:	f7fe fa37 	bl	8002eec <writeReg>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004a82:	002a      	movs	r2, r5
 8004a84:	18bb      	adds	r3, r7, r2
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	b25b      	sxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <vl53l0x_set_vcsel_pulse_period+0x542>
 8004a8e:	18bb      	adds	r3, r7, r2
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	b25b      	sxtb	r3, r3
 8004a94:	e0ea      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 8004a96:	2537      	movs	r5, #55	@ 0x37
 8004a98:	197c      	adds	r4, r7, r5
 8004a9a:	2107      	movs	r1, #7
 8004a9c:	2030      	movs	r0, #48	@ 0x30
 8004a9e:	f7fe fa25 	bl	8002eec <writeReg>
 8004aa2:	0003      	movs	r3, r0
 8004aa4:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004aa6:	002a      	movs	r2, r5
 8004aa8:	18bb      	adds	r3, r7, r2
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	b25b      	sxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <vl53l0x_set_vcsel_pulse_period+0x566>
 8004ab2:	18bb      	adds	r3, r7, r2
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	b25b      	sxtb	r3, r3
 8004ab8:	e0d8      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(0xFF, 0x01);
 8004aba:	2537      	movs	r5, #55	@ 0x37
 8004abc:	197c      	adds	r4, r7, r5
 8004abe:	2101      	movs	r1, #1
 8004ac0:	20ff      	movs	r0, #255	@ 0xff
 8004ac2:	f7fe fa13 	bl	8002eec <writeReg>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004aca:	002a      	movs	r2, r5
 8004acc:	18bb      	adds	r3, r7, r2
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	b25b      	sxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <vl53l0x_set_vcsel_pulse_period+0x58a>
 8004ad6:	18bb      	adds	r3, r7, r2
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	b25b      	sxtb	r3, r3
 8004adc:	e0c6      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(ALGO_PHASECAL_LIM, 0x20);
 8004ade:	2537      	movs	r5, #55	@ 0x37
 8004ae0:	197c      	adds	r4, r7, r5
 8004ae2:	2120      	movs	r1, #32
 8004ae4:	2030      	movs	r0, #48	@ 0x30
 8004ae6:	f7fe fa01 	bl	8002eec <writeReg>
 8004aea:	0003      	movs	r3, r0
 8004aec:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8004aee:	002a      	movs	r2, r5
 8004af0:	18bb      	adds	r3, r7, r2
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	b25b      	sxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <vl53l0x_set_vcsel_pulse_period+0x5ae>
 8004afa:	18bb      	adds	r3, r7, r2
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	b25b      	sxtb	r3, r3
 8004b00:	e0b4      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
				status = writeReg(0xFF, 0x00);
 8004b02:	2337      	movs	r3, #55	@ 0x37
 8004b04:	18fc      	adds	r4, r7, r3
 8004b06:	2100      	movs	r1, #0
 8004b08:	20ff      	movs	r0, #255	@ 0xff
 8004b0a:	f7fe f9ef 	bl	8002eec <writeReg>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	7023      	strb	r3, [r4, #0]
				break;
 8004b12:	e001      	b.n	8004b18 <vl53l0x_set_vcsel_pulse_period+0x5c4>
			}
			default:
			{
				// invalid period
				return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0a9      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
			}
		}
		if(status != HAL_OK){return status;}
 8004b18:	2237      	movs	r2, #55	@ 0x37
 8004b1a:	18bb      	adds	r3, r7, r2
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	b25b      	sxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <vl53l0x_set_vcsel_pulse_period+0x5d8>
 8004b24:	18bb      	adds	r3, r7, r2
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	b25b      	sxtb	r3, r3
 8004b2a:	e09f      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>

		// apply new VCSEL period
		status = writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8004b2c:	2537      	movs	r5, #55	@ 0x37
 8004b2e:	197c      	adds	r4, r7, r5
 8004b30:	2333      	movs	r3, #51	@ 0x33
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	0019      	movs	r1, r3
 8004b38:	2070      	movs	r0, #112	@ 0x70
 8004b3a:	f7fe f9d7 	bl	8002eec <writeReg>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8004b42:	197b      	adds	r3, r7, r5
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	b25b      	sxtb	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <vl53l0x_set_vcsel_pulse_period+0x600>
 8004b4c:	197b      	adds	r3, r7, r5
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	b25b      	sxtb	r3, r3
 8004b52:	e08b      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>

		// "For the final range timeout, the pre-range timeout
		//  must be added. To do this both final and pre-range
		//  timeouts must be expressed in macro periods MClks
		//  because they have different vcsel periods."
		uint16_t new_final_range_timeout_mclks = vl53l0x_timeout_us_to_mclks(timeouts.final_range_us, period_pclks);
 8004b54:	2410      	movs	r4, #16
 8004b56:	193b      	adds	r3, r7, r4
 8004b58:	695a      	ldr	r2, [r3, #20]
 8004b5a:	1dbb      	adds	r3, r7, #6
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	0019      	movs	r1, r3
 8004b60:	0010      	movs	r0, r2
 8004b62:	f000 fdf8 	bl	8005756 <vl53l0x_timeout_us_to_mclks>
 8004b66:	0002      	movs	r2, r0
 8004b68:	2034      	movs	r0, #52	@ 0x34
 8004b6a:	183b      	adds	r3, r7, r0
 8004b6c:	801a      	strh	r2, [r3, #0]

		if (enables.pre_range)
 8004b6e:	2328      	movs	r3, #40	@ 0x28
 8004b70:	18fb      	adds	r3, r7, r3
 8004b72:	78db      	ldrb	r3, [r3, #3]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d006      	beq.n	8004b86 <vl53l0x_set_vcsel_pulse_period+0x632>
		{
			new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8004b78:	193b      	adds	r3, r7, r4
 8004b7a:	88d9      	ldrh	r1, [r3, #6]
 8004b7c:	183b      	adds	r3, r7, r0
 8004b7e:	183a      	adds	r2, r7, r0
 8004b80:	8812      	ldrh	r2, [r2, #0]
 8004b82:	188a      	adds	r2, r1, r2
 8004b84:	801a      	strh	r2, [r3, #0]
		}
		status = writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, vl53l0x_encode_timeout(new_final_range_timeout_mclks));
 8004b86:	2334      	movs	r3, #52	@ 0x34
 8004b88:	18fb      	adds	r3, r7, r3
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f000 fd80 	bl	8005692 <vl53l0x_encode_timeout>
 8004b92:	0003      	movs	r3, r0
 8004b94:	2537      	movs	r5, #55	@ 0x37
 8004b96:	197c      	adds	r4, r7, r5
 8004b98:	0019      	movs	r1, r3
 8004b9a:	2071      	movs	r0, #113	@ 0x71
 8004b9c:	f7fe f9d4 	bl	8002f48 <writeReg16Bit>
 8004ba0:	0003      	movs	r3, r0
 8004ba2:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8004ba4:	197b      	adds	r3, r7, r5
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	b25b      	sxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d005      	beq.n	8004bba <vl53l0x_set_vcsel_pulse_period+0x666>
 8004bae:	197b      	adds	r3, r7, r5
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	b25b      	sxtb	r3, r3
 8004bb4:	e05a      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
		// set_sequence_step_timeout end
	}
	else
	{
		// invalid type
		return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e058      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
	}

	// "Finally, the timing budget must be re-applied"
	status = vl53l0x_set_measurement_timing_budget(g_measTimBudUs);
 8004bba:	4b2e      	ldr	r3, [pc, #184]	@ (8004c74 <vl53l0x_set_vcsel_pulse_period+0x720>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2537      	movs	r5, #55	@ 0x37
 8004bc0:	197c      	adds	r4, r7, r5
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	f7ff fbce 	bl	8004364 <vl53l0x_set_measurement_timing_budget>
 8004bc8:	0003      	movs	r3, r0
 8004bca:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004bcc:	197b      	adds	r3, r7, r5
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	b25b      	sxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <vl53l0x_set_vcsel_pulse_period+0x68a>
 8004bd6:	197b      	adds	r3, r7, r5
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	b25b      	sxtb	r3, r3
 8004bdc:	e046      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>


	// "Perform the phase calibration. This is needed after changing on vcsel period."
	// VL53L0X_perform_phase_calibration() begin

	uint8_t sequence_config = 0;
 8004bde:	210f      	movs	r1, #15
 8004be0:	187b      	adds	r3, r7, r1
 8004be2:	2200      	movs	r2, #0
 8004be4:	701a      	strb	r2, [r3, #0]
	status = readReg(SYSTEM_SEQUENCE_CONFIG, &sequence_config);
 8004be6:	2537      	movs	r5, #55	@ 0x37
 8004be8:	197c      	adds	r4, r7, r5
 8004bea:	187b      	adds	r3, r7, r1
 8004bec:	0019      	movs	r1, r3
 8004bee:	2001      	movs	r0, #1
 8004bf0:	f7fe f9d8 	bl	8002fa4 <readReg>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004bf8:	197b      	adds	r3, r7, r5
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	b25b      	sxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <vl53l0x_set_vcsel_pulse_period+0x6b6>
 8004c02:	197b      	adds	r3, r7, r5
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	b25b      	sxtb	r3, r3
 8004c08:	e030      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
	status = writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8004c0a:	2537      	movs	r5, #55	@ 0x37
 8004c0c:	197c      	adds	r4, r7, r5
 8004c0e:	2102      	movs	r1, #2
 8004c10:	2001      	movs	r0, #1
 8004c12:	f7fe f96b 	bl	8002eec <writeReg>
 8004c16:	0003      	movs	r3, r0
 8004c18:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004c1a:	002a      	movs	r2, r5
 8004c1c:	18bb      	adds	r3, r7, r2
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	b25b      	sxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <vl53l0x_set_vcsel_pulse_period+0x6da>
 8004c26:	18bb      	adds	r3, r7, r2
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	b25b      	sxtb	r3, r3
 8004c2c:	e01e      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
	status = vl53l0x_single_reference_calibration(0x0);
 8004c2e:	2537      	movs	r5, #55	@ 0x37
 8004c30:	197c      	adds	r4, r7, r5
 8004c32:	2000      	movs	r0, #0
 8004c34:	f000 fdc0 	bl	80057b8 <vl53l0x_single_reference_calibration>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004c3c:	002a      	movs	r2, r5
 8004c3e:	18bb      	adds	r3, r7, r2
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	b25b      	sxtb	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <vl53l0x_set_vcsel_pulse_period+0x6fc>
 8004c48:	18bb      	adds	r3, r7, r2
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	b25b      	sxtb	r3, r3
 8004c4e:	e00d      	b.n	8004c6c <vl53l0x_set_vcsel_pulse_period+0x718>
	status = writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8004c50:	230f      	movs	r3, #15
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2537      	movs	r5, #55	@ 0x37
 8004c58:	197c      	adds	r4, r7, r5
 8004c5a:	0019      	movs	r1, r3
 8004c5c:	2001      	movs	r0, #1
 8004c5e:	f7fe f945 	bl	8002eec <writeReg>
 8004c62:	0003      	movs	r3, r0
 8004c64:	7023      	strb	r3, [r4, #0]
	// VL53L0X_perform_phase_calibration() end

	return status;
 8004c66:	197b      	adds	r3, r7, r5
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	b25b      	sxtb	r3, r3
}
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b00e      	add	sp, #56	@ 0x38
 8004c72:	bdb0      	pop	{r4, r5, r7, pc}
 8004c74:	20000598 	.word	0x20000598

08004c78 <vl53l0x_get_vcsel_pulse_period>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
int8_t vl53l0x_get_vcsel_pulse_period(vcselPeriodType type, uint8_t* period_pclks)
{
 8004c78:	b5b0      	push	{r4, r5, r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	0002      	movs	r2, r0
 8004c80:	6039      	str	r1, [r7, #0]
 8004c82:	1dfb      	adds	r3, r7, #7
 8004c84:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8004c86:	210f      	movs	r1, #15
 8004c88:	187b      	adds	r3, r7, r1
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	701a      	strb	r2, [r3, #0]
	uint8_t reg_value = 0;
 8004c8e:	200e      	movs	r0, #14
 8004c90:	183b      	adds	r3, r7, r0
 8004c92:	2200      	movs	r2, #0
 8004c94:	701a      	strb	r2, [r3, #0]
	if (type == VcselPeriodPreRange)
 8004c96:	1dfb      	adds	r3, r7, #7
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d11b      	bne.n	8004cd6 <vl53l0x_get_vcsel_pulse_period+0x5e>
	{
		status = readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, &reg_value);
 8004c9e:	000d      	movs	r5, r1
 8004ca0:	187c      	adds	r4, r7, r1
 8004ca2:	183b      	adds	r3, r7, r0
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	2050      	movs	r0, #80	@ 0x50
 8004ca8:	f7fe f97c 	bl	8002fa4 <readReg>
 8004cac:	0003      	movs	r3, r0
 8004cae:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8004cb0:	197b      	adds	r3, r7, r5
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	b25b      	sxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <vl53l0x_get_vcsel_pulse_period+0x4a>
 8004cba:	197b      	adds	r3, r7, r5
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	b25b      	sxtb	r3, r3
 8004cc0:	e030      	b.n	8004d24 <vl53l0x_get_vcsel_pulse_period+0xac>
		(*period_pclks) = decodeVcselPeriod(reg_value);
 8004cc2:	230e      	movs	r3, #14
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	18db      	adds	r3, r3, r3
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	701a      	strb	r2, [r3, #0]
 8004cd4:	e022      	b.n	8004d1c <vl53l0x_get_vcsel_pulse_period+0xa4>
	}
	else if (type == VcselPeriodFinalRange)
 8004cd6:	1dfb      	adds	r3, r7, #7
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d11c      	bne.n	8004d18 <vl53l0x_get_vcsel_pulse_period+0xa0>
	{
		status = readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, &reg_value);
 8004cde:	250f      	movs	r5, #15
 8004ce0:	197c      	adds	r4, r7, r5
 8004ce2:	230e      	movs	r3, #14
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	0019      	movs	r1, r3
 8004ce8:	2070      	movs	r0, #112	@ 0x70
 8004cea:	f7fe f95b 	bl	8002fa4 <readReg>
 8004cee:	0003      	movs	r3, r0
 8004cf0:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8004cf2:	197b      	adds	r3, r7, r5
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	b25b      	sxtb	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <vl53l0x_get_vcsel_pulse_period+0x8c>
 8004cfc:	197b      	adds	r3, r7, r5
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	b25b      	sxtb	r3, r3
 8004d02:	e00f      	b.n	8004d24 <vl53l0x_get_vcsel_pulse_period+0xac>
		(*period_pclks) = decodeVcselPeriod(reg_value);
 8004d04:	230e      	movs	r3, #14
 8004d06:	18fb      	adds	r3, r7, r3
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	18db      	adds	r3, r3, r3
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	e001      	b.n	8004d1c <vl53l0x_get_vcsel_pulse_period+0xa4>
	}
	else
	{
		return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e003      	b.n	8004d24 <vl53l0x_get_vcsel_pulse_period+0xac>
	}
	return status;
 8004d1c:	230f      	movs	r3, #15
 8004d1e:	18fb      	adds	r3, r7, r3
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	b25b      	sxtb	r3, r3
}
 8004d24:	0018      	movs	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b004      	add	sp, #16
 8004d2a:	bdb0      	pop	{r4, r5, r7, pc}

08004d2c <vl53l0x_read_range_continuous>:
// Returns a range reading in millimeters when continuous mode is active
// (vl53l0x_read_range_single() also calls this function after starting a
// single-shot range measurement)
// extraStats provides additional info for this measurment. Set to 0 if not needed.
int8_t vl53l0x_read_range_continuous( statInfo_t_VL53L0X *extraStats, uint16_t* range_mm)
{
 8004d2c:	b5b0      	push	{r4, r5, r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
	int8_t status = HAL_OK;
 8004d36:	230f      	movs	r3, #15
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val = 0;
 8004d3e:	230e      	movs	r3, #14
 8004d40:	18fb      	adds	r3, r7, r3
 8004d42:	2200      	movs	r2, #0
 8004d44:	701a      	strb	r2, [r3, #0]
	startTimeout();
 8004d46:	f000 fecd 	bl	8005ae4 <HAL_GetTick>
 8004d4a:	0003      	movs	r3, r0
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	4b51      	ldr	r3, [pc, #324]	@ (8004e94 <vl53l0x_read_range_continuous+0x168>)
 8004d50:	801a      	strh	r2, [r3, #0]
	while((reg_val & 0x07) == 0)
 8004d52:	e027      	b.n	8004da4 <vl53l0x_read_range_continuous+0x78>
	{
		status = readReg(RESULT_INTERRUPT_STATUS, &reg_val);
 8004d54:	250f      	movs	r5, #15
 8004d56:	197c      	adds	r4, r7, r5
 8004d58:	230e      	movs	r3, #14
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	0019      	movs	r1, r3
 8004d5e:	2013      	movs	r0, #19
 8004d60:	f7fe f920 	bl	8002fa4 <readReg>
 8004d64:	0003      	movs	r3, r0
 8004d66:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8004d68:	197b      	adds	r3, r7, r5
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	b25b      	sxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <vl53l0x_read_range_continuous+0x4e>
 8004d72:	197b      	adds	r3, r7, r5
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	b25b      	sxtb	r3, r3
 8004d78:	e088      	b.n	8004e8c <vl53l0x_read_range_continuous+0x160>
		if(checkTimeoutExpired())
 8004d7a:	4b47      	ldr	r3, [pc, #284]	@ (8004e98 <vl53l0x_read_range_continuous+0x16c>)
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d010      	beq.n	8004da4 <vl53l0x_read_range_continuous+0x78>
 8004d82:	f000 feaf 	bl	8005ae4 <HAL_GetTick>
 8004d86:	0003      	movs	r3, r0
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	001a      	movs	r2, r3
 8004d8c:	4b41      	ldr	r3, [pc, #260]	@ (8004e94 <vl53l0x_read_range_continuous+0x168>)
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	4a41      	ldr	r2, [pc, #260]	@ (8004e98 <vl53l0x_read_range_continuous+0x16c>)
 8004d94:	8812      	ldrh	r2, [r2, #0]
 8004d96:	4293      	cmp	r3, r2
 8004d98:	dd04      	ble.n	8004da4 <vl53l0x_read_range_continuous+0x78>
		{
			g_isTimeout = HAL_OK;
 8004d9a:	4b40      	ldr	r3, [pc, #256]	@ (8004e9c <vl53l0x_read_range_continuous+0x170>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
			return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e073      	b.n	8004e8c <vl53l0x_read_range_continuous+0x160>
	while((reg_val & 0x07) == 0)
 8004da4:	230e      	movs	r3, #14
 8004da6:	18fb      	adds	r3, r7, r3
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	001a      	movs	r2, r3
 8004dac:	2307      	movs	r3, #7
 8004dae:	4013      	ands	r3, r2
 8004db0:	d0d0      	beq.n	8004d54 <vl53l0x_read_range_continuous+0x28>
		}
	}
	if(extraStats == 0)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d111      	bne.n	8004ddc <vl53l0x_read_range_continuous+0xb0>
	{
		// assumptions: Linearity Corrective Gain is 1000 (default);
		// fractional ranging is not enabled
		status = readReg16Bit(RESULT_RANGE_STATUS + 10, range_mm);
 8004db8:	250f      	movs	r5, #15
 8004dba:	197c      	adds	r4, r7, r5
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	0019      	movs	r1, r3
 8004dc0:	201e      	movs	r0, #30
 8004dc2:	f7fe f923 	bl	800300c <readReg16Bit>
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8004dca:	197b      	adds	r3, r7, r5
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	b25b      	sxtb	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d050      	beq.n	8004e76 <vl53l0x_read_range_continuous+0x14a>
 8004dd4:	197b      	adds	r3, r7, r5
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	b25b      	sxtb	r3, r3
 8004dda:	e057      	b.n	8004e8c <vl53l0x_read_range_continuous+0x160>
		//   4: 0 ?
		//   5: ???
		// 6,7: signal count rate [mcps], uint16_t, fixpoint9.7
		// 8,9: AmbientRateRtnMegaCps  [mcps], uint16_t, fixpoimt9.7
		// 10,11: uncorrected distance [mm], uint16_t
		status = readMulti(0x14, i2c_rx_buffer, 12);
 8004ddc:	250f      	movs	r5, #15
 8004dde:	197c      	adds	r4, r7, r5
 8004de0:	4b2f      	ldr	r3, [pc, #188]	@ (8004ea0 <vl53l0x_read_range_continuous+0x174>)
 8004de2:	220c      	movs	r2, #12
 8004de4:	0019      	movs	r1, r3
 8004de6:	2014      	movs	r0, #20
 8004de8:	f7fe f97c 	bl	80030e4 <readMulti>
 8004dec:	0003      	movs	r3, r0
 8004dee:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8004df0:	197b      	adds	r3, r7, r5
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	b25b      	sxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <vl53l0x_read_range_continuous+0xd6>
 8004dfa:	197b      	adds	r3, r7, r5
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b25b      	sxtb	r3, r3
 8004e00:	e044      	b.n	8004e8c <vl53l0x_read_range_continuous+0x160>

		extraStats->rangeStatus =  i2c_rx_buffer[0]>>3;
 8004e02:	4b27      	ldr	r3, [pc, #156]	@ (8004ea0 <vl53l0x_read_range_continuous+0x174>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	08db      	lsrs	r3, r3, #3
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	721a      	strb	r2, [r3, #8]
		extraStats->spadCnt     = (i2c_rx_buffer[2]<<8) | i2c_rx_buffer[3];
 8004e0e:	4b24      	ldr	r3, [pc, #144]	@ (8004ea0 <vl53l0x_read_range_continuous+0x174>)
 8004e10:	789b      	ldrb	r3, [r3, #2]
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	b21a      	sxth	r2, r3
 8004e16:	4b22      	ldr	r3, [pc, #136]	@ (8004ea0 <vl53l0x_read_range_continuous+0x174>)
 8004e18:	78db      	ldrb	r3, [r3, #3]
 8004e1a:	b21b      	sxth	r3, r3
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	b21b      	sxth	r3, r3
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	80da      	strh	r2, [r3, #6]
		extraStats->signalCnt   = (i2c_rx_buffer[6]<<8) | i2c_rx_buffer[7];
 8004e26:	4b1e      	ldr	r3, [pc, #120]	@ (8004ea0 <vl53l0x_read_range_continuous+0x174>)
 8004e28:	799b      	ldrb	r3, [r3, #6]
 8004e2a:	021b      	lsls	r3, r3, #8
 8004e2c:	b21a      	sxth	r2, r3
 8004e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ea0 <vl53l0x_read_range_continuous+0x174>)
 8004e30:	79db      	ldrb	r3, [r3, #7]
 8004e32:	b21b      	sxth	r3, r3
 8004e34:	4313      	orrs	r3, r2
 8004e36:	b21b      	sxth	r3, r3
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	805a      	strh	r2, [r3, #2]
		extraStats->ambientCnt  = (i2c_rx_buffer[8]<<8) | i2c_rx_buffer[9];
 8004e3e:	4b18      	ldr	r3, [pc, #96]	@ (8004ea0 <vl53l0x_read_range_continuous+0x174>)
 8004e40:	7a1b      	ldrb	r3, [r3, #8]
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	b21a      	sxth	r2, r3
 8004e46:	4b16      	ldr	r3, [pc, #88]	@ (8004ea0 <vl53l0x_read_range_continuous+0x174>)
 8004e48:	7a5b      	ldrb	r3, [r3, #9]
 8004e4a:	b21b      	sxth	r3, r3
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	b21b      	sxth	r3, r3
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	809a      	strh	r2, [r3, #4]
		(*range_mm)             = (i2c_rx_buffer[10]<<8) | i2c_rx_buffer[11];
 8004e56:	4b12      	ldr	r3, [pc, #72]	@ (8004ea0 <vl53l0x_read_range_continuous+0x174>)
 8004e58:	7a9b      	ldrb	r3, [r3, #10]
 8004e5a:	021b      	lsls	r3, r3, #8
 8004e5c:	b21a      	sxth	r2, r3
 8004e5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ea0 <vl53l0x_read_range_continuous+0x174>)
 8004e60:	7adb      	ldrb	r3, [r3, #11]
 8004e62:	b21b      	sxth	r3, r3
 8004e64:	4313      	orrs	r3, r2
 8004e66:	b21b      	sxth	r3, r3
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	801a      	strh	r2, [r3, #0]
		extraStats->rawDistance = (*range_mm);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	881a      	ldrh	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	801a      	strh	r2, [r3, #0]
	}
	status = writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8004e76:	250f      	movs	r5, #15
 8004e78:	197c      	adds	r4, r7, r5
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	200b      	movs	r0, #11
 8004e7e:	f7fe f835 	bl	8002eec <writeReg>
 8004e82:	0003      	movs	r3, r0
 8004e84:	7023      	strb	r3, [r4, #0]
	return status;
 8004e86:	197b      	adds	r3, r7, r5
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	b25b      	sxtb	r3, r3
}
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	b004      	add	sp, #16
 8004e92:	bdb0      	pop	{r4, r5, r7, pc}
 8004e94:	20000592 	.word	0x20000592
 8004e98:	2000058e 	.word	0x2000058e
 8004e9c:	20000590 	.word	0x20000590
 8004ea0:	20000580 	.word	0x20000580

08004ea4 <vl53l0x_read_range_single>:
// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
int8_t vl53l0x_read_range_single(statInfo_t_VL53L0X *extraStats, uint16_t* range_mm)
{
 8004ea4:	b5b0      	push	{r4, r5, r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
	int8_t status = HAL_OK;
 8004eae:	210f      	movs	r1, #15
 8004eb0:	187b      	adds	r3, r7, r1
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val = 1;
 8004eb6:	230e      	movs	r3, #14
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	2201      	movs	r2, #1
 8004ebc:	701a      	strb	r2, [r3, #0]
	status = writeReg(0x80, 0x01);
 8004ebe:	000d      	movs	r5, r1
 8004ec0:	187c      	adds	r4, r7, r1
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	2080      	movs	r0, #128	@ 0x80
 8004ec6:	f7fe f811 	bl	8002eec <writeReg>
 8004eca:	0003      	movs	r3, r0
 8004ecc:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004ece:	0029      	movs	r1, r5
 8004ed0:	187b      	adds	r3, r7, r1
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	b25b      	sxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <vl53l0x_read_range_single+0x3e>
 8004eda:	187b      	adds	r3, r7, r1
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	b25b      	sxtb	r3, r3
 8004ee0:	e0bb      	b.n	800505a <vl53l0x_read_range_single+0x1b6>
	status = writeReg(0xFF, 0x01);
 8004ee2:	250f      	movs	r5, #15
 8004ee4:	197c      	adds	r4, r7, r5
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	20ff      	movs	r0, #255	@ 0xff
 8004eea:	f7fd ffff 	bl	8002eec <writeReg>
 8004eee:	0003      	movs	r3, r0
 8004ef0:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004ef2:	002a      	movs	r2, r5
 8004ef4:	18bb      	adds	r3, r7, r2
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	b25b      	sxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <vl53l0x_read_range_single+0x62>
 8004efe:	18bb      	adds	r3, r7, r2
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	b25b      	sxtb	r3, r3
 8004f04:	e0a9      	b.n	800505a <vl53l0x_read_range_single+0x1b6>
	status = writeReg(0x00, 0x00);
 8004f06:	250f      	movs	r5, #15
 8004f08:	197c      	adds	r4, r7, r5
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	f7fd ffed 	bl	8002eec <writeReg>
 8004f12:	0003      	movs	r3, r0
 8004f14:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004f16:	002a      	movs	r2, r5
 8004f18:	18bb      	adds	r3, r7, r2
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	b25b      	sxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <vl53l0x_read_range_single+0x86>
 8004f22:	18bb      	adds	r3, r7, r2
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	b25b      	sxtb	r3, r3
 8004f28:	e097      	b.n	800505a <vl53l0x_read_range_single+0x1b6>
	status = writeReg(0x91, g_stopVariable);
 8004f2a:	4b4e      	ldr	r3, [pc, #312]	@ (8005064 <vl53l0x_read_range_single+0x1c0>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	250f      	movs	r5, #15
 8004f30:	197c      	adds	r4, r7, r5
 8004f32:	0019      	movs	r1, r3
 8004f34:	2091      	movs	r0, #145	@ 0x91
 8004f36:	f7fd ffd9 	bl	8002eec <writeReg>
 8004f3a:	0003      	movs	r3, r0
 8004f3c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004f3e:	197b      	adds	r3, r7, r5
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b25b      	sxtb	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <vl53l0x_read_range_single+0xac>
 8004f48:	197b      	adds	r3, r7, r5
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	b25b      	sxtb	r3, r3
 8004f4e:	e084      	b.n	800505a <vl53l0x_read_range_single+0x1b6>
	status = writeReg(0x00, 0x01);
 8004f50:	250f      	movs	r5, #15
 8004f52:	197c      	adds	r4, r7, r5
 8004f54:	2101      	movs	r1, #1
 8004f56:	2000      	movs	r0, #0
 8004f58:	f7fd ffc8 	bl	8002eec <writeReg>
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004f60:	002a      	movs	r2, r5
 8004f62:	18bb      	adds	r3, r7, r2
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	b25b      	sxtb	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <vl53l0x_read_range_single+0xd0>
 8004f6c:	18bb      	adds	r3, r7, r2
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	b25b      	sxtb	r3, r3
 8004f72:	e072      	b.n	800505a <vl53l0x_read_range_single+0x1b6>
	status = writeReg(0xFF, 0x00);
 8004f74:	250f      	movs	r5, #15
 8004f76:	197c      	adds	r4, r7, r5
 8004f78:	2100      	movs	r1, #0
 8004f7a:	20ff      	movs	r0, #255	@ 0xff
 8004f7c:	f7fd ffb6 	bl	8002eec <writeReg>
 8004f80:	0003      	movs	r3, r0
 8004f82:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004f84:	002a      	movs	r2, r5
 8004f86:	18bb      	adds	r3, r7, r2
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	b25b      	sxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <vl53l0x_read_range_single+0xf4>
 8004f90:	18bb      	adds	r3, r7, r2
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	b25b      	sxtb	r3, r3
 8004f96:	e060      	b.n	800505a <vl53l0x_read_range_single+0x1b6>
	status = writeReg(0x80, 0x00);
 8004f98:	250f      	movs	r5, #15
 8004f9a:	197c      	adds	r4, r7, r5
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	2080      	movs	r0, #128	@ 0x80
 8004fa0:	f7fd ffa4 	bl	8002eec <writeReg>
 8004fa4:	0003      	movs	r3, r0
 8004fa6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004fa8:	002a      	movs	r2, r5
 8004faa:	18bb      	adds	r3, r7, r2
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	b25b      	sxtb	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <vl53l0x_read_range_single+0x118>
 8004fb4:	18bb      	adds	r3, r7, r2
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	b25b      	sxtb	r3, r3
 8004fba:	e04e      	b.n	800505a <vl53l0x_read_range_single+0x1b6>
	status = writeReg(SYSRANGE_START, 0x01);
 8004fbc:	250f      	movs	r5, #15
 8004fbe:	197c      	adds	r4, r7, r5
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	f7fd ff92 	bl	8002eec <writeReg>
 8004fc8:	0003      	movs	r3, r0
 8004fca:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8004fcc:	002a      	movs	r2, r5
 8004fce:	18bb      	adds	r3, r7, r2
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	b25b      	sxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <vl53l0x_read_range_single+0x13c>
 8004fd8:	18bb      	adds	r3, r7, r2
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	b25b      	sxtb	r3, r3
 8004fde:	e03c      	b.n	800505a <vl53l0x_read_range_single+0x1b6>

	// "Wait until start bit has been cleared"
	startTimeout();
 8004fe0:	f000 fd80 	bl	8005ae4 <HAL_GetTick>
 8004fe4:	0003      	movs	r3, r0
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8005068 <vl53l0x_read_range_single+0x1c4>)
 8004fea:	801a      	strh	r2, [r3, #0]
	while(reg_val & 0x01)
 8004fec:	e027      	b.n	800503e <vl53l0x_read_range_single+0x19a>
	{
		status = readReg(SYSRANGE_START, &reg_val);
 8004fee:	250f      	movs	r5, #15
 8004ff0:	197c      	adds	r4, r7, r5
 8004ff2:	230e      	movs	r3, #14
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	0019      	movs	r1, r3
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	f7fd ffd3 	bl	8002fa4 <readReg>
 8004ffe:	0003      	movs	r3, r0
 8005000:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8005002:	197b      	adds	r3, r7, r5
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	b25b      	sxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <vl53l0x_read_range_single+0x170>
 800500c:	197b      	adds	r3, r7, r5
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	b25b      	sxtb	r3, r3
 8005012:	e022      	b.n	800505a <vl53l0x_read_range_single+0x1b6>
		if (checkTimeoutExpired())
 8005014:	4b15      	ldr	r3, [pc, #84]	@ (800506c <vl53l0x_read_range_single+0x1c8>)
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d010      	beq.n	800503e <vl53l0x_read_range_single+0x19a>
 800501c:	f000 fd62 	bl	8005ae4 <HAL_GetTick>
 8005020:	0003      	movs	r3, r0
 8005022:	b29b      	uxth	r3, r3
 8005024:	001a      	movs	r2, r3
 8005026:	4b10      	ldr	r3, [pc, #64]	@ (8005068 <vl53l0x_read_range_single+0x1c4>)
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	4a0f      	ldr	r2, [pc, #60]	@ (800506c <vl53l0x_read_range_single+0x1c8>)
 800502e:	8812      	ldrh	r2, [r2, #0]
 8005030:	4293      	cmp	r3, r2
 8005032:	dd04      	ble.n	800503e <vl53l0x_read_range_single+0x19a>
		{
			g_isTimeout = HAL_OK;
 8005034:	4b0e      	ldr	r3, [pc, #56]	@ (8005070 <vl53l0x_read_range_single+0x1cc>)
 8005036:	2200      	movs	r2, #0
 8005038:	701a      	strb	r2, [r3, #0]
			return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e00d      	b.n	800505a <vl53l0x_read_range_single+0x1b6>
	while(reg_val & 0x01)
 800503e:	230e      	movs	r3, #14
 8005040:	18fb      	adds	r3, r7, r3
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	001a      	movs	r2, r3
 8005046:	2301      	movs	r3, #1
 8005048:	4013      	ands	r3, r2
 800504a:	d1d0      	bne.n	8004fee <vl53l0x_read_range_single+0x14a>
		}
	}
	return vl53l0x_read_range_continuous(extraStats, range_mm);
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	0011      	movs	r1, r2
 8005052:	0018      	movs	r0, r3
 8005054:	f7ff fe6a 	bl	8004d2c <vl53l0x_read_range_continuous>
 8005058:	0003      	movs	r3, r0
}
 800505a:	0018      	movs	r0, r3
 800505c:	46bd      	mov	sp, r7
 800505e:	b004      	add	sp, #16
 8005060:	bdb0      	pop	{r4, r5, r7, pc}
 8005062:	46c0      	nop			@ (mov r8, r8)
 8005064:	20000594 	.word	0x20000594
 8005068:	20000592 	.word	0x20000592
 800506c:	2000058e 	.word	0x2000058e
 8005070:	20000590 	.word	0x20000590

08005074 <vl53l0x_get_spad_info>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
int8_t vl53l0x_get_spad_info(uint8_t * count, uint8_t * type_is_aperture)
{
 8005074:	b5b0      	push	{r4, r5, r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
	int8_t status = HAL_OK;
 800507e:	210f      	movs	r1, #15
 8005080:	187b      	adds	r3, r7, r1
 8005082:	2200      	movs	r2, #0
 8005084:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val = 0;
 8005086:	230e      	movs	r3, #14
 8005088:	18fb      	adds	r3, r7, r3
 800508a:	2200      	movs	r2, #0
 800508c:	701a      	strb	r2, [r3, #0]

	status = writeReg(0x80, 0x01);
 800508e:	000d      	movs	r5, r1
 8005090:	187c      	adds	r4, r7, r1
 8005092:	2101      	movs	r1, #1
 8005094:	2080      	movs	r0, #128	@ 0x80
 8005096:	f7fd ff29 	bl	8002eec <writeReg>
 800509a:	0003      	movs	r3, r0
 800509c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800509e:	0029      	movs	r1, r5
 80050a0:	187b      	adds	r3, r7, r1
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	b25b      	sxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <vl53l0x_get_spad_info+0x3e>
 80050aa:	187b      	adds	r3, r7, r1
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	b25b      	sxtb	r3, r3
 80050b0:	e1b3      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0xFF, 0x01);
 80050b2:	250f      	movs	r5, #15
 80050b4:	197c      	adds	r4, r7, r5
 80050b6:	2101      	movs	r1, #1
 80050b8:	20ff      	movs	r0, #255	@ 0xff
 80050ba:	f7fd ff17 	bl	8002eec <writeReg>
 80050be:	0003      	movs	r3, r0
 80050c0:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80050c2:	002a      	movs	r2, r5
 80050c4:	18bb      	adds	r3, r7, r2
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	b25b      	sxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <vl53l0x_get_spad_info+0x62>
 80050ce:	18bb      	adds	r3, r7, r2
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	b25b      	sxtb	r3, r3
 80050d4:	e1a1      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0x00, 0x00);
 80050d6:	250f      	movs	r5, #15
 80050d8:	197c      	adds	r4, r7, r5
 80050da:	2100      	movs	r1, #0
 80050dc:	2000      	movs	r0, #0
 80050de:	f7fd ff05 	bl	8002eec <writeReg>
 80050e2:	0003      	movs	r3, r0
 80050e4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80050e6:	002a      	movs	r2, r5
 80050e8:	18bb      	adds	r3, r7, r2
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	b25b      	sxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <vl53l0x_get_spad_info+0x86>
 80050f2:	18bb      	adds	r3, r7, r2
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	b25b      	sxtb	r3, r3
 80050f8:	e18f      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>

	status = writeReg(0xFF, 0x06);
 80050fa:	250f      	movs	r5, #15
 80050fc:	197c      	adds	r4, r7, r5
 80050fe:	2106      	movs	r1, #6
 8005100:	20ff      	movs	r0, #255	@ 0xff
 8005102:	f7fd fef3 	bl	8002eec <writeReg>
 8005106:	0003      	movs	r3, r0
 8005108:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800510a:	002a      	movs	r2, r5
 800510c:	18bb      	adds	r3, r7, r2
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	b25b      	sxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <vl53l0x_get_spad_info+0xaa>
 8005116:	18bb      	adds	r3, r7, r2
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	b25b      	sxtb	r3, r3
 800511c:	e17d      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>
	status = readReg(0x83, &reg_val);
 800511e:	250f      	movs	r5, #15
 8005120:	197c      	adds	r4, r7, r5
 8005122:	230e      	movs	r3, #14
 8005124:	18fb      	adds	r3, r7, r3
 8005126:	0019      	movs	r1, r3
 8005128:	2083      	movs	r0, #131	@ 0x83
 800512a:	f7fd ff3b 	bl	8002fa4 <readReg>
 800512e:	0003      	movs	r3, r0
 8005130:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005132:	197b      	adds	r3, r7, r5
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	b25b      	sxtb	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <vl53l0x_get_spad_info+0xd0>
 800513c:	197b      	adds	r3, r7, r5
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	b25b      	sxtb	r3, r3
 8005142:	e16a      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0x83, reg_val | 0x04);
 8005144:	230e      	movs	r3, #14
 8005146:	18fb      	adds	r3, r7, r3
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2204      	movs	r2, #4
 800514c:	4313      	orrs	r3, r2
 800514e:	b2db      	uxtb	r3, r3
 8005150:	250f      	movs	r5, #15
 8005152:	197c      	adds	r4, r7, r5
 8005154:	0019      	movs	r1, r3
 8005156:	2083      	movs	r0, #131	@ 0x83
 8005158:	f7fd fec8 	bl	8002eec <writeReg>
 800515c:	0003      	movs	r3, r0
 800515e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005160:	197b      	adds	r3, r7, r5
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	b25b      	sxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <vl53l0x_get_spad_info+0xfe>
 800516a:	197b      	adds	r3, r7, r5
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	b25b      	sxtb	r3, r3
 8005170:	e153      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>
	reg_val = 0;
 8005172:	230e      	movs	r3, #14
 8005174:	18fb      	adds	r3, r7, r3
 8005176:	2200      	movs	r2, #0
 8005178:	701a      	strb	r2, [r3, #0]
	status = writeReg(0xFF, 0x07);
 800517a:	250f      	movs	r5, #15
 800517c:	197c      	adds	r4, r7, r5
 800517e:	2107      	movs	r1, #7
 8005180:	20ff      	movs	r0, #255	@ 0xff
 8005182:	f7fd feb3 	bl	8002eec <writeReg>
 8005186:	0003      	movs	r3, r0
 8005188:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800518a:	002a      	movs	r2, r5
 800518c:	18bb      	adds	r3, r7, r2
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	b25b      	sxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <vl53l0x_get_spad_info+0x12a>
 8005196:	18bb      	adds	r3, r7, r2
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	b25b      	sxtb	r3, r3
 800519c:	e13d      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0x81, 0x01);
 800519e:	250f      	movs	r5, #15
 80051a0:	197c      	adds	r4, r7, r5
 80051a2:	2101      	movs	r1, #1
 80051a4:	2081      	movs	r0, #129	@ 0x81
 80051a6:	f7fd fea1 	bl	8002eec <writeReg>
 80051aa:	0003      	movs	r3, r0
 80051ac:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80051ae:	002a      	movs	r2, r5
 80051b0:	18bb      	adds	r3, r7, r2
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	b25b      	sxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <vl53l0x_get_spad_info+0x14e>
 80051ba:	18bb      	adds	r3, r7, r2
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	b25b      	sxtb	r3, r3
 80051c0:	e12b      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>

	status = writeReg(0x80, 0x01);
 80051c2:	250f      	movs	r5, #15
 80051c4:	197c      	adds	r4, r7, r5
 80051c6:	2101      	movs	r1, #1
 80051c8:	2080      	movs	r0, #128	@ 0x80
 80051ca:	f7fd fe8f 	bl	8002eec <writeReg>
 80051ce:	0003      	movs	r3, r0
 80051d0:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80051d2:	002a      	movs	r2, r5
 80051d4:	18bb      	adds	r3, r7, r2
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	b25b      	sxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <vl53l0x_get_spad_info+0x172>
 80051de:	18bb      	adds	r3, r7, r2
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	b25b      	sxtb	r3, r3
 80051e4:	e119      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>

	status = writeReg(0x94, 0x6b);
 80051e6:	250f      	movs	r5, #15
 80051e8:	197c      	adds	r4, r7, r5
 80051ea:	216b      	movs	r1, #107	@ 0x6b
 80051ec:	2094      	movs	r0, #148	@ 0x94
 80051ee:	f7fd fe7d 	bl	8002eec <writeReg>
 80051f2:	0003      	movs	r3, r0
 80051f4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80051f6:	002a      	movs	r2, r5
 80051f8:	18bb      	adds	r3, r7, r2
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	b25b      	sxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <vl53l0x_get_spad_info+0x196>
 8005202:	18bb      	adds	r3, r7, r2
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	b25b      	sxtb	r3, r3
 8005208:	e107      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0x83, 0x00);
 800520a:	250f      	movs	r5, #15
 800520c:	197c      	adds	r4, r7, r5
 800520e:	2100      	movs	r1, #0
 8005210:	2083      	movs	r0, #131	@ 0x83
 8005212:	f7fd fe6b 	bl	8002eec <writeReg>
 8005216:	0003      	movs	r3, r0
 8005218:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800521a:	002a      	movs	r2, r5
 800521c:	18bb      	adds	r3, r7, r2
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	b25b      	sxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <vl53l0x_get_spad_info+0x1ba>
 8005226:	18bb      	adds	r3, r7, r2
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	b25b      	sxtb	r3, r3
 800522c:	e0f5      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>

	startTimeout();
 800522e:	f000 fc59 	bl	8005ae4 <HAL_GetTick>
 8005232:	0003      	movs	r3, r0
 8005234:	b29a      	uxth	r2, r3
 8005236:	4b7b      	ldr	r3, [pc, #492]	@ (8005424 <vl53l0x_get_spad_info+0x3b0>)
 8005238:	801a      	strh	r2, [r3, #0]
	while(reg_val == 0x00)
 800523a:	e024      	b.n	8005286 <vl53l0x_get_spad_info+0x212>
	{
		status = readReg(0x83, &reg_val);
 800523c:	250f      	movs	r5, #15
 800523e:	197c      	adds	r4, r7, r5
 8005240:	230e      	movs	r3, #14
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	0019      	movs	r1, r3
 8005246:	2083      	movs	r0, #131	@ 0x83
 8005248:	f7fd feac 	bl	8002fa4 <readReg>
 800524c:	0003      	movs	r3, r0
 800524e:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8005250:	197b      	adds	r3, r7, r5
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	b25b      	sxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <vl53l0x_get_spad_info+0x1ee>
 800525a:	197b      	adds	r3, r7, r5
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	b25b      	sxtb	r3, r3
 8005260:	e0db      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>
		if (checkTimeoutExpired())
 8005262:	4b71      	ldr	r3, [pc, #452]	@ (8005428 <vl53l0x_get_spad_info+0x3b4>)
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00d      	beq.n	8005286 <vl53l0x_get_spad_info+0x212>
 800526a:	f000 fc3b 	bl	8005ae4 <HAL_GetTick>
 800526e:	0003      	movs	r3, r0
 8005270:	b29b      	uxth	r3, r3
 8005272:	001a      	movs	r2, r3
 8005274:	4b6b      	ldr	r3, [pc, #428]	@ (8005424 <vl53l0x_get_spad_info+0x3b0>)
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	4a6b      	ldr	r2, [pc, #428]	@ (8005428 <vl53l0x_get_spad_info+0x3b4>)
 800527c:	8812      	ldrh	r2, [r2, #0]
 800527e:	4293      	cmp	r3, r2
 8005280:	dd01      	ble.n	8005286 <vl53l0x_get_spad_info+0x212>
		{
			return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e0c9      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>
	while(reg_val == 0x00)
 8005286:	230e      	movs	r3, #14
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0d5      	beq.n	800523c <vl53l0x_get_spad_info+0x1c8>
		}
	}
	status = writeReg(0x83, 0x01);
 8005290:	250f      	movs	r5, #15
 8005292:	197c      	adds	r4, r7, r5
 8005294:	2101      	movs	r1, #1
 8005296:	2083      	movs	r0, #131	@ 0x83
 8005298:	f7fd fe28 	bl	8002eec <writeReg>
 800529c:	0003      	movs	r3, r0
 800529e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80052a0:	002a      	movs	r2, r5
 80052a2:	18bb      	adds	r3, r7, r2
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	b25b      	sxtb	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <vl53l0x_get_spad_info+0x240>
 80052ac:	18bb      	adds	r3, r7, r2
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	b25b      	sxtb	r3, r3
 80052b2:	e0b2      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>
	status = readReg(0x92, &reg_val);
 80052b4:	250f      	movs	r5, #15
 80052b6:	197c      	adds	r4, r7, r5
 80052b8:	230e      	movs	r3, #14
 80052ba:	18fb      	adds	r3, r7, r3
 80052bc:	0019      	movs	r1, r3
 80052be:	2092      	movs	r0, #146	@ 0x92
 80052c0:	f7fd fe70 	bl	8002fa4 <readReg>
 80052c4:	0003      	movs	r3, r0
 80052c6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80052c8:	197b      	adds	r3, r7, r5
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	b25b      	sxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <vl53l0x_get_spad_info+0x266>
 80052d2:	197b      	adds	r3, r7, r5
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	b25b      	sxtb	r3, r3
 80052d8:	e09f      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>

	*count = reg_val & 0x7f;
 80052da:	210e      	movs	r1, #14
 80052dc:	187b      	adds	r3, r7, r1
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	227f      	movs	r2, #127	@ 0x7f
 80052e2:	4013      	ands	r3, r2
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	701a      	strb	r2, [r3, #0]
	*type_is_aperture = (reg_val >> 7) & 0x01;
 80052ea:	187b      	adds	r3, r7, r1
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	09db      	lsrs	r3, r3, #7
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	701a      	strb	r2, [r3, #0]
	reg_val = 0;
 80052f6:	187b      	adds	r3, r7, r1
 80052f8:	2200      	movs	r2, #0
 80052fa:	701a      	strb	r2, [r3, #0]

	status = writeReg(0x81, 0x00);
 80052fc:	250f      	movs	r5, #15
 80052fe:	197c      	adds	r4, r7, r5
 8005300:	2100      	movs	r1, #0
 8005302:	2081      	movs	r0, #129	@ 0x81
 8005304:	f7fd fdf2 	bl	8002eec <writeReg>
 8005308:	0003      	movs	r3, r0
 800530a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800530c:	002a      	movs	r2, r5
 800530e:	18bb      	adds	r3, r7, r2
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	b25b      	sxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <vl53l0x_get_spad_info+0x2ac>
 8005318:	18bb      	adds	r3, r7, r2
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	b25b      	sxtb	r3, r3
 800531e:	e07c      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0xFF, 0x06);
 8005320:	250f      	movs	r5, #15
 8005322:	197c      	adds	r4, r7, r5
 8005324:	2106      	movs	r1, #6
 8005326:	20ff      	movs	r0, #255	@ 0xff
 8005328:	f7fd fde0 	bl	8002eec <writeReg>
 800532c:	0003      	movs	r3, r0
 800532e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005330:	002a      	movs	r2, r5
 8005332:	18bb      	adds	r3, r7, r2
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	b25b      	sxtb	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <vl53l0x_get_spad_info+0x2d0>
 800533c:	18bb      	adds	r3, r7, r2
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	b25b      	sxtb	r3, r3
 8005342:	e06a      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>
	status = readReg(0x83, &reg_val);
 8005344:	250f      	movs	r5, #15
 8005346:	197c      	adds	r4, r7, r5
 8005348:	230e      	movs	r3, #14
 800534a:	18fb      	adds	r3, r7, r3
 800534c:	0019      	movs	r1, r3
 800534e:	2083      	movs	r0, #131	@ 0x83
 8005350:	f7fd fe28 	bl	8002fa4 <readReg>
 8005354:	0003      	movs	r3, r0
 8005356:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005358:	197b      	adds	r3, r7, r5
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	b25b      	sxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <vl53l0x_get_spad_info+0x2f6>
 8005362:	197b      	adds	r3, r7, r5
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	b25b      	sxtb	r3, r3
 8005368:	e057      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0x83, reg_val & ~0x04);
 800536a:	230e      	movs	r3, #14
 800536c:	18fb      	adds	r3, r7, r3
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2204      	movs	r2, #4
 8005372:	4393      	bics	r3, r2
 8005374:	b2db      	uxtb	r3, r3
 8005376:	250f      	movs	r5, #15
 8005378:	197c      	adds	r4, r7, r5
 800537a:	0019      	movs	r1, r3
 800537c:	2083      	movs	r0, #131	@ 0x83
 800537e:	f7fd fdb5 	bl	8002eec <writeReg>
 8005382:	0003      	movs	r3, r0
 8005384:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005386:	197b      	adds	r3, r7, r5
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	b25b      	sxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <vl53l0x_get_spad_info+0x324>
 8005390:	197b      	adds	r3, r7, r5
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	b25b      	sxtb	r3, r3
 8005396:	e040      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0xFF, 0x01);
 8005398:	250f      	movs	r5, #15
 800539a:	197c      	adds	r4, r7, r5
 800539c:	2101      	movs	r1, #1
 800539e:	20ff      	movs	r0, #255	@ 0xff
 80053a0:	f7fd fda4 	bl	8002eec <writeReg>
 80053a4:	0003      	movs	r3, r0
 80053a6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80053a8:	002a      	movs	r2, r5
 80053aa:	18bb      	adds	r3, r7, r2
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	b25b      	sxtb	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <vl53l0x_get_spad_info+0x348>
 80053b4:	18bb      	adds	r3, r7, r2
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	b25b      	sxtb	r3, r3
 80053ba:	e02e      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0x00, 0x01);
 80053bc:	250f      	movs	r5, #15
 80053be:	197c      	adds	r4, r7, r5
 80053c0:	2101      	movs	r1, #1
 80053c2:	2000      	movs	r0, #0
 80053c4:	f7fd fd92 	bl	8002eec <writeReg>
 80053c8:	0003      	movs	r3, r0
 80053ca:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80053cc:	002a      	movs	r2, r5
 80053ce:	18bb      	adds	r3, r7, r2
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	b25b      	sxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <vl53l0x_get_spad_info+0x36c>
 80053d8:	18bb      	adds	r3, r7, r2
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	b25b      	sxtb	r3, r3
 80053de:	e01c      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>

	status = writeReg(0xFF, 0x00);
 80053e0:	250f      	movs	r5, #15
 80053e2:	197c      	adds	r4, r7, r5
 80053e4:	2100      	movs	r1, #0
 80053e6:	20ff      	movs	r0, #255	@ 0xff
 80053e8:	f7fd fd80 	bl	8002eec <writeReg>
 80053ec:	0003      	movs	r3, r0
 80053ee:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80053f0:	002a      	movs	r2, r5
 80053f2:	18bb      	adds	r3, r7, r2
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	b25b      	sxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <vl53l0x_get_spad_info+0x390>
 80053fc:	18bb      	adds	r3, r7, r2
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	b25b      	sxtb	r3, r3
 8005402:	e00a      	b.n	800541a <vl53l0x_get_spad_info+0x3a6>
	status = writeReg(0x80, 0x00);
 8005404:	250f      	movs	r5, #15
 8005406:	197c      	adds	r4, r7, r5
 8005408:	2100      	movs	r1, #0
 800540a:	2080      	movs	r0, #128	@ 0x80
 800540c:	f7fd fd6e 	bl	8002eec <writeReg>
 8005410:	0003      	movs	r3, r0
 8005412:	7023      	strb	r3, [r4, #0]

	return status;
 8005414:	197b      	adds	r3, r7, r5
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	b25b      	sxtb	r3, r3
}
 800541a:	0018      	movs	r0, r3
 800541c:	46bd      	mov	sp, r7
 800541e:	b004      	add	sp, #16
 8005420:	bdb0      	pop	{r4, r5, r7, pc}
 8005422:	46c0      	nop			@ (mov r8, r8)
 8005424:	20000592 	.word	0x20000592
 8005428:	2000058e 	.word	0x2000058e

0800542c <vl53l0x_get_sequence_step_enables>:

// Get sequence step enables
// based on VL53L0X_vl53l0x_get_sequence_step_enables()
int8_t vl53l0x_get_sequence_step_enables(SequenceStepEnables * enables)
{
 800542c:	b5b0      	push	{r4, r5, r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 8005434:	250f      	movs	r5, #15
 8005436:	197b      	adds	r3, r7, r5
 8005438:	2200      	movs	r2, #0
 800543a:	701a      	strb	r2, [r3, #0]
	uint8_t sequence_config = 0;
 800543c:	210e      	movs	r1, #14
 800543e:	187b      	adds	r3, r7, r1
 8005440:	2200      	movs	r2, #0
 8005442:	701a      	strb	r2, [r3, #0]
	status = readReg(SYSTEM_SEQUENCE_CONFIG, &sequence_config);
 8005444:	197c      	adds	r4, r7, r5
 8005446:	187b      	adds	r3, r7, r1
 8005448:	0019      	movs	r1, r3
 800544a:	2001      	movs	r0, #1
 800544c:	f7fd fdaa 	bl	8002fa4 <readReg>
 8005450:	0003      	movs	r3, r0
 8005452:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005454:	197b      	adds	r3, r7, r5
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	b25b      	sxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <vl53l0x_get_sequence_step_enables+0x3a>
 800545e:	197b      	adds	r3, r7, r5
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	b25b      	sxtb	r3, r3
 8005464:	e02e      	b.n	80054c4 <vl53l0x_get_sequence_step_enables+0x98>

	enables->tcc          = (sequence_config >> 4) & 0x1;
 8005466:	210e      	movs	r1, #14
 8005468:	187b      	adds	r3, r7, r1
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	091b      	lsrs	r3, r3, #4
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2201      	movs	r2, #1
 8005472:	4013      	ands	r3, r2
 8005474:	b2da      	uxtb	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	701a      	strb	r2, [r3, #0]
	enables->dss          = (sequence_config >> 3) & 0x1;
 800547a:	187b      	adds	r3, r7, r1
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	08db      	lsrs	r3, r3, #3
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2201      	movs	r2, #1
 8005484:	4013      	ands	r3, r2
 8005486:	b2da      	uxtb	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	709a      	strb	r2, [r3, #2]
	enables->msrc         = (sequence_config >> 2) & 0x1;
 800548c:	187b      	adds	r3, r7, r1
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	089b      	lsrs	r3, r3, #2
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2201      	movs	r2, #1
 8005496:	4013      	ands	r3, r2
 8005498:	b2da      	uxtb	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	705a      	strb	r2, [r3, #1]
	enables->pre_range    = (sequence_config >> 6) & 0x1;
 800549e:	187b      	adds	r3, r7, r1
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	099b      	lsrs	r3, r3, #6
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2201      	movs	r2, #1
 80054a8:	4013      	ands	r3, r2
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	70da      	strb	r2, [r3, #3]
	enables->final_range  = (sequence_config >> 7) & 0x1;
 80054b0:	187b      	adds	r3, r7, r1
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	09db      	lsrs	r3, r3, #7
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	711a      	strb	r2, [r3, #4]

	return status;
 80054bc:	230f      	movs	r3, #15
 80054be:	18fb      	adds	r3, r7, r3
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	b25b      	sxtb	r3, r3
}
 80054c4:	0018      	movs	r0, r3
 80054c6:	46bd      	mov	sp, r7
 80054c8:	b004      	add	sp, #16
 80054ca:	bdb0      	pop	{r4, r5, r7, pc}

080054cc <vl53l0x_get_sequence_step_timeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
int8_t vl53l0x_get_sequence_step_timeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80054cc:	b5b0      	push	{r4, r5, r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
	int8_t status = HAL_OK;
 80054d6:	210f      	movs	r1, #15
 80054d8:	187b      	adds	r3, r7, r1
 80054da:	2200      	movs	r2, #0
 80054dc:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val_8 = 0;
 80054de:	200e      	movs	r0, #14
 80054e0:	183b      	adds	r3, r7, r0
 80054e2:	2200      	movs	r2, #0
 80054e4:	701a      	strb	r2, [r3, #0]
	uint16_t reg_val_16 = 0;
 80054e6:	230c      	movs	r3, #12
 80054e8:	18fb      	adds	r3, r7, r3
 80054ea:	2200      	movs	r2, #0
 80054ec:	801a      	strh	r2, [r3, #0]

	status = vl53l0x_get_vcsel_pulse_period(VcselPeriodPreRange, &reg_val_8);
 80054ee:	000d      	movs	r5, r1
 80054f0:	187c      	adds	r4, r7, r1
 80054f2:	183b      	adds	r3, r7, r0
 80054f4:	0019      	movs	r1, r3
 80054f6:	2000      	movs	r0, #0
 80054f8:	f7ff fbbe 	bl	8004c78 <vl53l0x_get_vcsel_pulse_period>
 80054fc:	0003      	movs	r3, r0
 80054fe:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005500:	197b      	adds	r3, r7, r5
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	b25b      	sxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <vl53l0x_get_sequence_step_timeouts+0x46>
 800550a:	197b      	adds	r3, r7, r5
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	b25b      	sxtb	r3, r3
 8005510:	e0a5      	b.n	800565e <vl53l0x_get_sequence_step_timeouts+0x192>
	timeouts->pre_range_vcsel_period_pclks = reg_val_8;
 8005512:	210e      	movs	r1, #14
 8005514:	187b      	adds	r3, r7, r1
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	001a      	movs	r2, r3
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	801a      	strh	r2, [r3, #0]

	status = readReg(MSRC_CONFIG_TIMEOUT_MACROP, &reg_val_8);
 800551e:	250f      	movs	r5, #15
 8005520:	197c      	adds	r4, r7, r5
 8005522:	187b      	adds	r3, r7, r1
 8005524:	0019      	movs	r1, r3
 8005526:	2046      	movs	r0, #70	@ 0x46
 8005528:	f7fd fd3c 	bl	8002fa4 <readReg>
 800552c:	0003      	movs	r3, r0
 800552e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005530:	197b      	adds	r3, r7, r5
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	b25b      	sxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <vl53l0x_get_sequence_step_timeouts+0x76>
 800553a:	197b      	adds	r3, r7, r5
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	b25b      	sxtb	r3, r3
 8005540:	e08d      	b.n	800565e <vl53l0x_get_sequence_step_timeouts+0x192>
	timeouts->msrc_dss_tcc_mclks = reg_val_8 + 1;
 8005542:	230e      	movs	r3, #14
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	3301      	adds	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	809a      	strh	r2, [r3, #4]
	timeouts->msrc_dss_tcc_us =
	vl53l0x_timeout_mclks_to_us(timeouts->msrc_dss_tcc_mclks,
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	889a      	ldrh	r2, [r3, #4]
						   timeouts->pre_range_vcsel_period_pclks);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	881b      	ldrh	r3, [r3, #0]
	vl53l0x_timeout_mclks_to_us(timeouts->msrc_dss_tcc_mclks,
 8005558:	b2db      	uxtb	r3, r3
 800555a:	0019      	movs	r1, r3
 800555c:	0010      	movs	r0, r2
 800555e:	f000 f8cb 	bl	80056f8 <vl53l0x_timeout_mclks_to_us>
 8005562:	0002      	movs	r2, r0
	timeouts->msrc_dss_tcc_us =
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	60da      	str	r2, [r3, #12]

	status = readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, &reg_val_16);
 8005568:	250f      	movs	r5, #15
 800556a:	197c      	adds	r4, r7, r5
 800556c:	230c      	movs	r3, #12
 800556e:	18fb      	adds	r3, r7, r3
 8005570:	0019      	movs	r1, r3
 8005572:	2051      	movs	r0, #81	@ 0x51
 8005574:	f7fd fd4a 	bl	800300c <readReg16Bit>
 8005578:	0003      	movs	r3, r0
 800557a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800557c:	197b      	adds	r3, r7, r5
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	b25b      	sxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <vl53l0x_get_sequence_step_timeouts+0xc2>
 8005586:	197b      	adds	r3, r7, r5
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	b25b      	sxtb	r3, r3
 800558c:	e067      	b.n	800565e <vl53l0x_get_sequence_step_timeouts+0x192>
	timeouts->pre_range_mclks = vl53l0x_decode_timeout(reg_val_16);
 800558e:	230c      	movs	r3, #12
 8005590:	18fb      	adds	r3, r7, r3
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	0018      	movs	r0, r3
 8005596:	f000 f866 	bl	8005666 <vl53l0x_decode_timeout>
 800559a:	0003      	movs	r3, r0
 800559c:	001a      	movs	r2, r3
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	80da      	strh	r2, [r3, #6]
	timeouts->pre_range_us =
	vl53l0x_timeout_mclks_to_us(timeouts->pre_range_mclks,
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	88da      	ldrh	r2, [r3, #6]
						   timeouts->pre_range_vcsel_period_pclks);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	881b      	ldrh	r3, [r3, #0]
	vl53l0x_timeout_mclks_to_us(timeouts->pre_range_mclks,
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	0019      	movs	r1, r3
 80055ae:	0010      	movs	r0, r2
 80055b0:	f000 f8a2 	bl	80056f8 <vl53l0x_timeout_mclks_to_us>
 80055b4:	0002      	movs	r2, r0
	timeouts->pre_range_us =
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	611a      	str	r2, [r3, #16]

	status = vl53l0x_get_vcsel_pulse_period(VcselPeriodFinalRange, &reg_val_8);
 80055ba:	250f      	movs	r5, #15
 80055bc:	197c      	adds	r4, r7, r5
 80055be:	230e      	movs	r3, #14
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	0019      	movs	r1, r3
 80055c4:	2001      	movs	r0, #1
 80055c6:	f7ff fb57 	bl	8004c78 <vl53l0x_get_vcsel_pulse_period>
 80055ca:	0003      	movs	r3, r0
 80055cc:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80055ce:	197b      	adds	r3, r7, r5
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	b25b      	sxtb	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <vl53l0x_get_sequence_step_timeouts+0x114>
 80055d8:	197b      	adds	r3, r7, r5
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	b25b      	sxtb	r3, r3
 80055de:	e03e      	b.n	800565e <vl53l0x_get_sequence_step_timeouts+0x192>
	timeouts->final_range_vcsel_period_pclks = reg_val_8;
 80055e0:	230e      	movs	r3, #14
 80055e2:	18fb      	adds	r3, r7, r3
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	001a      	movs	r2, r3
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	805a      	strh	r2, [r3, #2]

	status = readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, &reg_val_16);
 80055ec:	250f      	movs	r5, #15
 80055ee:	197c      	adds	r4, r7, r5
 80055f0:	230c      	movs	r3, #12
 80055f2:	18fb      	adds	r3, r7, r3
 80055f4:	0019      	movs	r1, r3
 80055f6:	2071      	movs	r0, #113	@ 0x71
 80055f8:	f7fd fd08 	bl	800300c <readReg16Bit>
 80055fc:	0003      	movs	r3, r0
 80055fe:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005600:	197b      	adds	r3, r7, r5
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	b25b      	sxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <vl53l0x_get_sequence_step_timeouts+0x146>
 800560a:	197b      	adds	r3, r7, r5
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	b25b      	sxtb	r3, r3
 8005610:	e025      	b.n	800565e <vl53l0x_get_sequence_step_timeouts+0x192>
	timeouts->final_range_mclks = vl53l0x_decode_timeout(reg_val_16);
 8005612:	230c      	movs	r3, #12
 8005614:	18fb      	adds	r3, r7, r3
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	0018      	movs	r0, r3
 800561a:	f000 f824 	bl	8005666 <vl53l0x_decode_timeout>
 800561e:	0003      	movs	r3, r0
 8005620:	001a      	movs	r2, r3
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	811a      	strh	r2, [r3, #8]

	if (enables->pre_range)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	78db      	ldrb	r3, [r3, #3]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d007      	beq.n	800563e <vl53l0x_get_sequence_step_timeouts+0x172>
	{
		timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	891a      	ldrh	r2, [r3, #8]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	88db      	ldrh	r3, [r3, #6]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	b29a      	uxth	r2, r3
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	811a      	strh	r2, [r3, #8]
	}

	timeouts->final_range_us =
	vl53l0x_timeout_mclks_to_us(timeouts->final_range_mclks,
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	891a      	ldrh	r2, [r3, #8]
						   timeouts->final_range_vcsel_period_pclks);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	885b      	ldrh	r3, [r3, #2]
	vl53l0x_timeout_mclks_to_us(timeouts->final_range_mclks,
 8005646:	b2db      	uxtb	r3, r3
 8005648:	0019      	movs	r1, r3
 800564a:	0010      	movs	r0, r2
 800564c:	f000 f854 	bl	80056f8 <vl53l0x_timeout_mclks_to_us>
 8005650:	0002      	movs	r2, r0
	timeouts->final_range_us =
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	615a      	str	r2, [r3, #20]
	return status;
 8005656:	230f      	movs	r3, #15
 8005658:	18fb      	adds	r3, r7, r3
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	b25b      	sxtb	r3, r3
}
 800565e:	0018      	movs	r0, r3
 8005660:	46bd      	mov	sp, r7
 8005662:	b004      	add	sp, #16
 8005664:	bdb0      	pop	{r4, r5, r7, pc}

08005666 <vl53l0x_decode_timeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t vl53l0x_decode_timeout(uint16_t reg_val)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b082      	sub	sp, #8
 800566a:	af00      	add	r7, sp, #0
 800566c:	0002      	movs	r2, r0
 800566e:	1dbb      	adds	r3, r7, #6
 8005670:	801a      	strh	r2, [r3, #0]
	// format: "(LSByte * 2^MSByte) + 1"
	return (uint16_t)((reg_val & 0x00FF) <<
 8005672:	1dbb      	adds	r3, r7, #6
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	22ff      	movs	r2, #255	@ 0xff
 8005678:	4013      	ands	r3, r2
		 (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 800567a:	1dba      	adds	r2, r7, #6
 800567c:	8812      	ldrh	r2, [r2, #0]
 800567e:	0a12      	lsrs	r2, r2, #8
 8005680:	b292      	uxth	r2, r2
	return (uint16_t)((reg_val & 0x00FF) <<
 8005682:	4093      	lsls	r3, r2
 8005684:	b29b      	uxth	r3, r3
		 (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8005686:	3301      	adds	r3, #1
 8005688:	b29b      	uxth	r3, r3
}
 800568a:	0018      	movs	r0, r3
 800568c:	46bd      	mov	sp, r7
 800568e:	b002      	add	sp, #8
 8005690:	bd80      	pop	{r7, pc}

08005692 <vl53l0x_encode_timeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t vl53l0x_encode_timeout(uint16_t timeout_mclks)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	0002      	movs	r2, r0
 800569a:	1dbb      	adds	r3, r7, #6
 800569c:	801a      	strh	r2, [r3, #0]
	// format: "(LSByte * 2^MSByte) + 1"
	uint32_t ls_byte = 0;
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]
	uint16_t ms_byte = 0;
 80056a2:	230a      	movs	r3, #10
 80056a4:	18fb      	adds	r3, r7, r3
 80056a6:	2200      	movs	r2, #0
 80056a8:	801a      	strh	r2, [r3, #0]

	if(timeout_mclks > 0)
 80056aa:	1dbb      	adds	r3, r7, #6
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d01d      	beq.n	80056ee <vl53l0x_encode_timeout+0x5c>
	{
		ls_byte = timeout_mclks - 1;
 80056b2:	1dbb      	adds	r3, r7, #6
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	60fb      	str	r3, [r7, #12]

		while((ls_byte & 0xFFFFFF00) > 0)
 80056ba:	e008      	b.n	80056ce <vl53l0x_encode_timeout+0x3c>
		{
			ls_byte >>= 1;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	085b      	lsrs	r3, r3, #1
 80056c0:	60fb      	str	r3, [r7, #12]
			ms_byte++;
 80056c2:	210a      	movs	r1, #10
 80056c4:	187b      	adds	r3, r7, r1
 80056c6:	881a      	ldrh	r2, [r3, #0]
 80056c8:	187b      	adds	r3, r7, r1
 80056ca:	3201      	adds	r2, #1
 80056cc:	801a      	strh	r2, [r3, #0]
		while((ls_byte & 0xFFFFFF00) > 0)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2bff      	cmp	r3, #255	@ 0xff
 80056d2:	d8f3      	bhi.n	80056bc <vl53l0x_encode_timeout+0x2a>
		}

		return (ms_byte << 8) | (ls_byte & 0xFF);
 80056d4:	230a      	movs	r3, #10
 80056d6:	18fb      	adds	r3, r7, r3
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	021b      	lsls	r3, r3, #8
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	21ff      	movs	r1, #255	@ 0xff
 80056e4:	400b      	ands	r3, r1
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	4313      	orrs	r3, r2
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	e000      	b.n	80056f0 <vl53l0x_encode_timeout+0x5e>
	}
	else
	{
		return 0;
 80056ee:	2300      	movs	r3, #0
	}
}
 80056f0:	0018      	movs	r0, r3
 80056f2:	46bd      	mov	sp, r7
 80056f4:	b004      	add	sp, #16
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <vl53l0x_timeout_mclks_to_us>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t vl53l0x_timeout_mclks_to_us(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	0002      	movs	r2, r0
 8005700:	1dbb      	adds	r3, r7, #6
 8005702:	801a      	strh	r2, [r3, #0]
 8005704:	1d7b      	adds	r3, r7, #5
 8005706:	1c0a      	adds	r2, r1, #0
 8005708:	701a      	strb	r2, [r3, #0]
	uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 800570a:	1d7b      	adds	r3, r7, #5
 800570c:	781a      	ldrb	r2, [r3, #0]
 800570e:	0013      	movs	r3, r2
 8005710:	015b      	lsls	r3, r3, #5
 8005712:	1a9b      	subs	r3, r3, r2
 8005714:	015b      	lsls	r3, r3, #5
 8005716:	189b      	adds	r3, r3, r2
 8005718:	011a      	lsls	r2, r3, #4
 800571a:	1ad2      	subs	r2, r2, r3
 800571c:	0213      	lsls	r3, r2, #8
 800571e:	001a      	movs	r2, r3
 8005720:	0013      	movs	r3, r2
 8005722:	33f5      	adds	r3, #245	@ 0xf5
 8005724:	33ff      	adds	r3, #255	@ 0xff
 8005726:	22fa      	movs	r2, #250	@ 0xfa
 8005728:	0091      	lsls	r1, r2, #2
 800572a:	0018      	movs	r0, r3
 800572c:	f7fa fcec 	bl	8000108 <__udivsi3>
 8005730:	0003      	movs	r3, r0
 8005732:	60fb      	str	r3, [r7, #12]

	return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8005734:	1dbb      	adds	r3, r7, #6
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	435a      	muls	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	085b      	lsrs	r3, r3, #1
 8005740:	18d3      	adds	r3, r2, r3
 8005742:	22fa      	movs	r2, #250	@ 0xfa
 8005744:	0091      	lsls	r1, r2, #2
 8005746:	0018      	movs	r0, r3
 8005748:	f7fa fcde 	bl	8000108 <__udivsi3>
 800574c:	0003      	movs	r3, r0
}
 800574e:	0018      	movs	r0, r3
 8005750:	46bd      	mov	sp, r7
 8005752:	b004      	add	sp, #16
 8005754:	bd80      	pop	{r7, pc}

08005756 <vl53l0x_timeout_us_to_mclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t vl53l0x_timeout_us_to_mclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	000a      	movs	r2, r1
 8005760:	1cfb      	adds	r3, r7, #3
 8005762:	701a      	strb	r2, [r3, #0]
	uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8005764:	1cfb      	adds	r3, r7, #3
 8005766:	781a      	ldrb	r2, [r3, #0]
 8005768:	0013      	movs	r3, r2
 800576a:	015b      	lsls	r3, r3, #5
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	015b      	lsls	r3, r3, #5
 8005770:	189b      	adds	r3, r3, r2
 8005772:	011a      	lsls	r2, r3, #4
 8005774:	1ad2      	subs	r2, r2, r3
 8005776:	0213      	lsls	r3, r2, #8
 8005778:	001a      	movs	r2, r3
 800577a:	0013      	movs	r3, r2
 800577c:	33f5      	adds	r3, #245	@ 0xf5
 800577e:	33ff      	adds	r3, #255	@ 0xff
 8005780:	22fa      	movs	r2, #250	@ 0xfa
 8005782:	0091      	lsls	r1, r2, #2
 8005784:	0018      	movs	r0, r3
 8005786:	f7fa fcbf 	bl	8000108 <__udivsi3>
 800578a:	0003      	movs	r3, r0
 800578c:	60fb      	str	r3, [r7, #12]

	return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	0013      	movs	r3, r2
 8005792:	015b      	lsls	r3, r3, #5
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	189b      	adds	r3, r3, r2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	001a      	movs	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	18d3      	adds	r3, r2, r3
 80057a4:	68f9      	ldr	r1, [r7, #12]
 80057a6:	0018      	movs	r0, r3
 80057a8:	f7fa fcae 	bl	8000108 <__udivsi3>
 80057ac:	0003      	movs	r3, r0
}
 80057ae:	0018      	movs	r0, r3
 80057b0:	46bd      	mov	sp, r7
 80057b2:	b004      	add	sp, #16
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <vl53l0x_single_reference_calibration>:


// based on VL53L0X_perform_single_ref_calibration()
int8_t vl53l0x_single_reference_calibration(uint8_t vhv_init_byte)
{
 80057b8:	b5b0      	push	{r4, r5, r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	0002      	movs	r2, r0
 80057c0:	1dfb      	adds	r3, r7, #7
 80057c2:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 80057c4:	210f      	movs	r1, #15
 80057c6:	187b      	adds	r3, r7, r1
 80057c8:	2200      	movs	r2, #0
 80057ca:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val = 0;
 80057cc:	230e      	movs	r3, #14
 80057ce:	18fb      	adds	r3, r7, r3
 80057d0:	2200      	movs	r2, #0
 80057d2:	701a      	strb	r2, [r3, #0]

	status = writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80057d4:	1dfb      	adds	r3, r7, #7
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2201      	movs	r2, #1
 80057da:	4313      	orrs	r3, r2
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	000d      	movs	r5, r1
 80057e0:	187c      	adds	r4, r7, r1
 80057e2:	0019      	movs	r1, r3
 80057e4:	2000      	movs	r0, #0
 80057e6:	f7fd fb81 	bl	8002eec <writeReg>
 80057ea:	0003      	movs	r3, r0
 80057ec:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80057ee:	197b      	adds	r3, r7, r5
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	b25b      	sxtb	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <vl53l0x_single_reference_calibration+0x48>
 80057f8:	197b      	adds	r3, r7, r5
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	b25b      	sxtb	r3, r3
 80057fe:	e044      	b.n	800588a <vl53l0x_single_reference_calibration+0xd2>

	startTimeout();
 8005800:	f000 f970 	bl	8005ae4 <HAL_GetTick>
 8005804:	0003      	movs	r3, r0
 8005806:	b29a      	uxth	r2, r3
 8005808:	4b22      	ldr	r3, [pc, #136]	@ (8005894 <vl53l0x_single_reference_calibration+0xdc>)
 800580a:	801a      	strh	r2, [r3, #0]
	while((reg_val & 0x07) == 0)
 800580c:	e01b      	b.n	8005846 <vl53l0x_single_reference_calibration+0x8e>
	{
		status = readReg(RESULT_INTERRUPT_STATUS, &reg_val);
 800580e:	230f      	movs	r3, #15
 8005810:	18fc      	adds	r4, r7, r3
 8005812:	230e      	movs	r3, #14
 8005814:	18fb      	adds	r3, r7, r3
 8005816:	0019      	movs	r1, r3
 8005818:	2013      	movs	r0, #19
 800581a:	f7fd fbc3 	bl	8002fa4 <readReg>
 800581e:	0003      	movs	r3, r0
 8005820:	7023      	strb	r3, [r4, #0]
		if(checkTimeoutExpired())
 8005822:	4b1d      	ldr	r3, [pc, #116]	@ (8005898 <vl53l0x_single_reference_calibration+0xe0>)
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00d      	beq.n	8005846 <vl53l0x_single_reference_calibration+0x8e>
 800582a:	f000 f95b 	bl	8005ae4 <HAL_GetTick>
 800582e:	0003      	movs	r3, r0
 8005830:	b29b      	uxth	r3, r3
 8005832:	001a      	movs	r2, r3
 8005834:	4b17      	ldr	r3, [pc, #92]	@ (8005894 <vl53l0x_single_reference_calibration+0xdc>)
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	4a17      	ldr	r2, [pc, #92]	@ (8005898 <vl53l0x_single_reference_calibration+0xe0>)
 800583c:	8812      	ldrh	r2, [r2, #0]
 800583e:	4293      	cmp	r3, r2
 8005840:	dd01      	ble.n	8005846 <vl53l0x_single_reference_calibration+0x8e>
		{
			return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e021      	b.n	800588a <vl53l0x_single_reference_calibration+0xd2>
	while((reg_val & 0x07) == 0)
 8005846:	230e      	movs	r3, #14
 8005848:	18fb      	adds	r3, r7, r3
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	001a      	movs	r2, r3
 800584e:	2307      	movs	r3, #7
 8005850:	4013      	ands	r3, r2
 8005852:	d0dc      	beq.n	800580e <vl53l0x_single_reference_calibration+0x56>
		}
	}

	status = writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8005854:	250f      	movs	r5, #15
 8005856:	197c      	adds	r4, r7, r5
 8005858:	2101      	movs	r1, #1
 800585a:	200b      	movs	r0, #11
 800585c:	f7fd fb46 	bl	8002eec <writeReg>
 8005860:	0003      	movs	r3, r0
 8005862:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8005864:	002a      	movs	r2, r5
 8005866:	18bb      	adds	r3, r7, r2
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	b25b      	sxtb	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <vl53l0x_single_reference_calibration+0xc0>
 8005870:	18bb      	adds	r3, r7, r2
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	b25b      	sxtb	r3, r3
 8005876:	e008      	b.n	800588a <vl53l0x_single_reference_calibration+0xd2>

	status = writeReg(SYSRANGE_START, 0x00);
 8005878:	230f      	movs	r3, #15
 800587a:	18fc      	adds	r4, r7, r3
 800587c:	2100      	movs	r1, #0
 800587e:	2000      	movs	r0, #0
 8005880:	f7fd fb34 	bl	8002eec <writeReg>
 8005884:	0003      	movs	r3, r0
 8005886:	7023      	strb	r3, [r4, #0]

	return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	0018      	movs	r0, r3
 800588c:	46bd      	mov	sp, r7
 800588e:	b004      	add	sp, #16
 8005890:	bdb0      	pop	{r4, r5, r7, pc}
 8005892:	46c0      	nop			@ (mov r8, r8)
 8005894:	20000592 	.word	0x20000592
 8005898:	2000058e 	.word	0x2000058e

0800589c <handle_i2c_error>:

int8_t handle_i2c_error(int8_t status)
{
 800589c:	b5b0      	push	{r4, r5, r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	0002      	movs	r2, r0
 80058a4:	1dfb      	adds	r3, r7, #7
 80058a6:	701a      	strb	r2, [r3, #0]

	if(status != HAL_OK)
 80058a8:	1dfb      	adds	r3, r7, #7
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	b25b      	sxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d022      	beq.n	80058f8 <handle_i2c_error+0x5c>
	{
		int8_t reset_status = HAL_OK;
 80058b2:	200f      	movs	r0, #15
 80058b4:	183b      	adds	r3, r7, r0
 80058b6:	2200      	movs	r2, #0
 80058b8:	701a      	strb	r2, [r3, #0]
		holding_register_database[I2C_ERRORS] |= hi2c1.ErrorCode;
 80058ba:	4b13      	ldr	r3, [pc, #76]	@ (8005908 <handle_i2c_error+0x6c>)
 80058bc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80058be:	4b13      	ldr	r3, [pc, #76]	@ (800590c <handle_i2c_error+0x70>)
 80058c0:	899a      	ldrh	r2, [r3, #12]
 80058c2:	b28b      	uxth	r3, r1
 80058c4:	4313      	orrs	r3, r2
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	4b10      	ldr	r3, [pc, #64]	@ (800590c <handle_i2c_error+0x70>)
 80058ca:	819a      	strh	r2, [r3, #12]
		// Attempt to reset the peripheral
		reset_status = i2c_reset();
 80058cc:	0005      	movs	r5, r0
 80058ce:	183c      	adds	r4, r7, r0
 80058d0:	f000 f81e 	bl	8005910 <i2c_reset>
 80058d4:	0003      	movs	r3, r0
 80058d6:	7023      	strb	r3, [r4, #0]
		if(reset_status != HAL_OK)
 80058d8:	197b      	adds	r3, r7, r5
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	b25b      	sxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <handle_i2c_error+0x5c>
		{
			// I2C Fatal Error
			holding_register_database[I2C_ERRORS] |= 1U << 10U;
 80058e2:	4b0a      	ldr	r3, [pc, #40]	@ (800590c <handle_i2c_error+0x70>)
 80058e4:	899b      	ldrh	r3, [r3, #12]
 80058e6:	2280      	movs	r2, #128	@ 0x80
 80058e8:	00d2      	lsls	r2, r2, #3
 80058ea:	4313      	orrs	r3, r2
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	4b07      	ldr	r3, [pc, #28]	@ (800590c <handle_i2c_error+0x70>)
 80058f0:	819a      	strh	r2, [r3, #12]
			holding_register_database[I2C_SHUTDOWN] = 1;
 80058f2:	4b06      	ldr	r3, [pc, #24]	@ (800590c <handle_i2c_error+0x70>)
 80058f4:	2201      	movs	r2, #1
 80058f6:	81da      	strh	r2, [r3, #14]
		}
	}
	return status;
 80058f8:	1dfb      	adds	r3, r7, #7
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	b25b      	sxtb	r3, r3
}
 80058fe:	0018      	movs	r0, r3
 8005900:	46bd      	mov	sp, r7
 8005902:	b004      	add	sp, #16
 8005904:	bdb0      	pop	{r4, r5, r7, pc}
 8005906:	46c0      	nop			@ (mov r8, r8)
 8005908:	2000010c 	.word	0x2000010c
 800590c:	20000000 	.word	0x20000000

08005910 <i2c_reset>:

int8_t i2c_reset()
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 8005916:	1dfb      	adds	r3, r7, #7
 8005918:	2200      	movs	r2, #0
 800591a:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2C_DeInit(&hi2c1);
 800591c:	4b20      	ldr	r3, [pc, #128]	@ (80059a0 <i2c_reset+0x90>)
 800591e:	0018      	movs	r0, r3
 8005920:	f002 f93c 	bl	8007b9c <HAL_I2C_DeInit>
 8005924:	0003      	movs	r3, r0
 8005926:	b259      	sxtb	r1, r3
 8005928:	1dfb      	adds	r3, r7, #7
 800592a:	1dfa      	adds	r2, r7, #7
 800592c:	7812      	ldrb	r2, [r2, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	701a      	strb	r2, [r3, #0]
	__I2C1_FORCE_RESET();
 8005932:	4b1c      	ldr	r3, [pc, #112]	@ (80059a4 <i2c_reset+0x94>)
 8005934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005936:	4b1b      	ldr	r3, [pc, #108]	@ (80059a4 <i2c_reset+0x94>)
 8005938:	2180      	movs	r1, #128	@ 0x80
 800593a:	0389      	lsls	r1, r1, #14
 800593c:	430a      	orrs	r2, r1
 800593e:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_Delay(100);
 8005940:	2064      	movs	r0, #100	@ 0x64
 8005942:	f000 f8d9 	bl	8005af8 <HAL_Delay>
	__I2C1_RELEASE_RESET();
 8005946:	4b17      	ldr	r3, [pc, #92]	@ (80059a4 <i2c_reset+0x94>)
 8005948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800594a:	4b16      	ldr	r3, [pc, #88]	@ (80059a4 <i2c_reset+0x94>)
 800594c:	4916      	ldr	r1, [pc, #88]	@ (80059a8 <i2c_reset+0x98>)
 800594e:	400a      	ands	r2, r1
 8005950:	62da      	str	r2, [r3, #44]	@ 0x2c
	status = HAL_I2C_Init(&hi2c1);
 8005952:	4b13      	ldr	r3, [pc, #76]	@ (80059a0 <i2c_reset+0x90>)
 8005954:	0018      	movs	r0, r3
 8005956:	f002 f87b 	bl	8007a50 <HAL_I2C_Init>
 800595a:	0003      	movs	r3, r0
 800595c:	001a      	movs	r2, r3
 800595e:	1dfb      	adds	r3, r7, #7
 8005960:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 8005962:	4b0f      	ldr	r3, [pc, #60]	@ (80059a0 <i2c_reset+0x90>)
 8005964:	2100      	movs	r1, #0
 8005966:	0018      	movs	r0, r3
 8005968:	f002 fea6 	bl	80086b8 <HAL_I2CEx_ConfigAnalogFilter>
 800596c:	0003      	movs	r3, r0
 800596e:	b259      	sxtb	r1, r3
 8005970:	1dfb      	adds	r3, r7, #7
 8005972:	1dfa      	adds	r2, r7, #7
 8005974:	7812      	ldrb	r2, [r2, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
 800597a:	4b09      	ldr	r3, [pc, #36]	@ (80059a0 <i2c_reset+0x90>)
 800597c:	2100      	movs	r1, #0
 800597e:	0018      	movs	r0, r3
 8005980:	f002 fee6 	bl	8008750 <HAL_I2CEx_ConfigDigitalFilter>
 8005984:	0003      	movs	r3, r0
 8005986:	b259      	sxtb	r1, r3
 8005988:	1dfb      	adds	r3, r7, #7
 800598a:	1dfa      	adds	r2, r7, #7
 800598c:	7812      	ldrb	r2, [r2, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	701a      	strb	r2, [r3, #0]
	return status;
 8005992:	1dfb      	adds	r3, r7, #7
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	b25b      	sxtb	r3, r3
}
 8005998:	0018      	movs	r0, r3
 800599a:	46bd      	mov	sp, r7
 800599c:	b002      	add	sp, #8
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	2000010c 	.word	0x2000010c
 80059a4:	40021000 	.word	0x40021000
 80059a8:	ffdfffff 	.word	0xffdfffff

080059ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80059ac:	480d      	ldr	r0, [pc, #52]	@ (80059e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80059ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80059b0:	f7fd fa90 	bl	8002ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80059b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80059b6:	e003      	b.n	80059c0 <LoopCopyDataInit>

080059b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80059b8:	4b0b      	ldr	r3, [pc, #44]	@ (80059e8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80059ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80059bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80059be:	3104      	adds	r1, #4

080059c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80059c0:	480a      	ldr	r0, [pc, #40]	@ (80059ec <LoopForever+0xa>)
  ldr r3, =_edata
 80059c2:	4b0b      	ldr	r3, [pc, #44]	@ (80059f0 <LoopForever+0xe>)
  adds r2, r0, r1
 80059c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80059c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80059c8:	d3f6      	bcc.n	80059b8 <CopyDataInit>
  ldr r2, =_sbss
 80059ca:	4a0a      	ldr	r2, [pc, #40]	@ (80059f4 <LoopForever+0x12>)
  b LoopFillZerobss
 80059cc:	e002      	b.n	80059d4 <LoopFillZerobss>

080059ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80059ce:	2300      	movs	r3, #0
  str  r3, [r2]
 80059d0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059d2:	3204      	adds	r2, #4

080059d4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80059d4:	4b08      	ldr	r3, [pc, #32]	@ (80059f8 <LoopForever+0x16>)
  cmp r2, r3
 80059d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80059d8:	d3f9      	bcc.n	80059ce <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80059da:	f005 f951 	bl	800ac80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80059de:	f7fb fb8b 	bl	80010f8 <main>

080059e2 <LoopForever>:

LoopForever:
    b LoopForever
 80059e2:	e7fe      	b.n	80059e2 <LoopForever>
  ldr   r0, =_estack
 80059e4:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 80059e8:	0800afec 	.word	0x0800afec
  ldr r0, =_sdata
 80059ec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80059f0:	20000030 	.word	0x20000030
  ldr r2, =_sbss
 80059f4:	20000030 	.word	0x20000030
  ldr r3, = _ebss
 80059f8:	200005a4 	.word	0x200005a4

080059fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80059fc:	e7fe      	b.n	80059fc <ADC1_IRQHandler>

080059fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b082      	sub	sp, #8
 8005a02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005a04:	1dfb      	adds	r3, r7, #7
 8005a06:	2200      	movs	r2, #0
 8005a08:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a0a:	2003      	movs	r0, #3
 8005a0c:	f000 f80e 	bl	8005a2c <HAL_InitTick>
 8005a10:	1e03      	subs	r3, r0, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8005a14:	1dfb      	adds	r3, r7, #7
 8005a16:	2201      	movs	r2, #1
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	e001      	b.n	8005a20 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005a1c:	f7fc fef0 	bl	8002800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005a20:	1dfb      	adds	r3, r7, #7
 8005a22:	781b      	ldrb	r3, [r3, #0]
}
 8005a24:	0018      	movs	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b002      	add	sp, #8
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a2c:	b590      	push	{r4, r7, lr}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005a34:	230f      	movs	r3, #15
 8005a36:	18fb      	adds	r3, r7, r3
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8005a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ab4 <HAL_InitTick+0x88>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d02b      	beq.n	8005a9c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8005a44:	4b1c      	ldr	r3, [pc, #112]	@ (8005ab8 <HAL_InitTick+0x8c>)
 8005a46:	681c      	ldr	r4, [r3, #0]
 8005a48:	4b1a      	ldr	r3, [pc, #104]	@ (8005ab4 <HAL_InitTick+0x88>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	0019      	movs	r1, r3
 8005a4e:	23fa      	movs	r3, #250	@ 0xfa
 8005a50:	0098      	lsls	r0, r3, #2
 8005a52:	f7fa fb59 	bl	8000108 <__udivsi3>
 8005a56:	0003      	movs	r3, r0
 8005a58:	0019      	movs	r1, r3
 8005a5a:	0020      	movs	r0, r4
 8005a5c:	f7fa fb54 	bl	8000108 <__udivsi3>
 8005a60:	0003      	movs	r3, r0
 8005a62:	0018      	movs	r0, r3
 8005a64:	f001 f9b1 	bl	8006dca <HAL_SYSTICK_Config>
 8005a68:	1e03      	subs	r3, r0, #0
 8005a6a:	d112      	bne.n	8005a92 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d80a      	bhi.n	8005a88 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	2301      	movs	r3, #1
 8005a76:	425b      	negs	r3, r3
 8005a78:	2200      	movs	r2, #0
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	f001 f970 	bl	8006d60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005a80:	4b0e      	ldr	r3, [pc, #56]	@ (8005abc <HAL_InitTick+0x90>)
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	e00d      	b.n	8005aa4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005a88:	230f      	movs	r3, #15
 8005a8a:	18fb      	adds	r3, r7, r3
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	e008      	b.n	8005aa4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005a92:	230f      	movs	r3, #15
 8005a94:	18fb      	adds	r3, r7, r3
 8005a96:	2201      	movs	r2, #1
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	e003      	b.n	8005aa4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005a9c:	230f      	movs	r3, #15
 8005a9e:	18fb      	adds	r3, r7, r3
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005aa4:	230f      	movs	r3, #15
 8005aa6:	18fb      	adds	r3, r7, r3
 8005aa8:	781b      	ldrb	r3, [r3, #0]
}
 8005aaa:	0018      	movs	r0, r3
 8005aac:	46bd      	mov	sp, r7
 8005aae:	b005      	add	sp, #20
 8005ab0:	bd90      	pop	{r4, r7, pc}
 8005ab2:	46c0      	nop			@ (mov r8, r8)
 8005ab4:	2000002c 	.word	0x2000002c
 8005ab8:	20000024 	.word	0x20000024
 8005abc:	20000028 	.word	0x20000028

08005ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005ac4:	4b05      	ldr	r3, [pc, #20]	@ (8005adc <HAL_IncTick+0x1c>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	001a      	movs	r2, r3
 8005aca:	4b05      	ldr	r3, [pc, #20]	@ (8005ae0 <HAL_IncTick+0x20>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	18d2      	adds	r2, r2, r3
 8005ad0:	4b03      	ldr	r3, [pc, #12]	@ (8005ae0 <HAL_IncTick+0x20>)
 8005ad2:	601a      	str	r2, [r3, #0]
}
 8005ad4:	46c0      	nop			@ (mov r8, r8)
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	46c0      	nop			@ (mov r8, r8)
 8005adc:	2000002c 	.word	0x2000002c
 8005ae0:	200005a0 	.word	0x200005a0

08005ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8005ae8:	4b02      	ldr	r3, [pc, #8]	@ (8005af4 <HAL_GetTick+0x10>)
 8005aea:	681b      	ldr	r3, [r3, #0]
}
 8005aec:	0018      	movs	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	46c0      	nop			@ (mov r8, r8)
 8005af4:	200005a0 	.word	0x200005a0

08005af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b00:	f7ff fff0 	bl	8005ae4 <HAL_GetTick>
 8005b04:	0003      	movs	r3, r0
 8005b06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	d005      	beq.n	8005b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b12:	4b0a      	ldr	r3, [pc, #40]	@ (8005b3c <HAL_Delay+0x44>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	001a      	movs	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	189b      	adds	r3, r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b1e:	46c0      	nop			@ (mov r8, r8)
 8005b20:	f7ff ffe0 	bl	8005ae4 <HAL_GetTick>
 8005b24:	0002      	movs	r2, r0
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d8f7      	bhi.n	8005b20 <HAL_Delay+0x28>
  {
  }
}
 8005b30:	46c0      	nop			@ (mov r8, r8)
 8005b32:	46c0      	nop			@ (mov r8, r8)
 8005b34:	46bd      	mov	sp, r7
 8005b36:	b004      	add	sp, #16
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	46c0      	nop			@ (mov r8, r8)
 8005b3c:	2000002c 	.word	0x2000002c

08005b40 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a05      	ldr	r2, [pc, #20]	@ (8005b64 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005b50:	401a      	ands	r2, r3
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	601a      	str	r2, [r3, #0]
}
 8005b5a:	46c0      	nop			@ (mov r8, r8)
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	b002      	add	sp, #8
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	46c0      	nop			@ (mov r8, r8)
 8005b64:	ff3fffff 	.word	0xff3fffff

08005b68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	23c0      	movs	r3, #192	@ 0xc0
 8005b76:	041b      	lsls	r3, r3, #16
 8005b78:	4013      	ands	r3, r2
}
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	b002      	add	sp, #8
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	2104      	movs	r1, #4
 8005b96:	400a      	ands	r2, r1
 8005b98:	2107      	movs	r1, #7
 8005b9a:	4091      	lsls	r1, r2
 8005b9c:	000a      	movs	r2, r1
 8005b9e:	43d2      	mvns	r2, r2
 8005ba0:	401a      	ands	r2, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2104      	movs	r1, #4
 8005ba6:	400b      	ands	r3, r1
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	4099      	lsls	r1, r3
 8005bac:	000b      	movs	r3, r1
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005bb4:	46c0      	nop			@ (mov r8, r8)
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	b004      	add	sp, #16
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	2104      	movs	r1, #4
 8005bce:	400a      	ands	r2, r1
 8005bd0:	2107      	movs	r1, #7
 8005bd2:	4091      	lsls	r1, r2
 8005bd4:	000a      	movs	r2, r1
 8005bd6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2104      	movs	r1, #4
 8005bdc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005bde:	40da      	lsrs	r2, r3
 8005be0:	0013      	movs	r3, r2
}
 8005be2:	0018      	movs	r0, r3
 8005be4:	46bd      	mov	sp, r7
 8005be6:	b002      	add	sp, #8
 8005be8:	bd80      	pop	{r7, pc}

08005bea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b082      	sub	sp, #8
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	23c0      	movs	r3, #192	@ 0xc0
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d101      	bne.n	8005c02 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	0018      	movs	r0, r3
 8005c06:	46bd      	mov	sp, r7
 8005c08:	b002      	add	sp, #8
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	211f      	movs	r1, #31
 8005c20:	400a      	ands	r2, r1
 8005c22:	210f      	movs	r1, #15
 8005c24:	4091      	lsls	r1, r2
 8005c26:	000a      	movs	r2, r1
 8005c28:	43d2      	mvns	r2, r2
 8005c2a:	401a      	ands	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	0e9b      	lsrs	r3, r3, #26
 8005c30:	210f      	movs	r1, #15
 8005c32:	4019      	ands	r1, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	201f      	movs	r0, #31
 8005c38:	4003      	ands	r3, r0
 8005c3a:	4099      	lsls	r1, r3
 8005c3c:	000b      	movs	r3, r1
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005c44:	46c0      	nop			@ (mov r8, r8)
 8005c46:	46bd      	mov	sp, r7
 8005c48:	b004      	add	sp, #16
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	025b      	lsls	r3, r3, #9
 8005c5e:	0a5b      	lsrs	r3, r3, #9
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005c66:	46c0      	nop			@ (mov r8, r8)
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	b002      	add	sp, #8
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b082      	sub	sp, #8
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	0252      	lsls	r2, r2, #9
 8005c80:	0a52      	lsrs	r2, r2, #9
 8005c82:	43d2      	mvns	r2, r2
 8005c84:	401a      	ands	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005c8a:	46c0      	nop			@ (mov r8, r8)
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	b002      	add	sp, #8
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	0212      	lsls	r2, r2, #8
 8005ca8:	43d2      	mvns	r2, r2
 8005caa:	401a      	ands	r2, r3
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	021b      	lsls	r3, r3, #8
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	400b      	ands	r3, r1
 8005cb4:	4904      	ldr	r1, [pc, #16]	@ (8005cc8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8005cb6:	400b      	ands	r3, r1
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005cbe:	46c0      	nop			@ (mov r8, r8)
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	b004      	add	sp, #16
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	46c0      	nop			@ (mov r8, r8)
 8005cc8:	7fffff00 	.word	0x7fffff00

08005ccc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	4a05      	ldr	r2, [pc, #20]	@ (8005cf0 <LL_ADC_EnableInternalRegulator+0x24>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2280      	movs	r2, #128	@ 0x80
 8005cde:	0552      	lsls	r2, r2, #21
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005ce6:	46c0      	nop			@ (mov r8, r8)
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	b002      	add	sp, #8
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	46c0      	nop			@ (mov r8, r8)
 8005cf0:	6fffffe8 	.word	0x6fffffe8

08005cf4 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	4a03      	ldr	r2, [pc, #12]	@ (8005d10 <LL_ADC_DisableInternalRegulator+0x1c>)
 8005d02:	401a      	ands	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	609a      	str	r2, [r3, #8]
}
 8005d08:	46c0      	nop			@ (mov r8, r8)
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	b002      	add	sp, #8
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	6fffffe8 	.word	0x6fffffe8

08005d14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	2380      	movs	r3, #128	@ 0x80
 8005d22:	055b      	lsls	r3, r3, #21
 8005d24:	401a      	ands	r2, r3
 8005d26:	2380      	movs	r3, #128	@ 0x80
 8005d28:	055b      	lsls	r3, r3, #21
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d101      	bne.n	8005d32 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	0018      	movs	r0, r3
 8005d36:	46bd      	mov	sp, r7
 8005d38:	b002      	add	sp, #8
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	4a04      	ldr	r2, [pc, #16]	@ (8005d5c <LL_ADC_Enable+0x20>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005d54:	46c0      	nop			@ (mov r8, r8)
 8005d56:	46bd      	mov	sp, r7
 8005d58:	b002      	add	sp, #8
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	7fffffe8 	.word	0x7fffffe8

08005d60 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	4a04      	ldr	r2, [pc, #16]	@ (8005d80 <LL_ADC_Disable+0x20>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2202      	movs	r2, #2
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005d78:	46c0      	nop			@ (mov r8, r8)
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	b002      	add	sp, #8
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	7fffffe8 	.word	0x7fffffe8

08005d84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	2201      	movs	r2, #1
 8005d92:	4013      	ands	r3, r2
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <LL_ADC_IsEnabled+0x18>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e000      	b.n	8005d9e <LL_ADC_IsEnabled+0x1a>
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	0018      	movs	r0, r3
 8005da0:	46bd      	mov	sp, r7
 8005da2:	b002      	add	sp, #8
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b082      	sub	sp, #8
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	2202      	movs	r2, #2
 8005db4:	4013      	ands	r3, r2
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d101      	bne.n	8005dbe <LL_ADC_IsDisableOngoing+0x18>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <LL_ADC_IsDisableOngoing+0x1a>
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b002      	add	sp, #8
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	4a04      	ldr	r2, [pc, #16]	@ (8005de8 <LL_ADC_REG_StartConversion+0x20>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	2204      	movs	r2, #4
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005de0:	46c0      	nop			@ (mov r8, r8)
 8005de2:	46bd      	mov	sp, r7
 8005de4:	b002      	add	sp, #8
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	7fffffe8 	.word	0x7fffffe8

08005dec <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	4a04      	ldr	r2, [pc, #16]	@ (8005e0c <LL_ADC_REG_StopConversion+0x20>)
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	2210      	movs	r2, #16
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005e04:	46c0      	nop			@ (mov r8, r8)
 8005e06:	46bd      	mov	sp, r7
 8005e08:	b002      	add	sp, #8
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	7fffffe8 	.word	0x7fffffe8

08005e10 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2204      	movs	r2, #4
 8005e1e:	4013      	ands	r3, r2
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d101      	bne.n	8005e28 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e24:	2301      	movs	r3, #1
 8005e26:	e000      	b.n	8005e2a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	b002      	add	sp, #8
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e3c:	231f      	movs	r3, #31
 8005e3e:	18fb      	adds	r3, r7, r3
 8005e40:	2200      	movs	r2, #0
 8005e42:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8005e44:	2300      	movs	r3, #0
 8005e46:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e17e      	b.n	8006158 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10a      	bne.n	8005e78 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	0018      	movs	r0, r3
 8005e66:	f7fc fcef 	bl	8002848 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2254      	movs	r2, #84	@ 0x54
 8005e74:	2100      	movs	r1, #0
 8005e76:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f7ff ff49 	bl	8005d14 <LL_ADC_IsInternalRegulatorEnabled>
 8005e82:	1e03      	subs	r3, r0, #0
 8005e84:	d114      	bne.n	8005eb0 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f7ff ff1e 	bl	8005ccc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005e90:	4bb3      	ldr	r3, [pc, #716]	@ (8006160 <HAL_ADC_Init+0x32c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	49b3      	ldr	r1, [pc, #716]	@ (8006164 <HAL_ADC_Init+0x330>)
 8005e96:	0018      	movs	r0, r3
 8005e98:	f7fa f936 	bl	8000108 <__udivsi3>
 8005e9c:	0003      	movs	r3, r0
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005ea2:	e002      	b.n	8005eaa <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1f9      	bne.n	8005ea4 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f7ff ff2d 	bl	8005d14 <LL_ADC_IsInternalRegulatorEnabled>
 8005eba:	1e03      	subs	r3, r0, #0
 8005ebc:	d10f      	bne.n	8005ede <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec2:	2210      	movs	r2, #16
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ece:	2201      	movs	r2, #1
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ed6:	231f      	movs	r3, #31
 8005ed8:	18fb      	adds	r3, r7, r3
 8005eda:	2201      	movs	r2, #1
 8005edc:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f7ff ff94 	bl	8005e10 <LL_ADC_REG_IsConversionOngoing>
 8005ee8:	0003      	movs	r3, r0
 8005eea:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef0:	2210      	movs	r2, #16
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	d000      	beq.n	8005ef8 <HAL_ADC_Init+0xc4>
 8005ef6:	e122      	b.n	800613e <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d000      	beq.n	8005f00 <HAL_ADC_Init+0xcc>
 8005efe:	e11e      	b.n	800613e <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f04:	4a98      	ldr	r2, [pc, #608]	@ (8006168 <HAL_ADC_Init+0x334>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	2202      	movs	r2, #2
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	0018      	movs	r0, r3
 8005f16:	f7ff ff35 	bl	8005d84 <LL_ADC_IsEnabled>
 8005f1a:	1e03      	subs	r3, r0, #0
 8005f1c:	d000      	beq.n	8005f20 <HAL_ADC_Init+0xec>
 8005f1e:	e0ad      	b.n	800607c <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	7e1b      	ldrb	r3, [r3, #24]
 8005f28:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005f2a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	7e5b      	ldrb	r3, [r3, #25]
 8005f30:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005f32:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	7e9b      	ldrb	r3, [r3, #26]
 8005f38:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005f3a:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <HAL_ADC_Init+0x116>
 8005f44:	2380      	movs	r3, #128	@ 0x80
 8005f46:	015b      	lsls	r3, r3, #5
 8005f48:	e000      	b.n	8005f4c <HAL_ADC_Init+0x118>
 8005f4a:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005f4c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005f52:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	da04      	bge.n	8005f66 <HAL_ADC_Init+0x132>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	085b      	lsrs	r3, r3, #1
 8005f64:	e001      	b.n	8005f6a <HAL_ADC_Init+0x136>
 8005f66:	2380      	movs	r3, #128	@ 0x80
 8005f68:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8005f6a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	212c      	movs	r1, #44	@ 0x2c
 8005f70:	5c5b      	ldrb	r3, [r3, r1]
 8005f72:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005f74:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	5c9b      	ldrb	r3, [r3, r2]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d115      	bne.n	8005fb2 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	7e9b      	ldrb	r3, [r3, #26]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d105      	bne.n	8005f9a <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2280      	movs	r2, #128	@ 0x80
 8005f92:	0252      	lsls	r2, r2, #9
 8005f94:	4313      	orrs	r3, r2
 8005f96:	61bb      	str	r3, [r7, #24]
 8005f98:	e00b      	b.n	8005fb2 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005faa:	2201      	movs	r2, #1
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fbe:	23e0      	movs	r3, #224	@ 0xe0
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	4a65      	ldr	r2, [pc, #404]	@ (800616c <HAL_ADC_Init+0x338>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	0019      	movs	r1, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	0f9b      	lsrs	r3, r3, #30
 8005fec:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	223c      	movs	r2, #60	@ 0x3c
 8005ffe:	5c9b      	ldrb	r3, [r3, r2]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d111      	bne.n	8006028 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	0f9b      	lsrs	r3, r3, #30
 800600a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006010:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8006016:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800601c:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	4313      	orrs	r3, r2
 8006022:	2201      	movs	r2, #1
 8006024:	4313      	orrs	r3, r2
 8006026:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	4a50      	ldr	r2, [pc, #320]	@ (8006170 <HAL_ADC_Init+0x33c>)
 8006030:	4013      	ands	r3, r2
 8006032:	0019      	movs	r1, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	430a      	orrs	r2, r1
 800603c:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	23c0      	movs	r3, #192	@ 0xc0
 8006044:	061b      	lsls	r3, r3, #24
 8006046:	429a      	cmp	r2, r3
 8006048:	d018      	beq.n	800607c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800604e:	2380      	movs	r3, #128	@ 0x80
 8006050:	05db      	lsls	r3, r3, #23
 8006052:	429a      	cmp	r2, r3
 8006054:	d012      	beq.n	800607c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800605a:	2380      	movs	r3, #128	@ 0x80
 800605c:	061b      	lsls	r3, r3, #24
 800605e:	429a      	cmp	r2, r3
 8006060:	d00c      	beq.n	800607c <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8006062:	4b44      	ldr	r3, [pc, #272]	@ (8006174 <HAL_ADC_Init+0x340>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a44      	ldr	r2, [pc, #272]	@ (8006178 <HAL_ADC_Init+0x344>)
 8006068:	4013      	ands	r3, r2
 800606a:	0019      	movs	r1, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	23f0      	movs	r3, #240	@ 0xf0
 8006072:	039b      	lsls	r3, r3, #14
 8006074:	401a      	ands	r2, r3
 8006076:	4b3f      	ldr	r3, [pc, #252]	@ (8006174 <HAL_ADC_Init+0x340>)
 8006078:	430a      	orrs	r2, r1
 800607a:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6818      	ldr	r0, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006084:	001a      	movs	r2, r3
 8006086:	2100      	movs	r1, #0
 8006088:	f7ff fd7b 	bl	8005b82 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6818      	ldr	r0, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006094:	4939      	ldr	r1, [pc, #228]	@ (800617c <HAL_ADC_Init+0x348>)
 8006096:	001a      	movs	r2, r3
 8006098:	f7ff fd73 	bl	8005b82 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d109      	bne.n	80060b8 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2110      	movs	r1, #16
 80060b0:	4249      	negs	r1, r1
 80060b2:	430a      	orrs	r2, r1
 80060b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80060b6:	e018      	b.n	80060ea <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	2380      	movs	r3, #128	@ 0x80
 80060be:	039b      	lsls	r3, r3, #14
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d112      	bne.n	80060ea <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	221c      	movs	r2, #28
 80060d4:	4013      	ands	r3, r2
 80060d6:	2210      	movs	r2, #16
 80060d8:	4252      	negs	r2, r2
 80060da:	409a      	lsls	r2, r3
 80060dc:	0011      	movs	r1, r2
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2100      	movs	r1, #0
 80060f0:	0018      	movs	r0, r3
 80060f2:	f7ff fd63 	bl	8005bbc <LL_ADC_GetSamplingTimeCommonChannels>
 80060f6:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d10b      	bne.n	8006118 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800610a:	2203      	movs	r2, #3
 800610c:	4393      	bics	r3, r2
 800610e:	2201      	movs	r2, #1
 8006110:	431a      	orrs	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006116:	e01c      	b.n	8006152 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800611c:	2212      	movs	r2, #18
 800611e:	4393      	bics	r3, r2
 8006120:	2210      	movs	r2, #16
 8006122:	431a      	orrs	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800612c:	2201      	movs	r2, #1
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8006134:	231f      	movs	r3, #31
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	2201      	movs	r2, #1
 800613a:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800613c:	e009      	b.n	8006152 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006142:	2210      	movs	r2, #16
 8006144:	431a      	orrs	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800614a:	231f      	movs	r3, #31
 800614c:	18fb      	adds	r3, r7, r3
 800614e:	2201      	movs	r2, #1
 8006150:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8006152:	231f      	movs	r3, #31
 8006154:	18fb      	adds	r3, r7, r3
 8006156:	781b      	ldrb	r3, [r3, #0]
}
 8006158:	0018      	movs	r0, r3
 800615a:	46bd      	mov	sp, r7
 800615c:	b008      	add	sp, #32
 800615e:	bd80      	pop	{r7, pc}
 8006160:	20000024 	.word	0x20000024
 8006164:	00030d40 	.word	0x00030d40
 8006168:	fffffefd 	.word	0xfffffefd
 800616c:	ffde0201 	.word	0xffde0201
 8006170:	1ffffc02 	.word	0x1ffffc02
 8006174:	40012708 	.word	0x40012708
 8006178:	ffc3ffff 	.word	0xffc3ffff
 800617c:	7fffff04 	.word	0x7fffff04

08006180 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8006180:	b5b0      	push	{r4, r5, r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e081      	b.n	8006296 <HAL_ADC_DeInit+0x116>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006196:	2202      	movs	r2, #2
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800619e:	250f      	movs	r5, #15
 80061a0:	197c      	adds	r4, r7, r5
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	0018      	movs	r0, r3
 80061a6:	f000 fb6d 	bl	8006884 <ADC_ConversionStop>
 80061aa:	0003      	movs	r3, r0
 80061ac:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80061ae:	197b      	adds	r3, r7, r5
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d112      	bne.n	80061dc <HAL_ADC_DeInit+0x5c>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80061b6:	197c      	adds	r4, r7, r5
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	0018      	movs	r0, r3
 80061bc:	f000 fc1c 	bl	80069f8 <ADC_Disable>
 80061c0:	0003      	movs	r3, r0
 80061c2:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80061c4:	197b      	adds	r3, r7, r5
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d102      	bne.n	80061d2 <HAL_ADC_DeInit+0x52>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	0018      	movs	r0, r3
 80061d8:	f7ff fd8c 	bl	8005cf4 <LL_ADC_DisableInternalRegulator>
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */

  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	492e      	ldr	r1, [pc, #184]	@ (80062a0 <HAL_ADC_DeInit+0x120>)
 80061e8:	400a      	ands	r2, r1
 80061ea:	605a      	str	r2, [r3, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOCAL | ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a2c      	ldr	r2, [pc, #176]	@ (80062a4 <HAL_ADC_DeInit+0x124>)
 80061f2:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH  | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	492a      	ldr	r1, [pc, #168]	@ (80062a8 <HAL_ADC_DeInit+0x128>)
 8006200:	400a      	ands	r2, r1
 8006202:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	0092      	lsls	r2, r2, #2
 8006210:	0892      	lsrs	r2, r2, #2
 8006212:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695a      	ldr	r2, [r3, #20]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2107      	movs	r1, #7
 8006220:	438a      	bics	r2, r1
 8006222:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6a1a      	ldr	r2, [r3, #32]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	491f      	ldr	r1, [pc, #124]	@ (80062ac <HAL_ADC_DeInit+0x12c>)
 8006230:	400a      	ands	r2, r1
 8006232:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	491b      	ldr	r1, [pc, #108]	@ (80062ac <HAL_ADC_DeInit+0x12c>)
 8006240:	400a      	ands	r2, r1
 8006242:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4917      	ldr	r1, [pc, #92]	@ (80062ac <HAL_ADC_DeInit+0x12c>)
 8006250:	400a      	ands	r2, r1
 8006252:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2200      	movs	r2, #0
 8006260:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC1_COMMON->CCR &= ~(ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8006262:	4b13      	ldr	r3, [pc, #76]	@ (80062b0 <HAL_ADC_DeInit+0x130>)
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	4b12      	ldr	r3, [pc, #72]	@ (80062b0 <HAL_ADC_DeInit+0x130>)
 8006268:	4912      	ldr	r1, [pc, #72]	@ (80062b4 <HAL_ADC_DeInit+0x134>)
 800626a:	400a      	ands	r2, r1
 800626c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	0018      	movs	r0, r3
 8006272:	f7fc fb73 	bl	800295c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2254      	movs	r2, #84	@ 0x54
 800628c:	2100      	movs	r1, #0
 800628e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8006290:	230f      	movs	r3, #15
 8006292:	18fb      	adds	r3, r7, r3
 8006294:	781b      	ldrb	r3, [r3, #0]
}
 8006296:	0018      	movs	r0, r3
 8006298:	46bd      	mov	sp, r7
 800629a:	b004      	add	sp, #16
 800629c:	bdb0      	pop	{r4, r5, r7, pc}
 800629e:	46c0      	nop			@ (mov r8, r8)
 80062a0:	fffff460 	.word	0xfffff460
 80062a4:	00000b9f 	.word	0x00000b9f
 80062a8:	831e0200 	.word	0x831e0200
 80062ac:	f000f000 	.word	0xf000f000
 80062b0:	40012708 	.word	0x40012708
 80062b4:	ff03ffff 	.word	0xff03ffff

080062b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80062b8:	b5b0      	push	{r4, r5, r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	0018      	movs	r0, r3
 80062ca:	f7ff fda1 	bl	8005e10 <LL_ADC_REG_IsConversionOngoing>
 80062ce:	1e03      	subs	r3, r0, #0
 80062d0:	d16c      	bne.n	80063ac <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2254      	movs	r2, #84	@ 0x54
 80062d6:	5c9b      	ldrb	r3, [r3, r2]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d101      	bne.n	80062e0 <HAL_ADC_Start_DMA+0x28>
 80062dc:	2302      	movs	r3, #2
 80062de:	e06c      	b.n	80063ba <HAL_ADC_Start_DMA+0x102>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2254      	movs	r2, #84	@ 0x54
 80062e4:	2101      	movs	r1, #1
 80062e6:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	2201      	movs	r2, #1
 80062f0:	4013      	ands	r3, r2
 80062f2:	d113      	bne.n	800631c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	0018      	movs	r0, r3
 80062fa:	f7ff fd43 	bl	8005d84 <LL_ADC_IsEnabled>
 80062fe:	1e03      	subs	r3, r0, #0
 8006300:	d004      	beq.n	800630c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	0018      	movs	r0, r3
 8006308:	f7ff fd2a 	bl	8005d60 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2101      	movs	r1, #1
 8006318:	430a      	orrs	r2, r1
 800631a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800631c:	2517      	movs	r5, #23
 800631e:	197c      	adds	r4, r7, r5
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	0018      	movs	r0, r3
 8006324:	f000 faea 	bl	80068fc <ADC_Enable>
 8006328:	0003      	movs	r3, r0
 800632a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800632c:	002c      	movs	r4, r5
 800632e:	193b      	adds	r3, r7, r4
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d13e      	bne.n	80063b4 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800633a:	4a22      	ldr	r2, [pc, #136]	@ (80063c4 <HAL_ADC_Start_DMA+0x10c>)
 800633c:	4013      	ands	r3, r2
 800633e:	2280      	movs	r2, #128	@ 0x80
 8006340:	0052      	lsls	r2, r2, #1
 8006342:	431a      	orrs	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006352:	4a1d      	ldr	r2, [pc, #116]	@ (80063c8 <HAL_ADC_Start_DMA+0x110>)
 8006354:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800635a:	4a1c      	ldr	r2, [pc, #112]	@ (80063cc <HAL_ADC_Start_DMA+0x114>)
 800635c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006362:	4a1b      	ldr	r2, [pc, #108]	@ (80063d0 <HAL_ADC_Start_DMA+0x118>)
 8006364:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	221c      	movs	r2, #28
 800636c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2254      	movs	r2, #84	@ 0x54
 8006372:	2100      	movs	r1, #0
 8006374:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2110      	movs	r1, #16
 8006382:	430a      	orrs	r2, r1
 8006384:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3340      	adds	r3, #64	@ 0x40
 8006390:	0019      	movs	r1, r3
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	193c      	adds	r4, r7, r4
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f000 fe26 	bl	8006fe8 <HAL_DMA_Start_IT>
 800639c:	0003      	movs	r3, r0
 800639e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	0018      	movs	r0, r3
 80063a6:	f7ff fd0f 	bl	8005dc8 <LL_ADC_REG_StartConversion>
 80063aa:	e003      	b.n	80063b4 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80063ac:	2317      	movs	r3, #23
 80063ae:	18fb      	adds	r3, r7, r3
 80063b0:	2202      	movs	r2, #2
 80063b2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80063b4:	2317      	movs	r3, #23
 80063b6:	18fb      	adds	r3, r7, r3
 80063b8:	781b      	ldrb	r3, [r3, #0]
}
 80063ba:	0018      	movs	r0, r3
 80063bc:	46bd      	mov	sp, r7
 80063be:	b006      	add	sp, #24
 80063c0:	bdb0      	pop	{r4, r5, r7, pc}
 80063c2:	46c0      	nop			@ (mov r8, r8)
 80063c4:	fffff0fe 	.word	0xfffff0fe
 80063c8:	08006aa9 	.word	0x08006aa9
 80063cc:	08006b71 	.word	0x08006b71
 80063d0:	08006b8f 	.word	0x08006b8f

080063d4 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80063d4:	b5b0      	push	{r4, r5, r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2254      	movs	r2, #84	@ 0x54
 80063e0:	5c9b      	ldrb	r3, [r3, r2]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d101      	bne.n	80063ea <HAL_ADC_Stop_DMA+0x16>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e05f      	b.n	80064aa <HAL_ADC_Stop_DMA+0xd6>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2254      	movs	r2, #84	@ 0x54
 80063ee:	2101      	movs	r1, #1
 80063f0:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80063f2:	250f      	movs	r5, #15
 80063f4:	197c      	adds	r4, r7, r5
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	0018      	movs	r0, r3
 80063fa:	f000 fa43 	bl	8006884 <ADC_ConversionStop>
 80063fe:	0003      	movs	r3, r0
 8006400:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006402:	0029      	movs	r1, r5
 8006404:	187b      	adds	r3, r7, r1
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d147      	bne.n	800649c <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006410:	2225      	movs	r2, #37	@ 0x25
 8006412:	5c9b      	ldrb	r3, [r3, r2]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d112      	bne.n	8006440 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800641e:	000d      	movs	r5, r1
 8006420:	187c      	adds	r4, r7, r1
 8006422:	0018      	movs	r0, r3
 8006424:	f000 fe68 	bl	80070f8 <HAL_DMA_Abort>
 8006428:	0003      	movs	r3, r0
 800642a:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800642c:	197b      	adds	r3, r7, r5
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d005      	beq.n	8006440 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006438:	2240      	movs	r2, #64	@ 0x40
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2110      	movs	r1, #16
 800644c:	438a      	bics	r2, r1
 800644e:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006450:	220f      	movs	r2, #15
 8006452:	18bb      	adds	r3, r7, r2
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d107      	bne.n	800646a <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800645a:	18bc      	adds	r4, r7, r2
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	0018      	movs	r0, r3
 8006460:	f000 faca 	bl	80069f8 <ADC_Disable>
 8006464:	0003      	movs	r3, r0
 8006466:	7023      	strb	r3, [r4, #0]
 8006468:	e003      	b.n	8006472 <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	0018      	movs	r0, r3
 800646e:	f000 fac3 	bl	80069f8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006472:	230f      	movs	r3, #15
 8006474:	18fb      	adds	r3, r7, r3
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d107      	bne.n	800648c <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006480:	4a0c      	ldr	r2, [pc, #48]	@ (80064b4 <HAL_ADC_Stop_DMA+0xe0>)
 8006482:	4013      	ands	r3, r2
 8006484:	2201      	movs	r2, #1
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2101      	movs	r1, #1
 8006498:	438a      	bics	r2, r1
 800649a:	60da      	str	r2, [r3, #12]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2254      	movs	r2, #84	@ 0x54
 80064a0:	2100      	movs	r1, #0
 80064a2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80064a4:	230f      	movs	r3, #15
 80064a6:	18fb      	adds	r3, r7, r3
 80064a8:	781b      	ldrb	r3, [r3, #0]
}
 80064aa:	0018      	movs	r0, r3
 80064ac:	46bd      	mov	sp, r7
 80064ae:	b004      	add	sp, #16
 80064b0:	bdb0      	pop	{r4, r5, r7, pc}
 80064b2:	46c0      	nop			@ (mov r8, r8)
 80064b4:	fffffefe 	.word	0xfffffefe

080064b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80064c0:	46c0      	nop			@ (mov r8, r8)
 80064c2:	46bd      	mov	sp, r7
 80064c4:	b002      	add	sp, #8
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80064d0:	46c0      	nop			@ (mov r8, r8)
 80064d2:	46bd      	mov	sp, r7
 80064d4:	b002      	add	sp, #8
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064e2:	2317      	movs	r3, #23
 80064e4:	18fb      	adds	r3, r7, r3
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2254      	movs	r2, #84	@ 0x54
 80064f2:	5c9b      	ldrb	r3, [r3, r2]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d101      	bne.n	80064fc <HAL_ADC_ConfigChannel+0x24>
 80064f8:	2302      	movs	r3, #2
 80064fa:	e1be      	b.n	800687a <HAL_ADC_ConfigChannel+0x3a2>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2254      	movs	r2, #84	@ 0x54
 8006500:	2101      	movs	r1, #1
 8006502:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	0018      	movs	r0, r3
 800650a:	f7ff fc81 	bl	8005e10 <LL_ADC_REG_IsConversionOngoing>
 800650e:	1e03      	subs	r3, r0, #0
 8006510:	d000      	beq.n	8006514 <HAL_ADC_ConfigChannel+0x3c>
 8006512:	e1a1      	b.n	8006858 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	2b02      	cmp	r3, #2
 800651a:	d100      	bne.n	800651e <HAL_ADC_ConfigChannel+0x46>
 800651c:	e152      	b.n	80067c4 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	2380      	movs	r3, #128	@ 0x80
 8006524:	061b      	lsls	r3, r3, #24
 8006526:	429a      	cmp	r2, r3
 8006528:	d004      	beq.n	8006534 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800652e:	4ac2      	ldr	r2, [pc, #776]	@ (8006838 <HAL_ADC_ConfigChannel+0x360>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d108      	bne.n	8006546 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	0019      	movs	r1, r3
 800653e:	0010      	movs	r0, r2
 8006540:	f7ff fb84 	bl	8005c4c <LL_ADC_REG_SetSequencerChAdd>
 8006544:	e0ed      	b.n	8006722 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	211f      	movs	r1, #31
 8006550:	400b      	ands	r3, r1
 8006552:	210f      	movs	r1, #15
 8006554:	4099      	lsls	r1, r3
 8006556:	000b      	movs	r3, r1
 8006558:	43db      	mvns	r3, r3
 800655a:	4013      	ands	r3, r2
 800655c:	0019      	movs	r1, r3
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	025b      	lsls	r3, r3, #9
 8006564:	0a5b      	lsrs	r3, r3, #9
 8006566:	d105      	bne.n	8006574 <HAL_ADC_ConfigChannel+0x9c>
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	0e9b      	lsrs	r3, r3, #26
 800656e:	221f      	movs	r2, #31
 8006570:	4013      	ands	r3, r2
 8006572:	e0bc      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2201      	movs	r2, #1
 800657a:	4013      	ands	r3, r2
 800657c:	d000      	beq.n	8006580 <HAL_ADC_ConfigChannel+0xa8>
 800657e:	e0b5      	b.n	80066ec <HAL_ADC_ConfigChannel+0x214>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2202      	movs	r2, #2
 8006586:	4013      	ands	r3, r2
 8006588:	d000      	beq.n	800658c <HAL_ADC_ConfigChannel+0xb4>
 800658a:	e0ad      	b.n	80066e8 <HAL_ADC_ConfigChannel+0x210>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2204      	movs	r2, #4
 8006592:	4013      	ands	r3, r2
 8006594:	d000      	beq.n	8006598 <HAL_ADC_ConfigChannel+0xc0>
 8006596:	e0a5      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x20c>
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2208      	movs	r2, #8
 800659e:	4013      	ands	r3, r2
 80065a0:	d000      	beq.n	80065a4 <HAL_ADC_ConfigChannel+0xcc>
 80065a2:	e09d      	b.n	80066e0 <HAL_ADC_ConfigChannel+0x208>
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2210      	movs	r2, #16
 80065aa:	4013      	ands	r3, r2
 80065ac:	d000      	beq.n	80065b0 <HAL_ADC_ConfigChannel+0xd8>
 80065ae:	e095      	b.n	80066dc <HAL_ADC_ConfigChannel+0x204>
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2220      	movs	r2, #32
 80065b6:	4013      	ands	r3, r2
 80065b8:	d000      	beq.n	80065bc <HAL_ADC_ConfigChannel+0xe4>
 80065ba:	e08d      	b.n	80066d8 <HAL_ADC_ConfigChannel+0x200>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2240      	movs	r2, #64	@ 0x40
 80065c2:	4013      	ands	r3, r2
 80065c4:	d000      	beq.n	80065c8 <HAL_ADC_ConfigChannel+0xf0>
 80065c6:	e085      	b.n	80066d4 <HAL_ADC_ConfigChannel+0x1fc>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2280      	movs	r2, #128	@ 0x80
 80065ce:	4013      	ands	r3, r2
 80065d0:	d000      	beq.n	80065d4 <HAL_ADC_ConfigChannel+0xfc>
 80065d2:	e07d      	b.n	80066d0 <HAL_ADC_ConfigChannel+0x1f8>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	2380      	movs	r3, #128	@ 0x80
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	4013      	ands	r3, r2
 80065de:	d000      	beq.n	80065e2 <HAL_ADC_ConfigChannel+0x10a>
 80065e0:	e074      	b.n	80066cc <HAL_ADC_ConfigChannel+0x1f4>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	2380      	movs	r3, #128	@ 0x80
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4013      	ands	r3, r2
 80065ec:	d000      	beq.n	80065f0 <HAL_ADC_ConfigChannel+0x118>
 80065ee:	e06b      	b.n	80066c8 <HAL_ADC_ConfigChannel+0x1f0>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	2380      	movs	r3, #128	@ 0x80
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	4013      	ands	r3, r2
 80065fa:	d000      	beq.n	80065fe <HAL_ADC_ConfigChannel+0x126>
 80065fc:	e062      	b.n	80066c4 <HAL_ADC_ConfigChannel+0x1ec>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	2380      	movs	r3, #128	@ 0x80
 8006604:	011b      	lsls	r3, r3, #4
 8006606:	4013      	ands	r3, r2
 8006608:	d000      	beq.n	800660c <HAL_ADC_ConfigChannel+0x134>
 800660a:	e059      	b.n	80066c0 <HAL_ADC_ConfigChannel+0x1e8>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	2380      	movs	r3, #128	@ 0x80
 8006612:	015b      	lsls	r3, r3, #5
 8006614:	4013      	ands	r3, r2
 8006616:	d151      	bne.n	80066bc <HAL_ADC_ConfigChannel+0x1e4>
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	2380      	movs	r3, #128	@ 0x80
 800661e:	019b      	lsls	r3, r3, #6
 8006620:	4013      	ands	r3, r2
 8006622:	d149      	bne.n	80066b8 <HAL_ADC_ConfigChannel+0x1e0>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	2380      	movs	r3, #128	@ 0x80
 800662a:	01db      	lsls	r3, r3, #7
 800662c:	4013      	ands	r3, r2
 800662e:	d141      	bne.n	80066b4 <HAL_ADC_ConfigChannel+0x1dc>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	2380      	movs	r3, #128	@ 0x80
 8006636:	021b      	lsls	r3, r3, #8
 8006638:	4013      	ands	r3, r2
 800663a:	d139      	bne.n	80066b0 <HAL_ADC_ConfigChannel+0x1d8>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	2380      	movs	r3, #128	@ 0x80
 8006642:	025b      	lsls	r3, r3, #9
 8006644:	4013      	ands	r3, r2
 8006646:	d131      	bne.n	80066ac <HAL_ADC_ConfigChannel+0x1d4>
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	2380      	movs	r3, #128	@ 0x80
 800664e:	029b      	lsls	r3, r3, #10
 8006650:	4013      	ands	r3, r2
 8006652:	d129      	bne.n	80066a8 <HAL_ADC_ConfigChannel+0x1d0>
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	2380      	movs	r3, #128	@ 0x80
 800665a:	02db      	lsls	r3, r3, #11
 800665c:	4013      	ands	r3, r2
 800665e:	d121      	bne.n	80066a4 <HAL_ADC_ConfigChannel+0x1cc>
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	2380      	movs	r3, #128	@ 0x80
 8006666:	031b      	lsls	r3, r3, #12
 8006668:	4013      	ands	r3, r2
 800666a:	d119      	bne.n	80066a0 <HAL_ADC_ConfigChannel+0x1c8>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	2380      	movs	r3, #128	@ 0x80
 8006672:	035b      	lsls	r3, r3, #13
 8006674:	4013      	ands	r3, r2
 8006676:	d111      	bne.n	800669c <HAL_ADC_ConfigChannel+0x1c4>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	2380      	movs	r3, #128	@ 0x80
 800667e:	039b      	lsls	r3, r3, #14
 8006680:	4013      	ands	r3, r2
 8006682:	d109      	bne.n	8006698 <HAL_ADC_ConfigChannel+0x1c0>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	2380      	movs	r3, #128	@ 0x80
 800668a:	03db      	lsls	r3, r3, #15
 800668c:	4013      	ands	r3, r2
 800668e:	d001      	beq.n	8006694 <HAL_ADC_ConfigChannel+0x1bc>
 8006690:	2316      	movs	r3, #22
 8006692:	e02c      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 8006694:	2300      	movs	r3, #0
 8006696:	e02a      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 8006698:	2315      	movs	r3, #21
 800669a:	e028      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 800669c:	2314      	movs	r3, #20
 800669e:	e026      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066a0:	2313      	movs	r3, #19
 80066a2:	e024      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066a4:	2312      	movs	r3, #18
 80066a6:	e022      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066a8:	2311      	movs	r3, #17
 80066aa:	e020      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066ac:	2310      	movs	r3, #16
 80066ae:	e01e      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066b0:	230f      	movs	r3, #15
 80066b2:	e01c      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066b4:	230e      	movs	r3, #14
 80066b6:	e01a      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066b8:	230d      	movs	r3, #13
 80066ba:	e018      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066bc:	230c      	movs	r3, #12
 80066be:	e016      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066c0:	230b      	movs	r3, #11
 80066c2:	e014      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066c4:	230a      	movs	r3, #10
 80066c6:	e012      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066c8:	2309      	movs	r3, #9
 80066ca:	e010      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066cc:	2308      	movs	r3, #8
 80066ce:	e00e      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066d0:	2307      	movs	r3, #7
 80066d2:	e00c      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066d4:	2306      	movs	r3, #6
 80066d6:	e00a      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066d8:	2305      	movs	r3, #5
 80066da:	e008      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066dc:	2304      	movs	r3, #4
 80066de:	e006      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066e0:	2303      	movs	r3, #3
 80066e2:	e004      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066e4:	2302      	movs	r3, #2
 80066e6:	e002      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066e8:	2301      	movs	r3, #1
 80066ea:	e000      	b.n	80066ee <HAL_ADC_ConfigChannel+0x216>
 80066ec:	2300      	movs	r3, #0
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	6852      	ldr	r2, [r2, #4]
 80066f2:	201f      	movs	r0, #31
 80066f4:	4002      	ands	r2, r0
 80066f6:	4093      	lsls	r3, r2
 80066f8:	000a      	movs	r2, r1
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	089b      	lsrs	r3, r3, #2
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	429a      	cmp	r2, r3
 800670e:	d808      	bhi.n	8006722 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6818      	ldr	r0, [r3, #0]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	6859      	ldr	r1, [r3, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	001a      	movs	r2, r3
 800671e:	f7ff fa75 	bl	8005c0c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6818      	ldr	r0, [r3, #0]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	6819      	ldr	r1, [r3, #0]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	001a      	movs	r2, r3
 8006730:	f7ff fab0 	bl	8005c94 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	db00      	blt.n	800673e <HAL_ADC_ConfigChannel+0x266>
 800673c:	e096      	b.n	800686c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800673e:	4b3f      	ldr	r3, [pc, #252]	@ (800683c <HAL_ADC_ConfigChannel+0x364>)
 8006740:	0018      	movs	r0, r3
 8006742:	f7ff fa11 	bl	8005b68 <LL_ADC_GetCommonPathInternalCh>
 8006746:	0003      	movs	r3, r0
 8006748:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a3c      	ldr	r2, [pc, #240]	@ (8006840 <HAL_ADC_ConfigChannel+0x368>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d123      	bne.n	800679c <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	2380      	movs	r3, #128	@ 0x80
 8006758:	041b      	lsls	r3, r3, #16
 800675a:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800675c:	d11e      	bne.n	800679c <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	2280      	movs	r2, #128	@ 0x80
 8006762:	0412      	lsls	r2, r2, #16
 8006764:	4313      	orrs	r3, r2
 8006766:	4a35      	ldr	r2, [pc, #212]	@ (800683c <HAL_ADC_ConfigChannel+0x364>)
 8006768:	0019      	movs	r1, r3
 800676a:	0010      	movs	r0, r2
 800676c:	f7ff f9e8 	bl	8005b40 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8006770:	4b34      	ldr	r3, [pc, #208]	@ (8006844 <HAL_ADC_ConfigChannel+0x36c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4934      	ldr	r1, [pc, #208]	@ (8006848 <HAL_ADC_ConfigChannel+0x370>)
 8006776:	0018      	movs	r0, r3
 8006778:	f7f9 fcc6 	bl	8000108 <__udivsi3>
 800677c:	0003      	movs	r3, r0
 800677e:	001a      	movs	r2, r3
 8006780:	0013      	movs	r3, r2
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	189b      	adds	r3, r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	3301      	adds	r3, #1
 800678a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800678c:	e002      	b.n	8006794 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3b01      	subs	r3, #1
 8006792:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f9      	bne.n	800678e <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800679a:	e067      	b.n	800686c <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a2a      	ldr	r2, [pc, #168]	@ (800684c <HAL_ADC_ConfigChannel+0x374>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d162      	bne.n	800686c <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	2380      	movs	r3, #128	@ 0x80
 80067aa:	03db      	lsls	r3, r3, #15
 80067ac:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80067ae:	d15d      	bne.n	800686c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	2280      	movs	r2, #128	@ 0x80
 80067b4:	03d2      	lsls	r2, r2, #15
 80067b6:	4313      	orrs	r3, r2
 80067b8:	4a20      	ldr	r2, [pc, #128]	@ (800683c <HAL_ADC_ConfigChannel+0x364>)
 80067ba:	0019      	movs	r1, r3
 80067bc:	0010      	movs	r0, r2
 80067be:	f7ff f9bf 	bl	8005b40 <LL_ADC_SetCommonPathInternalCh>
 80067c2:	e053      	b.n	800686c <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	691a      	ldr	r2, [r3, #16]
 80067c8:	2380      	movs	r3, #128	@ 0x80
 80067ca:	061b      	lsls	r3, r3, #24
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d004      	beq.n	80067da <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80067d4:	4a18      	ldr	r2, [pc, #96]	@ (8006838 <HAL_ADC_ConfigChannel+0x360>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d107      	bne.n	80067ea <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	0019      	movs	r1, r3
 80067e4:	0010      	movs	r0, r2
 80067e6:	f7ff fa42 	bl	8005c6e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	da3c      	bge.n	800686c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067f2:	4b12      	ldr	r3, [pc, #72]	@ (800683c <HAL_ADC_ConfigChannel+0x364>)
 80067f4:	0018      	movs	r0, r3
 80067f6:	f7ff f9b7 	bl	8005b68 <LL_ADC_GetCommonPathInternalCh>
 80067fa:	0003      	movs	r3, r0
 80067fc:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a0f      	ldr	r2, [pc, #60]	@ (8006840 <HAL_ADC_ConfigChannel+0x368>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d108      	bne.n	800681a <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	4a11      	ldr	r2, [pc, #68]	@ (8006850 <HAL_ADC_ConfigChannel+0x378>)
 800680c:	4013      	ands	r3, r2
 800680e:	4a0b      	ldr	r2, [pc, #44]	@ (800683c <HAL_ADC_ConfigChannel+0x364>)
 8006810:	0019      	movs	r1, r3
 8006812:	0010      	movs	r0, r2
 8006814:	f7ff f994 	bl	8005b40 <LL_ADC_SetCommonPathInternalCh>
 8006818:	e028      	b.n	800686c <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a0b      	ldr	r2, [pc, #44]	@ (800684c <HAL_ADC_ConfigChannel+0x374>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d123      	bne.n	800686c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	4a0b      	ldr	r2, [pc, #44]	@ (8006854 <HAL_ADC_ConfigChannel+0x37c>)
 8006828:	4013      	ands	r3, r2
 800682a:	4a04      	ldr	r2, [pc, #16]	@ (800683c <HAL_ADC_ConfigChannel+0x364>)
 800682c:	0019      	movs	r1, r3
 800682e:	0010      	movs	r0, r2
 8006830:	f7ff f986 	bl	8005b40 <LL_ADC_SetCommonPathInternalCh>
 8006834:	e01a      	b.n	800686c <HAL_ADC_ConfigChannel+0x394>
 8006836:	46c0      	nop			@ (mov r8, r8)
 8006838:	80000004 	.word	0x80000004
 800683c:	40012708 	.word	0x40012708
 8006840:	a4000200 	.word	0xa4000200
 8006844:	20000024 	.word	0x20000024
 8006848:	00030d40 	.word	0x00030d40
 800684c:	a8000400 	.word	0xa8000400
 8006850:	ff7fffff 	.word	0xff7fffff
 8006854:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800685c:	2220      	movs	r2, #32
 800685e:	431a      	orrs	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006864:	2317      	movs	r3, #23
 8006866:	18fb      	adds	r3, r7, r3
 8006868:	2201      	movs	r2, #1
 800686a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2254      	movs	r2, #84	@ 0x54
 8006870:	2100      	movs	r1, #0
 8006872:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8006874:	2317      	movs	r3, #23
 8006876:	18fb      	adds	r3, r7, r3
 8006878:	781b      	ldrb	r3, [r3, #0]
}
 800687a:	0018      	movs	r0, r3
 800687c:	46bd      	mov	sp, r7
 800687e:	b006      	add	sp, #24
 8006880:	bd80      	pop	{r7, pc}
 8006882:	46c0      	nop			@ (mov r8, r8)

08006884 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	0018      	movs	r0, r3
 8006892:	f7ff fabd 	bl	8005e10 <LL_ADC_REG_IsConversionOngoing>
 8006896:	1e03      	subs	r3, r0, #0
 8006898:	d02b      	beq.n	80068f2 <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	0018      	movs	r0, r3
 80068a0:	f7ff fa81 	bl	8005da6 <LL_ADC_IsDisableOngoing>
 80068a4:	1e03      	subs	r3, r0, #0
 80068a6:	d104      	bne.n	80068b2 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	0018      	movs	r0, r3
 80068ae:	f7ff fa9d 	bl	8005dec <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80068b2:	f7ff f917 	bl	8005ae4 <HAL_GetTick>
 80068b6:	0003      	movs	r3, r0
 80068b8:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80068ba:	e014      	b.n	80068e6 <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80068bc:	f7ff f912 	bl	8005ae4 <HAL_GetTick>
 80068c0:	0002      	movs	r2, r0
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d90d      	bls.n	80068e6 <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ce:	2210      	movs	r2, #16
 80068d0:	431a      	orrs	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068da:	2201      	movs	r2, #1
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e006      	b.n	80068f4 <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	2204      	movs	r2, #4
 80068ee:	4013      	ands	r3, r2
 80068f0:	d1e4      	bne.n	80068bc <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	0018      	movs	r0, r3
 80068f6:	46bd      	mov	sp, r7
 80068f8:	b004      	add	sp, #16
 80068fa:	bd80      	pop	{r7, pc}

080068fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006904:	2300      	movs	r3, #0
 8006906:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	0018      	movs	r0, r3
 800690e:	f7ff fa39 	bl	8005d84 <LL_ADC_IsEnabled>
 8006912:	1e03      	subs	r3, r0, #0
 8006914:	d162      	bne.n	80069dc <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	4a32      	ldr	r2, [pc, #200]	@ (80069e8 <ADC_Enable+0xec>)
 800691e:	4013      	ands	r3, r2
 8006920:	d00d      	beq.n	800693e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006926:	2210      	movs	r2, #16
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006932:	2201      	movs	r2, #1
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e04f      	b.n	80069de <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	0018      	movs	r0, r3
 8006944:	f7ff f9fa 	bl	8005d3c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8006948:	4b28      	ldr	r3, [pc, #160]	@ (80069ec <ADC_Enable+0xf0>)
 800694a:	0018      	movs	r0, r3
 800694c:	f7ff f90c 	bl	8005b68 <LL_ADC_GetCommonPathInternalCh>
 8006950:	0002      	movs	r2, r0
 8006952:	2380      	movs	r3, #128	@ 0x80
 8006954:	041b      	lsls	r3, r3, #16
 8006956:	4013      	ands	r3, r2
 8006958:	d00f      	beq.n	800697a <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800695a:	4b25      	ldr	r3, [pc, #148]	@ (80069f0 <ADC_Enable+0xf4>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4925      	ldr	r1, [pc, #148]	@ (80069f4 <ADC_Enable+0xf8>)
 8006960:	0018      	movs	r0, r3
 8006962:	f7f9 fbd1 	bl	8000108 <__udivsi3>
 8006966:	0003      	movs	r3, r0
 8006968:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800696a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800696c:	e002      	b.n	8006974 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	3b01      	subs	r3, #1
 8006972:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1f9      	bne.n	800696e <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	7e5b      	ldrb	r3, [r3, #25]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d02c      	beq.n	80069dc <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006982:	f7ff f8af 	bl	8005ae4 <HAL_GetTick>
 8006986:	0003      	movs	r3, r0
 8006988:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800698a:	e020      	b.n	80069ce <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	0018      	movs	r0, r3
 8006992:	f7ff f9f7 	bl	8005d84 <LL_ADC_IsEnabled>
 8006996:	1e03      	subs	r3, r0, #0
 8006998:	d104      	bne.n	80069a4 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	0018      	movs	r0, r3
 80069a0:	f7ff f9cc 	bl	8005d3c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80069a4:	f7ff f89e 	bl	8005ae4 <HAL_GetTick>
 80069a8:	0002      	movs	r2, r0
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d90d      	bls.n	80069ce <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069b6:	2210      	movs	r2, #16
 80069b8:	431a      	orrs	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069c2:	2201      	movs	r2, #1
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e007      	b.n	80069de <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2201      	movs	r2, #1
 80069d6:	4013      	ands	r3, r2
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d1d7      	bne.n	800698c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	0018      	movs	r0, r3
 80069e0:	46bd      	mov	sp, r7
 80069e2:	b004      	add	sp, #16
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	46c0      	nop			@ (mov r8, r8)
 80069e8:	80000017 	.word	0x80000017
 80069ec:	40012708 	.word	0x40012708
 80069f0:	20000024 	.word	0x20000024
 80069f4:	00030d40 	.word	0x00030d40

080069f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	0018      	movs	r0, r3
 8006a06:	f7ff f9ce 	bl	8005da6 <LL_ADC_IsDisableOngoing>
 8006a0a:	0003      	movs	r3, r0
 8006a0c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	0018      	movs	r0, r3
 8006a14:	f7ff f9b6 	bl	8005d84 <LL_ADC_IsEnabled>
 8006a18:	1e03      	subs	r3, r0, #0
 8006a1a:	d040      	beq.n	8006a9e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d13d      	bne.n	8006a9e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	2205      	movs	r2, #5
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d10d      	bne.n	8006a4c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	0018      	movs	r0, r3
 8006a36:	f7ff f993 	bl	8005d60 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2203      	movs	r2, #3
 8006a40:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006a42:	f7ff f84f 	bl	8005ae4 <HAL_GetTick>
 8006a46:	0003      	movs	r3, r0
 8006a48:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a4a:	e022      	b.n	8006a92 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a50:	2210      	movs	r2, #16
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e01b      	b.n	8006aa0 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006a68:	f7ff f83c 	bl	8005ae4 <HAL_GetTick>
 8006a6c:	0002      	movs	r2, r0
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d90d      	bls.n	8006a92 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a7a:	2210      	movs	r2, #16
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a86:	2201      	movs	r2, #1
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e006      	b.n	8006aa0 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	d1e4      	bne.n	8006a68 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	b004      	add	sp, #16
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aba:	2250      	movs	r2, #80	@ 0x50
 8006abc:	4013      	ands	r3, r2
 8006abe:	d141      	bne.n	8006b44 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ac4:	2280      	movs	r2, #128	@ 0x80
 8006ac6:	0092      	lsls	r2, r2, #2
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	f7ff f889 	bl	8005bea <LL_ADC_REG_IsTriggerSourceSWStart>
 8006ad8:	1e03      	subs	r3, r0, #0
 8006ada:	d02e      	beq.n	8006b3a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	7e9b      	ldrb	r3, [r3, #26]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d12a      	bne.n	8006b3a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2208      	movs	r2, #8
 8006aec:	4013      	ands	r3, r2
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	d123      	bne.n	8006b3a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	0018      	movs	r0, r3
 8006af8:	f7ff f98a 	bl	8005e10 <LL_ADC_REG_IsConversionOngoing>
 8006afc:	1e03      	subs	r3, r0, #0
 8006afe:	d110      	bne.n	8006b22 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	210c      	movs	r1, #12
 8006b0c:	438a      	bics	r2, r1
 8006b0e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b14:	4a15      	ldr	r2, [pc, #84]	@ (8006b6c <ADC_DMAConvCplt+0xc4>)
 8006b16:	4013      	ands	r3, r2
 8006b18:	2201      	movs	r2, #1
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006b20:	e00b      	b.n	8006b3a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b26:	2220      	movs	r2, #32
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b32:	2201      	movs	r2, #1
 8006b34:	431a      	orrs	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	f7ff fcbb 	bl	80064b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006b42:	e00f      	b.n	8006b64 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b48:	2210      	movs	r2, #16
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	d004      	beq.n	8006b58 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	0018      	movs	r0, r3
 8006b52:	f7fa fac3 	bl	80010dc <HAL_ADC_ErrorCallback>
}
 8006b56:	e005      	b.n	8006b64 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	0010      	movs	r0, r2
 8006b62:	4798      	blx	r3
}
 8006b64:	46c0      	nop			@ (mov r8, r8)
 8006b66:	46bd      	mov	sp, r7
 8006b68:	b004      	add	sp, #16
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	fffffefe 	.word	0xfffffefe

08006b70 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	0018      	movs	r0, r3
 8006b82:	f7ff fca1 	bl	80064c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b86:	46c0      	nop			@ (mov r8, r8)
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	b004      	add	sp, #16
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba0:	2240      	movs	r2, #64	@ 0x40
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bac:	2204      	movs	r2, #4
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	f7fa fa90 	bl	80010dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006bbc:	46c0      	nop			@ (mov r8, r8)
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	b004      	add	sp, #16
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	0002      	movs	r2, r0
 8006bcc:	1dfb      	adds	r3, r7, #7
 8006bce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006bd0:	1dfb      	adds	r3, r7, #7
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bd6:	d809      	bhi.n	8006bec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bd8:	1dfb      	adds	r3, r7, #7
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	001a      	movs	r2, r3
 8006bde:	231f      	movs	r3, #31
 8006be0:	401a      	ands	r2, r3
 8006be2:	4b04      	ldr	r3, [pc, #16]	@ (8006bf4 <__NVIC_EnableIRQ+0x30>)
 8006be4:	2101      	movs	r1, #1
 8006be6:	4091      	lsls	r1, r2
 8006be8:	000a      	movs	r2, r1
 8006bea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006bec:	46c0      	nop			@ (mov r8, r8)
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	b002      	add	sp, #8
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	e000e100 	.word	0xe000e100

08006bf8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	0002      	movs	r2, r0
 8006c00:	1dfb      	adds	r3, r7, #7
 8006c02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006c04:	1dfb      	adds	r3, r7, #7
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c0a:	d810      	bhi.n	8006c2e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c0c:	1dfb      	adds	r3, r7, #7
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	001a      	movs	r2, r3
 8006c12:	231f      	movs	r3, #31
 8006c14:	4013      	ands	r3, r2
 8006c16:	4908      	ldr	r1, [pc, #32]	@ (8006c38 <__NVIC_DisableIRQ+0x40>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	409a      	lsls	r2, r3
 8006c1c:	0013      	movs	r3, r2
 8006c1e:	2280      	movs	r2, #128	@ 0x80
 8006c20:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006c22:	f3bf 8f4f 	dsb	sy
}
 8006c26:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8006c28:	f3bf 8f6f 	isb	sy
}
 8006c2c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8006c2e:	46c0      	nop			@ (mov r8, r8)
 8006c30:	46bd      	mov	sp, r7
 8006c32:	b002      	add	sp, #8
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	46c0      	nop			@ (mov r8, r8)
 8006c38:	e000e100 	.word	0xe000e100

08006c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c3c:	b590      	push	{r4, r7, lr}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	0002      	movs	r2, r0
 8006c44:	6039      	str	r1, [r7, #0]
 8006c46:	1dfb      	adds	r3, r7, #7
 8006c48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006c4a:	1dfb      	adds	r3, r7, #7
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c50:	d828      	bhi.n	8006ca4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006c52:	4a2f      	ldr	r2, [pc, #188]	@ (8006d10 <__NVIC_SetPriority+0xd4>)
 8006c54:	1dfb      	adds	r3, r7, #7
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	b25b      	sxtb	r3, r3
 8006c5a:	089b      	lsrs	r3, r3, #2
 8006c5c:	33c0      	adds	r3, #192	@ 0xc0
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	589b      	ldr	r3, [r3, r2]
 8006c62:	1dfa      	adds	r2, r7, #7
 8006c64:	7812      	ldrb	r2, [r2, #0]
 8006c66:	0011      	movs	r1, r2
 8006c68:	2203      	movs	r2, #3
 8006c6a:	400a      	ands	r2, r1
 8006c6c:	00d2      	lsls	r2, r2, #3
 8006c6e:	21ff      	movs	r1, #255	@ 0xff
 8006c70:	4091      	lsls	r1, r2
 8006c72:	000a      	movs	r2, r1
 8006c74:	43d2      	mvns	r2, r2
 8006c76:	401a      	ands	r2, r3
 8006c78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	019b      	lsls	r3, r3, #6
 8006c7e:	22ff      	movs	r2, #255	@ 0xff
 8006c80:	401a      	ands	r2, r3
 8006c82:	1dfb      	adds	r3, r7, #7
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	0018      	movs	r0, r3
 8006c88:	2303      	movs	r3, #3
 8006c8a:	4003      	ands	r3, r0
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006c90:	481f      	ldr	r0, [pc, #124]	@ (8006d10 <__NVIC_SetPriority+0xd4>)
 8006c92:	1dfb      	adds	r3, r7, #7
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	b25b      	sxtb	r3, r3
 8006c98:	089b      	lsrs	r3, r3, #2
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	33c0      	adds	r3, #192	@ 0xc0
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006ca2:	e031      	b.n	8006d08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8006d14 <__NVIC_SetPriority+0xd8>)
 8006ca6:	1dfb      	adds	r3, r7, #7
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	0019      	movs	r1, r3
 8006cac:	230f      	movs	r3, #15
 8006cae:	400b      	ands	r3, r1
 8006cb0:	3b08      	subs	r3, #8
 8006cb2:	089b      	lsrs	r3, r3, #2
 8006cb4:	3306      	adds	r3, #6
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	18d3      	adds	r3, r2, r3
 8006cba:	3304      	adds	r3, #4
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	1dfa      	adds	r2, r7, #7
 8006cc0:	7812      	ldrb	r2, [r2, #0]
 8006cc2:	0011      	movs	r1, r2
 8006cc4:	2203      	movs	r2, #3
 8006cc6:	400a      	ands	r2, r1
 8006cc8:	00d2      	lsls	r2, r2, #3
 8006cca:	21ff      	movs	r1, #255	@ 0xff
 8006ccc:	4091      	lsls	r1, r2
 8006cce:	000a      	movs	r2, r1
 8006cd0:	43d2      	mvns	r2, r2
 8006cd2:	401a      	ands	r2, r3
 8006cd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	019b      	lsls	r3, r3, #6
 8006cda:	22ff      	movs	r2, #255	@ 0xff
 8006cdc:	401a      	ands	r2, r3
 8006cde:	1dfb      	adds	r3, r7, #7
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	4003      	ands	r3, r0
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006cec:	4809      	ldr	r0, [pc, #36]	@ (8006d14 <__NVIC_SetPriority+0xd8>)
 8006cee:	1dfb      	adds	r3, r7, #7
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	001c      	movs	r4, r3
 8006cf4:	230f      	movs	r3, #15
 8006cf6:	4023      	ands	r3, r4
 8006cf8:	3b08      	subs	r3, #8
 8006cfa:	089b      	lsrs	r3, r3, #2
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	3306      	adds	r3, #6
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	18c3      	adds	r3, r0, r3
 8006d04:	3304      	adds	r3, #4
 8006d06:	601a      	str	r2, [r3, #0]
}
 8006d08:	46c0      	nop			@ (mov r8, r8)
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	b003      	add	sp, #12
 8006d0e:	bd90      	pop	{r4, r7, pc}
 8006d10:	e000e100 	.word	0xe000e100
 8006d14:	e000ed00 	.word	0xe000ed00

08006d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	1e5a      	subs	r2, r3, #1
 8006d24:	2380      	movs	r3, #128	@ 0x80
 8006d26:	045b      	lsls	r3, r3, #17
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d301      	bcc.n	8006d30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e010      	b.n	8006d52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d30:	4b0a      	ldr	r3, [pc, #40]	@ (8006d5c <SysTick_Config+0x44>)
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	3a01      	subs	r2, #1
 8006d36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d38:	2301      	movs	r3, #1
 8006d3a:	425b      	negs	r3, r3
 8006d3c:	2103      	movs	r1, #3
 8006d3e:	0018      	movs	r0, r3
 8006d40:	f7ff ff7c 	bl	8006c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d44:	4b05      	ldr	r3, [pc, #20]	@ (8006d5c <SysTick_Config+0x44>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d4a:	4b04      	ldr	r3, [pc, #16]	@ (8006d5c <SysTick_Config+0x44>)
 8006d4c:	2207      	movs	r2, #7
 8006d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	0018      	movs	r0, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	b002      	add	sp, #8
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	46c0      	nop			@ (mov r8, r8)
 8006d5c:	e000e010 	.word	0xe000e010

08006d60 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	607a      	str	r2, [r7, #4]
 8006d6a:	210f      	movs	r1, #15
 8006d6c:	187b      	adds	r3, r7, r1
 8006d6e:	1c02      	adds	r2, r0, #0
 8006d70:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	187b      	adds	r3, r7, r1
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	b25b      	sxtb	r3, r3
 8006d7a:	0011      	movs	r1, r2
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	f7ff ff5d 	bl	8006c3c <__NVIC_SetPriority>
}
 8006d82:	46c0      	nop			@ (mov r8, r8)
 8006d84:	46bd      	mov	sp, r7
 8006d86:	b004      	add	sp, #16
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b082      	sub	sp, #8
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	0002      	movs	r2, r0
 8006d92:	1dfb      	adds	r3, r7, #7
 8006d94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d96:	1dfb      	adds	r3, r7, #7
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	b25b      	sxtb	r3, r3
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	f7ff ff11 	bl	8006bc4 <__NVIC_EnableIRQ>
}
 8006da2:	46c0      	nop			@ (mov r8, r8)
 8006da4:	46bd      	mov	sp, r7
 8006da6:	b002      	add	sp, #8
 8006da8:	bd80      	pop	{r7, pc}

08006daa <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	0002      	movs	r2, r0
 8006db2:	1dfb      	adds	r3, r7, #7
 8006db4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006db6:	1dfb      	adds	r3, r7, #7
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	b25b      	sxtb	r3, r3
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	f7ff ff1b 	bl	8006bf8 <__NVIC_DisableIRQ>
}
 8006dc2:	46c0      	nop			@ (mov r8, r8)
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	b002      	add	sp, #8
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	f7ff ff9f 	bl	8006d18 <SysTick_Config>
 8006dda:	0003      	movs	r3, r0
}
 8006ddc:	0018      	movs	r0, r3
 8006dde:	46bd      	mov	sp, r7
 8006de0:	b002      	add	sp, #8
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e077      	b.n	8006ee6 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a3d      	ldr	r2, [pc, #244]	@ (8006ef0 <HAL_DMA_Init+0x10c>)
 8006dfc:	4694      	mov	ip, r2
 8006dfe:	4463      	add	r3, ip
 8006e00:	2114      	movs	r1, #20
 8006e02:	0018      	movs	r0, r3
 8006e04:	f7f9 f980 	bl	8000108 <__udivsi3>
 8006e08:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8006e0a:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2225      	movs	r2, #37	@ 0x25
 8006e14:	2102      	movs	r1, #2
 8006e16:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4934      	ldr	r1, [pc, #208]	@ (8006ef4 <HAL_DMA_Init+0x110>)
 8006e24:	400a      	ands	r2, r1
 8006e26:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6819      	ldr	r1, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689a      	ldr	r2, [r3, #8]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	431a      	orrs	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	431a      	orrs	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	0018      	movs	r0, r3
 8006e62:	f000 fb21 	bl	80074a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	2380      	movs	r3, #128	@ 0x80
 8006e6c:	01db      	lsls	r3, r3, #7
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d102      	bne.n	8006e78 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e80:	21ff      	movs	r1, #255	@ 0xff
 8006e82:	400a      	ands	r2, r1
 8006e84:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006e8e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d011      	beq.n	8006ebc <HAL_DMA_Init+0xd8>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	d80d      	bhi.n	8006ebc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	f000 fb2c 	bl	8007500 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eac:	2200      	movs	r2, #0
 8006eae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006eb8:	605a      	str	r2, [r3, #4]
 8006eba:	e008      	b.n	8006ece <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2225      	movs	r2, #37	@ 0x25
 8006ed8:	2101      	movs	r1, #1
 8006eda:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2224      	movs	r2, #36	@ 0x24
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	b002      	add	sp, #8
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	46c0      	nop			@ (mov r8, r8)
 8006ef0:	bffdfff8 	.word	0xbffdfff8
 8006ef4:	ffff800f 	.word	0xffff800f

08006ef8 <HAL_DMA_DeInit>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e066      	b.n	8006fd8 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2101      	movs	r1, #1
 8006f16:	438a      	bics	r2, r1
 8006f18:	601a      	str	r2, [r3, #0]

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a30      	ldr	r2, [pc, #192]	@ (8006fe0 <HAL_DMA_DeInit+0xe8>)
 8006f20:	4694      	mov	ip, r2
 8006f22:	4463      	add	r3, ip
 8006f24:	2114      	movs	r1, #20
 8006f26:	0018      	movs	r0, r3
 8006f28:	f7f9 f8ee 	bl	8000108 <__udivsi3>
 8006f2c:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8006f2e:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8006f3c:	4b29      	ldr	r3, [pc, #164]	@ (8006fe4 <HAL_DMA_DeInit+0xec>)
 8006f3e:	6859      	ldr	r1, [r3, #4]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f44:	221c      	movs	r2, #28
 8006f46:	4013      	ands	r3, r2
 8006f48:	2201      	movs	r2, #1
 8006f4a:	409a      	lsls	r2, r3
 8006f4c:	4b25      	ldr	r3, [pc, #148]	@ (8006fe4 <HAL_DMA_DeInit+0xec>)
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	0018      	movs	r0, r3
 8006f56:	f000 faa7 	bl	80074a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f5e:	2200      	movs	r2, #0
 8006f60:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006f6a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d010      	beq.n	8006f96 <HAL_DMA_DeInit+0x9e>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	d80c      	bhi.n	8006f96 <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	0018      	movs	r0, r3
 8006f80:	f000 fabe 	bl	8007500 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006f94:	605a      	str	r2, [r3, #4]
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	639a      	str	r2, [r3, #56]	@ 0x38

  hdma->DMAmuxRequestGen = 0U;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2225      	movs	r2, #37	@ 0x25
 8006fca:	2100      	movs	r1, #0
 8006fcc:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2224      	movs	r2, #36	@ 0x24
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	0018      	movs	r0, r3
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	b002      	add	sp, #8
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	bffdfff8 	.word	0xbffdfff8
 8006fe4:	40020000 	.word	0x40020000

08006fe8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ff6:	2317      	movs	r3, #23
 8006ff8:	18fb      	adds	r3, r7, r3
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2224      	movs	r2, #36	@ 0x24
 8007002:	5c9b      	ldrb	r3, [r3, r2]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d101      	bne.n	800700c <HAL_DMA_Start_IT+0x24>
 8007008:	2302      	movs	r3, #2
 800700a:	e070      	b.n	80070ee <HAL_DMA_Start_IT+0x106>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2224      	movs	r2, #36	@ 0x24
 8007010:	2101      	movs	r1, #1
 8007012:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2225      	movs	r2, #37	@ 0x25
 8007018:	5c9b      	ldrb	r3, [r3, r2]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b01      	cmp	r3, #1
 800701e:	d157      	bne.n	80070d0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2225      	movs	r2, #37	@ 0x25
 8007024:	2102      	movs	r1, #2
 8007026:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2101      	movs	r1, #1
 800703a:	438a      	bics	r2, r1
 800703c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	68b9      	ldr	r1, [r7, #8]
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 f9ef 	bl	8007428 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800704e:	2b00      	cmp	r3, #0
 8007050:	d008      	beq.n	8007064 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	210e      	movs	r1, #14
 800705e:	430a      	orrs	r2, r1
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	e00f      	b.n	8007084 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2104      	movs	r1, #4
 8007070:	438a      	bics	r2, r1
 8007072:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	210a      	movs	r1, #10
 8007080:	430a      	orrs	r2, r1
 8007082:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	2380      	movs	r3, #128	@ 0x80
 800708c:	025b      	lsls	r3, r3, #9
 800708e:	4013      	ands	r3, r2
 8007090:	d008      	beq.n	80070a4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800709c:	2180      	movs	r1, #128	@ 0x80
 800709e:	0049      	lsls	r1, r1, #1
 80070a0:	430a      	orrs	r2, r1
 80070a2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d008      	beq.n	80070be <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070b6:	2180      	movs	r1, #128	@ 0x80
 80070b8:	0049      	lsls	r1, r1, #1
 80070ba:	430a      	orrs	r2, r1
 80070bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2101      	movs	r1, #1
 80070ca:	430a      	orrs	r2, r1
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	e007      	b.n	80070e0 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2224      	movs	r2, #36	@ 0x24
 80070d4:	2100      	movs	r1, #0
 80070d6:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80070d8:	2317      	movs	r3, #23
 80070da:	18fb      	adds	r3, r7, r3
 80070dc:	2202      	movs	r2, #2
 80070de:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2224      	movs	r2, #36	@ 0x24
 80070e4:	2100      	movs	r1, #0
 80070e6:	5499      	strb	r1, [r3, r2]

  return status;
 80070e8:	2317      	movs	r3, #23
 80070ea:	18fb      	adds	r3, r7, r3
 80070ec:	781b      	ldrb	r3, [r3, #0]
}
 80070ee:	0018      	movs	r0, r3
 80070f0:	46bd      	mov	sp, r7
 80070f2:	b006      	add	sp, #24
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e050      	b.n	80071ac <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2225      	movs	r2, #37	@ 0x25
 800710e:	5c9b      	ldrb	r3, [r3, r2]
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d008      	beq.n	8007128 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2204      	movs	r2, #4
 800711a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2224      	movs	r2, #36	@ 0x24
 8007120:	2100      	movs	r1, #0
 8007122:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e041      	b.n	80071ac <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	210e      	movs	r1, #14
 8007134:	438a      	bics	r2, r1
 8007136:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007142:	491c      	ldr	r1, [pc, #112]	@ (80071b4 <HAL_DMA_Abort+0xbc>)
 8007144:	400a      	ands	r2, r1
 8007146:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2101      	movs	r1, #1
 8007154:	438a      	bics	r2, r1
 8007156:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8007158:	4b17      	ldr	r3, [pc, #92]	@ (80071b8 <HAL_DMA_Abort+0xc0>)
 800715a:	6859      	ldr	r1, [r3, #4]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007160:	221c      	movs	r2, #28
 8007162:	4013      	ands	r3, r2
 8007164:	2201      	movs	r2, #1
 8007166:	409a      	lsls	r2, r3
 8007168:	4b13      	ldr	r3, [pc, #76]	@ (80071b8 <HAL_DMA_Abort+0xc0>)
 800716a:	430a      	orrs	r2, r1
 800716c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007176:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00c      	beq.n	800719a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800718a:	490a      	ldr	r1, [pc, #40]	@ (80071b4 <HAL_DMA_Abort+0xbc>)
 800718c:	400a      	ands	r2, r1
 800718e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007198:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2225      	movs	r2, #37	@ 0x25
 800719e:	2101      	movs	r1, #1
 80071a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2224      	movs	r2, #36	@ 0x24
 80071a6:	2100      	movs	r1, #0
 80071a8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	0018      	movs	r0, r3
 80071ae:	46bd      	mov	sp, r7
 80071b0:	b002      	add	sp, #8
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	fffffeff 	.word	0xfffffeff
 80071b8:	40020000 	.word	0x40020000

080071bc <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071c4:	230f      	movs	r3, #15
 80071c6:	18fb      	adds	r3, r7, r3
 80071c8:	2200      	movs	r2, #0
 80071ca:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2224      	movs	r2, #36	@ 0x24
 80071d0:	2100      	movs	r1, #0
 80071d2:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2224      	movs	r2, #36	@ 0x24
 80071d8:	5c9b      	ldrb	r3, [r3, r2]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <HAL_DMA_Abort_IT+0x26>
 80071de:	2302      	movs	r3, #2
 80071e0:	e05e      	b.n	80072a0 <HAL_DMA_Abort_IT+0xe4>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2224      	movs	r2, #36	@ 0x24
 80071e6:	2101      	movs	r1, #1
 80071e8:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2225      	movs	r2, #37	@ 0x25
 80071ee:	5c9b      	ldrb	r3, [r3, r2]
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d007      	beq.n	8007206 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2204      	movs	r2, #4
 80071fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80071fc:	230f      	movs	r3, #15
 80071fe:	18fb      	adds	r3, r7, r3
 8007200:	2201      	movs	r2, #1
 8007202:	701a      	strb	r2, [r3, #0]
 8007204:	e049      	b.n	800729a <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	210e      	movs	r1, #14
 8007212:	438a      	bics	r2, r1
 8007214:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2101      	movs	r1, #1
 8007222:	438a      	bics	r2, r1
 8007224:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007230:	491d      	ldr	r1, [pc, #116]	@ (80072a8 <HAL_DMA_Abort_IT+0xec>)
 8007232:	400a      	ands	r2, r1
 8007234:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8007236:	4b1d      	ldr	r3, [pc, #116]	@ (80072ac <HAL_DMA_Abort_IT+0xf0>)
 8007238:	6859      	ldr	r1, [r3, #4]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723e:	221c      	movs	r2, #28
 8007240:	4013      	ands	r3, r2
 8007242:	2201      	movs	r2, #1
 8007244:	409a      	lsls	r2, r3
 8007246:	4b19      	ldr	r3, [pc, #100]	@ (80072ac <HAL_DMA_Abort_IT+0xf0>)
 8007248:	430a      	orrs	r2, r1
 800724a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007254:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00c      	beq.n	8007278 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007268:	490f      	ldr	r1, [pc, #60]	@ (80072a8 <HAL_DMA_Abort_IT+0xec>)
 800726a:	400a      	ands	r2, r1
 800726c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007276:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2225      	movs	r2, #37	@ 0x25
 800727c:	2101      	movs	r1, #1
 800727e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2224      	movs	r2, #36	@ 0x24
 8007284:	2100      	movs	r1, #0
 8007286:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800728c:	2b00      	cmp	r3, #0
 800728e:	d004      	beq.n	800729a <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	0010      	movs	r0, r2
 8007298:	4798      	blx	r3
    }
  }
  return status;
 800729a:	230f      	movs	r3, #15
 800729c:	18fb      	adds	r3, r7, r3
 800729e:	781b      	ldrb	r3, [r3, #0]
}
 80072a0:	0018      	movs	r0, r3
 80072a2:	46bd      	mov	sp, r7
 80072a4:	b004      	add	sp, #16
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	fffffeff 	.word	0xfffffeff
 80072ac:	40020000 	.word	0x40020000

080072b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 80072b8:	4b55      	ldr	r3, [pc, #340]	@ (8007410 <HAL_DMA_IRQHandler+0x160>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ca:	221c      	movs	r2, #28
 80072cc:	4013      	ands	r3, r2
 80072ce:	2204      	movs	r2, #4
 80072d0:	409a      	lsls	r2, r3
 80072d2:	0013      	movs	r3, r2
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4013      	ands	r3, r2
 80072d8:	d027      	beq.n	800732a <HAL_DMA_IRQHandler+0x7a>
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	2204      	movs	r2, #4
 80072de:	4013      	ands	r3, r2
 80072e0:	d023      	beq.n	800732a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2220      	movs	r2, #32
 80072ea:	4013      	ands	r3, r2
 80072ec:	d107      	bne.n	80072fe <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2104      	movs	r1, #4
 80072fa:	438a      	bics	r2, r1
 80072fc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 80072fe:	4b44      	ldr	r3, [pc, #272]	@ (8007410 <HAL_DMA_IRQHandler+0x160>)
 8007300:	6859      	ldr	r1, [r3, #4]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007306:	221c      	movs	r2, #28
 8007308:	4013      	ands	r3, r2
 800730a:	2204      	movs	r2, #4
 800730c:	409a      	lsls	r2, r3
 800730e:	4b40      	ldr	r3, [pc, #256]	@ (8007410 <HAL_DMA_IRQHandler+0x160>)
 8007310:	430a      	orrs	r2, r1
 8007312:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007318:	2b00      	cmp	r3, #0
 800731a:	d100      	bne.n	800731e <HAL_DMA_IRQHandler+0x6e>
 800731c:	e073      	b.n	8007406 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	0010      	movs	r0, r2
 8007326:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007328:	e06d      	b.n	8007406 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732e:	221c      	movs	r2, #28
 8007330:	4013      	ands	r3, r2
 8007332:	2202      	movs	r2, #2
 8007334:	409a      	lsls	r2, r3
 8007336:	0013      	movs	r3, r2
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	4013      	ands	r3, r2
 800733c:	d02e      	beq.n	800739c <HAL_DMA_IRQHandler+0xec>
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	2202      	movs	r2, #2
 8007342:	4013      	ands	r3, r2
 8007344:	d02a      	beq.n	800739c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2220      	movs	r2, #32
 800734e:	4013      	ands	r3, r2
 8007350:	d10b      	bne.n	800736a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	210a      	movs	r1, #10
 800735e:	438a      	bics	r2, r1
 8007360:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2225      	movs	r2, #37	@ 0x25
 8007366:	2101      	movs	r1, #1
 8007368:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800736a:	4b29      	ldr	r3, [pc, #164]	@ (8007410 <HAL_DMA_IRQHandler+0x160>)
 800736c:	6859      	ldr	r1, [r3, #4]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007372:	221c      	movs	r2, #28
 8007374:	4013      	ands	r3, r2
 8007376:	2202      	movs	r2, #2
 8007378:	409a      	lsls	r2, r3
 800737a:	4b25      	ldr	r3, [pc, #148]	@ (8007410 <HAL_DMA_IRQHandler+0x160>)
 800737c:	430a      	orrs	r2, r1
 800737e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2224      	movs	r2, #36	@ 0x24
 8007384:	2100      	movs	r1, #0
 8007386:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738c:	2b00      	cmp	r3, #0
 800738e:	d03a      	beq.n	8007406 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	0010      	movs	r0, r2
 8007398:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800739a:	e034      	b.n	8007406 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a0:	221c      	movs	r2, #28
 80073a2:	4013      	ands	r3, r2
 80073a4:	2208      	movs	r2, #8
 80073a6:	409a      	lsls	r2, r3
 80073a8:	0013      	movs	r3, r2
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	4013      	ands	r3, r2
 80073ae:	d02b      	beq.n	8007408 <HAL_DMA_IRQHandler+0x158>
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2208      	movs	r2, #8
 80073b4:	4013      	ands	r3, r2
 80073b6:	d027      	beq.n	8007408 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	210e      	movs	r1, #14
 80073c4:	438a      	bics	r2, r1
 80073c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80073c8:	4b11      	ldr	r3, [pc, #68]	@ (8007410 <HAL_DMA_IRQHandler+0x160>)
 80073ca:	6859      	ldr	r1, [r3, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d0:	221c      	movs	r2, #28
 80073d2:	4013      	ands	r3, r2
 80073d4:	2201      	movs	r2, #1
 80073d6:	409a      	lsls	r2, r3
 80073d8:	4b0d      	ldr	r3, [pc, #52]	@ (8007410 <HAL_DMA_IRQHandler+0x160>)
 80073da:	430a      	orrs	r2, r1
 80073dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2225      	movs	r2, #37	@ 0x25
 80073e8:	2101      	movs	r1, #1
 80073ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2224      	movs	r2, #36	@ 0x24
 80073f0:	2100      	movs	r1, #0
 80073f2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d005      	beq.n	8007408 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	0010      	movs	r0, r2
 8007404:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007406:	46c0      	nop			@ (mov r8, r8)
 8007408:	46c0      	nop			@ (mov r8, r8)
}
 800740a:	46bd      	mov	sp, r7
 800740c:	b004      	add	sp, #16
 800740e:	bd80      	pop	{r7, pc}
 8007410:	40020000 	.word	0x40020000

08007414 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8007420:	0018      	movs	r0, r3
 8007422:	46bd      	mov	sp, r7
 8007424:	b002      	add	sp, #8
 8007426:	bd80      	pop	{r7, pc}

08007428 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800743e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007450:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8007452:	4b14      	ldr	r3, [pc, #80]	@ (80074a4 <DMA_SetConfig+0x7c>)
 8007454:	6859      	ldr	r1, [r3, #4]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745a:	221c      	movs	r2, #28
 800745c:	4013      	ands	r3, r2
 800745e:	2201      	movs	r2, #1
 8007460:	409a      	lsls	r2, r3
 8007462:	4b10      	ldr	r3, [pc, #64]	@ (80074a4 <DMA_SetConfig+0x7c>)
 8007464:	430a      	orrs	r2, r1
 8007466:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	2b10      	cmp	r3, #16
 8007476:	d108      	bne.n	800748a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007488:	e007      	b.n	800749a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	60da      	str	r2, [r3, #12]
}
 800749a:	46c0      	nop			@ (mov r8, r8)
 800749c:	46bd      	mov	sp, r7
 800749e:	b004      	add	sp, #16
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	46c0      	nop			@ (mov r8, r8)
 80074a4:	40020000 	.word	0x40020000

080074a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	001a      	movs	r2, r3
 80074b6:	23ff      	movs	r3, #255	@ 0xff
 80074b8:	4013      	ands	r3, r2
 80074ba:	3b08      	subs	r3, #8
 80074bc:	2114      	movs	r1, #20
 80074be:	0018      	movs	r0, r3
 80074c0:	f7f8 fe22 	bl	8000108 <__udivsi3>
 80074c4:	0003      	movs	r3, r0
 80074c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074cc:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 80074ce:	4a0a      	ldr	r2, [pc, #40]	@ (80074f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80074d0:	4694      	mov	ip, r2
 80074d2:	4463      	add	r3, ip
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	001a      	movs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a07      	ldr	r2, [pc, #28]	@ (80074fc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80074e0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	221c      	movs	r2, #28
 80074e6:	4013      	ands	r3, r2
 80074e8:	2201      	movs	r2, #1
 80074ea:	409a      	lsls	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80074f0:	46c0      	nop			@ (mov r8, r8)
 80074f2:	46bd      	mov	sp, r7
 80074f4:	b004      	add	sp, #16
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	10008200 	.word	0x10008200
 80074fc:	40020880 	.word	0x40020880

08007500 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	22ff      	movs	r2, #255	@ 0xff
 800750e:	4013      	ands	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	4a0a      	ldr	r2, [pc, #40]	@ (8007540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007516:	4694      	mov	ip, r2
 8007518:	4463      	add	r3, ip
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	001a      	movs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a07      	ldr	r2, [pc, #28]	@ (8007544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007526:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	3b01      	subs	r3, #1
 800752c:	2203      	movs	r2, #3
 800752e:	4013      	ands	r3, r2
 8007530:	2201      	movs	r2, #1
 8007532:	409a      	lsls	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8007538:	46c0      	nop			@ (mov r8, r8)
 800753a:	46bd      	mov	sp, r7
 800753c:	b004      	add	sp, #16
 800753e:	bd80      	pop	{r7, pc}
 8007540:	1000823f 	.word	0x1000823f
 8007544:	40020940 	.word	0x40020940

08007548 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8007552:	2300      	movs	r3, #0
 8007554:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007556:	e153      	b.n	8007800 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2101      	movs	r1, #1
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	4091      	lsls	r1, r2
 8007562:	000a      	movs	r2, r1
 8007564:	4013      	ands	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d100      	bne.n	8007570 <HAL_GPIO_Init+0x28>
 800756e:	e144      	b.n	80077fa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	2b02      	cmp	r3, #2
 8007576:	d003      	beq.n	8007580 <HAL_GPIO_Init+0x38>
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	2b12      	cmp	r3, #18
 800757e:	d125      	bne.n	80075cc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	08da      	lsrs	r2, r3, #3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	3208      	adds	r2, #8
 8007588:	0092      	lsls	r2, r2, #2
 800758a:	58d3      	ldr	r3, [r2, r3]
 800758c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	2207      	movs	r2, #7
 8007592:	4013      	ands	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	220f      	movs	r2, #15
 8007598:	409a      	lsls	r2, r3
 800759a:	0013      	movs	r3, r2
 800759c:	43da      	mvns	r2, r3
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	4013      	ands	r3, r2
 80075a2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	220f      	movs	r2, #15
 80075aa:	401a      	ands	r2, r3
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	2107      	movs	r1, #7
 80075b0:	400b      	ands	r3, r1
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	409a      	lsls	r2, r3
 80075b6:	0013      	movs	r3, r2
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	08da      	lsrs	r2, r3, #3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	3208      	adds	r2, #8
 80075c6:	0092      	lsls	r2, r2, #2
 80075c8:	6979      	ldr	r1, [r7, #20]
 80075ca:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	2203      	movs	r2, #3
 80075d8:	409a      	lsls	r2, r3
 80075da:	0013      	movs	r3, r2
 80075dc:	43da      	mvns	r2, r3
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	4013      	ands	r3, r2
 80075e2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	2203      	movs	r2, #3
 80075ea:	401a      	ands	r2, r3
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	005b      	lsls	r3, r3, #1
 80075f0:	409a      	lsls	r2, r3
 80075f2:	0013      	movs	r3, r2
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d00b      	beq.n	8007620 <HAL_GPIO_Init+0xd8>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	2b02      	cmp	r3, #2
 800760e:	d007      	beq.n	8007620 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007614:	2b11      	cmp	r3, #17
 8007616:	d003      	beq.n	8007620 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	2b12      	cmp	r3, #18
 800761e:	d130      	bne.n	8007682 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	2203      	movs	r2, #3
 800762c:	409a      	lsls	r2, r3
 800762e:	0013      	movs	r3, r2
 8007630:	43da      	mvns	r2, r3
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	4013      	ands	r3, r2
 8007636:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	68da      	ldr	r2, [r3, #12]
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	005b      	lsls	r3, r3, #1
 8007640:	409a      	lsls	r2, r3
 8007642:	0013      	movs	r3, r2
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	4313      	orrs	r3, r2
 8007648:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007656:	2201      	movs	r2, #1
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	409a      	lsls	r2, r3
 800765c:	0013      	movs	r3, r2
 800765e:	43da      	mvns	r2, r3
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	4013      	ands	r3, r2
 8007664:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	091b      	lsrs	r3, r3, #4
 800766c:	2201      	movs	r2, #1
 800766e:	401a      	ands	r2, r3
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	409a      	lsls	r2, r3
 8007674:	0013      	movs	r3, r2
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	4313      	orrs	r3, r2
 800767a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	2b03      	cmp	r3, #3
 8007688:	d017      	beq.n	80076ba <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	005b      	lsls	r3, r3, #1
 8007694:	2203      	movs	r2, #3
 8007696:	409a      	lsls	r2, r3
 8007698:	0013      	movs	r3, r2
 800769a:	43da      	mvns	r2, r3
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	4013      	ands	r3, r2
 80076a0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	689a      	ldr	r2, [r3, #8]
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	005b      	lsls	r3, r3, #1
 80076aa:	409a      	lsls	r2, r3
 80076ac:	0013      	movs	r3, r2
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	2380      	movs	r3, #128	@ 0x80
 80076c0:	055b      	lsls	r3, r3, #21
 80076c2:	4013      	ands	r3, r2
 80076c4:	d100      	bne.n	80076c8 <HAL_GPIO_Init+0x180>
 80076c6:	e098      	b.n	80077fa <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80076c8:	4a53      	ldr	r2, [pc, #332]	@ (8007818 <HAL_GPIO_Init+0x2d0>)
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	089b      	lsrs	r3, r3, #2
 80076ce:	3318      	adds	r3, #24
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	589b      	ldr	r3, [r3, r2]
 80076d4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	2203      	movs	r2, #3
 80076da:	4013      	ands	r3, r2
 80076dc:	00db      	lsls	r3, r3, #3
 80076de:	220f      	movs	r2, #15
 80076e0:	409a      	lsls	r2, r3
 80076e2:	0013      	movs	r3, r2
 80076e4:	43da      	mvns	r2, r3
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	4013      	ands	r3, r2
 80076ea:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	23a0      	movs	r3, #160	@ 0xa0
 80076f0:	05db      	lsls	r3, r3, #23
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d019      	beq.n	800772a <HAL_GPIO_Init+0x1e2>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a48      	ldr	r2, [pc, #288]	@ (800781c <HAL_GPIO_Init+0x2d4>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d013      	beq.n	8007726 <HAL_GPIO_Init+0x1de>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a47      	ldr	r2, [pc, #284]	@ (8007820 <HAL_GPIO_Init+0x2d8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00d      	beq.n	8007722 <HAL_GPIO_Init+0x1da>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a46      	ldr	r2, [pc, #280]	@ (8007824 <HAL_GPIO_Init+0x2dc>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d007      	beq.n	800771e <HAL_GPIO_Init+0x1d6>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a45      	ldr	r2, [pc, #276]	@ (8007828 <HAL_GPIO_Init+0x2e0>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d101      	bne.n	800771a <HAL_GPIO_Init+0x1d2>
 8007716:	2305      	movs	r3, #5
 8007718:	e008      	b.n	800772c <HAL_GPIO_Init+0x1e4>
 800771a:	2306      	movs	r3, #6
 800771c:	e006      	b.n	800772c <HAL_GPIO_Init+0x1e4>
 800771e:	2303      	movs	r3, #3
 8007720:	e004      	b.n	800772c <HAL_GPIO_Init+0x1e4>
 8007722:	2302      	movs	r3, #2
 8007724:	e002      	b.n	800772c <HAL_GPIO_Init+0x1e4>
 8007726:	2301      	movs	r3, #1
 8007728:	e000      	b.n	800772c <HAL_GPIO_Init+0x1e4>
 800772a:	2300      	movs	r3, #0
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	2103      	movs	r1, #3
 8007730:	400a      	ands	r2, r1
 8007732:	00d2      	lsls	r2, r2, #3
 8007734:	4093      	lsls	r3, r2
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	4313      	orrs	r3, r2
 800773a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800773c:	4936      	ldr	r1, [pc, #216]	@ (8007818 <HAL_GPIO_Init+0x2d0>)
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	089b      	lsrs	r3, r3, #2
 8007742:	3318      	adds	r3, #24
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800774a:	4a33      	ldr	r2, [pc, #204]	@ (8007818 <HAL_GPIO_Init+0x2d0>)
 800774c:	2380      	movs	r3, #128	@ 0x80
 800774e:	58d3      	ldr	r3, [r2, r3]
 8007750:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	43da      	mvns	r2, r3
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	4013      	ands	r3, r2
 800775a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	2380      	movs	r3, #128	@ 0x80
 8007762:	025b      	lsls	r3, r3, #9
 8007764:	4013      	ands	r3, r2
 8007766:	d003      	beq.n	8007770 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8007770:	4929      	ldr	r1, [pc, #164]	@ (8007818 <HAL_GPIO_Init+0x2d0>)
 8007772:	2280      	movs	r2, #128	@ 0x80
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8007778:	4a27      	ldr	r2, [pc, #156]	@ (8007818 <HAL_GPIO_Init+0x2d0>)
 800777a:	2384      	movs	r3, #132	@ 0x84
 800777c:	58d3      	ldr	r3, [r2, r3]
 800777e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	43da      	mvns	r2, r3
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	4013      	ands	r3, r2
 8007788:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	2380      	movs	r3, #128	@ 0x80
 8007790:	029b      	lsls	r3, r3, #10
 8007792:	4013      	ands	r3, r2
 8007794:	d003      	beq.n	800779e <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4313      	orrs	r3, r2
 800779c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800779e:	491e      	ldr	r1, [pc, #120]	@ (8007818 <HAL_GPIO_Init+0x2d0>)
 80077a0:	2284      	movs	r2, #132	@ 0x84
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80077a6:	4b1c      	ldr	r3, [pc, #112]	@ (8007818 <HAL_GPIO_Init+0x2d0>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	43da      	mvns	r2, r3
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	4013      	ands	r3, r2
 80077b4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	2380      	movs	r3, #128	@ 0x80
 80077bc:	035b      	lsls	r3, r3, #13
 80077be:	4013      	ands	r3, r2
 80077c0:	d003      	beq.n	80077ca <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80077ca:	4b13      	ldr	r3, [pc, #76]	@ (8007818 <HAL_GPIO_Init+0x2d0>)
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80077d0:	4b11      	ldr	r3, [pc, #68]	@ (8007818 <HAL_GPIO_Init+0x2d0>)
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	43da      	mvns	r2, r3
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	4013      	ands	r3, r2
 80077de:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	2380      	movs	r3, #128	@ 0x80
 80077e6:	039b      	lsls	r3, r3, #14
 80077e8:	4013      	ands	r3, r2
 80077ea:	d003      	beq.n	80077f4 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80077f4:	4b08      	ldr	r3, [pc, #32]	@ (8007818 <HAL_GPIO_Init+0x2d0>)
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	3301      	adds	r3, #1
 80077fe:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	40da      	lsrs	r2, r3
 8007808:	1e13      	subs	r3, r2, #0
 800780a:	d000      	beq.n	800780e <HAL_GPIO_Init+0x2c6>
 800780c:	e6a4      	b.n	8007558 <HAL_GPIO_Init+0x10>
  }
}
 800780e:	46c0      	nop			@ (mov r8, r8)
 8007810:	46c0      	nop			@ (mov r8, r8)
 8007812:	46bd      	mov	sp, r7
 8007814:	b006      	add	sp, #24
 8007816:	bd80      	pop	{r7, pc}
 8007818:	40021800 	.word	0x40021800
 800781c:	50000400 	.word	0x50000400
 8007820:	50000800 	.word	0x50000800
 8007824:	50000c00 	.word	0x50000c00
 8007828:	50001400 	.word	0x50001400

0800782c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800783a:	e0ba      	b.n	80079b2 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800783c:	2201      	movs	r2, #1
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	409a      	lsls	r2, r3
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	4013      	ands	r3, r2
 8007846:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d100      	bne.n	8007850 <HAL_GPIO_DeInit+0x24>
 800784e:	e0ad      	b.n	80079ac <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 8007850:	4a5d      	ldr	r2, [pc, #372]	@ (80079c8 <HAL_GPIO_DeInit+0x19c>)
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	089b      	lsrs	r3, r3, #2
 8007856:	3318      	adds	r3, #24
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	589b      	ldr	r3, [r3, r2]
 800785c:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	2203      	movs	r2, #3
 8007862:	4013      	ands	r3, r2
 8007864:	00db      	lsls	r3, r3, #3
 8007866:	220f      	movs	r2, #15
 8007868:	409a      	lsls	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4013      	ands	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	23a0      	movs	r3, #160	@ 0xa0
 8007874:	05db      	lsls	r3, r3, #23
 8007876:	429a      	cmp	r2, r3
 8007878:	d019      	beq.n	80078ae <HAL_GPIO_DeInit+0x82>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a53      	ldr	r2, [pc, #332]	@ (80079cc <HAL_GPIO_DeInit+0x1a0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d013      	beq.n	80078aa <HAL_GPIO_DeInit+0x7e>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a52      	ldr	r2, [pc, #328]	@ (80079d0 <HAL_GPIO_DeInit+0x1a4>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d00d      	beq.n	80078a6 <HAL_GPIO_DeInit+0x7a>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a51      	ldr	r2, [pc, #324]	@ (80079d4 <HAL_GPIO_DeInit+0x1a8>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d007      	beq.n	80078a2 <HAL_GPIO_DeInit+0x76>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a50      	ldr	r2, [pc, #320]	@ (80079d8 <HAL_GPIO_DeInit+0x1ac>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d101      	bne.n	800789e <HAL_GPIO_DeInit+0x72>
 800789a:	2305      	movs	r3, #5
 800789c:	e008      	b.n	80078b0 <HAL_GPIO_DeInit+0x84>
 800789e:	2306      	movs	r3, #6
 80078a0:	e006      	b.n	80078b0 <HAL_GPIO_DeInit+0x84>
 80078a2:	2303      	movs	r3, #3
 80078a4:	e004      	b.n	80078b0 <HAL_GPIO_DeInit+0x84>
 80078a6:	2302      	movs	r3, #2
 80078a8:	e002      	b.n	80078b0 <HAL_GPIO_DeInit+0x84>
 80078aa:	2301      	movs	r3, #1
 80078ac:	e000      	b.n	80078b0 <HAL_GPIO_DeInit+0x84>
 80078ae:	2300      	movs	r3, #0
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	2103      	movs	r1, #3
 80078b4:	400a      	ands	r2, r1
 80078b6:	00d2      	lsls	r2, r2, #3
 80078b8:	4093      	lsls	r3, r2
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d136      	bne.n	800792e <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80078c0:	4a41      	ldr	r2, [pc, #260]	@ (80079c8 <HAL_GPIO_DeInit+0x19c>)
 80078c2:	2380      	movs	r3, #128	@ 0x80
 80078c4:	58d3      	ldr	r3, [r2, r3]
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	43d2      	mvns	r2, r2
 80078ca:	493f      	ldr	r1, [pc, #252]	@ (80079c8 <HAL_GPIO_DeInit+0x19c>)
 80078cc:	4013      	ands	r3, r2
 80078ce:	2280      	movs	r2, #128	@ 0x80
 80078d0:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80078d2:	4a3d      	ldr	r2, [pc, #244]	@ (80079c8 <HAL_GPIO_DeInit+0x19c>)
 80078d4:	2384      	movs	r3, #132	@ 0x84
 80078d6:	58d3      	ldr	r3, [r2, r3]
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	43d2      	mvns	r2, r2
 80078dc:	493a      	ldr	r1, [pc, #232]	@ (80079c8 <HAL_GPIO_DeInit+0x19c>)
 80078de:	4013      	ands	r3, r2
 80078e0:	2284      	movs	r2, #132	@ 0x84
 80078e2:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80078e4:	4b38      	ldr	r3, [pc, #224]	@ (80079c8 <HAL_GPIO_DeInit+0x19c>)
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	43d9      	mvns	r1, r3
 80078ec:	4b36      	ldr	r3, [pc, #216]	@ (80079c8 <HAL_GPIO_DeInit+0x19c>)
 80078ee:	400a      	ands	r2, r1
 80078f0:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80078f2:	4b35      	ldr	r3, [pc, #212]	@ (80079c8 <HAL_GPIO_DeInit+0x19c>)
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	43d9      	mvns	r1, r3
 80078fa:	4b33      	ldr	r3, [pc, #204]	@ (80079c8 <HAL_GPIO_DeInit+0x19c>)
 80078fc:	400a      	ands	r2, r1
 80078fe:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	2203      	movs	r2, #3
 8007904:	4013      	ands	r3, r2
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	220f      	movs	r2, #15
 800790a:	409a      	lsls	r2, r3
 800790c:	0013      	movs	r3, r2
 800790e:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8007910:	4a2d      	ldr	r2, [pc, #180]	@ (80079c8 <HAL_GPIO_DeInit+0x19c>)
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	089b      	lsrs	r3, r3, #2
 8007916:	3318      	adds	r3, #24
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	589a      	ldr	r2, [r3, r2]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	43d9      	mvns	r1, r3
 8007920:	4829      	ldr	r0, [pc, #164]	@ (80079c8 <HAL_GPIO_DeInit+0x19c>)
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	089b      	lsrs	r3, r3, #2
 8007926:	400a      	ands	r2, r1
 8007928:	3318      	adds	r3, #24
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	2103      	movs	r1, #3
 8007938:	4099      	lsls	r1, r3
 800793a:	000b      	movs	r3, r1
 800793c:	431a      	orrs	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	08da      	lsrs	r2, r3, #3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	3208      	adds	r2, #8
 800794a:	0092      	lsls	r2, r2, #2
 800794c:	58d3      	ldr	r3, [r2, r3]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	2107      	movs	r1, #7
 8007952:	400a      	ands	r2, r1
 8007954:	0092      	lsls	r2, r2, #2
 8007956:	210f      	movs	r1, #15
 8007958:	4091      	lsls	r1, r2
 800795a:	000a      	movs	r2, r1
 800795c:	43d1      	mvns	r1, r2
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	08d2      	lsrs	r2, r2, #3
 8007962:	4019      	ands	r1, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3208      	adds	r2, #8
 8007968:	0092      	lsls	r2, r2, #2
 800796a:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	0052      	lsls	r2, r2, #1
 8007974:	2103      	movs	r1, #3
 8007976:	4091      	lsls	r1, r2
 8007978:	000a      	movs	r2, r1
 800797a:	43d2      	mvns	r2, r2
 800797c:	401a      	ands	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	2101      	movs	r1, #1
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	4091      	lsls	r1, r2
 800798c:	000a      	movs	r2, r1
 800798e:	43d2      	mvns	r2, r2
 8007990:	401a      	ands	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	0052      	lsls	r2, r2, #1
 800799e:	2103      	movs	r1, #3
 80079a0:	4091      	lsls	r1, r2
 80079a2:	000a      	movs	r2, r1
 80079a4:	43d2      	mvns	r2, r2
 80079a6:	401a      	ands	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	60da      	str	r2, [r3, #12]
    }

    position++;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	3301      	adds	r3, #1
 80079b0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	40da      	lsrs	r2, r3
 80079b8:	1e13      	subs	r3, r2, #0
 80079ba:	d000      	beq.n	80079be <HAL_GPIO_DeInit+0x192>
 80079bc:	e73e      	b.n	800783c <HAL_GPIO_DeInit+0x10>
  }
}
 80079be:	46c0      	nop			@ (mov r8, r8)
 80079c0:	46c0      	nop			@ (mov r8, r8)
 80079c2:	46bd      	mov	sp, r7
 80079c4:	b006      	add	sp, #24
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	40021800 	.word	0x40021800
 80079cc:	50000400 	.word	0x50000400
 80079d0:	50000800 	.word	0x50000800
 80079d4:	50000c00 	.word	0x50000c00
 80079d8:	50001400 	.word	0x50001400

080079dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	000a      	movs	r2, r1
 80079e6:	1cbb      	adds	r3, r7, #2
 80079e8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	1cba      	adds	r2, r7, #2
 80079f0:	8812      	ldrh	r2, [r2, #0]
 80079f2:	4013      	ands	r3, r2
 80079f4:	d004      	beq.n	8007a00 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80079f6:	230f      	movs	r3, #15
 80079f8:	18fb      	adds	r3, r7, r3
 80079fa:	2201      	movs	r2, #1
 80079fc:	701a      	strb	r2, [r3, #0]
 80079fe:	e003      	b.n	8007a08 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a00:	230f      	movs	r3, #15
 8007a02:	18fb      	adds	r3, r7, r3
 8007a04:	2200      	movs	r2, #0
 8007a06:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007a08:	230f      	movs	r3, #15
 8007a0a:	18fb      	adds	r3, r7, r3
 8007a0c:	781b      	ldrb	r3, [r3, #0]
}
 8007a0e:	0018      	movs	r0, r3
 8007a10:	46bd      	mov	sp, r7
 8007a12:	b004      	add	sp, #16
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b082      	sub	sp, #8
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	0008      	movs	r0, r1
 8007a20:	0011      	movs	r1, r2
 8007a22:	1cbb      	adds	r3, r7, #2
 8007a24:	1c02      	adds	r2, r0, #0
 8007a26:	801a      	strh	r2, [r3, #0]
 8007a28:	1c7b      	adds	r3, r7, #1
 8007a2a:	1c0a      	adds	r2, r1, #0
 8007a2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a2e:	1c7b      	adds	r3, r7, #1
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d004      	beq.n	8007a40 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007a36:	1cbb      	adds	r3, r7, #2
 8007a38:	881a      	ldrh	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007a3e:	e003      	b.n	8007a48 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007a40:	1cbb      	adds	r3, r7, #2
 8007a42:	881a      	ldrh	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007a48:	46c0      	nop			@ (mov r8, r8)
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	b002      	add	sp, #8
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e08f      	b.n	8007b82 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2241      	movs	r2, #65	@ 0x41
 8007a66:	5c9b      	ldrb	r3, [r3, r2]
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d107      	bne.n	8007a7e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2240      	movs	r2, #64	@ 0x40
 8007a72:	2100      	movs	r1, #0
 8007a74:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	0018      	movs	r0, r3
 8007a7a:	f7fa ff93 	bl	80029a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2241      	movs	r2, #65	@ 0x41
 8007a82:	2124      	movs	r1, #36	@ 0x24
 8007a84:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2101      	movs	r1, #1
 8007a92:	438a      	bics	r2, r1
 8007a94:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	493b      	ldr	r1, [pc, #236]	@ (8007b8c <HAL_I2C_Init+0x13c>)
 8007aa0:	400a      	ands	r2, r1
 8007aa2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	689a      	ldr	r2, [r3, #8]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4938      	ldr	r1, [pc, #224]	@ (8007b90 <HAL_I2C_Init+0x140>)
 8007ab0:	400a      	ands	r2, r1
 8007ab2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d108      	bne.n	8007ace <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689a      	ldr	r2, [r3, #8]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2180      	movs	r1, #128	@ 0x80
 8007ac6:	0209      	lsls	r1, r1, #8
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	609a      	str	r2, [r3, #8]
 8007acc:	e007      	b.n	8007ade <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	689a      	ldr	r2, [r3, #8]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2184      	movs	r1, #132	@ 0x84
 8007ad8:	0209      	lsls	r1, r1, #8
 8007ada:	430a      	orrs	r2, r1
 8007adc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d109      	bne.n	8007afa <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2180      	movs	r1, #128	@ 0x80
 8007af2:	0109      	lsls	r1, r1, #4
 8007af4:	430a      	orrs	r2, r1
 8007af6:	605a      	str	r2, [r3, #4]
 8007af8:	e007      	b.n	8007b0a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4923      	ldr	r1, [pc, #140]	@ (8007b94 <HAL_I2C_Init+0x144>)
 8007b06:	400a      	ands	r2, r1
 8007b08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4920      	ldr	r1, [pc, #128]	@ (8007b98 <HAL_I2C_Init+0x148>)
 8007b16:	430a      	orrs	r2, r1
 8007b18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68da      	ldr	r2, [r3, #12]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	491a      	ldr	r1, [pc, #104]	@ (8007b90 <HAL_I2C_Init+0x140>)
 8007b26:	400a      	ands	r2, r1
 8007b28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691a      	ldr	r2, [r3, #16]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	431a      	orrs	r2, r3
 8007b34:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	430a      	orrs	r2, r1
 8007b42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	69d9      	ldr	r1, [r3, #28]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a1a      	ldr	r2, [r3, #32]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2101      	movs	r1, #1
 8007b60:	430a      	orrs	r2, r1
 8007b62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2241      	movs	r2, #65	@ 0x41
 8007b6e:	2120      	movs	r1, #32
 8007b70:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2242      	movs	r2, #66	@ 0x42
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	0018      	movs	r0, r3
 8007b84:	46bd      	mov	sp, r7
 8007b86:	b002      	add	sp, #8
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	46c0      	nop			@ (mov r8, r8)
 8007b8c:	f0ffffff 	.word	0xf0ffffff
 8007b90:	ffff7fff 	.word	0xffff7fff
 8007b94:	fffff7ff 	.word	0xfffff7ff
 8007b98:	02008000 	.word	0x02008000

08007b9c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e022      	b.n	8007bf4 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2241      	movs	r2, #65	@ 0x41
 8007bb2:	2124      	movs	r1, #36	@ 0x24
 8007bb4:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	438a      	bics	r2, r1
 8007bc4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	0018      	movs	r0, r3
 8007bca:	f7fa ffa9 	bl	8002b20 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2241      	movs	r2, #65	@ 0x41
 8007bd8:	2100      	movs	r1, #0
 8007bda:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2242      	movs	r2, #66	@ 0x42
 8007be6:	2100      	movs	r1, #0
 8007be8:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2240      	movs	r2, #64	@ 0x40
 8007bee:	2100      	movs	r1, #0
 8007bf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	0018      	movs	r0, r3
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	b002      	add	sp, #8
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bfc:	b590      	push	{r4, r7, lr}
 8007bfe:	b089      	sub	sp, #36	@ 0x24
 8007c00:	af02      	add	r7, sp, #8
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	000c      	movs	r4, r1
 8007c06:	0010      	movs	r0, r2
 8007c08:	0019      	movs	r1, r3
 8007c0a:	230a      	movs	r3, #10
 8007c0c:	18fb      	adds	r3, r7, r3
 8007c0e:	1c22      	adds	r2, r4, #0
 8007c10:	801a      	strh	r2, [r3, #0]
 8007c12:	2308      	movs	r3, #8
 8007c14:	18fb      	adds	r3, r7, r3
 8007c16:	1c02      	adds	r2, r0, #0
 8007c18:	801a      	strh	r2, [r3, #0]
 8007c1a:	1dbb      	adds	r3, r7, #6
 8007c1c:	1c0a      	adds	r2, r1, #0
 8007c1e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2241      	movs	r2, #65	@ 0x41
 8007c24:	5c9b      	ldrb	r3, [r3, r2]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b20      	cmp	r3, #32
 8007c2a:	d000      	beq.n	8007c2e <HAL_I2C_Mem_Write+0x32>
 8007c2c:	e10c      	b.n	8007e48 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d004      	beq.n	8007c3e <HAL_I2C_Mem_Write+0x42>
 8007c34:	232c      	movs	r3, #44	@ 0x2c
 8007c36:	18fb      	adds	r3, r7, r3
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d105      	bne.n	8007c4a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2280      	movs	r2, #128	@ 0x80
 8007c42:	0092      	lsls	r2, r2, #2
 8007c44:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e0ff      	b.n	8007e4a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2240      	movs	r2, #64	@ 0x40
 8007c4e:	5c9b      	ldrb	r3, [r3, r2]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d101      	bne.n	8007c58 <HAL_I2C_Mem_Write+0x5c>
 8007c54:	2302      	movs	r3, #2
 8007c56:	e0f8      	b.n	8007e4a <HAL_I2C_Mem_Write+0x24e>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2240      	movs	r2, #64	@ 0x40
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c60:	f7fd ff40 	bl	8005ae4 <HAL_GetTick>
 8007c64:	0003      	movs	r3, r0
 8007c66:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c68:	2380      	movs	r3, #128	@ 0x80
 8007c6a:	0219      	lsls	r1, r3, #8
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	9300      	str	r3, [sp, #0]
 8007c72:	2319      	movs	r3, #25
 8007c74:	2201      	movs	r2, #1
 8007c76:	f000 fb0b 	bl	8008290 <I2C_WaitOnFlagUntilTimeout>
 8007c7a:	1e03      	subs	r3, r0, #0
 8007c7c:	d001      	beq.n	8007c82 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e0e3      	b.n	8007e4a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2241      	movs	r2, #65	@ 0x41
 8007c86:	2121      	movs	r1, #33	@ 0x21
 8007c88:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2242      	movs	r2, #66	@ 0x42
 8007c8e:	2140      	movs	r1, #64	@ 0x40
 8007c90:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	222c      	movs	r2, #44	@ 0x2c
 8007ca2:	18ba      	adds	r2, r7, r2
 8007ca4:	8812      	ldrh	r2, [r2, #0]
 8007ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007cae:	1dbb      	adds	r3, r7, #6
 8007cb0:	881c      	ldrh	r4, [r3, #0]
 8007cb2:	2308      	movs	r3, #8
 8007cb4:	18fb      	adds	r3, r7, r3
 8007cb6:	881a      	ldrh	r2, [r3, #0]
 8007cb8:	230a      	movs	r3, #10
 8007cba:	18fb      	adds	r3, r7, r3
 8007cbc:	8819      	ldrh	r1, [r3, #0]
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	0023      	movs	r3, r4
 8007cca:	f000 f9f9 	bl	80080c0 <I2C_RequestMemoryWrite>
 8007cce:	1e03      	subs	r3, r0, #0
 8007cd0:	d005      	beq.n	8007cde <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2240      	movs	r2, #64	@ 0x40
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e0b5      	b.n	8007e4a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	2bff      	cmp	r3, #255	@ 0xff
 8007ce6:	d911      	bls.n	8007d0c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	22ff      	movs	r2, #255	@ 0xff
 8007cec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	2380      	movs	r3, #128	@ 0x80
 8007cf6:	045c      	lsls	r4, r3, #17
 8007cf8:	230a      	movs	r3, #10
 8007cfa:	18fb      	adds	r3, r7, r3
 8007cfc:	8819      	ldrh	r1, [r3, #0]
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	2300      	movs	r3, #0
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	0023      	movs	r3, r4
 8007d06:	f000 fc9d 	bl	8008644 <I2C_TransferConfig>
 8007d0a:	e012      	b.n	8007d32 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	2380      	movs	r3, #128	@ 0x80
 8007d1e:	049c      	lsls	r4, r3, #18
 8007d20:	230a      	movs	r3, #10
 8007d22:	18fb      	adds	r3, r7, r3
 8007d24:	8819      	ldrh	r1, [r3, #0]
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	2300      	movs	r3, #0
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	0023      	movs	r3, r4
 8007d2e:	f000 fc89 	bl	8008644 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	0018      	movs	r0, r3
 8007d3a:	f000 fb01 	bl	8008340 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d3e:	1e03      	subs	r3, r0, #0
 8007d40:	d001      	beq.n	8007d46 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e081      	b.n	8007e4a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4a:	781a      	ldrb	r2, [r3, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	3b01      	subs	r3, #1
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d03a      	beq.n	8007df6 <HAL_I2C_Mem_Write+0x1fa>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d136      	bne.n	8007df6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	0013      	movs	r3, r2
 8007d92:	2200      	movs	r2, #0
 8007d94:	2180      	movs	r1, #128	@ 0x80
 8007d96:	f000 fa7b 	bl	8008290 <I2C_WaitOnFlagUntilTimeout>
 8007d9a:	1e03      	subs	r3, r0, #0
 8007d9c:	d001      	beq.n	8007da2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e053      	b.n	8007e4a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	2bff      	cmp	r3, #255	@ 0xff
 8007daa:	d911      	bls.n	8007dd0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	22ff      	movs	r2, #255	@ 0xff
 8007db0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	2380      	movs	r3, #128	@ 0x80
 8007dba:	045c      	lsls	r4, r3, #17
 8007dbc:	230a      	movs	r3, #10
 8007dbe:	18fb      	adds	r3, r7, r3
 8007dc0:	8819      	ldrh	r1, [r3, #0]
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	0023      	movs	r3, r4
 8007dca:	f000 fc3b 	bl	8008644 <I2C_TransferConfig>
 8007dce:	e012      	b.n	8007df6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	2380      	movs	r3, #128	@ 0x80
 8007de2:	049c      	lsls	r4, r3, #18
 8007de4:	230a      	movs	r3, #10
 8007de6:	18fb      	adds	r3, r7, r3
 8007de8:	8819      	ldrh	r1, [r3, #0]
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	2300      	movs	r3, #0
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	0023      	movs	r3, r4
 8007df2:	f000 fc27 	bl	8008644 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d198      	bne.n	8007d32 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	0018      	movs	r0, r3
 8007e08:	f000 fae0 	bl	80083cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e0c:	1e03      	subs	r3, r0, #0
 8007e0e:	d001      	beq.n	8007e14 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e01a      	b.n	8007e4a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	490b      	ldr	r1, [pc, #44]	@ (8007e54 <HAL_I2C_Mem_Write+0x258>)
 8007e28:	400a      	ands	r2, r1
 8007e2a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2241      	movs	r2, #65	@ 0x41
 8007e30:	2120      	movs	r1, #32
 8007e32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2242      	movs	r2, #66	@ 0x42
 8007e38:	2100      	movs	r1, #0
 8007e3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2240      	movs	r2, #64	@ 0x40
 8007e40:	2100      	movs	r1, #0
 8007e42:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	e000      	b.n	8007e4a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8007e48:	2302      	movs	r3, #2
  }
}
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	b007      	add	sp, #28
 8007e50:	bd90      	pop	{r4, r7, pc}
 8007e52:	46c0      	nop			@ (mov r8, r8)
 8007e54:	fe00e800 	.word	0xfe00e800

08007e58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e58:	b590      	push	{r4, r7, lr}
 8007e5a:	b089      	sub	sp, #36	@ 0x24
 8007e5c:	af02      	add	r7, sp, #8
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	000c      	movs	r4, r1
 8007e62:	0010      	movs	r0, r2
 8007e64:	0019      	movs	r1, r3
 8007e66:	230a      	movs	r3, #10
 8007e68:	18fb      	adds	r3, r7, r3
 8007e6a:	1c22      	adds	r2, r4, #0
 8007e6c:	801a      	strh	r2, [r3, #0]
 8007e6e:	2308      	movs	r3, #8
 8007e70:	18fb      	adds	r3, r7, r3
 8007e72:	1c02      	adds	r2, r0, #0
 8007e74:	801a      	strh	r2, [r3, #0]
 8007e76:	1dbb      	adds	r3, r7, #6
 8007e78:	1c0a      	adds	r2, r1, #0
 8007e7a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2241      	movs	r2, #65	@ 0x41
 8007e80:	5c9b      	ldrb	r3, [r3, r2]
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b20      	cmp	r3, #32
 8007e86:	d000      	beq.n	8007e8a <HAL_I2C_Mem_Read+0x32>
 8007e88:	e110      	b.n	80080ac <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <HAL_I2C_Mem_Read+0x42>
 8007e90:	232c      	movs	r3, #44	@ 0x2c
 8007e92:	18fb      	adds	r3, r7, r3
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d105      	bne.n	8007ea6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2280      	movs	r2, #128	@ 0x80
 8007e9e:	0092      	lsls	r2, r2, #2
 8007ea0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e103      	b.n	80080ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2240      	movs	r2, #64	@ 0x40
 8007eaa:	5c9b      	ldrb	r3, [r3, r2]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d101      	bne.n	8007eb4 <HAL_I2C_Mem_Read+0x5c>
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	e0fc      	b.n	80080ae <HAL_I2C_Mem_Read+0x256>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2240      	movs	r2, #64	@ 0x40
 8007eb8:	2101      	movs	r1, #1
 8007eba:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ebc:	f7fd fe12 	bl	8005ae4 <HAL_GetTick>
 8007ec0:	0003      	movs	r3, r0
 8007ec2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ec4:	2380      	movs	r3, #128	@ 0x80
 8007ec6:	0219      	lsls	r1, r3, #8
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	2319      	movs	r3, #25
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f000 f9dd 	bl	8008290 <I2C_WaitOnFlagUntilTimeout>
 8007ed6:	1e03      	subs	r3, r0, #0
 8007ed8:	d001      	beq.n	8007ede <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e0e7      	b.n	80080ae <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2241      	movs	r2, #65	@ 0x41
 8007ee2:	2122      	movs	r1, #34	@ 0x22
 8007ee4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2242      	movs	r2, #66	@ 0x42
 8007eea:	2140      	movs	r1, #64	@ 0x40
 8007eec:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ef8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	222c      	movs	r2, #44	@ 0x2c
 8007efe:	18ba      	adds	r2, r7, r2
 8007f00:	8812      	ldrh	r2, [r2, #0]
 8007f02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f0a:	1dbb      	adds	r3, r7, #6
 8007f0c:	881c      	ldrh	r4, [r3, #0]
 8007f0e:	2308      	movs	r3, #8
 8007f10:	18fb      	adds	r3, r7, r3
 8007f12:	881a      	ldrh	r2, [r3, #0]
 8007f14:	230a      	movs	r3, #10
 8007f16:	18fb      	adds	r3, r7, r3
 8007f18:	8819      	ldrh	r1, [r3, #0]
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	9301      	str	r3, [sp, #4]
 8007f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	0023      	movs	r3, r4
 8007f26:	f000 f92f 	bl	8008188 <I2C_RequestMemoryRead>
 8007f2a:	1e03      	subs	r3, r0, #0
 8007f2c:	d005      	beq.n	8007f3a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2240      	movs	r2, #64	@ 0x40
 8007f32:	2100      	movs	r1, #0
 8007f34:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e0b9      	b.n	80080ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	2bff      	cmp	r3, #255	@ 0xff
 8007f42:	d911      	bls.n	8007f68 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	22ff      	movs	r2, #255	@ 0xff
 8007f48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	2380      	movs	r3, #128	@ 0x80
 8007f52:	045c      	lsls	r4, r3, #17
 8007f54:	230a      	movs	r3, #10
 8007f56:	18fb      	adds	r3, r7, r3
 8007f58:	8819      	ldrh	r1, [r3, #0]
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	4b56      	ldr	r3, [pc, #344]	@ (80080b8 <HAL_I2C_Mem_Read+0x260>)
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	0023      	movs	r3, r4
 8007f62:	f000 fb6f 	bl	8008644 <I2C_TransferConfig>
 8007f66:	e012      	b.n	8007f8e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	2380      	movs	r3, #128	@ 0x80
 8007f7a:	049c      	lsls	r4, r3, #18
 8007f7c:	230a      	movs	r3, #10
 8007f7e:	18fb      	adds	r3, r7, r3
 8007f80:	8819      	ldrh	r1, [r3, #0]
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	4b4c      	ldr	r3, [pc, #304]	@ (80080b8 <HAL_I2C_Mem_Read+0x260>)
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	0023      	movs	r3, r4
 8007f8a:	f000 fb5b 	bl	8008644 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	0013      	movs	r3, r2
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2104      	movs	r1, #4
 8007f9c:	f000 f978 	bl	8008290 <I2C_WaitOnFlagUntilTimeout>
 8007fa0:	1e03      	subs	r3, r0, #0
 8007fa2:	d001      	beq.n	8007fa8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e082      	b.n	80080ae <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb2:	b2d2      	uxtb	r2, r2
 8007fb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fba:	1c5a      	adds	r2, r3, #1
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d03a      	beq.n	800805a <HAL_I2C_Mem_Read+0x202>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d136      	bne.n	800805a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	0013      	movs	r3, r2
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	2180      	movs	r1, #128	@ 0x80
 8007ffa:	f000 f949 	bl	8008290 <I2C_WaitOnFlagUntilTimeout>
 8007ffe:	1e03      	subs	r3, r0, #0
 8008000:	d001      	beq.n	8008006 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e053      	b.n	80080ae <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800800a:	b29b      	uxth	r3, r3
 800800c:	2bff      	cmp	r3, #255	@ 0xff
 800800e:	d911      	bls.n	8008034 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	22ff      	movs	r2, #255	@ 0xff
 8008014:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800801a:	b2da      	uxtb	r2, r3
 800801c:	2380      	movs	r3, #128	@ 0x80
 800801e:	045c      	lsls	r4, r3, #17
 8008020:	230a      	movs	r3, #10
 8008022:	18fb      	adds	r3, r7, r3
 8008024:	8819      	ldrh	r1, [r3, #0]
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	2300      	movs	r3, #0
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	0023      	movs	r3, r4
 800802e:	f000 fb09 	bl	8008644 <I2C_TransferConfig>
 8008032:	e012      	b.n	800805a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008038:	b29a      	uxth	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008042:	b2da      	uxtb	r2, r3
 8008044:	2380      	movs	r3, #128	@ 0x80
 8008046:	049c      	lsls	r4, r3, #18
 8008048:	230a      	movs	r3, #10
 800804a:	18fb      	adds	r3, r7, r3
 800804c:	8819      	ldrh	r1, [r3, #0]
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	2300      	movs	r3, #0
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	0023      	movs	r3, r4
 8008056:	f000 faf5 	bl	8008644 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800805e:	b29b      	uxth	r3, r3
 8008060:	2b00      	cmp	r3, #0
 8008062:	d194      	bne.n	8007f8e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	0018      	movs	r0, r3
 800806c:	f000 f9ae 	bl	80083cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8008070:	1e03      	subs	r3, r0, #0
 8008072:	d001      	beq.n	8008078 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e01a      	b.n	80080ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2220      	movs	r2, #32
 800807e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	490c      	ldr	r1, [pc, #48]	@ (80080bc <HAL_I2C_Mem_Read+0x264>)
 800808c:	400a      	ands	r2, r1
 800808e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2241      	movs	r2, #65	@ 0x41
 8008094:	2120      	movs	r1, #32
 8008096:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2242      	movs	r2, #66	@ 0x42
 800809c:	2100      	movs	r1, #0
 800809e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2240      	movs	r2, #64	@ 0x40
 80080a4:	2100      	movs	r1, #0
 80080a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	e000      	b.n	80080ae <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80080ac:	2302      	movs	r3, #2
  }
}
 80080ae:	0018      	movs	r0, r3
 80080b0:	46bd      	mov	sp, r7
 80080b2:	b007      	add	sp, #28
 80080b4:	bd90      	pop	{r4, r7, pc}
 80080b6:	46c0      	nop			@ (mov r8, r8)
 80080b8:	80002400 	.word	0x80002400
 80080bc:	fe00e800 	.word	0xfe00e800

080080c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80080c0:	b5b0      	push	{r4, r5, r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af02      	add	r7, sp, #8
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	000c      	movs	r4, r1
 80080ca:	0010      	movs	r0, r2
 80080cc:	0019      	movs	r1, r3
 80080ce:	250a      	movs	r5, #10
 80080d0:	197b      	adds	r3, r7, r5
 80080d2:	1c22      	adds	r2, r4, #0
 80080d4:	801a      	strh	r2, [r3, #0]
 80080d6:	2308      	movs	r3, #8
 80080d8:	18fb      	adds	r3, r7, r3
 80080da:	1c02      	adds	r2, r0, #0
 80080dc:	801a      	strh	r2, [r3, #0]
 80080de:	1dbb      	adds	r3, r7, #6
 80080e0:	1c0a      	adds	r2, r1, #0
 80080e2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80080e4:	1dbb      	adds	r3, r7, #6
 80080e6:	881b      	ldrh	r3, [r3, #0]
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	2380      	movs	r3, #128	@ 0x80
 80080ec:	045c      	lsls	r4, r3, #17
 80080ee:	197b      	adds	r3, r7, r5
 80080f0:	8819      	ldrh	r1, [r3, #0]
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	4b23      	ldr	r3, [pc, #140]	@ (8008184 <I2C_RequestMemoryWrite+0xc4>)
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	0023      	movs	r3, r4
 80080fa:	f000 faa3 	bl	8008644 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008100:	6a39      	ldr	r1, [r7, #32]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	0018      	movs	r0, r3
 8008106:	f000 f91b 	bl	8008340 <I2C_WaitOnTXISFlagUntilTimeout>
 800810a:	1e03      	subs	r3, r0, #0
 800810c:	d001      	beq.n	8008112 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e033      	b.n	800817a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008112:	1dbb      	adds	r3, r7, #6
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d107      	bne.n	800812a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800811a:	2308      	movs	r3, #8
 800811c:	18fb      	adds	r3, r7, r3
 800811e:	881b      	ldrh	r3, [r3, #0]
 8008120:	b2da      	uxtb	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	629a      	str	r2, [r3, #40]	@ 0x28
 8008128:	e019      	b.n	800815e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800812a:	2308      	movs	r3, #8
 800812c:	18fb      	adds	r3, r7, r3
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	0a1b      	lsrs	r3, r3, #8
 8008132:	b29b      	uxth	r3, r3
 8008134:	b2da      	uxtb	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800813c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800813e:	6a39      	ldr	r1, [r7, #32]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	0018      	movs	r0, r3
 8008144:	f000 f8fc 	bl	8008340 <I2C_WaitOnTXISFlagUntilTimeout>
 8008148:	1e03      	subs	r3, r0, #0
 800814a:	d001      	beq.n	8008150 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e014      	b.n	800817a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008150:	2308      	movs	r3, #8
 8008152:	18fb      	adds	r3, r7, r3
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	b2da      	uxtb	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800815e:	6a3a      	ldr	r2, [r7, #32]
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	0013      	movs	r3, r2
 8008168:	2200      	movs	r2, #0
 800816a:	2180      	movs	r1, #128	@ 0x80
 800816c:	f000 f890 	bl	8008290 <I2C_WaitOnFlagUntilTimeout>
 8008170:	1e03      	subs	r3, r0, #0
 8008172:	d001      	beq.n	8008178 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e000      	b.n	800817a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	0018      	movs	r0, r3
 800817c:	46bd      	mov	sp, r7
 800817e:	b004      	add	sp, #16
 8008180:	bdb0      	pop	{r4, r5, r7, pc}
 8008182:	46c0      	nop			@ (mov r8, r8)
 8008184:	80002000 	.word	0x80002000

08008188 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008188:	b5b0      	push	{r4, r5, r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af02      	add	r7, sp, #8
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	000c      	movs	r4, r1
 8008192:	0010      	movs	r0, r2
 8008194:	0019      	movs	r1, r3
 8008196:	250a      	movs	r5, #10
 8008198:	197b      	adds	r3, r7, r5
 800819a:	1c22      	adds	r2, r4, #0
 800819c:	801a      	strh	r2, [r3, #0]
 800819e:	2308      	movs	r3, #8
 80081a0:	18fb      	adds	r3, r7, r3
 80081a2:	1c02      	adds	r2, r0, #0
 80081a4:	801a      	strh	r2, [r3, #0]
 80081a6:	1dbb      	adds	r3, r7, #6
 80081a8:	1c0a      	adds	r2, r1, #0
 80081aa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80081ac:	1dbb      	adds	r3, r7, #6
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	197b      	adds	r3, r7, r5
 80081b4:	8819      	ldrh	r1, [r3, #0]
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	4b23      	ldr	r3, [pc, #140]	@ (8008248 <I2C_RequestMemoryRead+0xc0>)
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	2300      	movs	r3, #0
 80081be:	f000 fa41 	bl	8008644 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081c4:	6a39      	ldr	r1, [r7, #32]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	0018      	movs	r0, r3
 80081ca:	f000 f8b9 	bl	8008340 <I2C_WaitOnTXISFlagUntilTimeout>
 80081ce:	1e03      	subs	r3, r0, #0
 80081d0:	d001      	beq.n	80081d6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e033      	b.n	800823e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80081d6:	1dbb      	adds	r3, r7, #6
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d107      	bne.n	80081ee <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80081de:	2308      	movs	r3, #8
 80081e0:	18fb      	adds	r3, r7, r3
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b2da      	uxtb	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80081ec:	e019      	b.n	8008222 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80081ee:	2308      	movs	r3, #8
 80081f0:	18fb      	adds	r3, r7, r3
 80081f2:	881b      	ldrh	r3, [r3, #0]
 80081f4:	0a1b      	lsrs	r3, r3, #8
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008202:	6a39      	ldr	r1, [r7, #32]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	0018      	movs	r0, r3
 8008208:	f000 f89a 	bl	8008340 <I2C_WaitOnTXISFlagUntilTimeout>
 800820c:	1e03      	subs	r3, r0, #0
 800820e:	d001      	beq.n	8008214 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e014      	b.n	800823e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008214:	2308      	movs	r3, #8
 8008216:	18fb      	adds	r3, r7, r3
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	b2da      	uxtb	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008222:	6a3a      	ldr	r2, [r7, #32]
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	0013      	movs	r3, r2
 800822c:	2200      	movs	r2, #0
 800822e:	2140      	movs	r1, #64	@ 0x40
 8008230:	f000 f82e 	bl	8008290 <I2C_WaitOnFlagUntilTimeout>
 8008234:	1e03      	subs	r3, r0, #0
 8008236:	d001      	beq.n	800823c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e000      	b.n	800823e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	0018      	movs	r0, r3
 8008240:	46bd      	mov	sp, r7
 8008242:	b004      	add	sp, #16
 8008244:	bdb0      	pop	{r4, r5, r7, pc}
 8008246:	46c0      	nop			@ (mov r8, r8)
 8008248:	80002000 	.word	0x80002000

0800824c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	2202      	movs	r2, #2
 800825c:	4013      	ands	r3, r2
 800825e:	2b02      	cmp	r3, #2
 8008260:	d103      	bne.n	800826a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2200      	movs	r2, #0
 8008268:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	2201      	movs	r2, #1
 8008272:	4013      	ands	r3, r2
 8008274:	2b01      	cmp	r3, #1
 8008276:	d007      	beq.n	8008288 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	699a      	ldr	r2, [r3, #24]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2101      	movs	r1, #1
 8008284:	430a      	orrs	r2, r1
 8008286:	619a      	str	r2, [r3, #24]
  }
}
 8008288:	46c0      	nop			@ (mov r8, r8)
 800828a:	46bd      	mov	sp, r7
 800828c:	b002      	add	sp, #8
 800828e:	bd80      	pop	{r7, pc}

08008290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	603b      	str	r3, [r7, #0]
 800829c:	1dfb      	adds	r3, r7, #7
 800829e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082a0:	e03a      	b.n	8008318 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80082a2:	69ba      	ldr	r2, [r7, #24]
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	0018      	movs	r0, r3
 80082aa:	f000 f8d3 	bl	8008454 <I2C_IsErrorOccurred>
 80082ae:	1e03      	subs	r3, r0, #0
 80082b0:	d001      	beq.n	80082b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e040      	b.n	8008338 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	3301      	adds	r3, #1
 80082ba:	d02d      	beq.n	8008318 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082bc:	f7fd fc12 	bl	8005ae4 <HAL_GetTick>
 80082c0:	0002      	movs	r2, r0
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d302      	bcc.n	80082d2 <I2C_WaitOnFlagUntilTimeout+0x42>
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d122      	bne.n	8008318 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	4013      	ands	r3, r2
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	425a      	negs	r2, r3
 80082e2:	4153      	adcs	r3, r2
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	001a      	movs	r2, r3
 80082e8:	1dfb      	adds	r3, r7, #7
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d113      	bne.n	8008318 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f4:	2220      	movs	r2, #32
 80082f6:	431a      	orrs	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2241      	movs	r2, #65	@ 0x41
 8008300:	2120      	movs	r1, #32
 8008302:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2242      	movs	r2, #66	@ 0x42
 8008308:	2100      	movs	r1, #0
 800830a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2240      	movs	r2, #64	@ 0x40
 8008310:	2100      	movs	r1, #0
 8008312:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e00f      	b.n	8008338 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	4013      	ands	r3, r2
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	425a      	negs	r2, r3
 8008328:	4153      	adcs	r3, r2
 800832a:	b2db      	uxtb	r3, r3
 800832c:	001a      	movs	r2, r3
 800832e:	1dfb      	adds	r3, r7, #7
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	429a      	cmp	r2, r3
 8008334:	d0b5      	beq.n	80082a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	0018      	movs	r0, r3
 800833a:	46bd      	mov	sp, r7
 800833c:	b004      	add	sp, #16
 800833e:	bd80      	pop	{r7, pc}

08008340 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800834c:	e032      	b.n	80083b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	68b9      	ldr	r1, [r7, #8]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	0018      	movs	r0, r3
 8008356:	f000 f87d 	bl	8008454 <I2C_IsErrorOccurred>
 800835a:	1e03      	subs	r3, r0, #0
 800835c:	d001      	beq.n	8008362 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e030      	b.n	80083c4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	3301      	adds	r3, #1
 8008366:	d025      	beq.n	80083b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008368:	f7fd fbbc 	bl	8005ae4 <HAL_GetTick>
 800836c:	0002      	movs	r2, r0
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	429a      	cmp	r2, r3
 8008376:	d302      	bcc.n	800837e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d11a      	bne.n	80083b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	2202      	movs	r2, #2
 8008386:	4013      	ands	r3, r2
 8008388:	2b02      	cmp	r3, #2
 800838a:	d013      	beq.n	80083b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008390:	2220      	movs	r2, #32
 8008392:	431a      	orrs	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2241      	movs	r2, #65	@ 0x41
 800839c:	2120      	movs	r1, #32
 800839e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2242      	movs	r2, #66	@ 0x42
 80083a4:	2100      	movs	r1, #0
 80083a6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2240      	movs	r2, #64	@ 0x40
 80083ac:	2100      	movs	r1, #0
 80083ae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e007      	b.n	80083c4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	2202      	movs	r2, #2
 80083bc:	4013      	ands	r3, r2
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d1c5      	bne.n	800834e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	0018      	movs	r0, r3
 80083c6:	46bd      	mov	sp, r7
 80083c8:	b004      	add	sp, #16
 80083ca:	bd80      	pop	{r7, pc}

080083cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083d8:	e02f      	b.n	800843a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	68b9      	ldr	r1, [r7, #8]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	0018      	movs	r0, r3
 80083e2:	f000 f837 	bl	8008454 <I2C_IsErrorOccurred>
 80083e6:	1e03      	subs	r3, r0, #0
 80083e8:	d001      	beq.n	80083ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e02d      	b.n	800844a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ee:	f7fd fb79 	bl	8005ae4 <HAL_GetTick>
 80083f2:	0002      	movs	r2, r0
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d302      	bcc.n	8008404 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d11a      	bne.n	800843a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	2220      	movs	r2, #32
 800840c:	4013      	ands	r3, r2
 800840e:	2b20      	cmp	r3, #32
 8008410:	d013      	beq.n	800843a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008416:	2220      	movs	r2, #32
 8008418:	431a      	orrs	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2241      	movs	r2, #65	@ 0x41
 8008422:	2120      	movs	r1, #32
 8008424:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2242      	movs	r2, #66	@ 0x42
 800842a:	2100      	movs	r1, #0
 800842c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2240      	movs	r2, #64	@ 0x40
 8008432:	2100      	movs	r1, #0
 8008434:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e007      	b.n	800844a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	2220      	movs	r2, #32
 8008442:	4013      	ands	r3, r2
 8008444:	2b20      	cmp	r3, #32
 8008446:	d1c8      	bne.n	80083da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	0018      	movs	r0, r3
 800844c:	46bd      	mov	sp, r7
 800844e:	b004      	add	sp, #16
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b08a      	sub	sp, #40	@ 0x28
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008460:	2327      	movs	r3, #39	@ 0x27
 8008462:	18fb      	adds	r3, r7, r3
 8008464:	2200      	movs	r2, #0
 8008466:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008470:	2300      	movs	r3, #0
 8008472:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	2210      	movs	r2, #16
 800847c:	4013      	ands	r3, r2
 800847e:	d100      	bne.n	8008482 <I2C_IsErrorOccurred+0x2e>
 8008480:	e079      	b.n	8008576 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2210      	movs	r2, #16
 8008488:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800848a:	e057      	b.n	800853c <I2C_IsErrorOccurred+0xe8>
 800848c:	2227      	movs	r2, #39	@ 0x27
 800848e:	18bb      	adds	r3, r7, r2
 8008490:	18ba      	adds	r2, r7, r2
 8008492:	7812      	ldrb	r2, [r2, #0]
 8008494:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	3301      	adds	r3, #1
 800849a:	d04f      	beq.n	800853c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800849c:	f7fd fb22 	bl	8005ae4 <HAL_GetTick>
 80084a0:	0002      	movs	r2, r0
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d302      	bcc.n	80084b2 <I2C_IsErrorOccurred+0x5e>
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d144      	bne.n	800853c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	2380      	movs	r3, #128	@ 0x80
 80084ba:	01db      	lsls	r3, r3, #7
 80084bc:	4013      	ands	r3, r2
 80084be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80084c0:	2013      	movs	r0, #19
 80084c2:	183b      	adds	r3, r7, r0
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	2142      	movs	r1, #66	@ 0x42
 80084c8:	5c52      	ldrb	r2, [r2, r1]
 80084ca:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	699a      	ldr	r2, [r3, #24]
 80084d2:	2380      	movs	r3, #128	@ 0x80
 80084d4:	021b      	lsls	r3, r3, #8
 80084d6:	401a      	ands	r2, r3
 80084d8:	2380      	movs	r3, #128	@ 0x80
 80084da:	021b      	lsls	r3, r3, #8
 80084dc:	429a      	cmp	r2, r3
 80084de:	d126      	bne.n	800852e <I2C_IsErrorOccurred+0xda>
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	2380      	movs	r3, #128	@ 0x80
 80084e4:	01db      	lsls	r3, r3, #7
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d021      	beq.n	800852e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80084ea:	183b      	adds	r3, r7, r0
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	2b20      	cmp	r3, #32
 80084f0:	d01d      	beq.n	800852e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2180      	movs	r1, #128	@ 0x80
 80084fe:	01c9      	lsls	r1, r1, #7
 8008500:	430a      	orrs	r2, r1
 8008502:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008504:	f7fd faee 	bl	8005ae4 <HAL_GetTick>
 8008508:	0003      	movs	r3, r0
 800850a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800850c:	e00f      	b.n	800852e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800850e:	f7fd fae9 	bl	8005ae4 <HAL_GetTick>
 8008512:	0002      	movs	r2, r0
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	2b19      	cmp	r3, #25
 800851a:	d908      	bls.n	800852e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800851c:	6a3b      	ldr	r3, [r7, #32]
 800851e:	2220      	movs	r2, #32
 8008520:	4313      	orrs	r3, r2
 8008522:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008524:	2327      	movs	r3, #39	@ 0x27
 8008526:	18fb      	adds	r3, r7, r3
 8008528:	2201      	movs	r2, #1
 800852a:	701a      	strb	r2, [r3, #0]

              break;
 800852c:	e006      	b.n	800853c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	2220      	movs	r2, #32
 8008536:	4013      	ands	r3, r2
 8008538:	2b20      	cmp	r3, #32
 800853a:	d1e8      	bne.n	800850e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	2220      	movs	r2, #32
 8008544:	4013      	ands	r3, r2
 8008546:	2b20      	cmp	r3, #32
 8008548:	d004      	beq.n	8008554 <I2C_IsErrorOccurred+0x100>
 800854a:	2327      	movs	r3, #39	@ 0x27
 800854c:	18fb      	adds	r3, r7, r3
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d09b      	beq.n	800848c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008554:	2327      	movs	r3, #39	@ 0x27
 8008556:	18fb      	adds	r3, r7, r3
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d103      	bne.n	8008566 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2220      	movs	r2, #32
 8008564:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	2204      	movs	r2, #4
 800856a:	4313      	orrs	r3, r2
 800856c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800856e:	2327      	movs	r3, #39	@ 0x27
 8008570:	18fb      	adds	r3, r7, r3
 8008572:	2201      	movs	r2, #1
 8008574:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800857e:	69ba      	ldr	r2, [r7, #24]
 8008580:	2380      	movs	r3, #128	@ 0x80
 8008582:	005b      	lsls	r3, r3, #1
 8008584:	4013      	ands	r3, r2
 8008586:	d00c      	beq.n	80085a2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	2201      	movs	r2, #1
 800858c:	4313      	orrs	r3, r2
 800858e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2280      	movs	r2, #128	@ 0x80
 8008596:	0052      	lsls	r2, r2, #1
 8008598:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800859a:	2327      	movs	r3, #39	@ 0x27
 800859c:	18fb      	adds	r3, r7, r3
 800859e:	2201      	movs	r2, #1
 80085a0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	2380      	movs	r3, #128	@ 0x80
 80085a6:	00db      	lsls	r3, r3, #3
 80085a8:	4013      	ands	r3, r2
 80085aa:	d00c      	beq.n	80085c6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	2208      	movs	r2, #8
 80085b0:	4313      	orrs	r3, r2
 80085b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2280      	movs	r2, #128	@ 0x80
 80085ba:	00d2      	lsls	r2, r2, #3
 80085bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80085be:	2327      	movs	r3, #39	@ 0x27
 80085c0:	18fb      	adds	r3, r7, r3
 80085c2:	2201      	movs	r2, #1
 80085c4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	2380      	movs	r3, #128	@ 0x80
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4013      	ands	r3, r2
 80085ce:	d00c      	beq.n	80085ea <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	2202      	movs	r2, #2
 80085d4:	4313      	orrs	r3, r2
 80085d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2280      	movs	r2, #128	@ 0x80
 80085de:	0092      	lsls	r2, r2, #2
 80085e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80085e2:	2327      	movs	r3, #39	@ 0x27
 80085e4:	18fb      	adds	r3, r7, r3
 80085e6:	2201      	movs	r2, #1
 80085e8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80085ea:	2327      	movs	r3, #39	@ 0x27
 80085ec:	18fb      	adds	r3, r7, r3
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d01d      	beq.n	8008630 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	0018      	movs	r0, r3
 80085f8:	f7ff fe28 	bl	800824c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	490e      	ldr	r1, [pc, #56]	@ (8008640 <I2C_IsErrorOccurred+0x1ec>)
 8008608:	400a      	ands	r2, r1
 800860a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	431a      	orrs	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2241      	movs	r2, #65	@ 0x41
 800861c:	2120      	movs	r1, #32
 800861e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2242      	movs	r2, #66	@ 0x42
 8008624:	2100      	movs	r1, #0
 8008626:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2240      	movs	r2, #64	@ 0x40
 800862c:	2100      	movs	r1, #0
 800862e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8008630:	2327      	movs	r3, #39	@ 0x27
 8008632:	18fb      	adds	r3, r7, r3
 8008634:	781b      	ldrb	r3, [r3, #0]
}
 8008636:	0018      	movs	r0, r3
 8008638:	46bd      	mov	sp, r7
 800863a:	b00a      	add	sp, #40	@ 0x28
 800863c:	bd80      	pop	{r7, pc}
 800863e:	46c0      	nop			@ (mov r8, r8)
 8008640:	fe00e800 	.word	0xfe00e800

08008644 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008644:	b590      	push	{r4, r7, lr}
 8008646:	b087      	sub	sp, #28
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	0008      	movs	r0, r1
 800864e:	0011      	movs	r1, r2
 8008650:	607b      	str	r3, [r7, #4]
 8008652:	240a      	movs	r4, #10
 8008654:	193b      	adds	r3, r7, r4
 8008656:	1c02      	adds	r2, r0, #0
 8008658:	801a      	strh	r2, [r3, #0]
 800865a:	2009      	movs	r0, #9
 800865c:	183b      	adds	r3, r7, r0
 800865e:	1c0a      	adds	r2, r1, #0
 8008660:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008662:	193b      	adds	r3, r7, r4
 8008664:	881b      	ldrh	r3, [r3, #0]
 8008666:	059b      	lsls	r3, r3, #22
 8008668:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800866a:	183b      	adds	r3, r7, r0
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	0419      	lsls	r1, r3, #16
 8008670:	23ff      	movs	r3, #255	@ 0xff
 8008672:	041b      	lsls	r3, r3, #16
 8008674:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008676:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800867c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867e:	4313      	orrs	r3, r2
 8008680:	005b      	lsls	r3, r3, #1
 8008682:	085b      	lsrs	r3, r3, #1
 8008684:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800868e:	0d51      	lsrs	r1, r2, #21
 8008690:	2280      	movs	r2, #128	@ 0x80
 8008692:	00d2      	lsls	r2, r2, #3
 8008694:	400a      	ands	r2, r1
 8008696:	4907      	ldr	r1, [pc, #28]	@ (80086b4 <I2C_TransferConfig+0x70>)
 8008698:	430a      	orrs	r2, r1
 800869a:	43d2      	mvns	r2, r2
 800869c:	401a      	ands	r2, r3
 800869e:	0011      	movs	r1, r2
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80086aa:	46c0      	nop			@ (mov r8, r8)
 80086ac:	46bd      	mov	sp, r7
 80086ae:	b007      	add	sp, #28
 80086b0:	bd90      	pop	{r4, r7, pc}
 80086b2:	46c0      	nop			@ (mov r8, r8)
 80086b4:	03ff63ff 	.word	0x03ff63ff

080086b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2241      	movs	r2, #65	@ 0x41
 80086c6:	5c9b      	ldrb	r3, [r3, r2]
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b20      	cmp	r3, #32
 80086cc:	d138      	bne.n	8008740 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2240      	movs	r2, #64	@ 0x40
 80086d2:	5c9b      	ldrb	r3, [r3, r2]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80086d8:	2302      	movs	r3, #2
 80086da:	e032      	b.n	8008742 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2240      	movs	r2, #64	@ 0x40
 80086e0:	2101      	movs	r1, #1
 80086e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2241      	movs	r2, #65	@ 0x41
 80086e8:	2124      	movs	r1, #36	@ 0x24
 80086ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2101      	movs	r1, #1
 80086f8:	438a      	bics	r2, r1
 80086fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4911      	ldr	r1, [pc, #68]	@ (800874c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8008708:	400a      	ands	r2, r1
 800870a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	6819      	ldr	r1, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	430a      	orrs	r2, r1
 800871a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2101      	movs	r1, #1
 8008728:	430a      	orrs	r2, r1
 800872a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2241      	movs	r2, #65	@ 0x41
 8008730:	2120      	movs	r1, #32
 8008732:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2240      	movs	r2, #64	@ 0x40
 8008738:	2100      	movs	r1, #0
 800873a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	e000      	b.n	8008742 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008740:	2302      	movs	r3, #2
  }
}
 8008742:	0018      	movs	r0, r3
 8008744:	46bd      	mov	sp, r7
 8008746:	b002      	add	sp, #8
 8008748:	bd80      	pop	{r7, pc}
 800874a:	46c0      	nop			@ (mov r8, r8)
 800874c:	ffffefff 	.word	0xffffefff

08008750 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2241      	movs	r2, #65	@ 0x41
 800875e:	5c9b      	ldrb	r3, [r3, r2]
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b20      	cmp	r3, #32
 8008764:	d139      	bne.n	80087da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2240      	movs	r2, #64	@ 0x40
 800876a:	5c9b      	ldrb	r3, [r3, r2]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d101      	bne.n	8008774 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008770:	2302      	movs	r3, #2
 8008772:	e033      	b.n	80087dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2240      	movs	r2, #64	@ 0x40
 8008778:	2101      	movs	r1, #1
 800877a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2241      	movs	r2, #65	@ 0x41
 8008780:	2124      	movs	r1, #36	@ 0x24
 8008782:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2101      	movs	r1, #1
 8008790:	438a      	bics	r2, r1
 8008792:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	4a11      	ldr	r2, [pc, #68]	@ (80087e4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80087a0:	4013      	ands	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	021b      	lsls	r3, r3, #8
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2101      	movs	r1, #1
 80087c2:	430a      	orrs	r2, r1
 80087c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2241      	movs	r2, #65	@ 0x41
 80087ca:	2120      	movs	r1, #32
 80087cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2240      	movs	r2, #64	@ 0x40
 80087d2:	2100      	movs	r1, #0
 80087d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	e000      	b.n	80087dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80087da:	2302      	movs	r3, #2
  }
}
 80087dc:	0018      	movs	r0, r3
 80087de:	46bd      	mov	sp, r7
 80087e0:	b004      	add	sp, #16
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	fffff0ff 	.word	0xfffff0ff

080087e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d101      	bne.n	80087fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e20f      	b.n	8008c1a <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2201      	movs	r2, #1
 8008800:	4013      	ands	r3, r2
 8008802:	d100      	bne.n	8008806 <HAL_RCC_OscConfig+0x1e>
 8008804:	e069      	b.n	80088da <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008806:	4bc8      	ldr	r3, [pc, #800]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	2238      	movs	r2, #56	@ 0x38
 800880c:	4013      	ands	r3, r2
 800880e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	2b08      	cmp	r3, #8
 8008814:	d105      	bne.n	8008822 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d15d      	bne.n	80088da <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e1fb      	b.n	8008c1a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	2380      	movs	r3, #128	@ 0x80
 8008828:	025b      	lsls	r3, r3, #9
 800882a:	429a      	cmp	r2, r3
 800882c:	d107      	bne.n	800883e <HAL_RCC_OscConfig+0x56>
 800882e:	4bbe      	ldr	r3, [pc, #760]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	4bbd      	ldr	r3, [pc, #756]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008834:	2180      	movs	r1, #128	@ 0x80
 8008836:	0249      	lsls	r1, r1, #9
 8008838:	430a      	orrs	r2, r1
 800883a:	601a      	str	r2, [r3, #0]
 800883c:	e020      	b.n	8008880 <HAL_RCC_OscConfig+0x98>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	23a0      	movs	r3, #160	@ 0xa0
 8008844:	02db      	lsls	r3, r3, #11
 8008846:	429a      	cmp	r2, r3
 8008848:	d10e      	bne.n	8008868 <HAL_RCC_OscConfig+0x80>
 800884a:	4bb7      	ldr	r3, [pc, #732]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	4bb6      	ldr	r3, [pc, #728]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008850:	2180      	movs	r1, #128	@ 0x80
 8008852:	02c9      	lsls	r1, r1, #11
 8008854:	430a      	orrs	r2, r1
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	4bb3      	ldr	r3, [pc, #716]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	4bb2      	ldr	r3, [pc, #712]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 800885e:	2180      	movs	r1, #128	@ 0x80
 8008860:	0249      	lsls	r1, r1, #9
 8008862:	430a      	orrs	r2, r1
 8008864:	601a      	str	r2, [r3, #0]
 8008866:	e00b      	b.n	8008880 <HAL_RCC_OscConfig+0x98>
 8008868:	4baf      	ldr	r3, [pc, #700]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	4bae      	ldr	r3, [pc, #696]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 800886e:	49af      	ldr	r1, [pc, #700]	@ (8008b2c <HAL_RCC_OscConfig+0x344>)
 8008870:	400a      	ands	r2, r1
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	4bac      	ldr	r3, [pc, #688]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	4bab      	ldr	r3, [pc, #684]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 800887a:	49ad      	ldr	r1, [pc, #692]	@ (8008b30 <HAL_RCC_OscConfig+0x348>)
 800887c:	400a      	ands	r2, r1
 800887e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d014      	beq.n	80088b2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008888:	f7fd f92c 	bl	8005ae4 <HAL_GetTick>
 800888c:	0003      	movs	r3, r0
 800888e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008890:	e008      	b.n	80088a4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8008892:	f7fd f927 	bl	8005ae4 <HAL_GetTick>
 8008896:	0002      	movs	r2, r0
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	2b64      	cmp	r3, #100	@ 0x64
 800889e:	d901      	bls.n	80088a4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e1ba      	b.n	8008c1a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80088a4:	4ba0      	ldr	r3, [pc, #640]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	2380      	movs	r3, #128	@ 0x80
 80088aa:	029b      	lsls	r3, r3, #10
 80088ac:	4013      	ands	r3, r2
 80088ae:	d0f0      	beq.n	8008892 <HAL_RCC_OscConfig+0xaa>
 80088b0:	e013      	b.n	80088da <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b2:	f7fd f917 	bl	8005ae4 <HAL_GetTick>
 80088b6:	0003      	movs	r3, r0
 80088b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80088ba:	e008      	b.n	80088ce <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80088bc:	f7fd f912 	bl	8005ae4 <HAL_GetTick>
 80088c0:	0002      	movs	r2, r0
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b64      	cmp	r3, #100	@ 0x64
 80088c8:	d901      	bls.n	80088ce <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e1a5      	b.n	8008c1a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80088ce:	4b96      	ldr	r3, [pc, #600]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	2380      	movs	r3, #128	@ 0x80
 80088d4:	029b      	lsls	r3, r3, #10
 80088d6:	4013      	ands	r3, r2
 80088d8:	d1f0      	bne.n	80088bc <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2202      	movs	r2, #2
 80088e0:	4013      	ands	r3, r2
 80088e2:	d100      	bne.n	80088e6 <HAL_RCC_OscConfig+0xfe>
 80088e4:	e086      	b.n	80089f4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088e6:	4b90      	ldr	r3, [pc, #576]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	2238      	movs	r2, #56	@ 0x38
 80088ec:	4013      	ands	r3, r2
 80088ee:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d12f      	bne.n	8008956 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e18b      	b.n	8008c1a <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008902:	4b89      	ldr	r3, [pc, #548]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	4a8b      	ldr	r2, [pc, #556]	@ (8008b34 <HAL_RCC_OscConfig+0x34c>)
 8008908:	4013      	ands	r3, r2
 800890a:	0019      	movs	r1, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	021a      	lsls	r2, r3, #8
 8008912:	4b85      	ldr	r3, [pc, #532]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008914:	430a      	orrs	r2, r1
 8008916:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d112      	bne.n	8008944 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800891e:	4b82      	ldr	r3, [pc, #520]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a85      	ldr	r2, [pc, #532]	@ (8008b38 <HAL_RCC_OscConfig+0x350>)
 8008924:	4013      	ands	r3, r2
 8008926:	0019      	movs	r1, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	691a      	ldr	r2, [r3, #16]
 800892c:	4b7e      	ldr	r3, [pc, #504]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 800892e:	430a      	orrs	r2, r1
 8008930:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008932:	4b7d      	ldr	r3, [pc, #500]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	0adb      	lsrs	r3, r3, #11
 8008938:	2207      	movs	r2, #7
 800893a:	4013      	ands	r3, r2
 800893c:	4a7f      	ldr	r2, [pc, #508]	@ (8008b3c <HAL_RCC_OscConfig+0x354>)
 800893e:	40da      	lsrs	r2, r3
 8008940:	4b7f      	ldr	r3, [pc, #508]	@ (8008b40 <HAL_RCC_OscConfig+0x358>)
 8008942:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008944:	4b7f      	ldr	r3, [pc, #508]	@ (8008b44 <HAL_RCC_OscConfig+0x35c>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	0018      	movs	r0, r3
 800894a:	f7fd f86f 	bl	8005a2c <HAL_InitTick>
 800894e:	1e03      	subs	r3, r0, #0
 8008950:	d050      	beq.n	80089f4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e161      	b.n	8008c1a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d030      	beq.n	80089c0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800895e:	4b72      	ldr	r3, [pc, #456]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a75      	ldr	r2, [pc, #468]	@ (8008b38 <HAL_RCC_OscConfig+0x350>)
 8008964:	4013      	ands	r3, r2
 8008966:	0019      	movs	r1, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	691a      	ldr	r2, [r3, #16]
 800896c:	4b6e      	ldr	r3, [pc, #440]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 800896e:	430a      	orrs	r2, r1
 8008970:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8008972:	4b6d      	ldr	r3, [pc, #436]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	4b6c      	ldr	r3, [pc, #432]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008978:	2180      	movs	r1, #128	@ 0x80
 800897a:	0049      	lsls	r1, r1, #1
 800897c:	430a      	orrs	r2, r1
 800897e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008980:	f7fd f8b0 	bl	8005ae4 <HAL_GetTick>
 8008984:	0003      	movs	r3, r0
 8008986:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008988:	e008      	b.n	800899c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800898a:	f7fd f8ab 	bl	8005ae4 <HAL_GetTick>
 800898e:	0002      	movs	r2, r0
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	2b02      	cmp	r3, #2
 8008996:	d901      	bls.n	800899c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	e13e      	b.n	8008c1a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800899c:	4b62      	ldr	r3, [pc, #392]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	2380      	movs	r3, #128	@ 0x80
 80089a2:	00db      	lsls	r3, r3, #3
 80089a4:	4013      	ands	r3, r2
 80089a6:	d0f0      	beq.n	800898a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089a8:	4b5f      	ldr	r3, [pc, #380]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	4a61      	ldr	r2, [pc, #388]	@ (8008b34 <HAL_RCC_OscConfig+0x34c>)
 80089ae:	4013      	ands	r3, r2
 80089b0:	0019      	movs	r1, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	021a      	lsls	r2, r3, #8
 80089b8:	4b5b      	ldr	r3, [pc, #364]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 80089ba:	430a      	orrs	r2, r1
 80089bc:	605a      	str	r2, [r3, #4]
 80089be:	e019      	b.n	80089f4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80089c0:	4b59      	ldr	r3, [pc, #356]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	4b58      	ldr	r3, [pc, #352]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 80089c6:	4960      	ldr	r1, [pc, #384]	@ (8008b48 <HAL_RCC_OscConfig+0x360>)
 80089c8:	400a      	ands	r2, r1
 80089ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089cc:	f7fd f88a 	bl	8005ae4 <HAL_GetTick>
 80089d0:	0003      	movs	r3, r0
 80089d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80089d4:	e008      	b.n	80089e8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80089d6:	f7fd f885 	bl	8005ae4 <HAL_GetTick>
 80089da:	0002      	movs	r2, r0
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d901      	bls.n	80089e8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e118      	b.n	8008c1a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80089e8:	4b4f      	ldr	r3, [pc, #316]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	2380      	movs	r3, #128	@ 0x80
 80089ee:	00db      	lsls	r3, r3, #3
 80089f0:	4013      	ands	r3, r2
 80089f2:	d1f0      	bne.n	80089d6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2208      	movs	r2, #8
 80089fa:	4013      	ands	r3, r2
 80089fc:	d042      	beq.n	8008a84 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80089fe:	4b4a      	ldr	r3, [pc, #296]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	2238      	movs	r2, #56	@ 0x38
 8008a04:	4013      	ands	r3, r2
 8008a06:	2b18      	cmp	r3, #24
 8008a08:	d105      	bne.n	8008a16 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d138      	bne.n	8008a84 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e101      	b.n	8008c1a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d019      	beq.n	8008a52 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008a1e:	4b42      	ldr	r3, [pc, #264]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008a20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008a22:	4b41      	ldr	r3, [pc, #260]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008a24:	2101      	movs	r1, #1
 8008a26:	430a      	orrs	r2, r1
 8008a28:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a2a:	f7fd f85b 	bl	8005ae4 <HAL_GetTick>
 8008a2e:	0003      	movs	r3, r0
 8008a30:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8008a32:	e008      	b.n	8008a46 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8008a34:	f7fd f856 	bl	8005ae4 <HAL_GetTick>
 8008a38:	0002      	movs	r2, r0
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d901      	bls.n	8008a46 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e0e9      	b.n	8008c1a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8008a46:	4b38      	ldr	r3, [pc, #224]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	d0f1      	beq.n	8008a34 <HAL_RCC_OscConfig+0x24c>
 8008a50:	e018      	b.n	8008a84 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008a52:	4b35      	ldr	r3, [pc, #212]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008a54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008a56:	4b34      	ldr	r3, [pc, #208]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008a58:	2101      	movs	r1, #1
 8008a5a:	438a      	bics	r2, r1
 8008a5c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a5e:	f7fd f841 	bl	8005ae4 <HAL_GetTick>
 8008a62:	0003      	movs	r3, r0
 8008a64:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8008a66:	e008      	b.n	8008a7a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8008a68:	f7fd f83c 	bl	8005ae4 <HAL_GetTick>
 8008a6c:	0002      	movs	r2, r0
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d901      	bls.n	8008a7a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e0cf      	b.n	8008c1a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8008a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a7e:	2202      	movs	r2, #2
 8008a80:	4013      	ands	r3, r2
 8008a82:	d1f1      	bne.n	8008a68 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2204      	movs	r2, #4
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	d100      	bne.n	8008a90 <HAL_RCC_OscConfig+0x2a8>
 8008a8e:	e084      	b.n	8008b9a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a90:	230f      	movs	r3, #15
 8008a92:	18fb      	adds	r3, r7, r3
 8008a94:	2200      	movs	r2, #0
 8008a96:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8008a98:	4b23      	ldr	r3, [pc, #140]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	2238      	movs	r2, #56	@ 0x38
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	2b20      	cmp	r3, #32
 8008aa2:	d106      	bne.n	8008ab2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d000      	beq.n	8008aae <HAL_RCC_OscConfig+0x2c6>
 8008aac:	e075      	b.n	8008b9a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e0b3      	b.n	8008c1a <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d106      	bne.n	8008ac8 <HAL_RCC_OscConfig+0x2e0>
 8008aba:	4b1b      	ldr	r3, [pc, #108]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008abc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008abe:	4b1a      	ldr	r3, [pc, #104]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008ac6:	e01c      	b.n	8008b02 <HAL_RCC_OscConfig+0x31a>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	2b05      	cmp	r3, #5
 8008ace:	d10c      	bne.n	8008aea <HAL_RCC_OscConfig+0x302>
 8008ad0:	4b15      	ldr	r3, [pc, #84]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008ad2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ad4:	4b14      	ldr	r3, [pc, #80]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008ad6:	2104      	movs	r1, #4
 8008ad8:	430a      	orrs	r2, r1
 8008ada:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008adc:	4b12      	ldr	r3, [pc, #72]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008ade:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ae0:	4b11      	ldr	r3, [pc, #68]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008ae8:	e00b      	b.n	8008b02 <HAL_RCC_OscConfig+0x31a>
 8008aea:	4b0f      	ldr	r3, [pc, #60]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008aec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008aee:	4b0e      	ldr	r3, [pc, #56]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008af0:	2101      	movs	r1, #1
 8008af2:	438a      	bics	r2, r1
 8008af4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008af6:	4b0c      	ldr	r3, [pc, #48]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008af8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008afa:	4b0b      	ldr	r3, [pc, #44]	@ (8008b28 <HAL_RCC_OscConfig+0x340>)
 8008afc:	2104      	movs	r1, #4
 8008afe:	438a      	bics	r2, r1
 8008b00:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d028      	beq.n	8008b5c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b0a:	f7fc ffeb 	bl	8005ae4 <HAL_GetTick>
 8008b0e:	0003      	movs	r3, r0
 8008b10:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8008b12:	e01d      	b.n	8008b50 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b14:	f7fc ffe6 	bl	8005ae4 <HAL_GetTick>
 8008b18:	0002      	movs	r2, r0
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	4a0b      	ldr	r2, [pc, #44]	@ (8008b4c <HAL_RCC_OscConfig+0x364>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d915      	bls.n	8008b50 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e078      	b.n	8008c1a <HAL_RCC_OscConfig+0x432>
 8008b28:	40021000 	.word	0x40021000
 8008b2c:	fffeffff 	.word	0xfffeffff
 8008b30:	fffbffff 	.word	0xfffbffff
 8008b34:	ffff80ff 	.word	0xffff80ff
 8008b38:	ffffc7ff 	.word	0xffffc7ff
 8008b3c:	02dc6c00 	.word	0x02dc6c00
 8008b40:	20000024 	.word	0x20000024
 8008b44:	20000028 	.word	0x20000028
 8008b48:	fffffeff 	.word	0xfffffeff
 8008b4c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8008b50:	4b34      	ldr	r3, [pc, #208]	@ (8008c24 <HAL_RCC_OscConfig+0x43c>)
 8008b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b54:	2202      	movs	r2, #2
 8008b56:	4013      	ands	r3, r2
 8008b58:	d0dc      	beq.n	8008b14 <HAL_RCC_OscConfig+0x32c>
 8008b5a:	e013      	b.n	8008b84 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b5c:	f7fc ffc2 	bl	8005ae4 <HAL_GetTick>
 8008b60:	0003      	movs	r3, r0
 8008b62:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8008b64:	e009      	b.n	8008b7a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b66:	f7fc ffbd 	bl	8005ae4 <HAL_GetTick>
 8008b6a:	0002      	movs	r2, r0
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	4a2d      	ldr	r2, [pc, #180]	@ (8008c28 <HAL_RCC_OscConfig+0x440>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d901      	bls.n	8008b7a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e04f      	b.n	8008c1a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8008b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8008c24 <HAL_RCC_OscConfig+0x43c>)
 8008b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b7e:	2202      	movs	r2, #2
 8008b80:	4013      	ands	r3, r2
 8008b82:	d1f0      	bne.n	8008b66 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008b84:	230f      	movs	r3, #15
 8008b86:	18fb      	adds	r3, r7, r3
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d105      	bne.n	8008b9a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008b8e:	4b25      	ldr	r3, [pc, #148]	@ (8008c24 <HAL_RCC_OscConfig+0x43c>)
 8008b90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b92:	4b24      	ldr	r3, [pc, #144]	@ (8008c24 <HAL_RCC_OscConfig+0x43c>)
 8008b94:	4925      	ldr	r1, [pc, #148]	@ (8008c2c <HAL_RCC_OscConfig+0x444>)
 8008b96:	400a      	ands	r2, r1
 8008b98:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2210      	movs	r2, #16
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	d039      	beq.n	8008c18 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	69db      	ldr	r3, [r3, #28]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d01b      	beq.n	8008be4 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008bac:	4b1d      	ldr	r3, [pc, #116]	@ (8008c24 <HAL_RCC_OscConfig+0x43c>)
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8008c24 <HAL_RCC_OscConfig+0x43c>)
 8008bb2:	2180      	movs	r1, #128	@ 0x80
 8008bb4:	03c9      	lsls	r1, r1, #15
 8008bb6:	430a      	orrs	r2, r1
 8008bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bba:	f7fc ff93 	bl	8005ae4 <HAL_GetTick>
 8008bbe:	0003      	movs	r3, r0
 8008bc0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8008bc2:	e008      	b.n	8008bd6 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bc4:	f7fc ff8e 	bl	8005ae4 <HAL_GetTick>
 8008bc8:	0002      	movs	r2, r0
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d901      	bls.n	8008bd6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e021      	b.n	8008c1a <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8008bd6:	4b13      	ldr	r3, [pc, #76]	@ (8008c24 <HAL_RCC_OscConfig+0x43c>)
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	2380      	movs	r3, #128	@ 0x80
 8008bdc:	041b      	lsls	r3, r3, #16
 8008bde:	4013      	ands	r3, r2
 8008be0:	d0f0      	beq.n	8008bc4 <HAL_RCC_OscConfig+0x3dc>
 8008be2:	e019      	b.n	8008c18 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008be4:	4b0f      	ldr	r3, [pc, #60]	@ (8008c24 <HAL_RCC_OscConfig+0x43c>)
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	4b0e      	ldr	r3, [pc, #56]	@ (8008c24 <HAL_RCC_OscConfig+0x43c>)
 8008bea:	4911      	ldr	r1, [pc, #68]	@ (8008c30 <HAL_RCC_OscConfig+0x448>)
 8008bec:	400a      	ands	r2, r1
 8008bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bf0:	f7fc ff78 	bl	8005ae4 <HAL_GetTick>
 8008bf4:	0003      	movs	r3, r0
 8008bf6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8008bf8:	e008      	b.n	8008c0c <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bfa:	f7fc ff73 	bl	8005ae4 <HAL_GetTick>
 8008bfe:	0002      	movs	r2, r0
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d901      	bls.n	8008c0c <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e006      	b.n	8008c1a <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8008c0c:	4b05      	ldr	r3, [pc, #20]	@ (8008c24 <HAL_RCC_OscConfig+0x43c>)
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	2380      	movs	r3, #128	@ 0x80
 8008c12:	041b      	lsls	r3, r3, #16
 8008c14:	4013      	ands	r3, r2
 8008c16:	d1f0      	bne.n	8008bfa <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	0018      	movs	r0, r3
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	b006      	add	sp, #24
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	46c0      	nop			@ (mov r8, r8)
 8008c24:	40021000 	.word	0x40021000
 8008c28:	00001388 	.word	0x00001388
 8008c2c:	efffffff 	.word	0xefffffff
 8008c30:	ffbfffff 	.word	0xffbfffff

08008c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d101      	bne.n	8008c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e0f6      	b.n	8008e36 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c48:	4b7d      	ldr	r3, [pc, #500]	@ (8008e40 <HAL_RCC_ClockConfig+0x20c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2207      	movs	r2, #7
 8008c4e:	4013      	ands	r3, r2
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d91e      	bls.n	8008c94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c56:	4b7a      	ldr	r3, [pc, #488]	@ (8008e40 <HAL_RCC_ClockConfig+0x20c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2207      	movs	r2, #7
 8008c5c:	4393      	bics	r3, r2
 8008c5e:	0019      	movs	r1, r3
 8008c60:	4b77      	ldr	r3, [pc, #476]	@ (8008e40 <HAL_RCC_ClockConfig+0x20c>)
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	430a      	orrs	r2, r1
 8008c66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008c68:	f7fc ff3c 	bl	8005ae4 <HAL_GetTick>
 8008c6c:	0003      	movs	r3, r0
 8008c6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008c70:	e009      	b.n	8008c86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008c72:	f7fc ff37 	bl	8005ae4 <HAL_GetTick>
 8008c76:	0002      	movs	r2, r0
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	1ad3      	subs	r3, r2, r3
 8008c7c:	4a71      	ldr	r2, [pc, #452]	@ (8008e44 <HAL_RCC_ClockConfig+0x210>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d901      	bls.n	8008c86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e0d7      	b.n	8008e36 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008c86:	4b6e      	ldr	r3, [pc, #440]	@ (8008e40 <HAL_RCC_ClockConfig+0x20c>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2207      	movs	r2, #7
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d1ee      	bne.n	8008c72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2202      	movs	r2, #2
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	d017      	beq.n	8008cce <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2204      	movs	r2, #4
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	d008      	beq.n	8008cba <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008ca8:	4b67      	ldr	r3, [pc, #412]	@ (8008e48 <HAL_RCC_ClockConfig+0x214>)
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	4a67      	ldr	r2, [pc, #412]	@ (8008e4c <HAL_RCC_ClockConfig+0x218>)
 8008cae:	401a      	ands	r2, r3
 8008cb0:	4b65      	ldr	r3, [pc, #404]	@ (8008e48 <HAL_RCC_ClockConfig+0x214>)
 8008cb2:	21b0      	movs	r1, #176	@ 0xb0
 8008cb4:	0109      	lsls	r1, r1, #4
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cba:	4b63      	ldr	r3, [pc, #396]	@ (8008e48 <HAL_RCC_ClockConfig+0x214>)
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	4a64      	ldr	r2, [pc, #400]	@ (8008e50 <HAL_RCC_ClockConfig+0x21c>)
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	0019      	movs	r1, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68da      	ldr	r2, [r3, #12]
 8008cc8:	4b5f      	ldr	r3, [pc, #380]	@ (8008e48 <HAL_RCC_ClockConfig+0x214>)
 8008cca:	430a      	orrs	r2, r1
 8008ccc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	d100      	bne.n	8008cda <HAL_RCC_ClockConfig+0xa6>
 8008cd8:	e061      	b.n	8008d9e <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8008cda:	4b5b      	ldr	r3, [pc, #364]	@ (8008e48 <HAL_RCC_ClockConfig+0x214>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	221c      	movs	r2, #28
 8008ce0:	4393      	bics	r3, r2
 8008ce2:	0019      	movs	r1, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	689a      	ldr	r2, [r3, #8]
 8008ce8:	4b57      	ldr	r3, [pc, #348]	@ (8008e48 <HAL_RCC_ClockConfig+0x214>)
 8008cea:	430a      	orrs	r2, r1
 8008cec:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d107      	bne.n	8008d06 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008cf6:	4b54      	ldr	r3, [pc, #336]	@ (8008e48 <HAL_RCC_ClockConfig+0x214>)
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	2380      	movs	r3, #128	@ 0x80
 8008cfc:	029b      	lsls	r3, r3, #10
 8008cfe:	4013      	ands	r3, r2
 8008d00:	d12b      	bne.n	8008d5a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e097      	b.n	8008e36 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d107      	bne.n	8008d1e <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d0e:	4b4e      	ldr	r3, [pc, #312]	@ (8008e48 <HAL_RCC_ClockConfig+0x214>)
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	2380      	movs	r3, #128	@ 0x80
 8008d14:	00db      	lsls	r3, r3, #3
 8008d16:	4013      	ands	r3, r2
 8008d18:	d11f      	bne.n	8008d5a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e08b      	b.n	8008e36 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d107      	bne.n	8008d36 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8008d26:	4b48      	ldr	r3, [pc, #288]	@ (8008e48 <HAL_RCC_ClockConfig+0x214>)
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	2380      	movs	r3, #128	@ 0x80
 8008d2c:	041b      	lsls	r3, r3, #16
 8008d2e:	4013      	ands	r3, r2
 8008d30:	d113      	bne.n	8008d5a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e07f      	b.n	8008e36 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d106      	bne.n	8008d4c <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8008d3e:	4b42      	ldr	r3, [pc, #264]	@ (8008e48 <HAL_RCC_ClockConfig+0x214>)
 8008d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d42:	2202      	movs	r2, #2
 8008d44:	4013      	ands	r3, r2
 8008d46:	d108      	bne.n	8008d5a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e074      	b.n	8008e36 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8008d4c:	4b3e      	ldr	r3, [pc, #248]	@ (8008e48 <HAL_RCC_ClockConfig+0x214>)
 8008d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d50:	2202      	movs	r2, #2
 8008d52:	4013      	ands	r3, r2
 8008d54:	d101      	bne.n	8008d5a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e06d      	b.n	8008e36 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8008e48 <HAL_RCC_ClockConfig+0x214>)
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	2207      	movs	r2, #7
 8008d60:	4393      	bics	r3, r2
 8008d62:	0019      	movs	r1, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685a      	ldr	r2, [r3, #4]
 8008d68:	4b37      	ldr	r3, [pc, #220]	@ (8008e48 <HAL_RCC_ClockConfig+0x214>)
 8008d6a:	430a      	orrs	r2, r1
 8008d6c:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d6e:	f7fc feb9 	bl	8005ae4 <HAL_GetTick>
 8008d72:	0003      	movs	r3, r0
 8008d74:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d76:	e009      	b.n	8008d8c <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008d78:	f7fc feb4 	bl	8005ae4 <HAL_GetTick>
 8008d7c:	0002      	movs	r2, r0
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	4a30      	ldr	r2, [pc, #192]	@ (8008e44 <HAL_RCC_ClockConfig+0x210>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d901      	bls.n	8008d8c <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e054      	b.n	8008e36 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8008e48 <HAL_RCC_ClockConfig+0x214>)
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	2238      	movs	r2, #56	@ 0x38
 8008d92:	401a      	ands	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	00db      	lsls	r3, r3, #3
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d1ec      	bne.n	8008d78 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d9e:	4b28      	ldr	r3, [pc, #160]	@ (8008e40 <HAL_RCC_ClockConfig+0x20c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2207      	movs	r2, #7
 8008da4:	4013      	ands	r3, r2
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d21e      	bcs.n	8008dea <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dac:	4b24      	ldr	r3, [pc, #144]	@ (8008e40 <HAL_RCC_ClockConfig+0x20c>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2207      	movs	r2, #7
 8008db2:	4393      	bics	r3, r2
 8008db4:	0019      	movs	r1, r3
 8008db6:	4b22      	ldr	r3, [pc, #136]	@ (8008e40 <HAL_RCC_ClockConfig+0x20c>)
 8008db8:	683a      	ldr	r2, [r7, #0]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008dbe:	f7fc fe91 	bl	8005ae4 <HAL_GetTick>
 8008dc2:	0003      	movs	r3, r0
 8008dc4:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008dc6:	e009      	b.n	8008ddc <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008dc8:	f7fc fe8c 	bl	8005ae4 <HAL_GetTick>
 8008dcc:	0002      	movs	r2, r0
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8008e44 <HAL_RCC_ClockConfig+0x210>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d901      	bls.n	8008ddc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e02c      	b.n	8008e36 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008ddc:	4b18      	ldr	r3, [pc, #96]	@ (8008e40 <HAL_RCC_ClockConfig+0x20c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2207      	movs	r2, #7
 8008de2:	4013      	ands	r3, r2
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d1ee      	bne.n	8008dc8 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2204      	movs	r2, #4
 8008df0:	4013      	ands	r3, r2
 8008df2:	d009      	beq.n	8008e08 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008df4:	4b14      	ldr	r3, [pc, #80]	@ (8008e48 <HAL_RCC_ClockConfig+0x214>)
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	4a16      	ldr	r2, [pc, #88]	@ (8008e54 <HAL_RCC_ClockConfig+0x220>)
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	0019      	movs	r1, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	691a      	ldr	r2, [r3, #16]
 8008e02:	4b11      	ldr	r3, [pc, #68]	@ (8008e48 <HAL_RCC_ClockConfig+0x214>)
 8008e04:	430a      	orrs	r2, r1
 8008e06:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008e08:	f000 f82c 	bl	8008e64 <HAL_RCC_GetSysClockFreq>
 8008e0c:	0001      	movs	r1, r0
 8008e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8008e48 <HAL_RCC_ClockConfig+0x214>)
 8008e10:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008e12:	0a1b      	lsrs	r3, r3, #8
 8008e14:	220f      	movs	r2, #15
 8008e16:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008e18:	4b0f      	ldr	r3, [pc, #60]	@ (8008e58 <HAL_RCC_ClockConfig+0x224>)
 8008e1a:	0092      	lsls	r2, r2, #2
 8008e1c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008e1e:	221f      	movs	r2, #31
 8008e20:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008e22:	000a      	movs	r2, r1
 8008e24:	40da      	lsrs	r2, r3
 8008e26:	4b0d      	ldr	r3, [pc, #52]	@ (8008e5c <HAL_RCC_ClockConfig+0x228>)
 8008e28:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e60 <HAL_RCC_ClockConfig+0x22c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	0018      	movs	r0, r3
 8008e30:	f7fc fdfc 	bl	8005a2c <HAL_InitTick>
 8008e34:	0003      	movs	r3, r0
}
 8008e36:	0018      	movs	r0, r3
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	b004      	add	sp, #16
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	46c0      	nop			@ (mov r8, r8)
 8008e40:	40022000 	.word	0x40022000
 8008e44:	00001388 	.word	0x00001388
 8008e48:	40021000 	.word	0x40021000
 8008e4c:	ffff84ff 	.word	0xffff84ff
 8008e50:	fffff0ff 	.word	0xfffff0ff
 8008e54:	ffff8fff 	.word	0xffff8fff
 8008e58:	0800af5c 	.word	0x0800af5c
 8008e5c:	20000024 	.word	0x20000024
 8008e60:	20000028 	.word	0x20000028

08008e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8008e6a:	4b27      	ldr	r3, [pc, #156]	@ (8008f08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	089b      	lsrs	r3, r3, #2
 8008e70:	2207      	movs	r2, #7
 8008e72:	4013      	ands	r3, r2
 8008e74:	3301      	adds	r3, #1
 8008e76:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008e78:	4b23      	ldr	r3, [pc, #140]	@ (8008f08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	2238      	movs	r2, #56	@ 0x38
 8008e7e:	4013      	ands	r3, r2
 8008e80:	d10f      	bne.n	8008ea2 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008e82:	4b21      	ldr	r3, [pc, #132]	@ (8008f08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	0adb      	lsrs	r3, r3, #11
 8008e88:	2207      	movs	r2, #7
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	409a      	lsls	r2, r3
 8008e90:	0013      	movs	r3, r2
 8008e92:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008e94:	6879      	ldr	r1, [r7, #4]
 8008e96:	481d      	ldr	r0, [pc, #116]	@ (8008f0c <HAL_RCC_GetSysClockFreq+0xa8>)
 8008e98:	f7f7 f936 	bl	8000108 <__udivsi3>
 8008e9c:	0003      	movs	r3, r0
 8008e9e:	60fb      	str	r3, [r7, #12]
 8008ea0:	e027      	b.n	8008ef2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008ea2:	4b19      	ldr	r3, [pc, #100]	@ (8008f08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	2238      	movs	r2, #56	@ 0x38
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	2b08      	cmp	r3, #8
 8008eac:	d102      	bne.n	8008eb4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008eae:	4b18      	ldr	r3, [pc, #96]	@ (8008f10 <HAL_RCC_GetSysClockFreq+0xac>)
 8008eb0:	60fb      	str	r3, [r7, #12]
 8008eb2:	e01e      	b.n	8008ef2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8008eb4:	4b14      	ldr	r3, [pc, #80]	@ (8008f08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	2238      	movs	r2, #56	@ 0x38
 8008eba:	4013      	ands	r3, r2
 8008ebc:	2b20      	cmp	r3, #32
 8008ebe:	d103      	bne.n	8008ec8 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008ec0:	2380      	movs	r3, #128	@ 0x80
 8008ec2:	021b      	lsls	r3, r3, #8
 8008ec4:	60fb      	str	r3, [r7, #12]
 8008ec6:	e014      	b.n	8008ef2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8008ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8008f08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	2238      	movs	r2, #56	@ 0x38
 8008ece:	4013      	ands	r3, r2
 8008ed0:	2b18      	cmp	r3, #24
 8008ed2:	d103      	bne.n	8008edc <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008ed4:	23fa      	movs	r3, #250	@ 0xfa
 8008ed6:	01db      	lsls	r3, r3, #7
 8008ed8:	60fb      	str	r3, [r7, #12]
 8008eda:	e00a      	b.n	8008ef2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8008edc:	4b0a      	ldr	r3, [pc, #40]	@ (8008f08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	2238      	movs	r2, #56	@ 0x38
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	2b10      	cmp	r3, #16
 8008ee6:	d102      	bne.n	8008eee <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8008ee8:	4b08      	ldr	r3, [pc, #32]	@ (8008f0c <HAL_RCC_GetSysClockFreq+0xa8>)
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	e001      	b.n	8008ef2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8008ef2:	68b9      	ldr	r1, [r7, #8]
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f7f7 f907 	bl	8000108 <__udivsi3>
 8008efa:	0003      	movs	r3, r0
 8008efc:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8008efe:	68fb      	ldr	r3, [r7, #12]
}
 8008f00:	0018      	movs	r0, r3
 8008f02:	46bd      	mov	sp, r7
 8008f04:	b004      	add	sp, #16
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	40021000 	.word	0x40021000
 8008f0c:	02dc6c00 	.word	0x02dc6c00
 8008f10:	007a1200 	.word	0x007a1200

08008f14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008f18:	f7ff ffa4 	bl	8008e64 <HAL_RCC_GetSysClockFreq>
 8008f1c:	0001      	movs	r1, r0
 8008f1e:	4b09      	ldr	r3, [pc, #36]	@ (8008f44 <HAL_RCC_GetHCLKFreq+0x30>)
 8008f20:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008f22:	0a1b      	lsrs	r3, r3, #8
 8008f24:	220f      	movs	r2, #15
 8008f26:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008f28:	4b07      	ldr	r3, [pc, #28]	@ (8008f48 <HAL_RCC_GetHCLKFreq+0x34>)
 8008f2a:	0092      	lsls	r2, r2, #2
 8008f2c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008f2e:	221f      	movs	r2, #31
 8008f30:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008f32:	000a      	movs	r2, r1
 8008f34:	40da      	lsrs	r2, r3
 8008f36:	4b05      	ldr	r3, [pc, #20]	@ (8008f4c <HAL_RCC_GetHCLKFreq+0x38>)
 8008f38:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8008f3a:	4b04      	ldr	r3, [pc, #16]	@ (8008f4c <HAL_RCC_GetHCLKFreq+0x38>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
}
 8008f3e:	0018      	movs	r0, r3
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	40021000 	.word	0x40021000
 8008f48:	0800af5c 	.word	0x0800af5c
 8008f4c:	20000024 	.word	0x20000024

08008f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8008f54:	f7ff ffde 	bl	8008f14 <HAL_RCC_GetHCLKFreq>
 8008f58:	0001      	movs	r1, r0
 8008f5a:	4b07      	ldr	r3, [pc, #28]	@ (8008f78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	0b1b      	lsrs	r3, r3, #12
 8008f60:	2207      	movs	r2, #7
 8008f62:	401a      	ands	r2, r3
 8008f64:	4b05      	ldr	r3, [pc, #20]	@ (8008f7c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8008f66:	0092      	lsls	r2, r2, #2
 8008f68:	58d3      	ldr	r3, [r2, r3]
 8008f6a:	221f      	movs	r2, #31
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	40d9      	lsrs	r1, r3
 8008f70:	000b      	movs	r3, r1
}
 8008f72:	0018      	movs	r0, r3
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	40021000 	.word	0x40021000
 8008f7c:	0800af9c 	.word	0x0800af9c

08008f80 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008f88:	2313      	movs	r3, #19
 8008f8a:	18fb      	adds	r3, r7, r3
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f90:	2312      	movs	r3, #18
 8008f92:	18fb      	adds	r3, r7, r3
 8008f94:	2200      	movs	r2, #0
 8008f96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2240      	movs	r2, #64	@ 0x40
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	d100      	bne.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8008fa2:	e079      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008fa4:	2011      	movs	r0, #17
 8008fa6:	183b      	adds	r3, r7, r0
 8008fa8:	2200      	movs	r2, #0
 8008faa:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008fac:	4b6a      	ldr	r3, [pc, #424]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008fae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fb0:	2380      	movs	r3, #128	@ 0x80
 8008fb2:	055b      	lsls	r3, r3, #21
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	d110      	bne.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fb8:	4b67      	ldr	r3, [pc, #412]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008fba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fbc:	4b66      	ldr	r3, [pc, #408]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008fbe:	2180      	movs	r1, #128	@ 0x80
 8008fc0:	0549      	lsls	r1, r1, #21
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008fc6:	4b64      	ldr	r3, [pc, #400]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008fc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fca:	2380      	movs	r3, #128	@ 0x80
 8008fcc:	055b      	lsls	r3, r3, #21
 8008fce:	4013      	ands	r3, r2
 8008fd0:	60bb      	str	r3, [r7, #8]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fd4:	183b      	adds	r3, r7, r0
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8008fda:	4b5f      	ldr	r3, [pc, #380]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008fdc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fde:	23c0      	movs	r3, #192	@ 0xc0
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d019      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d014      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8008ff6:	4b58      	ldr	r3, [pc, #352]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ffa:	4a58      	ldr	r2, [pc, #352]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009000:	4b55      	ldr	r3, [pc, #340]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009002:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009004:	4b54      	ldr	r3, [pc, #336]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009006:	2180      	movs	r1, #128	@ 0x80
 8009008:	0249      	lsls	r1, r1, #9
 800900a:	430a      	orrs	r2, r1
 800900c:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800900e:	4b52      	ldr	r3, [pc, #328]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009010:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009012:	4b51      	ldr	r3, [pc, #324]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009014:	4952      	ldr	r1, [pc, #328]	@ (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009016:	400a      	ands	r2, r1
 8009018:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800901a:	4b4f      	ldr	r3, [pc, #316]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	2201      	movs	r2, #1
 8009024:	4013      	ands	r3, r2
 8009026:	d016      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009028:	f7fc fd5c 	bl	8005ae4 <HAL_GetTick>
 800902c:	0003      	movs	r3, r0
 800902e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8009030:	e00c      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009032:	f7fc fd57 	bl	8005ae4 <HAL_GetTick>
 8009036:	0002      	movs	r2, r0
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	4a49      	ldr	r2, [pc, #292]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d904      	bls.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8009042:	2313      	movs	r3, #19
 8009044:	18fb      	adds	r3, r7, r3
 8009046:	2203      	movs	r2, #3
 8009048:	701a      	strb	r2, [r3, #0]
          break;
 800904a:	e004      	b.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800904c:	4b42      	ldr	r3, [pc, #264]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800904e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009050:	2202      	movs	r2, #2
 8009052:	4013      	ands	r3, r2
 8009054:	d0ed      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8009056:	2313      	movs	r3, #19
 8009058:	18fb      	adds	r3, r7, r3
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10a      	bne.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009060:	4b3d      	ldr	r3, [pc, #244]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009064:	4a3d      	ldr	r2, [pc, #244]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009066:	4013      	ands	r3, r2
 8009068:	0019      	movs	r1, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	69da      	ldr	r2, [r3, #28]
 800906e:	4b3a      	ldr	r3, [pc, #232]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009070:	430a      	orrs	r2, r1
 8009072:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009074:	e005      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009076:	2312      	movs	r3, #18
 8009078:	18fb      	adds	r3, r7, r3
 800907a:	2213      	movs	r2, #19
 800907c:	18ba      	adds	r2, r7, r2
 800907e:	7812      	ldrb	r2, [r2, #0]
 8009080:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009082:	2311      	movs	r3, #17
 8009084:	18fb      	adds	r3, r7, r3
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d105      	bne.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800908c:	4b32      	ldr	r3, [pc, #200]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800908e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009090:	4b31      	ldr	r3, [pc, #196]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009092:	4935      	ldr	r1, [pc, #212]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8009094:	400a      	ands	r2, r1
 8009096:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2201      	movs	r2, #1
 800909e:	4013      	ands	r3, r2
 80090a0:	d009      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80090a2:	4b2d      	ldr	r3, [pc, #180]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80090a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090a6:	2203      	movs	r2, #3
 80090a8:	4393      	bics	r3, r2
 80090aa:	0019      	movs	r1, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	689a      	ldr	r2, [r3, #8]
 80090b0:	4b29      	ldr	r3, [pc, #164]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80090b2:	430a      	orrs	r2, r1
 80090b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2202      	movs	r2, #2
 80090bc:	4013      	ands	r3, r2
 80090be:	d009      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80090c0:	4b25      	ldr	r3, [pc, #148]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80090c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090c4:	4a29      	ldr	r2, [pc, #164]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80090c6:	4013      	ands	r3, r2
 80090c8:	0019      	movs	r1, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68da      	ldr	r2, [r3, #12]
 80090ce:	4b22      	ldr	r3, [pc, #136]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80090d0:	430a      	orrs	r2, r1
 80090d2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2220      	movs	r2, #32
 80090da:	4013      	ands	r3, r2
 80090dc:	d008      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80090de:	4b1e      	ldr	r3, [pc, #120]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80090e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	0899      	lsrs	r1, r3, #2
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	699a      	ldr	r2, [r3, #24]
 80090ea:	4b1b      	ldr	r3, [pc, #108]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80090ec:	430a      	orrs	r2, r1
 80090ee:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2208      	movs	r2, #8
 80090f6:	4013      	ands	r3, r2
 80090f8:	d009      	beq.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80090fa:	4b17      	ldr	r3, [pc, #92]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80090fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090fe:	4a1c      	ldr	r2, [pc, #112]	@ (8009170 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8009100:	4013      	ands	r3, r2
 8009102:	0019      	movs	r1, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	695a      	ldr	r2, [r3, #20]
 8009108:	4b13      	ldr	r3, [pc, #76]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800910a:	430a      	orrs	r2, r1
 800910c:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2204      	movs	r2, #4
 8009114:	4013      	ands	r3, r2
 8009116:	d009      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8009118:	4b0f      	ldr	r3, [pc, #60]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800911a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800911c:	4a15      	ldr	r2, [pc, #84]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800911e:	4013      	ands	r3, r2
 8009120:	0019      	movs	r1, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	691a      	ldr	r2, [r3, #16]
 8009126:	4b0c      	ldr	r3, [pc, #48]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009128:	430a      	orrs	r2, r1
 800912a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2280      	movs	r2, #128	@ 0x80
 8009132:	4013      	ands	r3, r2
 8009134:	d009      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8009136:	4b08      	ldr	r3, [pc, #32]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	22e0      	movs	r2, #224	@ 0xe0
 800913c:	4393      	bics	r3, r2
 800913e:	0019      	movs	r1, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	4b04      	ldr	r3, [pc, #16]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009146:	430a      	orrs	r2, r1
 8009148:	601a      	str	r2, [r3, #0]
  }
  return status;
 800914a:	2312      	movs	r3, #18
 800914c:	18fb      	adds	r3, r7, r3
 800914e:	781b      	ldrb	r3, [r3, #0]
}
 8009150:	0018      	movs	r0, r3
 8009152:	46bd      	mov	sp, r7
 8009154:	b006      	add	sp, #24
 8009156:	bd80      	pop	{r7, pc}
 8009158:	40021000 	.word	0x40021000
 800915c:	fffffcff 	.word	0xfffffcff
 8009160:	fffeffff 	.word	0xfffeffff
 8009164:	00001388 	.word	0x00001388
 8009168:	efffffff 	.word	0xefffffff
 800916c:	ffffcfff 	.word	0xffffcfff
 8009170:	ffffefff 	.word	0xffffefff
 8009174:	ffff3fff 	.word	0xffff3fff

08009178 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d101      	bne.n	800918a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e032      	b.n	80091f0 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2288      	movs	r2, #136	@ 0x88
 800918e:	2124      	movs	r1, #36	@ 0x24
 8009190:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2101      	movs	r1, #1
 800919e:	438a      	bics	r2, r1
 80091a0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2200      	movs	r2, #0
 80091a8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2200      	movs	r2, #0
 80091b0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2200      	movs	r2, #0
 80091b8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	0018      	movs	r0, r3
 80091be:	f7f9 fdf3 	bl	8002da8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2290      	movs	r2, #144	@ 0x90
 80091c6:	2100      	movs	r1, #0
 80091c8:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2288      	movs	r2, #136	@ 0x88
 80091ce:	2100      	movs	r1, #0
 80091d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	228c      	movs	r2, #140	@ 0x8c
 80091d6:	2100      	movs	r1, #0
 80091d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2284      	movs	r2, #132	@ 0x84
 80091ea:	2100      	movs	r1, #0
 80091ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	0018      	movs	r0, r3
 80091f2:	46bd      	mov	sp, r7
 80091f4:	b002      	add	sp, #8
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	1dbb      	adds	r3, r7, #6
 8009204:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2288      	movs	r2, #136	@ 0x88
 800920a:	589b      	ldr	r3, [r3, r2]
 800920c:	2b20      	cmp	r3, #32
 800920e:	d000      	beq.n	8009212 <HAL_UART_Transmit_DMA+0x1a>
 8009210:	e079      	b.n	8009306 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d003      	beq.n	8009220 <HAL_UART_Transmit_DMA+0x28>
 8009218:	1dbb      	adds	r3, r7, #6
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d101      	bne.n	8009224 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e071      	b.n	8009308 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	689a      	ldr	r2, [r3, #8]
 8009228:	2380      	movs	r3, #128	@ 0x80
 800922a:	015b      	lsls	r3, r3, #5
 800922c:	429a      	cmp	r2, r3
 800922e:	d109      	bne.n	8009244 <HAL_UART_Transmit_DMA+0x4c>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d105      	bne.n	8009244 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	2201      	movs	r2, #1
 800923c:	4013      	ands	r3, r2
 800923e:	d001      	beq.n	8009244 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e061      	b.n	8009308 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	1dba      	adds	r2, r7, #6
 800924e:	2154      	movs	r1, #84	@ 0x54
 8009250:	8812      	ldrh	r2, [r2, #0]
 8009252:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	1dba      	adds	r2, r7, #6
 8009258:	2156      	movs	r1, #86	@ 0x56
 800925a:	8812      	ldrh	r2, [r2, #0]
 800925c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2290      	movs	r2, #144	@ 0x90
 8009262:	2100      	movs	r1, #0
 8009264:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2288      	movs	r2, #136	@ 0x88
 800926a:	2121      	movs	r1, #33	@ 0x21
 800926c:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d028      	beq.n	80092c8 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800927a:	4a25      	ldr	r2, [pc, #148]	@ (8009310 <HAL_UART_Transmit_DMA+0x118>)
 800927c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009282:	4a24      	ldr	r2, [pc, #144]	@ (8009314 <HAL_UART_Transmit_DMA+0x11c>)
 8009284:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800928a:	4a23      	ldr	r2, [pc, #140]	@ (8009318 <HAL_UART_Transmit_DMA+0x120>)
 800928c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009292:	2200      	movs	r2, #0
 8009294:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800929e:	0019      	movs	r1, r3
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3328      	adds	r3, #40	@ 0x28
 80092a6:	001a      	movs	r2, r3
 80092a8:	1dbb      	adds	r3, r7, #6
 80092aa:	881b      	ldrh	r3, [r3, #0]
 80092ac:	f7fd fe9c 	bl	8006fe8 <HAL_DMA_Start_IT>
 80092b0:	1e03      	subs	r3, r0, #0
 80092b2:	d009      	beq.n	80092c8 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2290      	movs	r2, #144	@ 0x90
 80092b8:	2110      	movs	r1, #16
 80092ba:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2288      	movs	r2, #136	@ 0x88
 80092c0:	2120      	movs	r1, #32
 80092c2:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	e01f      	b.n	8009308 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2240      	movs	r2, #64	@ 0x40
 80092ce:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80092d0:	f3ef 8310 	mrs	r3, PRIMASK
 80092d4:	613b      	str	r3, [r7, #16]
  return(result);
 80092d6:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092d8:	61fb      	str	r3, [r7, #28]
 80092da:	2301      	movs	r3, #1
 80092dc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	f383 8810 	msr	PRIMASK, r3
}
 80092e4:	46c0      	nop			@ (mov r8, r8)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	689a      	ldr	r2, [r3, #8]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2180      	movs	r1, #128	@ 0x80
 80092f2:	430a      	orrs	r2, r1
 80092f4:	609a      	str	r2, [r3, #8]
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	f383 8810 	msr	PRIMASK, r3
}
 8009300:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	e000      	b.n	8009308 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8009306:	2302      	movs	r3, #2
  }
}
 8009308:	0018      	movs	r0, r3
 800930a:	46bd      	mov	sp, r7
 800930c:	b008      	add	sp, #32
 800930e:	bd80      	pop	{r7, pc}
 8009310:	0800a521 	.word	0x0800a521
 8009314:	0800a5b9 	.word	0x0800a5b9
 8009318:	0800a74b 	.word	0x0800a74b

0800931c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b096      	sub	sp, #88	@ 0x58
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009324:	f3ef 8310 	mrs	r3, PRIMASK
 8009328:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800932a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800932c:	657b      	str	r3, [r7, #84]	@ 0x54
 800932e:	2301      	movs	r3, #1
 8009330:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009334:	f383 8810 	msr	PRIMASK, r3
}
 8009338:	46c0      	nop			@ (mov r8, r8)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4979      	ldr	r1, [pc, #484]	@ (800952c <HAL_UART_Abort+0x210>)
 8009346:	400a      	ands	r2, r1
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800934c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800934e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009350:	f383 8810 	msr	PRIMASK, r3
}
 8009354:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009356:	f3ef 8310 	mrs	r3, PRIMASK
 800935a:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800935c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800935e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009360:	2301      	movs	r3, #1
 8009362:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009366:	f383 8810 	msr	PRIMASK, r3
}
 800936a:	46c0      	nop			@ (mov r8, r8)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	689a      	ldr	r2, [r3, #8]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	496e      	ldr	r1, [pc, #440]	@ (8009530 <HAL_UART_Abort+0x214>)
 8009378:	400a      	ands	r2, r1
 800937a:	609a      	str	r2, [r3, #8]
 800937c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800937e:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009382:	f383 8810 	msr	PRIMASK, r3
}
 8009386:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800938c:	2b01      	cmp	r3, #1
 800938e:	d118      	bne.n	80093c2 <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009390:	f3ef 8310 	mrs	r3, PRIMASK
 8009394:	623b      	str	r3, [r7, #32]
  return(result);
 8009396:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009398:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800939a:	2301      	movs	r3, #1
 800939c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800939e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a0:	f383 8810 	msr	PRIMASK, r3
}
 80093a4:	46c0      	nop			@ (mov r8, r8)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2110      	movs	r1, #16
 80093b2:	438a      	bics	r2, r1
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093bc:	f383 8810 	msr	PRIMASK, r3
}
 80093c0:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	2280      	movs	r2, #128	@ 0x80
 80093ca:	4013      	ands	r3, r2
 80093cc:	2b80      	cmp	r3, #128	@ 0x80
 80093ce:	d135      	bne.n	800943c <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80093d0:	f3ef 8310 	mrs	r3, PRIMASK
 80093d4:	617b      	str	r3, [r7, #20]
  return(result);
 80093d6:	697b      	ldr	r3, [r7, #20]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093da:	2301      	movs	r3, #1
 80093dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	f383 8810 	msr	PRIMASK, r3
}
 80093e4:	46c0      	nop			@ (mov r8, r8)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	689a      	ldr	r2, [r3, #8]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2180      	movs	r1, #128	@ 0x80
 80093f2:	438a      	bics	r2, r1
 80093f4:	609a      	str	r2, [r3, #8]
 80093f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	f383 8810 	msr	PRIMASK, r3
}
 8009400:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009406:	2b00      	cmp	r3, #0
 8009408:	d018      	beq.n	800943c <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800940e:	2200      	movs	r2, #0
 8009410:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009416:	0018      	movs	r0, r3
 8009418:	f7fd fe6e 	bl	80070f8 <HAL_DMA_Abort>
 800941c:	1e03      	subs	r3, r0, #0
 800941e:	d00d      	beq.n	800943c <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009424:	0018      	movs	r0, r3
 8009426:	f7fd fff5 	bl	8007414 <HAL_DMA_GetError>
 800942a:	0003      	movs	r3, r0
 800942c:	2b20      	cmp	r3, #32
 800942e:	d105      	bne.n	800943c <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2290      	movs	r2, #144	@ 0x90
 8009434:	2110      	movs	r1, #16
 8009436:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009438:	2303      	movs	r3, #3
 800943a:	e072      	b.n	8009522 <HAL_UART_Abort+0x206>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	2240      	movs	r2, #64	@ 0x40
 8009444:	4013      	ands	r3, r2
 8009446:	2b40      	cmp	r3, #64	@ 0x40
 8009448:	d139      	bne.n	80094be <HAL_UART_Abort+0x1a2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800944a:	f3ef 8310 	mrs	r3, PRIMASK
 800944e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009450:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009452:	647b      	str	r3, [r7, #68]	@ 0x44
 8009454:	2301      	movs	r3, #1
 8009456:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f383 8810 	msr	PRIMASK, r3
}
 800945e:	46c0      	nop			@ (mov r8, r8)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	689a      	ldr	r2, [r3, #8]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2140      	movs	r1, #64	@ 0x40
 800946c:	438a      	bics	r2, r1
 800946e:	609a      	str	r2, [r3, #8]
 8009470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009472:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	f383 8810 	msr	PRIMASK, r3
}
 800947a:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2280      	movs	r2, #128	@ 0x80
 8009480:	589b      	ldr	r3, [r3, r2]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d01b      	beq.n	80094be <HAL_UART_Abort+0x1a2>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2280      	movs	r2, #128	@ 0x80
 800948a:	589b      	ldr	r3, [r3, r2]
 800948c:	2200      	movs	r2, #0
 800948e:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2280      	movs	r2, #128	@ 0x80
 8009494:	589b      	ldr	r3, [r3, r2]
 8009496:	0018      	movs	r0, r3
 8009498:	f7fd fe2e 	bl	80070f8 <HAL_DMA_Abort>
 800949c:	1e03      	subs	r3, r0, #0
 800949e:	d00e      	beq.n	80094be <HAL_UART_Abort+0x1a2>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2280      	movs	r2, #128	@ 0x80
 80094a4:	589b      	ldr	r3, [r3, r2]
 80094a6:	0018      	movs	r0, r3
 80094a8:	f7fd ffb4 	bl	8007414 <HAL_DMA_GetError>
 80094ac:	0003      	movs	r3, r0
 80094ae:	2b20      	cmp	r3, #32
 80094b0:	d105      	bne.n	80094be <HAL_UART_Abort+0x1a2>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2290      	movs	r2, #144	@ 0x90
 80094b6:	2110      	movs	r1, #16
 80094b8:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80094ba:	2303      	movs	r3, #3
 80094bc:	e031      	b.n	8009522 <HAL_UART_Abort+0x206>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2256      	movs	r2, #86	@ 0x56
 80094c2:	2100      	movs	r1, #0
 80094c4:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	225e      	movs	r2, #94	@ 0x5e
 80094ca:	2100      	movs	r1, #0
 80094cc:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	220f      	movs	r2, #15
 80094d4:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80094da:	2380      	movs	r3, #128	@ 0x80
 80094dc:	059b      	lsls	r3, r3, #22
 80094de:	429a      	cmp	r2, r3
 80094e0:	d107      	bne.n	80094f2 <HAL_UART_Abort+0x1d6>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	699a      	ldr	r2, [r3, #24]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2110      	movs	r1, #16
 80094ee:	430a      	orrs	r2, r1
 80094f0:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	699a      	ldr	r2, [r3, #24]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2108      	movs	r1, #8
 80094fe:	430a      	orrs	r2, r1
 8009500:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2288      	movs	r2, #136	@ 0x88
 8009506:	2120      	movs	r1, #32
 8009508:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	228c      	movs	r2, #140	@ 0x8c
 800950e:	2120      	movs	r1, #32
 8009510:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2290      	movs	r2, #144	@ 0x90
 800951c:	2100      	movs	r1, #0
 800951e:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	0018      	movs	r0, r3
 8009524:	46bd      	mov	sp, r7
 8009526:	b016      	add	sp, #88	@ 0x58
 8009528:	bd80      	pop	{r7, pc}
 800952a:	46c0      	nop			@ (mov r8, r8)
 800952c:	fffffe1f 	.word	0xfffffe1f
 8009530:	ef7ffffe 	.word	0xef7ffffe

08009534 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009534:	b5b0      	push	{r4, r5, r7, lr}
 8009536:	b0aa      	sub	sp, #168	@ 0xa8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	69db      	ldr	r3, [r3, #28]
 8009542:	22a4      	movs	r2, #164	@ 0xa4
 8009544:	18b9      	adds	r1, r7, r2
 8009546:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	20a0      	movs	r0, #160	@ 0xa0
 8009550:	1839      	adds	r1, r7, r0
 8009552:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	249c      	movs	r4, #156	@ 0x9c
 800955c:	1939      	adds	r1, r7, r4
 800955e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009560:	0011      	movs	r1, r2
 8009562:	18bb      	adds	r3, r7, r2
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4aa2      	ldr	r2, [pc, #648]	@ (80097f0 <HAL_UART_IRQHandler+0x2bc>)
 8009568:	4013      	ands	r3, r2
 800956a:	2298      	movs	r2, #152	@ 0x98
 800956c:	18bd      	adds	r5, r7, r2
 800956e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8009570:	18bb      	adds	r3, r7, r2
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d11a      	bne.n	80095ae <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009578:	187b      	adds	r3, r7, r1
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2220      	movs	r2, #32
 800957e:	4013      	ands	r3, r2
 8009580:	d015      	beq.n	80095ae <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009582:	183b      	adds	r3, r7, r0
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2220      	movs	r2, #32
 8009588:	4013      	ands	r3, r2
 800958a:	d105      	bne.n	8009598 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800958c:	193b      	adds	r3, r7, r4
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	2380      	movs	r3, #128	@ 0x80
 8009592:	055b      	lsls	r3, r3, #21
 8009594:	4013      	ands	r3, r2
 8009596:	d00a      	beq.n	80095ae <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800959c:	2b00      	cmp	r3, #0
 800959e:	d100      	bne.n	80095a2 <HAL_UART_IRQHandler+0x6e>
 80095a0:	e2fb      	b.n	8009b9a <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	0010      	movs	r0, r2
 80095aa:	4798      	blx	r3
      }
      return;
 80095ac:	e2f5      	b.n	8009b9a <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80095ae:	2398      	movs	r3, #152	@ 0x98
 80095b0:	18fb      	adds	r3, r7, r3
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d100      	bne.n	80095ba <HAL_UART_IRQHandler+0x86>
 80095b8:	e122      	b.n	8009800 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80095ba:	239c      	movs	r3, #156	@ 0x9c
 80095bc:	18fb      	adds	r3, r7, r3
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a8c      	ldr	r2, [pc, #560]	@ (80097f4 <HAL_UART_IRQHandler+0x2c0>)
 80095c2:	4013      	ands	r3, r2
 80095c4:	d106      	bne.n	80095d4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80095c6:	23a0      	movs	r3, #160	@ 0xa0
 80095c8:	18fb      	adds	r3, r7, r3
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a8a      	ldr	r2, [pc, #552]	@ (80097f8 <HAL_UART_IRQHandler+0x2c4>)
 80095ce:	4013      	ands	r3, r2
 80095d0:	d100      	bne.n	80095d4 <HAL_UART_IRQHandler+0xa0>
 80095d2:	e115      	b.n	8009800 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095d4:	23a4      	movs	r3, #164	@ 0xa4
 80095d6:	18fb      	adds	r3, r7, r3
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2201      	movs	r2, #1
 80095dc:	4013      	ands	r3, r2
 80095de:	d012      	beq.n	8009606 <HAL_UART_IRQHandler+0xd2>
 80095e0:	23a0      	movs	r3, #160	@ 0xa0
 80095e2:	18fb      	adds	r3, r7, r3
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	2380      	movs	r3, #128	@ 0x80
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	4013      	ands	r3, r2
 80095ec:	d00b      	beq.n	8009606 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2201      	movs	r2, #1
 80095f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2290      	movs	r2, #144	@ 0x90
 80095fa:	589b      	ldr	r3, [r3, r2]
 80095fc:	2201      	movs	r2, #1
 80095fe:	431a      	orrs	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2190      	movs	r1, #144	@ 0x90
 8009604:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009606:	23a4      	movs	r3, #164	@ 0xa4
 8009608:	18fb      	adds	r3, r7, r3
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2202      	movs	r2, #2
 800960e:	4013      	ands	r3, r2
 8009610:	d011      	beq.n	8009636 <HAL_UART_IRQHandler+0x102>
 8009612:	239c      	movs	r3, #156	@ 0x9c
 8009614:	18fb      	adds	r3, r7, r3
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2201      	movs	r2, #1
 800961a:	4013      	ands	r3, r2
 800961c:	d00b      	beq.n	8009636 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2202      	movs	r2, #2
 8009624:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2290      	movs	r2, #144	@ 0x90
 800962a:	589b      	ldr	r3, [r3, r2]
 800962c:	2204      	movs	r2, #4
 800962e:	431a      	orrs	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2190      	movs	r1, #144	@ 0x90
 8009634:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009636:	23a4      	movs	r3, #164	@ 0xa4
 8009638:	18fb      	adds	r3, r7, r3
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2204      	movs	r2, #4
 800963e:	4013      	ands	r3, r2
 8009640:	d011      	beq.n	8009666 <HAL_UART_IRQHandler+0x132>
 8009642:	239c      	movs	r3, #156	@ 0x9c
 8009644:	18fb      	adds	r3, r7, r3
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2201      	movs	r2, #1
 800964a:	4013      	ands	r3, r2
 800964c:	d00b      	beq.n	8009666 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2204      	movs	r2, #4
 8009654:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2290      	movs	r2, #144	@ 0x90
 800965a:	589b      	ldr	r3, [r3, r2]
 800965c:	2202      	movs	r2, #2
 800965e:	431a      	orrs	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2190      	movs	r1, #144	@ 0x90
 8009664:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009666:	23a4      	movs	r3, #164	@ 0xa4
 8009668:	18fb      	adds	r3, r7, r3
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2208      	movs	r2, #8
 800966e:	4013      	ands	r3, r2
 8009670:	d017      	beq.n	80096a2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009672:	23a0      	movs	r3, #160	@ 0xa0
 8009674:	18fb      	adds	r3, r7, r3
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2220      	movs	r2, #32
 800967a:	4013      	ands	r3, r2
 800967c:	d105      	bne.n	800968a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800967e:	239c      	movs	r3, #156	@ 0x9c
 8009680:	18fb      	adds	r3, r7, r3
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a5b      	ldr	r2, [pc, #364]	@ (80097f4 <HAL_UART_IRQHandler+0x2c0>)
 8009686:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009688:	d00b      	beq.n	80096a2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2208      	movs	r2, #8
 8009690:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2290      	movs	r2, #144	@ 0x90
 8009696:	589b      	ldr	r3, [r3, r2]
 8009698:	2208      	movs	r2, #8
 800969a:	431a      	orrs	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2190      	movs	r1, #144	@ 0x90
 80096a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80096a2:	23a4      	movs	r3, #164	@ 0xa4
 80096a4:	18fb      	adds	r3, r7, r3
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	2380      	movs	r3, #128	@ 0x80
 80096aa:	011b      	lsls	r3, r3, #4
 80096ac:	4013      	ands	r3, r2
 80096ae:	d013      	beq.n	80096d8 <HAL_UART_IRQHandler+0x1a4>
 80096b0:	23a0      	movs	r3, #160	@ 0xa0
 80096b2:	18fb      	adds	r3, r7, r3
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	2380      	movs	r3, #128	@ 0x80
 80096b8:	04db      	lsls	r3, r3, #19
 80096ba:	4013      	ands	r3, r2
 80096bc:	d00c      	beq.n	80096d8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2280      	movs	r2, #128	@ 0x80
 80096c4:	0112      	lsls	r2, r2, #4
 80096c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2290      	movs	r2, #144	@ 0x90
 80096cc:	589b      	ldr	r3, [r3, r2]
 80096ce:	2220      	movs	r2, #32
 80096d0:	431a      	orrs	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2190      	movs	r1, #144	@ 0x90
 80096d6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2290      	movs	r2, #144	@ 0x90
 80096dc:	589b      	ldr	r3, [r3, r2]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d100      	bne.n	80096e4 <HAL_UART_IRQHandler+0x1b0>
 80096e2:	e25c      	b.n	8009b9e <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096e4:	23a4      	movs	r3, #164	@ 0xa4
 80096e6:	18fb      	adds	r3, r7, r3
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2220      	movs	r2, #32
 80096ec:	4013      	ands	r3, r2
 80096ee:	d015      	beq.n	800971c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096f0:	23a0      	movs	r3, #160	@ 0xa0
 80096f2:	18fb      	adds	r3, r7, r3
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2220      	movs	r2, #32
 80096f8:	4013      	ands	r3, r2
 80096fa:	d106      	bne.n	800970a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80096fc:	239c      	movs	r3, #156	@ 0x9c
 80096fe:	18fb      	adds	r3, r7, r3
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	2380      	movs	r3, #128	@ 0x80
 8009704:	055b      	lsls	r3, r3, #21
 8009706:	4013      	ands	r3, r2
 8009708:	d008      	beq.n	800971c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800970e:	2b00      	cmp	r3, #0
 8009710:	d004      	beq.n	800971c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	0010      	movs	r0, r2
 800971a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2290      	movs	r2, #144	@ 0x90
 8009720:	589b      	ldr	r3, [r3, r2]
 8009722:	2194      	movs	r1, #148	@ 0x94
 8009724:	187a      	adds	r2, r7, r1
 8009726:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	2240      	movs	r2, #64	@ 0x40
 8009730:	4013      	ands	r3, r2
 8009732:	2b40      	cmp	r3, #64	@ 0x40
 8009734:	d004      	beq.n	8009740 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009736:	187b      	adds	r3, r7, r1
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2228      	movs	r2, #40	@ 0x28
 800973c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800973e:	d04c      	beq.n	80097da <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	0018      	movs	r0, r3
 8009744:	f000 fe86 	bl	800a454 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	2240      	movs	r2, #64	@ 0x40
 8009750:	4013      	ands	r3, r2
 8009752:	2b40      	cmp	r3, #64	@ 0x40
 8009754:	d13c      	bne.n	80097d0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009756:	f3ef 8310 	mrs	r3, PRIMASK
 800975a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800975c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800975e:	2090      	movs	r0, #144	@ 0x90
 8009760:	183a      	adds	r2, r7, r0
 8009762:	6013      	str	r3, [r2, #0]
 8009764:	2301      	movs	r3, #1
 8009766:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009768:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800976a:	f383 8810 	msr	PRIMASK, r3
}
 800976e:	46c0      	nop			@ (mov r8, r8)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689a      	ldr	r2, [r3, #8]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2140      	movs	r1, #64	@ 0x40
 800977c:	438a      	bics	r2, r1
 800977e:	609a      	str	r2, [r3, #8]
 8009780:	183b      	adds	r3, r7, r0
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009786:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009788:	f383 8810 	msr	PRIMASK, r3
}
 800978c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2280      	movs	r2, #128	@ 0x80
 8009792:	589b      	ldr	r3, [r3, r2]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d016      	beq.n	80097c6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2280      	movs	r2, #128	@ 0x80
 800979c:	589b      	ldr	r3, [r3, r2]
 800979e:	4a17      	ldr	r2, [pc, #92]	@ (80097fc <HAL_UART_IRQHandler+0x2c8>)
 80097a0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2280      	movs	r2, #128	@ 0x80
 80097a6:	589b      	ldr	r3, [r3, r2]
 80097a8:	0018      	movs	r0, r3
 80097aa:	f7fd fd07 	bl	80071bc <HAL_DMA_Abort_IT>
 80097ae:	1e03      	subs	r3, r0, #0
 80097b0:	d01c      	beq.n	80097ec <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2280      	movs	r2, #128	@ 0x80
 80097b6:	589b      	ldr	r3, [r3, r2]
 80097b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	2180      	movs	r1, #128	@ 0x80
 80097be:	5852      	ldr	r2, [r2, r1]
 80097c0:	0010      	movs	r0, r2
 80097c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097c4:	e012      	b.n	80097ec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	0018      	movs	r0, r3
 80097ca:	f7f8 fad1 	bl	8001d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ce:	e00d      	b.n	80097ec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	0018      	movs	r0, r3
 80097d4:	f7f8 facc 	bl	8001d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d8:	e008      	b.n	80097ec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	0018      	movs	r0, r3
 80097de:	f7f8 fac7 	bl	8001d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2290      	movs	r2, #144	@ 0x90
 80097e6:	2100      	movs	r1, #0
 80097e8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80097ea:	e1d8      	b.n	8009b9e <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ec:	46c0      	nop			@ (mov r8, r8)
    return;
 80097ee:	e1d6      	b.n	8009b9e <HAL_UART_IRQHandler+0x66a>
 80097f0:	0000080f 	.word	0x0000080f
 80097f4:	10000001 	.word	0x10000001
 80097f8:	04000120 	.word	0x04000120
 80097fc:	0800a7d1 	.word	0x0800a7d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009804:	2b01      	cmp	r3, #1
 8009806:	d000      	beq.n	800980a <HAL_UART_IRQHandler+0x2d6>
 8009808:	e15d      	b.n	8009ac6 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800980a:	23a4      	movs	r3, #164	@ 0xa4
 800980c:	18fb      	adds	r3, r7, r3
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2210      	movs	r2, #16
 8009812:	4013      	ands	r3, r2
 8009814:	d100      	bne.n	8009818 <HAL_UART_IRQHandler+0x2e4>
 8009816:	e156      	b.n	8009ac6 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009818:	23a0      	movs	r3, #160	@ 0xa0
 800981a:	18fb      	adds	r3, r7, r3
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2210      	movs	r2, #16
 8009820:	4013      	ands	r3, r2
 8009822:	d100      	bne.n	8009826 <HAL_UART_IRQHandler+0x2f2>
 8009824:	e14f      	b.n	8009ac6 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2210      	movs	r2, #16
 800982c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	2240      	movs	r2, #64	@ 0x40
 8009836:	4013      	ands	r3, r2
 8009838:	2b40      	cmp	r3, #64	@ 0x40
 800983a:	d000      	beq.n	800983e <HAL_UART_IRQHandler+0x30a>
 800983c:	e0c3      	b.n	80099c6 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2280      	movs	r2, #128	@ 0x80
 8009842:	589b      	ldr	r3, [r3, r2]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	685a      	ldr	r2, [r3, #4]
 8009848:	217e      	movs	r1, #126	@ 0x7e
 800984a:	187b      	adds	r3, r7, r1
 800984c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800984e:	187b      	adds	r3, r7, r1
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d100      	bne.n	8009858 <HAL_UART_IRQHandler+0x324>
 8009856:	e097      	b.n	8009988 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	225c      	movs	r2, #92	@ 0x5c
 800985c:	5a9b      	ldrh	r3, [r3, r2]
 800985e:	187a      	adds	r2, r7, r1
 8009860:	8812      	ldrh	r2, [r2, #0]
 8009862:	429a      	cmp	r2, r3
 8009864:	d300      	bcc.n	8009868 <HAL_UART_IRQHandler+0x334>
 8009866:	e08f      	b.n	8009988 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	187a      	adds	r2, r7, r1
 800986c:	215e      	movs	r1, #94	@ 0x5e
 800986e:	8812      	ldrh	r2, [r2, #0]
 8009870:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2280      	movs	r2, #128	@ 0x80
 8009876:	589b      	ldr	r3, [r3, r2]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2220      	movs	r2, #32
 800987e:	4013      	ands	r3, r2
 8009880:	d170      	bne.n	8009964 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009882:	f3ef 8310 	mrs	r3, PRIMASK
 8009886:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800988a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800988c:	2301      	movs	r3, #1
 800988e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009892:	f383 8810 	msr	PRIMASK, r3
}
 8009896:	46c0      	nop			@ (mov r8, r8)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	49c4      	ldr	r1, [pc, #784]	@ (8009bb4 <HAL_UART_IRQHandler+0x680>)
 80098a4:	400a      	ands	r2, r1
 80098a6:	601a      	str	r2, [r3, #0]
 80098a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ae:	f383 8810 	msr	PRIMASK, r3
}
 80098b2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80098b4:	f3ef 8310 	mrs	r3, PRIMASK
 80098b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80098ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80098be:	2301      	movs	r3, #1
 80098c0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098c4:	f383 8810 	msr	PRIMASK, r3
}
 80098c8:	46c0      	nop			@ (mov r8, r8)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	689a      	ldr	r2, [r3, #8]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2101      	movs	r1, #1
 80098d6:	438a      	bics	r2, r1
 80098d8:	609a      	str	r2, [r3, #8]
 80098da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098dc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098e0:	f383 8810 	msr	PRIMASK, r3
}
 80098e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80098e6:	f3ef 8310 	mrs	r3, PRIMASK
 80098ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80098ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80098f0:	2301      	movs	r3, #1
 80098f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098f6:	f383 8810 	msr	PRIMASK, r3
}
 80098fa:	46c0      	nop			@ (mov r8, r8)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	689a      	ldr	r2, [r3, #8]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2140      	movs	r1, #64	@ 0x40
 8009908:	438a      	bics	r2, r1
 800990a:	609a      	str	r2, [r3, #8]
 800990c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800990e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009910:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009912:	f383 8810 	msr	PRIMASK, r3
}
 8009916:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	228c      	movs	r2, #140	@ 0x8c
 800991c:	2120      	movs	r1, #32
 800991e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009926:	f3ef 8310 	mrs	r3, PRIMASK
 800992a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800992c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800992e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009930:	2301      	movs	r3, #1
 8009932:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009934:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009936:	f383 8810 	msr	PRIMASK, r3
}
 800993a:	46c0      	nop			@ (mov r8, r8)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2110      	movs	r1, #16
 8009948:	438a      	bics	r2, r1
 800994a:	601a      	str	r2, [r3, #0]
 800994c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800994e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009950:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009952:	f383 8810 	msr	PRIMASK, r3
}
 8009956:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2280      	movs	r2, #128	@ 0x80
 800995c:	589b      	ldr	r3, [r3, r2]
 800995e:	0018      	movs	r0, r3
 8009960:	f7fd fbca 	bl	80070f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2202      	movs	r2, #2
 8009968:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	225c      	movs	r2, #92	@ 0x5c
 800996e:	5a9a      	ldrh	r2, [r3, r2]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	215e      	movs	r1, #94	@ 0x5e
 8009974:	5a5b      	ldrh	r3, [r3, r1]
 8009976:	b29b      	uxth	r3, r3
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	b29a      	uxth	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	0011      	movs	r1, r2
 8009980:	0018      	movs	r0, r3
 8009982:	f7f8 f98b 	bl	8001c9c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009986:	e10c      	b.n	8009ba2 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	225c      	movs	r2, #92	@ 0x5c
 800998c:	5a9b      	ldrh	r3, [r3, r2]
 800998e:	227e      	movs	r2, #126	@ 0x7e
 8009990:	18ba      	adds	r2, r7, r2
 8009992:	8812      	ldrh	r2, [r2, #0]
 8009994:	429a      	cmp	r2, r3
 8009996:	d000      	beq.n	800999a <HAL_UART_IRQHandler+0x466>
 8009998:	e103      	b.n	8009ba2 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2280      	movs	r2, #128	@ 0x80
 800999e:	589b      	ldr	r3, [r3, r2]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2220      	movs	r2, #32
 80099a6:	4013      	ands	r3, r2
 80099a8:	2b20      	cmp	r3, #32
 80099aa:	d000      	beq.n	80099ae <HAL_UART_IRQHandler+0x47a>
 80099ac:	e0f9      	b.n	8009ba2 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2202      	movs	r2, #2
 80099b2:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	225c      	movs	r2, #92	@ 0x5c
 80099b8:	5a9a      	ldrh	r2, [r3, r2]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	0011      	movs	r1, r2
 80099be:	0018      	movs	r0, r3
 80099c0:	f7f8 f96c 	bl	8001c9c <HAL_UARTEx_RxEventCallback>
      return;
 80099c4:	e0ed      	b.n	8009ba2 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	225c      	movs	r2, #92	@ 0x5c
 80099ca:	5a99      	ldrh	r1, [r3, r2]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	225e      	movs	r2, #94	@ 0x5e
 80099d0:	5a9b      	ldrh	r3, [r3, r2]
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	208e      	movs	r0, #142	@ 0x8e
 80099d6:	183b      	adds	r3, r7, r0
 80099d8:	1a8a      	subs	r2, r1, r2
 80099da:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	225e      	movs	r2, #94	@ 0x5e
 80099e0:	5a9b      	ldrh	r3, [r3, r2]
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d100      	bne.n	80099ea <HAL_UART_IRQHandler+0x4b6>
 80099e8:	e0dd      	b.n	8009ba6 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 80099ea:	183b      	adds	r3, r7, r0
 80099ec:	881b      	ldrh	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d100      	bne.n	80099f4 <HAL_UART_IRQHandler+0x4c0>
 80099f2:	e0d8      	b.n	8009ba6 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80099f4:	f3ef 8310 	mrs	r3, PRIMASK
 80099f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80099fa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099fc:	2488      	movs	r4, #136	@ 0x88
 80099fe:	193a      	adds	r2, r7, r4
 8009a00:	6013      	str	r3, [r2, #0]
 8009a02:	2301      	movs	r3, #1
 8009a04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	f383 8810 	msr	PRIMASK, r3
}
 8009a0c:	46c0      	nop			@ (mov r8, r8)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4967      	ldr	r1, [pc, #412]	@ (8009bb8 <HAL_UART_IRQHandler+0x684>)
 8009a1a:	400a      	ands	r2, r1
 8009a1c:	601a      	str	r2, [r3, #0]
 8009a1e:	193b      	adds	r3, r7, r4
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	f383 8810 	msr	PRIMASK, r3
}
 8009a2a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8009a30:	61bb      	str	r3, [r7, #24]
  return(result);
 8009a32:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a34:	2484      	movs	r4, #132	@ 0x84
 8009a36:	193a      	adds	r2, r7, r4
 8009a38:	6013      	str	r3, [r2, #0]
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	f383 8810 	msr	PRIMASK, r3
}
 8009a44:	46c0      	nop			@ (mov r8, r8)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	689a      	ldr	r2, [r3, #8]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	495a      	ldr	r1, [pc, #360]	@ (8009bbc <HAL_UART_IRQHandler+0x688>)
 8009a52:	400a      	ands	r2, r1
 8009a54:	609a      	str	r2, [r3, #8]
 8009a56:	193b      	adds	r3, r7, r4
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	f383 8810 	msr	PRIMASK, r3
}
 8009a62:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	228c      	movs	r2, #140	@ 0x8c
 8009a68:	2120      	movs	r1, #32
 8009a6a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009a78:	f3ef 8310 	mrs	r3, PRIMASK
 8009a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a80:	2480      	movs	r4, #128	@ 0x80
 8009a82:	193a      	adds	r2, r7, r4
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	2301      	movs	r3, #1
 8009a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8c:	f383 8810 	msr	PRIMASK, r3
}
 8009a90:	46c0      	nop			@ (mov r8, r8)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2110      	movs	r1, #16
 8009a9e:	438a      	bics	r2, r1
 8009aa0:	601a      	str	r2, [r3, #0]
 8009aa2:	193b      	adds	r3, r7, r4
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aaa:	f383 8810 	msr	PRIMASK, r3
}
 8009aae:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ab6:	183b      	adds	r3, r7, r0
 8009ab8:	881a      	ldrh	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	0011      	movs	r1, r2
 8009abe:	0018      	movs	r0, r3
 8009ac0:	f7f8 f8ec 	bl	8001c9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ac4:	e06f      	b.n	8009ba6 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009ac6:	23a4      	movs	r3, #164	@ 0xa4
 8009ac8:	18fb      	adds	r3, r7, r3
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	2380      	movs	r3, #128	@ 0x80
 8009ace:	035b      	lsls	r3, r3, #13
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	d010      	beq.n	8009af6 <HAL_UART_IRQHandler+0x5c2>
 8009ad4:	239c      	movs	r3, #156	@ 0x9c
 8009ad6:	18fb      	adds	r3, r7, r3
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	2380      	movs	r3, #128	@ 0x80
 8009adc:	03db      	lsls	r3, r3, #15
 8009ade:	4013      	ands	r3, r2
 8009ae0:	d009      	beq.n	8009af6 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2280      	movs	r2, #128	@ 0x80
 8009ae8:	0352      	lsls	r2, r2, #13
 8009aea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	0018      	movs	r0, r3
 8009af0:	f000 ff24 	bl	800a93c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009af4:	e05a      	b.n	8009bac <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009af6:	23a4      	movs	r3, #164	@ 0xa4
 8009af8:	18fb      	adds	r3, r7, r3
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2280      	movs	r2, #128	@ 0x80
 8009afe:	4013      	ands	r3, r2
 8009b00:	d016      	beq.n	8009b30 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009b02:	23a0      	movs	r3, #160	@ 0xa0
 8009b04:	18fb      	adds	r3, r7, r3
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2280      	movs	r2, #128	@ 0x80
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	d106      	bne.n	8009b1c <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009b0e:	239c      	movs	r3, #156	@ 0x9c
 8009b10:	18fb      	adds	r3, r7, r3
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	2380      	movs	r3, #128	@ 0x80
 8009b16:	041b      	lsls	r3, r3, #16
 8009b18:	4013      	ands	r3, r2
 8009b1a:	d009      	beq.n	8009b30 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d042      	beq.n	8009baa <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	0010      	movs	r0, r2
 8009b2c:	4798      	blx	r3
    }
    return;
 8009b2e:	e03c      	b.n	8009baa <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b30:	23a4      	movs	r3, #164	@ 0xa4
 8009b32:	18fb      	adds	r3, r7, r3
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2240      	movs	r2, #64	@ 0x40
 8009b38:	4013      	ands	r3, r2
 8009b3a:	d00a      	beq.n	8009b52 <HAL_UART_IRQHandler+0x61e>
 8009b3c:	23a0      	movs	r3, #160	@ 0xa0
 8009b3e:	18fb      	adds	r3, r7, r3
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2240      	movs	r2, #64	@ 0x40
 8009b44:	4013      	ands	r3, r2
 8009b46:	d004      	beq.n	8009b52 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	0018      	movs	r0, r3
 8009b4c:	f000 fe57 	bl	800a7fe <UART_EndTransmit_IT>
    return;
 8009b50:	e02c      	b.n	8009bac <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b52:	23a4      	movs	r3, #164	@ 0xa4
 8009b54:	18fb      	adds	r3, r7, r3
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	2380      	movs	r3, #128	@ 0x80
 8009b5a:	041b      	lsls	r3, r3, #16
 8009b5c:	4013      	ands	r3, r2
 8009b5e:	d00b      	beq.n	8009b78 <HAL_UART_IRQHandler+0x644>
 8009b60:	23a0      	movs	r3, #160	@ 0xa0
 8009b62:	18fb      	adds	r3, r7, r3
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	2380      	movs	r3, #128	@ 0x80
 8009b68:	05db      	lsls	r3, r3, #23
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	d004      	beq.n	8009b78 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	0018      	movs	r0, r3
 8009b72:	f000 fef3 	bl	800a95c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b76:	e019      	b.n	8009bac <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b78:	23a4      	movs	r3, #164	@ 0xa4
 8009b7a:	18fb      	adds	r3, r7, r3
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	2380      	movs	r3, #128	@ 0x80
 8009b80:	045b      	lsls	r3, r3, #17
 8009b82:	4013      	ands	r3, r2
 8009b84:	d012      	beq.n	8009bac <HAL_UART_IRQHandler+0x678>
 8009b86:	23a0      	movs	r3, #160	@ 0xa0
 8009b88:	18fb      	adds	r3, r7, r3
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	da0d      	bge.n	8009bac <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	0018      	movs	r0, r3
 8009b94:	f000 feda 	bl	800a94c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b98:	e008      	b.n	8009bac <HAL_UART_IRQHandler+0x678>
      return;
 8009b9a:	46c0      	nop			@ (mov r8, r8)
 8009b9c:	e006      	b.n	8009bac <HAL_UART_IRQHandler+0x678>
    return;
 8009b9e:	46c0      	nop			@ (mov r8, r8)
 8009ba0:	e004      	b.n	8009bac <HAL_UART_IRQHandler+0x678>
      return;
 8009ba2:	46c0      	nop			@ (mov r8, r8)
 8009ba4:	e002      	b.n	8009bac <HAL_UART_IRQHandler+0x678>
      return;
 8009ba6:	46c0      	nop			@ (mov r8, r8)
 8009ba8:	e000      	b.n	8009bac <HAL_UART_IRQHandler+0x678>
    return;
 8009baa:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009bac:	46bd      	mov	sp, r7
 8009bae:	b02a      	add	sp, #168	@ 0xa8
 8009bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8009bb2:	46c0      	nop			@ (mov r8, r8)
 8009bb4:	fffffeff 	.word	0xfffffeff
 8009bb8:	fffffedf 	.word	0xfffffedf
 8009bbc:	effffffe 	.word	0xeffffffe

08009bc0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009bc8:	46c0      	nop			@ (mov r8, r8)
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	b002      	add	sp, #8
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009bd8:	46c0      	nop			@ (mov r8, r8)
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	b002      	add	sp, #8
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009be8:	46c0      	nop			@ (mov r8, r8)
 8009bea:	46bd      	mov	sp, r7
 8009bec:	b002      	add	sp, #8
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009bf8:	231e      	movs	r3, #30
 8009bfa:	18fb      	adds	r3, r7, r3
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	689a      	ldr	r2, [r3, #8]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	431a      	orrs	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	695b      	ldr	r3, [r3, #20]
 8009c0e:	431a      	orrs	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	69db      	ldr	r3, [r3, #28]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4aab      	ldr	r2, [pc, #684]	@ (8009ecc <UART_SetConfig+0x2dc>)
 8009c20:	4013      	ands	r3, r2
 8009c22:	0019      	movs	r1, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	4aa6      	ldr	r2, [pc, #664]	@ (8009ed0 <UART_SetConfig+0x2e0>)
 8009c36:	4013      	ands	r3, r2
 8009c38:	0019      	movs	r1, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68da      	ldr	r2, [r3, #12]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	430a      	orrs	r2, r1
 8009c44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	699b      	ldr	r3, [r3, #24]
 8009c4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a1b      	ldr	r3, [r3, #32]
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	4a9d      	ldr	r2, [pc, #628]	@ (8009ed4 <UART_SetConfig+0x2e4>)
 8009c5e:	4013      	ands	r3, r2
 8009c60:	0019      	movs	r1, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	697a      	ldr	r2, [r7, #20]
 8009c68:	430a      	orrs	r2, r1
 8009c6a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c72:	220f      	movs	r2, #15
 8009c74:	4393      	bics	r3, r2
 8009c76:	0019      	movs	r1, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	430a      	orrs	r2, r1
 8009c82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a93      	ldr	r2, [pc, #588]	@ (8009ed8 <UART_SetConfig+0x2e8>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d127      	bne.n	8009cde <UART_SetConfig+0xee>
 8009c8e:	4b93      	ldr	r3, [pc, #588]	@ (8009edc <UART_SetConfig+0x2ec>)
 8009c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c92:	2203      	movs	r2, #3
 8009c94:	4013      	ands	r3, r2
 8009c96:	2b03      	cmp	r3, #3
 8009c98:	d017      	beq.n	8009cca <UART_SetConfig+0xda>
 8009c9a:	d81b      	bhi.n	8009cd4 <UART_SetConfig+0xe4>
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d00a      	beq.n	8009cb6 <UART_SetConfig+0xc6>
 8009ca0:	d818      	bhi.n	8009cd4 <UART_SetConfig+0xe4>
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <UART_SetConfig+0xbc>
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d00a      	beq.n	8009cc0 <UART_SetConfig+0xd0>
 8009caa:	e013      	b.n	8009cd4 <UART_SetConfig+0xe4>
 8009cac:	231f      	movs	r3, #31
 8009cae:	18fb      	adds	r3, r7, r3
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	701a      	strb	r2, [r3, #0]
 8009cb4:	e021      	b.n	8009cfa <UART_SetConfig+0x10a>
 8009cb6:	231f      	movs	r3, #31
 8009cb8:	18fb      	adds	r3, r7, r3
 8009cba:	2202      	movs	r2, #2
 8009cbc:	701a      	strb	r2, [r3, #0]
 8009cbe:	e01c      	b.n	8009cfa <UART_SetConfig+0x10a>
 8009cc0:	231f      	movs	r3, #31
 8009cc2:	18fb      	adds	r3, r7, r3
 8009cc4:	2204      	movs	r2, #4
 8009cc6:	701a      	strb	r2, [r3, #0]
 8009cc8:	e017      	b.n	8009cfa <UART_SetConfig+0x10a>
 8009cca:	231f      	movs	r3, #31
 8009ccc:	18fb      	adds	r3, r7, r3
 8009cce:	2208      	movs	r2, #8
 8009cd0:	701a      	strb	r2, [r3, #0]
 8009cd2:	e012      	b.n	8009cfa <UART_SetConfig+0x10a>
 8009cd4:	231f      	movs	r3, #31
 8009cd6:	18fb      	adds	r3, r7, r3
 8009cd8:	2210      	movs	r2, #16
 8009cda:	701a      	strb	r2, [r3, #0]
 8009cdc:	e00d      	b.n	8009cfa <UART_SetConfig+0x10a>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a7f      	ldr	r2, [pc, #508]	@ (8009ee0 <UART_SetConfig+0x2f0>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d104      	bne.n	8009cf2 <UART_SetConfig+0x102>
 8009ce8:	231f      	movs	r3, #31
 8009cea:	18fb      	adds	r3, r7, r3
 8009cec:	2200      	movs	r2, #0
 8009cee:	701a      	strb	r2, [r3, #0]
 8009cf0:	e003      	b.n	8009cfa <UART_SetConfig+0x10a>
 8009cf2:	231f      	movs	r3, #31
 8009cf4:	18fb      	adds	r3, r7, r3
 8009cf6:	2210      	movs	r2, #16
 8009cf8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	69da      	ldr	r2, [r3, #28]
 8009cfe:	2380      	movs	r3, #128	@ 0x80
 8009d00:	021b      	lsls	r3, r3, #8
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d000      	beq.n	8009d08 <UART_SetConfig+0x118>
 8009d06:	e06f      	b.n	8009de8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8009d08:	231f      	movs	r3, #31
 8009d0a:	18fb      	adds	r3, r7, r3
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	2b08      	cmp	r3, #8
 8009d10:	d01f      	beq.n	8009d52 <UART_SetConfig+0x162>
 8009d12:	dc22      	bgt.n	8009d5a <UART_SetConfig+0x16a>
 8009d14:	2b04      	cmp	r3, #4
 8009d16:	d017      	beq.n	8009d48 <UART_SetConfig+0x158>
 8009d18:	dc1f      	bgt.n	8009d5a <UART_SetConfig+0x16a>
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d002      	beq.n	8009d24 <UART_SetConfig+0x134>
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d005      	beq.n	8009d2e <UART_SetConfig+0x13e>
 8009d22:	e01a      	b.n	8009d5a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d24:	f7ff f914 	bl	8008f50 <HAL_RCC_GetPCLK1Freq>
 8009d28:	0003      	movs	r3, r0
 8009d2a:	61bb      	str	r3, [r7, #24]
        break;
 8009d2c:	e01c      	b.n	8009d68 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8009d2e:	4b6b      	ldr	r3, [pc, #428]	@ (8009edc <UART_SetConfig+0x2ec>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	095b      	lsrs	r3, r3, #5
 8009d34:	2207      	movs	r2, #7
 8009d36:	4013      	ands	r3, r2
 8009d38:	3301      	adds	r3, #1
 8009d3a:	0019      	movs	r1, r3
 8009d3c:	4869      	ldr	r0, [pc, #420]	@ (8009ee4 <UART_SetConfig+0x2f4>)
 8009d3e:	f7f6 f9e3 	bl	8000108 <__udivsi3>
 8009d42:	0003      	movs	r3, r0
 8009d44:	61bb      	str	r3, [r7, #24]
        break;
 8009d46:	e00f      	b.n	8009d68 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d48:	f7ff f88c 	bl	8008e64 <HAL_RCC_GetSysClockFreq>
 8009d4c:	0003      	movs	r3, r0
 8009d4e:	61bb      	str	r3, [r7, #24]
        break;
 8009d50:	e00a      	b.n	8009d68 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d52:	2380      	movs	r3, #128	@ 0x80
 8009d54:	021b      	lsls	r3, r3, #8
 8009d56:	61bb      	str	r3, [r7, #24]
        break;
 8009d58:	e006      	b.n	8009d68 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009d5e:	231e      	movs	r3, #30
 8009d60:	18fb      	adds	r3, r7, r3
 8009d62:	2201      	movs	r2, #1
 8009d64:	701a      	strb	r2, [r3, #0]
        break;
 8009d66:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d100      	bne.n	8009d70 <UART_SetConfig+0x180>
 8009d6e:	e097      	b.n	8009ea0 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d74:	4b5c      	ldr	r3, [pc, #368]	@ (8009ee8 <UART_SetConfig+0x2f8>)
 8009d76:	0052      	lsls	r2, r2, #1
 8009d78:	5ad3      	ldrh	r3, [r2, r3]
 8009d7a:	0019      	movs	r1, r3
 8009d7c:	69b8      	ldr	r0, [r7, #24]
 8009d7e:	f7f6 f9c3 	bl	8000108 <__udivsi3>
 8009d82:	0003      	movs	r3, r0
 8009d84:	005a      	lsls	r2, r3, #1
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	085b      	lsrs	r3, r3, #1
 8009d8c:	18d2      	adds	r2, r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	0019      	movs	r1, r3
 8009d94:	0010      	movs	r0, r2
 8009d96:	f7f6 f9b7 	bl	8000108 <__udivsi3>
 8009d9a:	0003      	movs	r3, r0
 8009d9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	2b0f      	cmp	r3, #15
 8009da2:	d91c      	bls.n	8009dde <UART_SetConfig+0x1ee>
 8009da4:	693a      	ldr	r2, [r7, #16]
 8009da6:	2380      	movs	r3, #128	@ 0x80
 8009da8:	025b      	lsls	r3, r3, #9
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d217      	bcs.n	8009dde <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	200e      	movs	r0, #14
 8009db4:	183b      	adds	r3, r7, r0
 8009db6:	210f      	movs	r1, #15
 8009db8:	438a      	bics	r2, r1
 8009dba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	085b      	lsrs	r3, r3, #1
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	2207      	movs	r2, #7
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	b299      	uxth	r1, r3
 8009dc8:	183b      	adds	r3, r7, r0
 8009dca:	183a      	adds	r2, r7, r0
 8009dcc:	8812      	ldrh	r2, [r2, #0]
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	183a      	adds	r2, r7, r0
 8009dd8:	8812      	ldrh	r2, [r2, #0]
 8009dda:	60da      	str	r2, [r3, #12]
 8009ddc:	e060      	b.n	8009ea0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8009dde:	231e      	movs	r3, #30
 8009de0:	18fb      	adds	r3, r7, r3
 8009de2:	2201      	movs	r2, #1
 8009de4:	701a      	strb	r2, [r3, #0]
 8009de6:	e05b      	b.n	8009ea0 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009de8:	231f      	movs	r3, #31
 8009dea:	18fb      	adds	r3, r7, r3
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	2b08      	cmp	r3, #8
 8009df0:	d01f      	beq.n	8009e32 <UART_SetConfig+0x242>
 8009df2:	dc22      	bgt.n	8009e3a <UART_SetConfig+0x24a>
 8009df4:	2b04      	cmp	r3, #4
 8009df6:	d017      	beq.n	8009e28 <UART_SetConfig+0x238>
 8009df8:	dc1f      	bgt.n	8009e3a <UART_SetConfig+0x24a>
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d002      	beq.n	8009e04 <UART_SetConfig+0x214>
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d005      	beq.n	8009e0e <UART_SetConfig+0x21e>
 8009e02:	e01a      	b.n	8009e3a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e04:	f7ff f8a4 	bl	8008f50 <HAL_RCC_GetPCLK1Freq>
 8009e08:	0003      	movs	r3, r0
 8009e0a:	61bb      	str	r3, [r7, #24]
        break;
 8009e0c:	e01c      	b.n	8009e48 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8009e0e:	4b33      	ldr	r3, [pc, #204]	@ (8009edc <UART_SetConfig+0x2ec>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	095b      	lsrs	r3, r3, #5
 8009e14:	2207      	movs	r2, #7
 8009e16:	4013      	ands	r3, r2
 8009e18:	3301      	adds	r3, #1
 8009e1a:	0019      	movs	r1, r3
 8009e1c:	4831      	ldr	r0, [pc, #196]	@ (8009ee4 <UART_SetConfig+0x2f4>)
 8009e1e:	f7f6 f973 	bl	8000108 <__udivsi3>
 8009e22:	0003      	movs	r3, r0
 8009e24:	61bb      	str	r3, [r7, #24]
        break;
 8009e26:	e00f      	b.n	8009e48 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e28:	f7ff f81c 	bl	8008e64 <HAL_RCC_GetSysClockFreq>
 8009e2c:	0003      	movs	r3, r0
 8009e2e:	61bb      	str	r3, [r7, #24]
        break;
 8009e30:	e00a      	b.n	8009e48 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e32:	2380      	movs	r3, #128	@ 0x80
 8009e34:	021b      	lsls	r3, r3, #8
 8009e36:	61bb      	str	r3, [r7, #24]
        break;
 8009e38:	e006      	b.n	8009e48 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e3e:	231e      	movs	r3, #30
 8009e40:	18fb      	adds	r3, r7, r3
 8009e42:	2201      	movs	r2, #1
 8009e44:	701a      	strb	r2, [r3, #0]
        break;
 8009e46:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d028      	beq.n	8009ea0 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e52:	4b25      	ldr	r3, [pc, #148]	@ (8009ee8 <UART_SetConfig+0x2f8>)
 8009e54:	0052      	lsls	r2, r2, #1
 8009e56:	5ad3      	ldrh	r3, [r2, r3]
 8009e58:	0019      	movs	r1, r3
 8009e5a:	69b8      	ldr	r0, [r7, #24]
 8009e5c:	f7f6 f954 	bl	8000108 <__udivsi3>
 8009e60:	0003      	movs	r3, r0
 8009e62:	001a      	movs	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	085b      	lsrs	r3, r3, #1
 8009e6a:	18d2      	adds	r2, r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	0019      	movs	r1, r3
 8009e72:	0010      	movs	r0, r2
 8009e74:	f7f6 f948 	bl	8000108 <__udivsi3>
 8009e78:	0003      	movs	r3, r0
 8009e7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	2b0f      	cmp	r3, #15
 8009e80:	d90a      	bls.n	8009e98 <UART_SetConfig+0x2a8>
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	2380      	movs	r3, #128	@ 0x80
 8009e86:	025b      	lsls	r3, r3, #9
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d205      	bcs.n	8009e98 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	60da      	str	r2, [r3, #12]
 8009e96:	e003      	b.n	8009ea0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8009e98:	231e      	movs	r3, #30
 8009e9a:	18fb      	adds	r3, r7, r3
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	226a      	movs	r2, #106	@ 0x6a
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2268      	movs	r2, #104	@ 0x68
 8009eac:	2101      	movs	r1, #1
 8009eae:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009ebc:	231e      	movs	r3, #30
 8009ebe:	18fb      	adds	r3, r7, r3
 8009ec0:	781b      	ldrb	r3, [r3, #0]
}
 8009ec2:	0018      	movs	r0, r3
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	b008      	add	sp, #32
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	46c0      	nop			@ (mov r8, r8)
 8009ecc:	cfff69f3 	.word	0xcfff69f3
 8009ed0:	ffffcfff 	.word	0xffffcfff
 8009ed4:	11fff4ff 	.word	0x11fff4ff
 8009ed8:	40013800 	.word	0x40013800
 8009edc:	40021000 	.word	0x40021000
 8009ee0:	40004400 	.word	0x40004400
 8009ee4:	02dc6c00 	.word	0x02dc6c00
 8009ee8:	0800afbc 	.word	0x0800afbc

08009eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef8:	2208      	movs	r2, #8
 8009efa:	4013      	ands	r3, r2
 8009efc:	d00b      	beq.n	8009f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	4a4a      	ldr	r2, [pc, #296]	@ (800a030 <UART_AdvFeatureConfig+0x144>)
 8009f06:	4013      	ands	r3, r2
 8009f08:	0019      	movs	r1, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	430a      	orrs	r2, r1
 8009f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	d00b      	beq.n	8009f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	4a43      	ldr	r2, [pc, #268]	@ (800a034 <UART_AdvFeatureConfig+0x148>)
 8009f28:	4013      	ands	r3, r2
 8009f2a:	0019      	movs	r1, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	430a      	orrs	r2, r1
 8009f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f3c:	2202      	movs	r2, #2
 8009f3e:	4013      	ands	r3, r2
 8009f40:	d00b      	beq.n	8009f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	4a3b      	ldr	r2, [pc, #236]	@ (800a038 <UART_AdvFeatureConfig+0x14c>)
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	0019      	movs	r1, r3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	430a      	orrs	r2, r1
 8009f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f5e:	2204      	movs	r2, #4
 8009f60:	4013      	ands	r3, r2
 8009f62:	d00b      	beq.n	8009f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	4a34      	ldr	r2, [pc, #208]	@ (800a03c <UART_AdvFeatureConfig+0x150>)
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	0019      	movs	r1, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f80:	2210      	movs	r2, #16
 8009f82:	4013      	ands	r3, r2
 8009f84:	d00b      	beq.n	8009f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	4a2c      	ldr	r2, [pc, #176]	@ (800a040 <UART_AdvFeatureConfig+0x154>)
 8009f8e:	4013      	ands	r3, r2
 8009f90:	0019      	movs	r1, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa2:	2220      	movs	r2, #32
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	d00b      	beq.n	8009fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	4a25      	ldr	r2, [pc, #148]	@ (800a044 <UART_AdvFeatureConfig+0x158>)
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	0019      	movs	r1, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	430a      	orrs	r2, r1
 8009fbe:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc4:	2240      	movs	r2, #64	@ 0x40
 8009fc6:	4013      	ands	r3, r2
 8009fc8:	d01d      	beq.n	800a006 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	4a1d      	ldr	r2, [pc, #116]	@ (800a048 <UART_AdvFeatureConfig+0x15c>)
 8009fd2:	4013      	ands	r3, r2
 8009fd4:	0019      	movs	r1, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	430a      	orrs	r2, r1
 8009fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fe6:	2380      	movs	r3, #128	@ 0x80
 8009fe8:	035b      	lsls	r3, r3, #13
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d10b      	bne.n	800a006 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	4a15      	ldr	r2, [pc, #84]	@ (800a04c <UART_AdvFeatureConfig+0x160>)
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	0019      	movs	r1, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	430a      	orrs	r2, r1
 800a004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a00a:	2280      	movs	r2, #128	@ 0x80
 800a00c:	4013      	ands	r3, r2
 800a00e:	d00b      	beq.n	800a028 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	4a0e      	ldr	r2, [pc, #56]	@ (800a050 <UART_AdvFeatureConfig+0x164>)
 800a018:	4013      	ands	r3, r2
 800a01a:	0019      	movs	r1, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	430a      	orrs	r2, r1
 800a026:	605a      	str	r2, [r3, #4]
  }
}
 800a028:	46c0      	nop			@ (mov r8, r8)
 800a02a:	46bd      	mov	sp, r7
 800a02c:	b002      	add	sp, #8
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	ffff7fff 	.word	0xffff7fff
 800a034:	fffdffff 	.word	0xfffdffff
 800a038:	fffeffff 	.word	0xfffeffff
 800a03c:	fffbffff 	.word	0xfffbffff
 800a040:	ffffefff 	.word	0xffffefff
 800a044:	ffffdfff 	.word	0xffffdfff
 800a048:	ffefffff 	.word	0xffefffff
 800a04c:	ff9fffff 	.word	0xff9fffff
 800a050:	fff7ffff 	.word	0xfff7ffff

0800a054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b092      	sub	sp, #72	@ 0x48
 800a058:	af02      	add	r7, sp, #8
 800a05a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2290      	movs	r2, #144	@ 0x90
 800a060:	2100      	movs	r1, #0
 800a062:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a064:	f7fb fd3e 	bl	8005ae4 <HAL_GetTick>
 800a068:	0003      	movs	r3, r0
 800a06a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2208      	movs	r2, #8
 800a074:	4013      	ands	r3, r2
 800a076:	2b08      	cmp	r3, #8
 800a078:	d12d      	bne.n	800a0d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a07a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a07c:	2280      	movs	r2, #128	@ 0x80
 800a07e:	0391      	lsls	r1, r2, #14
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	4a47      	ldr	r2, [pc, #284]	@ (800a1a0 <UART_CheckIdleState+0x14c>)
 800a084:	9200      	str	r2, [sp, #0]
 800a086:	2200      	movs	r2, #0
 800a088:	f000 f88e 	bl	800a1a8 <UART_WaitOnFlagUntilTimeout>
 800a08c:	1e03      	subs	r3, r0, #0
 800a08e:	d022      	beq.n	800a0d6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a090:	f3ef 8310 	mrs	r3, PRIMASK
 800a094:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a098:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a09a:	2301      	movs	r3, #1
 800a09c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a0:	f383 8810 	msr	PRIMASK, r3
}
 800a0a4:	46c0      	nop			@ (mov r8, r8)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2180      	movs	r1, #128	@ 0x80
 800a0b2:	438a      	bics	r2, r1
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0bc:	f383 8810 	msr	PRIMASK, r3
}
 800a0c0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2288      	movs	r2, #136	@ 0x88
 800a0c6:	2120      	movs	r1, #32
 800a0c8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2284      	movs	r2, #132	@ 0x84
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	e060      	b.n	800a198 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2204      	movs	r2, #4
 800a0de:	4013      	ands	r3, r2
 800a0e0:	2b04      	cmp	r3, #4
 800a0e2:	d146      	bne.n	800a172 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0e6:	2280      	movs	r2, #128	@ 0x80
 800a0e8:	03d1      	lsls	r1, r2, #15
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	4a2c      	ldr	r2, [pc, #176]	@ (800a1a0 <UART_CheckIdleState+0x14c>)
 800a0ee:	9200      	str	r2, [sp, #0]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f000 f859 	bl	800a1a8 <UART_WaitOnFlagUntilTimeout>
 800a0f6:	1e03      	subs	r3, r0, #0
 800a0f8:	d03b      	beq.n	800a172 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a0fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a0fe:	60fb      	str	r3, [r7, #12]
  return(result);
 800a100:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a102:	637b      	str	r3, [r7, #52]	@ 0x34
 800a104:	2301      	movs	r3, #1
 800a106:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	f383 8810 	msr	PRIMASK, r3
}
 800a10e:	46c0      	nop			@ (mov r8, r8)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4922      	ldr	r1, [pc, #136]	@ (800a1a4 <UART_CheckIdleState+0x150>)
 800a11c:	400a      	ands	r2, r1
 800a11e:	601a      	str	r2, [r3, #0]
 800a120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a122:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	f383 8810 	msr	PRIMASK, r3
}
 800a12a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a12c:	f3ef 8310 	mrs	r3, PRIMASK
 800a130:	61bb      	str	r3, [r7, #24]
  return(result);
 800a132:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a134:	633b      	str	r3, [r7, #48]	@ 0x30
 800a136:	2301      	movs	r3, #1
 800a138:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	f383 8810 	msr	PRIMASK, r3
}
 800a140:	46c0      	nop			@ (mov r8, r8)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	689a      	ldr	r2, [r3, #8]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2101      	movs	r1, #1
 800a14e:	438a      	bics	r2, r1
 800a150:	609a      	str	r2, [r3, #8]
 800a152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a154:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a156:	6a3b      	ldr	r3, [r7, #32]
 800a158:	f383 8810 	msr	PRIMASK, r3
}
 800a15c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	228c      	movs	r2, #140	@ 0x8c
 800a162:	2120      	movs	r1, #32
 800a164:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2284      	movs	r2, #132	@ 0x84
 800a16a:	2100      	movs	r1, #0
 800a16c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a16e:	2303      	movs	r3, #3
 800a170:	e012      	b.n	800a198 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2288      	movs	r2, #136	@ 0x88
 800a176:	2120      	movs	r1, #32
 800a178:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	228c      	movs	r2, #140	@ 0x8c
 800a17e:	2120      	movs	r1, #32
 800a180:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2284      	movs	r2, #132	@ 0x84
 800a192:	2100      	movs	r1, #0
 800a194:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	0018      	movs	r0, r3
 800a19a:	46bd      	mov	sp, r7
 800a19c:	b010      	add	sp, #64	@ 0x40
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	01ffffff 	.word	0x01ffffff
 800a1a4:	fffffedf 	.word	0xfffffedf

0800a1a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	603b      	str	r3, [r7, #0]
 800a1b4:	1dfb      	adds	r3, r7, #7
 800a1b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1b8:	e051      	b.n	800a25e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	d04e      	beq.n	800a25e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1c0:	f7fb fc90 	bl	8005ae4 <HAL_GetTick>
 800a1c4:	0002      	movs	r2, r0
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	69ba      	ldr	r2, [r7, #24]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d302      	bcc.n	800a1d6 <UART_WaitOnFlagUntilTimeout+0x2e>
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d101      	bne.n	800a1da <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800a1d6:	2303      	movs	r3, #3
 800a1d8:	e051      	b.n	800a27e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2204      	movs	r2, #4
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	d03b      	beq.n	800a25e <UART_WaitOnFlagUntilTimeout+0xb6>
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	2b80      	cmp	r3, #128	@ 0x80
 800a1ea:	d038      	beq.n	800a25e <UART_WaitOnFlagUntilTimeout+0xb6>
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	2b40      	cmp	r3, #64	@ 0x40
 800a1f0:	d035      	beq.n	800a25e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	69db      	ldr	r3, [r3, #28]
 800a1f8:	2208      	movs	r2, #8
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	2b08      	cmp	r3, #8
 800a1fe:	d111      	bne.n	800a224 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2208      	movs	r2, #8
 800a206:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	0018      	movs	r0, r3
 800a20c:	f000 f922 	bl	800a454 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2290      	movs	r2, #144	@ 0x90
 800a214:	2108      	movs	r1, #8
 800a216:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2284      	movs	r2, #132	@ 0x84
 800a21c:	2100      	movs	r1, #0
 800a21e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e02c      	b.n	800a27e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	69da      	ldr	r2, [r3, #28]
 800a22a:	2380      	movs	r3, #128	@ 0x80
 800a22c:	011b      	lsls	r3, r3, #4
 800a22e:	401a      	ands	r2, r3
 800a230:	2380      	movs	r3, #128	@ 0x80
 800a232:	011b      	lsls	r3, r3, #4
 800a234:	429a      	cmp	r2, r3
 800a236:	d112      	bne.n	800a25e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2280      	movs	r2, #128	@ 0x80
 800a23e:	0112      	lsls	r2, r2, #4
 800a240:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	0018      	movs	r0, r3
 800a246:	f000 f905 	bl	800a454 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2290      	movs	r2, #144	@ 0x90
 800a24e:	2120      	movs	r1, #32
 800a250:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2284      	movs	r2, #132	@ 0x84
 800a256:	2100      	movs	r1, #0
 800a258:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e00f      	b.n	800a27e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	69db      	ldr	r3, [r3, #28]
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	4013      	ands	r3, r2
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	1ad3      	subs	r3, r2, r3
 800a26c:	425a      	negs	r2, r3
 800a26e:	4153      	adcs	r3, r2
 800a270:	b2db      	uxtb	r3, r3
 800a272:	001a      	movs	r2, r3
 800a274:	1dfb      	adds	r3, r7, #7
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d09e      	beq.n	800a1ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	0018      	movs	r0, r3
 800a280:	46bd      	mov	sp, r7
 800a282:	b004      	add	sp, #16
 800a284:	bd80      	pop	{r7, pc}
	...

0800a288 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b090      	sub	sp, #64	@ 0x40
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	1dbb      	adds	r3, r7, #6
 800a294:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	1dba      	adds	r2, r7, #6
 800a2a0:	215c      	movs	r1, #92	@ 0x5c
 800a2a2:	8812      	ldrh	r2, [r2, #0]
 800a2a4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2290      	movs	r2, #144	@ 0x90
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	228c      	movs	r2, #140	@ 0x8c
 800a2b2:	2122      	movs	r1, #34	@ 0x22
 800a2b4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2280      	movs	r2, #128	@ 0x80
 800a2ba:	589b      	ldr	r3, [r3, r2]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d02d      	beq.n	800a31c <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2280      	movs	r2, #128	@ 0x80
 800a2c4:	589b      	ldr	r3, [r3, r2]
 800a2c6:	4a40      	ldr	r2, [pc, #256]	@ (800a3c8 <UART_Start_Receive_DMA+0x140>)
 800a2c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2280      	movs	r2, #128	@ 0x80
 800a2ce:	589b      	ldr	r3, [r3, r2]
 800a2d0:	4a3e      	ldr	r2, [pc, #248]	@ (800a3cc <UART_Start_Receive_DMA+0x144>)
 800a2d2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2280      	movs	r2, #128	@ 0x80
 800a2d8:	589b      	ldr	r3, [r3, r2]
 800a2da:	4a3d      	ldr	r2, [pc, #244]	@ (800a3d0 <UART_Start_Receive_DMA+0x148>)
 800a2dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2280      	movs	r2, #128	@ 0x80
 800a2e2:	589b      	ldr	r3, [r3, r2]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2280      	movs	r2, #128	@ 0x80
 800a2ec:	5898      	ldr	r0, [r3, r2]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	3324      	adds	r3, #36	@ 0x24
 800a2f4:	0019      	movs	r1, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2fa:	001a      	movs	r2, r3
 800a2fc:	1dbb      	adds	r3, r7, #6
 800a2fe:	881b      	ldrh	r3, [r3, #0]
 800a300:	f7fc fe72 	bl	8006fe8 <HAL_DMA_Start_IT>
 800a304:	1e03      	subs	r3, r0, #0
 800a306:	d009      	beq.n	800a31c <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2290      	movs	r2, #144	@ 0x90
 800a30c:	2110      	movs	r1, #16
 800a30e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	228c      	movs	r2, #140	@ 0x8c
 800a314:	2120      	movs	r1, #32
 800a316:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	e050      	b.n	800a3be <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d019      	beq.n	800a358 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a324:	f3ef 8310 	mrs	r3, PRIMASK
 800a328:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800a32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a32c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a32e:	2301      	movs	r3, #1
 800a330:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a334:	f383 8810 	msr	PRIMASK, r3
}
 800a338:	46c0      	nop			@ (mov r8, r8)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2180      	movs	r1, #128	@ 0x80
 800a346:	0049      	lsls	r1, r1, #1
 800a348:	430a      	orrs	r2, r1
 800a34a:	601a      	str	r2, [r3, #0]
 800a34c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a34e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a352:	f383 8810 	msr	PRIMASK, r3
}
 800a356:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a358:	f3ef 8310 	mrs	r3, PRIMASK
 800a35c:	613b      	str	r3, [r7, #16]
  return(result);
 800a35e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a360:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a362:	2301      	movs	r3, #1
 800a364:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f383 8810 	msr	PRIMASK, r3
}
 800a36c:	46c0      	nop			@ (mov r8, r8)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	689a      	ldr	r2, [r3, #8]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2101      	movs	r1, #1
 800a37a:	430a      	orrs	r2, r1
 800a37c:	609a      	str	r2, [r3, #8]
 800a37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a380:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	f383 8810 	msr	PRIMASK, r3
}
 800a388:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a38a:	f3ef 8310 	mrs	r3, PRIMASK
 800a38e:	61fb      	str	r3, [r7, #28]
  return(result);
 800a390:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a392:	637b      	str	r3, [r7, #52]	@ 0x34
 800a394:	2301      	movs	r3, #1
 800a396:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	f383 8810 	msr	PRIMASK, r3
}
 800a39e:	46c0      	nop			@ (mov r8, r8)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	689a      	ldr	r2, [r3, #8]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2140      	movs	r1, #64	@ 0x40
 800a3ac:	430a      	orrs	r2, r1
 800a3ae:	609a      	str	r2, [r3, #8]
 800a3b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b6:	f383 8810 	msr	PRIMASK, r3
}
 800a3ba:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	0018      	movs	r0, r3
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	b010      	add	sp, #64	@ 0x40
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	46c0      	nop			@ (mov r8, r8)
 800a3c8:	0800a5d9 	.word	0x0800a5d9
 800a3cc:	0800a709 	.word	0x0800a709
 800a3d0:	0800a74b 	.word	0x0800a74b

0800a3d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b08a      	sub	sp, #40	@ 0x28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a3dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a3e0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3e2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a3e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f383 8810 	msr	PRIMASK, r3
}
 800a3f0:	46c0      	nop			@ (mov r8, r8)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	21c0      	movs	r1, #192	@ 0xc0
 800a3fe:	438a      	bics	r2, r1
 800a400:	601a      	str	r2, [r3, #0]
 800a402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a404:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	f383 8810 	msr	PRIMASK, r3
}
 800a40c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a40e:	f3ef 8310 	mrs	r3, PRIMASK
 800a412:	617b      	str	r3, [r7, #20]
  return(result);
 800a414:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a416:	623b      	str	r3, [r7, #32]
 800a418:	2301      	movs	r3, #1
 800a41a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	f383 8810 	msr	PRIMASK, r3
}
 800a422:	46c0      	nop			@ (mov r8, r8)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	689a      	ldr	r2, [r3, #8]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4908      	ldr	r1, [pc, #32]	@ (800a450 <UART_EndTxTransfer+0x7c>)
 800a430:	400a      	ands	r2, r1
 800a432:	609a      	str	r2, [r3, #8]
 800a434:	6a3b      	ldr	r3, [r7, #32]
 800a436:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	f383 8810 	msr	PRIMASK, r3
}
 800a43e:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2288      	movs	r2, #136	@ 0x88
 800a444:	2120      	movs	r1, #32
 800a446:	5099      	str	r1, [r3, r2]
}
 800a448:	46c0      	nop			@ (mov r8, r8)
 800a44a:	46bd      	mov	sp, r7
 800a44c:	b00a      	add	sp, #40	@ 0x28
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	ff7fffff 	.word	0xff7fffff

0800a454 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b08e      	sub	sp, #56	@ 0x38
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a45c:	f3ef 8310 	mrs	r3, PRIMASK
 800a460:	617b      	str	r3, [r7, #20]
  return(result);
 800a462:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a464:	637b      	str	r3, [r7, #52]	@ 0x34
 800a466:	2301      	movs	r3, #1
 800a468:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	f383 8810 	msr	PRIMASK, r3
}
 800a470:	46c0      	nop			@ (mov r8, r8)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4926      	ldr	r1, [pc, #152]	@ (800a518 <UART_EndRxTransfer+0xc4>)
 800a47e:	400a      	ands	r2, r1
 800a480:	601a      	str	r2, [r3, #0]
 800a482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a484:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	f383 8810 	msr	PRIMASK, r3
}
 800a48c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a48e:	f3ef 8310 	mrs	r3, PRIMASK
 800a492:	623b      	str	r3, [r7, #32]
  return(result);
 800a494:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a496:	633b      	str	r3, [r7, #48]	@ 0x30
 800a498:	2301      	movs	r3, #1
 800a49a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49e:	f383 8810 	msr	PRIMASK, r3
}
 800a4a2:	46c0      	nop			@ (mov r8, r8)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	689a      	ldr	r2, [r3, #8]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	491b      	ldr	r1, [pc, #108]	@ (800a51c <UART_EndRxTransfer+0xc8>)
 800a4b0:	400a      	ands	r2, r1
 800a4b2:	609a      	str	r2, [r3, #8]
 800a4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ba:	f383 8810 	msr	PRIMASK, r3
}
 800a4be:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d118      	bne.n	800a4fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a4c8:	f3ef 8310 	mrs	r3, PRIMASK
 800a4cc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a4ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f383 8810 	msr	PRIMASK, r3
}
 800a4dc:	46c0      	nop			@ (mov r8, r8)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2110      	movs	r1, #16
 800a4ea:	438a      	bics	r2, r1
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	f383 8810 	msr	PRIMASK, r3
}
 800a4f8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	228c      	movs	r2, #140	@ 0x8c
 800a4fe:	2120      	movs	r1, #32
 800a500:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a50e:	46c0      	nop			@ (mov r8, r8)
 800a510:	46bd      	mov	sp, r7
 800a512:	b00e      	add	sp, #56	@ 0x38
 800a514:	bd80      	pop	{r7, pc}
 800a516:	46c0      	nop			@ (mov r8, r8)
 800a518:	fffffedf 	.word	0xfffffedf
 800a51c:	effffffe 	.word	0xeffffffe

0800a520 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b08c      	sub	sp, #48	@ 0x30
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2220      	movs	r2, #32
 800a536:	4013      	ands	r3, r2
 800a538:	d135      	bne.n	800a5a6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800a53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a53c:	2256      	movs	r2, #86	@ 0x56
 800a53e:	2100      	movs	r1, #0
 800a540:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a542:	f3ef 8310 	mrs	r3, PRIMASK
 800a546:	60fb      	str	r3, [r7, #12]
  return(result);
 800a548:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a54a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a54c:	2301      	movs	r3, #1
 800a54e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	f383 8810 	msr	PRIMASK, r3
}
 800a556:	46c0      	nop			@ (mov r8, r8)
 800a558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689a      	ldr	r2, [r3, #8]
 800a55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2180      	movs	r1, #128	@ 0x80
 800a564:	438a      	bics	r2, r1
 800a566:	609a      	str	r2, [r3, #8]
 800a568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	f383 8810 	msr	PRIMASK, r3
}
 800a572:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a574:	f3ef 8310 	mrs	r3, PRIMASK
 800a578:	61bb      	str	r3, [r7, #24]
  return(result);
 800a57a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a57c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a57e:	2301      	movs	r3, #1
 800a580:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	f383 8810 	msr	PRIMASK, r3
}
 800a588:	46c0      	nop			@ (mov r8, r8)
 800a58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2140      	movs	r1, #64	@ 0x40
 800a596:	430a      	orrs	r2, r1
 800a598:	601a      	str	r2, [r3, #0]
 800a59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a59e:	6a3b      	ldr	r3, [r7, #32]
 800a5a0:	f383 8810 	msr	PRIMASK, r3
}
 800a5a4:	e004      	b.n	800a5b0 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800a5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a8:	0018      	movs	r0, r3
 800a5aa:	f7f7 fbd3 	bl	8001d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5ae:	46c0      	nop			@ (mov r8, r8)
 800a5b0:	46c0      	nop			@ (mov r8, r8)
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	b00c      	add	sp, #48	@ 0x30
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	0018      	movs	r0, r3
 800a5ca:	f7ff faf9 	bl	8009bc0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5ce:	46c0      	nop			@ (mov r8, r8)
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	b004      	add	sp, #16
 800a5d4:	bd80      	pop	{r7, pc}
	...

0800a5d8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b094      	sub	sp, #80	@ 0x50
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2220      	movs	r2, #32
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	d16f      	bne.n	800a6d2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800a5f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5f4:	225e      	movs	r2, #94	@ 0x5e
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a5fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a5fe:	61bb      	str	r3, [r7, #24]
  return(result);
 800a600:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a602:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a604:	2301      	movs	r3, #1
 800a606:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	f383 8810 	msr	PRIMASK, r3
}
 800a60e:	46c0      	nop			@ (mov r8, r8)
 800a610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	493a      	ldr	r1, [pc, #232]	@ (800a704 <UART_DMAReceiveCplt+0x12c>)
 800a61c:	400a      	ands	r2, r1
 800a61e:	601a      	str	r2, [r3, #0]
 800a620:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a622:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a624:	6a3b      	ldr	r3, [r7, #32]
 800a626:	f383 8810 	msr	PRIMASK, r3
}
 800a62a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a62c:	f3ef 8310 	mrs	r3, PRIMASK
 800a630:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a634:	647b      	str	r3, [r7, #68]	@ 0x44
 800a636:	2301      	movs	r3, #1
 800a638:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a63a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63c:	f383 8810 	msr	PRIMASK, r3
}
 800a640:	46c0      	nop			@ (mov r8, r8)
 800a642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	689a      	ldr	r2, [r3, #8]
 800a648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2101      	movs	r1, #1
 800a64e:	438a      	bics	r2, r1
 800a650:	609a      	str	r2, [r3, #8]
 800a652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a654:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a658:	f383 8810 	msr	PRIMASK, r3
}
 800a65c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a65e:	f3ef 8310 	mrs	r3, PRIMASK
 800a662:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800a664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a666:	643b      	str	r3, [r7, #64]	@ 0x40
 800a668:	2301      	movs	r3, #1
 800a66a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a66c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a66e:	f383 8810 	msr	PRIMASK, r3
}
 800a672:	46c0      	nop			@ (mov r8, r8)
 800a674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	689a      	ldr	r2, [r3, #8]
 800a67a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	2140      	movs	r1, #64	@ 0x40
 800a680:	438a      	bics	r2, r1
 800a682:	609a      	str	r2, [r3, #8]
 800a684:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a686:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68a:	f383 8810 	msr	PRIMASK, r3
}
 800a68e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a692:	228c      	movs	r2, #140	@ 0x8c
 800a694:	2120      	movs	r1, #32
 800a696:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a69a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d118      	bne.n	800a6d2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a6a0:	f3ef 8310 	mrs	r3, PRIMASK
 800a6a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	f383 8810 	msr	PRIMASK, r3
}
 800a6b4:	46c0      	nop			@ (mov r8, r8)
 800a6b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2110      	movs	r1, #16
 800a6c2:	438a      	bics	r2, r1
 800a6c4:	601a      	str	r2, [r3, #0]
 800a6c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	f383 8810 	msr	PRIMASK, r3
}
 800a6d0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d108      	bne.n	800a6f2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6e2:	225c      	movs	r2, #92	@ 0x5c
 800a6e4:	5a9a      	ldrh	r2, [r3, r2]
 800a6e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6e8:	0011      	movs	r1, r2
 800a6ea:	0018      	movs	r0, r3
 800a6ec:	f7f7 fad6 	bl	8001c9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6f0:	e003      	b.n	800a6fa <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800a6f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6f4:	0018      	movs	r0, r3
 800a6f6:	f7ff fa6b 	bl	8009bd0 <HAL_UART_RxCpltCallback>
}
 800a6fa:	46c0      	nop			@ (mov r8, r8)
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	b014      	add	sp, #80	@ 0x50
 800a700:	bd80      	pop	{r7, pc}
 800a702:	46c0      	nop			@ (mov r8, r8)
 800a704:	fffffeff 	.word	0xfffffeff

0800a708 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a714:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2201      	movs	r2, #1
 800a71a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a720:	2b01      	cmp	r3, #1
 800a722:	d10a      	bne.n	800a73a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	225c      	movs	r2, #92	@ 0x5c
 800a728:	5a9b      	ldrh	r3, [r3, r2]
 800a72a:	085b      	lsrs	r3, r3, #1
 800a72c:	b29a      	uxth	r2, r3
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	0011      	movs	r1, r2
 800a732:	0018      	movs	r0, r3
 800a734:	f7f7 fab2 	bl	8001c9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a738:	e003      	b.n	800a742 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	0018      	movs	r0, r3
 800a73e:	f7ff fa4f 	bl	8009be0 <HAL_UART_RxHalfCpltCallback>
}
 800a742:	46c0      	nop			@ (mov r8, r8)
 800a744:	46bd      	mov	sp, r7
 800a746:	b004      	add	sp, #16
 800a748:	bd80      	pop	{r7, pc}

0800a74a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b086      	sub	sp, #24
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a756:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	2288      	movs	r2, #136	@ 0x88
 800a75c:	589b      	ldr	r3, [r3, r2]
 800a75e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	228c      	movs	r2, #140	@ 0x8c
 800a764:	589b      	ldr	r3, [r3, r2]
 800a766:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	2280      	movs	r2, #128	@ 0x80
 800a770:	4013      	ands	r3, r2
 800a772:	2b80      	cmp	r3, #128	@ 0x80
 800a774:	d10a      	bne.n	800a78c <UART_DMAError+0x42>
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	2b21      	cmp	r3, #33	@ 0x21
 800a77a:	d107      	bne.n	800a78c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	2256      	movs	r2, #86	@ 0x56
 800a780:	2100      	movs	r1, #0
 800a782:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	0018      	movs	r0, r3
 800a788:	f7ff fe24 	bl	800a3d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	2240      	movs	r2, #64	@ 0x40
 800a794:	4013      	ands	r3, r2
 800a796:	2b40      	cmp	r3, #64	@ 0x40
 800a798:	d10a      	bne.n	800a7b0 <UART_DMAError+0x66>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2b22      	cmp	r3, #34	@ 0x22
 800a79e:	d107      	bne.n	800a7b0 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	225e      	movs	r2, #94	@ 0x5e
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	0018      	movs	r0, r3
 800a7ac:	f7ff fe52 	bl	800a454 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	2290      	movs	r2, #144	@ 0x90
 800a7b4:	589b      	ldr	r3, [r3, r2]
 800a7b6:	2210      	movs	r2, #16
 800a7b8:	431a      	orrs	r2, r3
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	2190      	movs	r1, #144	@ 0x90
 800a7be:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	0018      	movs	r0, r3
 800a7c4:	f7f7 fad4 	bl	8001d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7c8:	46c0      	nop			@ (mov r8, r8)
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	b006      	add	sp, #24
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	225e      	movs	r2, #94	@ 0x5e
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2256      	movs	r2, #86	@ 0x56
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	0018      	movs	r0, r3
 800a7f2:	f7f7 fabd 	bl	8001d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7f6:	46c0      	nop			@ (mov r8, r8)
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	b004      	add	sp, #16
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b086      	sub	sp, #24
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a806:	f3ef 8310 	mrs	r3, PRIMASK
 800a80a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a80c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a80e:	617b      	str	r3, [r7, #20]
 800a810:	2301      	movs	r3, #1
 800a812:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f383 8810 	msr	PRIMASK, r3
}
 800a81a:	46c0      	nop			@ (mov r8, r8)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2140      	movs	r1, #64	@ 0x40
 800a828:	438a      	bics	r2, r1
 800a82a:	601a      	str	r2, [r3, #0]
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	f383 8810 	msr	PRIMASK, r3
}
 800a836:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2288      	movs	r2, #136	@ 0x88
 800a83c:	2120      	movs	r1, #32
 800a83e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	0018      	movs	r0, r3
 800a84a:	f7f7 fa83 	bl	8001d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a84e:	46c0      	nop			@ (mov r8, r8)
 800a850:	46bd      	mov	sp, r7
 800a852:	b006      	add	sp, #24
 800a854:	bd80      	pop	{r7, pc}
	...

0800a858 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b086      	sub	sp, #24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
 800a864:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d101      	bne.n	800a870 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e05d      	b.n	800a92c <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2288      	movs	r2, #136	@ 0x88
 800a874:	589b      	ldr	r3, [r3, r2]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d107      	bne.n	800a88a <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2284      	movs	r2, #132	@ 0x84
 800a87e:	2100      	movs	r1, #0
 800a880:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	0018      	movs	r0, r3
 800a886:	f7f8 f97f 	bl	8002b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2288      	movs	r2, #136	@ 0x88
 800a88e:	2124      	movs	r1, #36	@ 0x24
 800a890:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2101      	movs	r1, #1
 800a89e:	438a      	bics	r2, r1
 800a8a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	0018      	movs	r0, r3
 800a8ae:	f7ff fb1d 	bl	8009eec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	0018      	movs	r0, r3
 800a8b6:	f7ff f99b 	bl	8009bf0 <UART_SetConfig>
 800a8ba:	0003      	movs	r3, r0
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d101      	bne.n	800a8c4 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e033      	b.n	800a92c <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	689a      	ldr	r2, [r3, #8]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2180      	movs	r1, #128	@ 0x80
 800a8d0:	01c9      	lsls	r1, r1, #7
 800a8d2:	430a      	orrs	r2, r1
 800a8d4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	4a15      	ldr	r2, [pc, #84]	@ (800a934 <HAL_RS485Ex_Init+0xdc>)
 800a8de:	4013      	ands	r3, r2
 800a8e0:	0019      	movs	r1, r3
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	430a      	orrs	r2, r1
 800a8ea:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	055b      	lsls	r3, r3, #21
 800a8f0:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	041b      	lsls	r3, r3, #16
 800a8f6:	697a      	ldr	r2, [r7, #20]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a0d      	ldr	r2, [pc, #52]	@ (800a938 <HAL_RS485Ex_Init+0xe0>)
 800a904:	4013      	ands	r3, r2
 800a906:	0019      	movs	r1, r3
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	697a      	ldr	r2, [r7, #20]
 800a90e:	430a      	orrs	r2, r1
 800a910:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2101      	movs	r1, #1
 800a91e:	430a      	orrs	r2, r1
 800a920:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	0018      	movs	r0, r3
 800a926:	f7ff fb95 	bl	800a054 <UART_CheckIdleState>
 800a92a:	0003      	movs	r3, r0
}
 800a92c:	0018      	movs	r0, r3
 800a92e:	46bd      	mov	sp, r7
 800a930:	b006      	add	sp, #24
 800a932:	bd80      	pop	{r7, pc}
 800a934:	ffff7fff 	.word	0xffff7fff
 800a938:	fc00ffff 	.word	0xfc00ffff

0800a93c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a944:	46c0      	nop			@ (mov r8, r8)
 800a946:	46bd      	mov	sp, r7
 800a948:	b002      	add	sp, #8
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a954:	46c0      	nop			@ (mov r8, r8)
 800a956:	46bd      	mov	sp, r7
 800a958:	b002      	add	sp, #8
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a964:	46c0      	nop			@ (mov r8, r8)
 800a966:	46bd      	mov	sp, r7
 800a968:	b002      	add	sp, #8
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2284      	movs	r2, #132	@ 0x84
 800a978:	5c9b      	ldrb	r3, [r3, r2]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d101      	bne.n	800a982 <HAL_UARTEx_DisableFifoMode+0x16>
 800a97e:	2302      	movs	r3, #2
 800a980:	e027      	b.n	800a9d2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2284      	movs	r2, #132	@ 0x84
 800a986:	2101      	movs	r1, #1
 800a988:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2288      	movs	r2, #136	@ 0x88
 800a98e:	2124      	movs	r1, #36	@ 0x24
 800a990:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	438a      	bics	r2, r1
 800a9a8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	4a0b      	ldr	r2, [pc, #44]	@ (800a9dc <HAL_UARTEx_DisableFifoMode+0x70>)
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	68fa      	ldr	r2, [r7, #12]
 800a9be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2288      	movs	r2, #136	@ 0x88
 800a9c4:	2120      	movs	r1, #32
 800a9c6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2284      	movs	r2, #132	@ 0x84
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	0018      	movs	r0, r3
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	b004      	add	sp, #16
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	46c0      	nop			@ (mov r8, r8)
 800a9dc:	dfffffff 	.word	0xdfffffff

0800a9e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2284      	movs	r2, #132	@ 0x84
 800a9ee:	5c9b      	ldrb	r3, [r3, r2]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d101      	bne.n	800a9f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	e02e      	b.n	800aa56 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2284      	movs	r2, #132	@ 0x84
 800a9fc:	2101      	movs	r1, #1
 800a9fe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2288      	movs	r2, #136	@ 0x88
 800aa04:	2124      	movs	r1, #36	@ 0x24
 800aa06:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	438a      	bics	r2, r1
 800aa1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	00db      	lsls	r3, r3, #3
 800aa28:	08d9      	lsrs	r1, r3, #3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	430a      	orrs	r2, r1
 800aa32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	0018      	movs	r0, r3
 800aa38:	f000 f8bc 	bl	800abb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2288      	movs	r2, #136	@ 0x88
 800aa48:	2120      	movs	r1, #32
 800aa4a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2284      	movs	r2, #132	@ 0x84
 800aa50:	2100      	movs	r1, #0
 800aa52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	0018      	movs	r0, r3
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	b004      	add	sp, #16
 800aa5c:	bd80      	pop	{r7, pc}
	...

0800aa60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2284      	movs	r2, #132	@ 0x84
 800aa6e:	5c9b      	ldrb	r3, [r3, r2]
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d101      	bne.n	800aa78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa74:	2302      	movs	r3, #2
 800aa76:	e02f      	b.n	800aad8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2284      	movs	r2, #132	@ 0x84
 800aa7c:	2101      	movs	r1, #1
 800aa7e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2288      	movs	r2, #136	@ 0x88
 800aa84:	2124      	movs	r1, #36	@ 0x24
 800aa86:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2101      	movs	r1, #1
 800aa9c:	438a      	bics	r2, r1
 800aa9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	4a0e      	ldr	r2, [pc, #56]	@ (800aae0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	0019      	movs	r1, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	683a      	ldr	r2, [r7, #0]
 800aab2:	430a      	orrs	r2, r1
 800aab4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	0018      	movs	r0, r3
 800aaba:	f000 f87b 	bl	800abb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2288      	movs	r2, #136	@ 0x88
 800aaca:	2120      	movs	r1, #32
 800aacc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2284      	movs	r2, #132	@ 0x84
 800aad2:	2100      	movs	r1, #0
 800aad4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	0018      	movs	r0, r3
 800aada:	46bd      	mov	sp, r7
 800aadc:	b004      	add	sp, #16
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	f1ffffff 	.word	0xf1ffffff

0800aae4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aae4:	b5b0      	push	{r4, r5, r7, lr}
 800aae6:	b08a      	sub	sp, #40	@ 0x28
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	1dbb      	adds	r3, r7, #6
 800aaf0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	228c      	movs	r2, #140	@ 0x8c
 800aaf6:	589b      	ldr	r3, [r3, r2]
 800aaf8:	2b20      	cmp	r3, #32
 800aafa:	d156      	bne.n	800abaa <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d003      	beq.n	800ab0a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800ab02:	1dbb      	adds	r3, r7, #6
 800ab04:	881b      	ldrh	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d101      	bne.n	800ab0e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e04e      	b.n	800abac <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	689a      	ldr	r2, [r3, #8]
 800ab12:	2380      	movs	r3, #128	@ 0x80
 800ab14:	015b      	lsls	r3, r3, #5
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d109      	bne.n	800ab2e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d105      	bne.n	800ab2e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	2201      	movs	r2, #1
 800ab26:	4013      	ands	r3, r2
 800ab28:	d001      	beq.n	800ab2e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e03e      	b.n	800abac <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2201      	movs	r2, #1
 800ab32:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2200      	movs	r2, #0
 800ab38:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800ab3a:	2527      	movs	r5, #39	@ 0x27
 800ab3c:	197c      	adds	r4, r7, r5
 800ab3e:	1dbb      	adds	r3, r7, #6
 800ab40:	881a      	ldrh	r2, [r3, #0]
 800ab42:	68b9      	ldr	r1, [r7, #8]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	0018      	movs	r0, r3
 800ab48:	f7ff fb9e 	bl	800a288 <UART_Start_Receive_DMA>
 800ab4c:	0003      	movs	r3, r0
 800ab4e:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800ab50:	197b      	adds	r3, r7, r5
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d124      	bne.n	800aba2 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d11c      	bne.n	800ab9a <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2210      	movs	r2, #16
 800ab66:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ab68:	f3ef 8310 	mrs	r3, PRIMASK
 800ab6c:	617b      	str	r3, [r7, #20]
  return(result);
 800ab6e:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab70:	623b      	str	r3, [r7, #32]
 800ab72:	2301      	movs	r3, #1
 800ab74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	f383 8810 	msr	PRIMASK, r3
}
 800ab7c:	46c0      	nop			@ (mov r8, r8)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2110      	movs	r1, #16
 800ab8a:	430a      	orrs	r2, r1
 800ab8c:	601a      	str	r2, [r3, #0]
 800ab8e:	6a3b      	ldr	r3, [r7, #32]
 800ab90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	f383 8810 	msr	PRIMASK, r3
}
 800ab98:	e003      	b.n	800aba2 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ab9a:	2327      	movs	r3, #39	@ 0x27
 800ab9c:	18fb      	adds	r3, r7, r3
 800ab9e:	2201      	movs	r2, #1
 800aba0:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800aba2:	2327      	movs	r3, #39	@ 0x27
 800aba4:	18fb      	adds	r3, r7, r3
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	e000      	b.n	800abac <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800abaa:	2302      	movs	r3, #2
  }
}
 800abac:	0018      	movs	r0, r3
 800abae:	46bd      	mov	sp, r7
 800abb0:	b00a      	add	sp, #40	@ 0x28
 800abb2:	bdb0      	pop	{r4, r5, r7, pc}

0800abb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800abb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d108      	bne.n	800abd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	226a      	movs	r2, #106	@ 0x6a
 800abc8:	2101      	movs	r1, #1
 800abca:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2268      	movs	r2, #104	@ 0x68
 800abd0:	2101      	movs	r1, #1
 800abd2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800abd4:	e043      	b.n	800ac5e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800abd6:	260f      	movs	r6, #15
 800abd8:	19bb      	adds	r3, r7, r6
 800abda:	2208      	movs	r2, #8
 800abdc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800abde:	200e      	movs	r0, #14
 800abe0:	183b      	adds	r3, r7, r0
 800abe2:	2208      	movs	r2, #8
 800abe4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	0e5b      	lsrs	r3, r3, #25
 800abee:	b2da      	uxtb	r2, r3
 800abf0:	240d      	movs	r4, #13
 800abf2:	193b      	adds	r3, r7, r4
 800abf4:	2107      	movs	r1, #7
 800abf6:	400a      	ands	r2, r1
 800abf8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	0f5b      	lsrs	r3, r3, #29
 800ac02:	b2da      	uxtb	r2, r3
 800ac04:	250c      	movs	r5, #12
 800ac06:	197b      	adds	r3, r7, r5
 800ac08:	2107      	movs	r1, #7
 800ac0a:	400a      	ands	r2, r1
 800ac0c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac0e:	183b      	adds	r3, r7, r0
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	197a      	adds	r2, r7, r5
 800ac14:	7812      	ldrb	r2, [r2, #0]
 800ac16:	4914      	ldr	r1, [pc, #80]	@ (800ac68 <UARTEx_SetNbDataToProcess+0xb4>)
 800ac18:	5c8a      	ldrb	r2, [r1, r2]
 800ac1a:	435a      	muls	r2, r3
 800ac1c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac1e:	197b      	adds	r3, r7, r5
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	4a12      	ldr	r2, [pc, #72]	@ (800ac6c <UARTEx_SetNbDataToProcess+0xb8>)
 800ac24:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac26:	0019      	movs	r1, r3
 800ac28:	f7f5 faf8 	bl	800021c <__divsi3>
 800ac2c:	0003      	movs	r3, r0
 800ac2e:	b299      	uxth	r1, r3
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	226a      	movs	r2, #106	@ 0x6a
 800ac34:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac36:	19bb      	adds	r3, r7, r6
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	193a      	adds	r2, r7, r4
 800ac3c:	7812      	ldrb	r2, [r2, #0]
 800ac3e:	490a      	ldr	r1, [pc, #40]	@ (800ac68 <UARTEx_SetNbDataToProcess+0xb4>)
 800ac40:	5c8a      	ldrb	r2, [r1, r2]
 800ac42:	435a      	muls	r2, r3
 800ac44:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac46:	193b      	adds	r3, r7, r4
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	4a08      	ldr	r2, [pc, #32]	@ (800ac6c <UARTEx_SetNbDataToProcess+0xb8>)
 800ac4c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac4e:	0019      	movs	r1, r3
 800ac50:	f7f5 fae4 	bl	800021c <__divsi3>
 800ac54:	0003      	movs	r3, r0
 800ac56:	b299      	uxth	r1, r3
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2268      	movs	r2, #104	@ 0x68
 800ac5c:	5299      	strh	r1, [r3, r2]
}
 800ac5e:	46c0      	nop			@ (mov r8, r8)
 800ac60:	46bd      	mov	sp, r7
 800ac62:	b005      	add	sp, #20
 800ac64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac66:	46c0      	nop			@ (mov r8, r8)
 800ac68:	0800afd4 	.word	0x0800afd4
 800ac6c:	0800afdc 	.word	0x0800afdc

0800ac70 <memset>:
 800ac70:	0003      	movs	r3, r0
 800ac72:	1882      	adds	r2, r0, r2
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d100      	bne.n	800ac7a <memset+0xa>
 800ac78:	4770      	bx	lr
 800ac7a:	7019      	strb	r1, [r3, #0]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	e7f9      	b.n	800ac74 <memset+0x4>

0800ac80 <__libc_init_array>:
 800ac80:	b570      	push	{r4, r5, r6, lr}
 800ac82:	2600      	movs	r6, #0
 800ac84:	4c0c      	ldr	r4, [pc, #48]	@ (800acb8 <__libc_init_array+0x38>)
 800ac86:	4d0d      	ldr	r5, [pc, #52]	@ (800acbc <__libc_init_array+0x3c>)
 800ac88:	1b64      	subs	r4, r4, r5
 800ac8a:	10a4      	asrs	r4, r4, #2
 800ac8c:	42a6      	cmp	r6, r4
 800ac8e:	d109      	bne.n	800aca4 <__libc_init_array+0x24>
 800ac90:	2600      	movs	r6, #0
 800ac92:	f000 f823 	bl	800acdc <_init>
 800ac96:	4c0a      	ldr	r4, [pc, #40]	@ (800acc0 <__libc_init_array+0x40>)
 800ac98:	4d0a      	ldr	r5, [pc, #40]	@ (800acc4 <__libc_init_array+0x44>)
 800ac9a:	1b64      	subs	r4, r4, r5
 800ac9c:	10a4      	asrs	r4, r4, #2
 800ac9e:	42a6      	cmp	r6, r4
 800aca0:	d105      	bne.n	800acae <__libc_init_array+0x2e>
 800aca2:	bd70      	pop	{r4, r5, r6, pc}
 800aca4:	00b3      	lsls	r3, r6, #2
 800aca6:	58eb      	ldr	r3, [r5, r3]
 800aca8:	4798      	blx	r3
 800acaa:	3601      	adds	r6, #1
 800acac:	e7ee      	b.n	800ac8c <__libc_init_array+0xc>
 800acae:	00b3      	lsls	r3, r6, #2
 800acb0:	58eb      	ldr	r3, [r5, r3]
 800acb2:	4798      	blx	r3
 800acb4:	3601      	adds	r6, #1
 800acb6:	e7f2      	b.n	800ac9e <__libc_init_array+0x1e>
 800acb8:	0800afe4 	.word	0x0800afe4
 800acbc:	0800afe4 	.word	0x0800afe4
 800acc0:	0800afe8 	.word	0x0800afe8
 800acc4:	0800afe4 	.word	0x0800afe4

0800acc8 <memcpy>:
 800acc8:	2300      	movs	r3, #0
 800acca:	b510      	push	{r4, lr}
 800accc:	429a      	cmp	r2, r3
 800acce:	d100      	bne.n	800acd2 <memcpy+0xa>
 800acd0:	bd10      	pop	{r4, pc}
 800acd2:	5ccc      	ldrb	r4, [r1, r3]
 800acd4:	54c4      	strb	r4, [r0, r3]
 800acd6:	3301      	adds	r3, #1
 800acd8:	e7f8      	b.n	800accc <memcpy+0x4>
	...

0800acdc <_init>:
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	46c0      	nop			@ (mov r8, r8)
 800ace0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace2:	bc08      	pop	{r3}
 800ace4:	469e      	mov	lr, r3
 800ace6:	4770      	bx	lr

0800ace8 <_fini>:
 800ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acea:	46c0      	nop			@ (mov r8, r8)
 800acec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acee:	bc08      	pop	{r3}
 800acf0:	469e      	mov	lr, r3
 800acf2:	4770      	bx	lr
