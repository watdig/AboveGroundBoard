
AboveGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007588  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007648  08007648  00008648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076d0  080076d0  00009010  2**0
                  CONTENTS
  4 .ARM          00000000  080076d0  080076d0  00009010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076d0  080076d0  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076d0  080076d0  000086d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076d4  080076d4  000086d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080076d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000010  080076e8  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  080076e8  000091e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010937  00000000  00000000  00009038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c6  00000000  00000000  0001996f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0001be38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b12  00000000  00000000  0001cc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015fc6  00000000  00000000  0001d772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012299  00000000  00000000  00033738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e470  00000000  00000000  000459d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3e41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003588  00000000  00000000  000d3e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000d740c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007630 	.word	0x08007630

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08007630 	.word	0x08007630

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 fd05 	bl	8000e14 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fc45 	bl	8000ca4 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fcf7 	bl	8000e14 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fced 	bl	8000e14 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fc6f 	bl	8000d2c <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			@ (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fc65 	bl	8000d2c <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	0008      	movs	r0, r1
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 f8c3 	bl	8000604 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 f843 	bl	8000514 <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 f8b5 	bl	8000604 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 f8ab 	bl	8000604 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f851 	bl	8000564 <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f847 	bl	8000564 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_f2uiz>:
 80004e4:	219e      	movs	r1, #158	@ 0x9e
 80004e6:	b510      	push	{r4, lr}
 80004e8:	05c9      	lsls	r1, r1, #23
 80004ea:	1c04      	adds	r4, r0, #0
 80004ec:	f7ff fff0 	bl	80004d0 <__aeabi_fcmpge>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d103      	bne.n	80004fc <__aeabi_f2uiz+0x18>
 80004f4:	1c20      	adds	r0, r4, #0
 80004f6:	f000 fbb5 	bl	8000c64 <__aeabi_f2iz>
 80004fa:	bd10      	pop	{r4, pc}
 80004fc:	219e      	movs	r1, #158	@ 0x9e
 80004fe:	1c20      	adds	r0, r4, #0
 8000500:	05c9      	lsls	r1, r1, #23
 8000502:	f000 fa0b 	bl	800091c <__aeabi_fsub>
 8000506:	f000 fbad 	bl	8000c64 <__aeabi_f2iz>
 800050a:	2380      	movs	r3, #128	@ 0x80
 800050c:	061b      	lsls	r3, r3, #24
 800050e:	469c      	mov	ip, r3
 8000510:	4460      	add	r0, ip
 8000512:	e7f2      	b.n	80004fa <__aeabi_f2uiz+0x16>

08000514 <__eqsf2>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	0042      	lsls	r2, r0, #1
 8000518:	024e      	lsls	r6, r1, #9
 800051a:	004c      	lsls	r4, r1, #1
 800051c:	0245      	lsls	r5, r0, #9
 800051e:	0a6d      	lsrs	r5, r5, #9
 8000520:	0e12      	lsrs	r2, r2, #24
 8000522:	0fc3      	lsrs	r3, r0, #31
 8000524:	0a76      	lsrs	r6, r6, #9
 8000526:	0e24      	lsrs	r4, r4, #24
 8000528:	0fc9      	lsrs	r1, r1, #31
 800052a:	2aff      	cmp	r2, #255	@ 0xff
 800052c:	d010      	beq.n	8000550 <__eqsf2+0x3c>
 800052e:	2cff      	cmp	r4, #255	@ 0xff
 8000530:	d00c      	beq.n	800054c <__eqsf2+0x38>
 8000532:	2001      	movs	r0, #1
 8000534:	42a2      	cmp	r2, r4
 8000536:	d10a      	bne.n	800054e <__eqsf2+0x3a>
 8000538:	42b5      	cmp	r5, r6
 800053a:	d108      	bne.n	800054e <__eqsf2+0x3a>
 800053c:	428b      	cmp	r3, r1
 800053e:	d00f      	beq.n	8000560 <__eqsf2+0x4c>
 8000540:	2a00      	cmp	r2, #0
 8000542:	d104      	bne.n	800054e <__eqsf2+0x3a>
 8000544:	0028      	movs	r0, r5
 8000546:	1e43      	subs	r3, r0, #1
 8000548:	4198      	sbcs	r0, r3
 800054a:	e000      	b.n	800054e <__eqsf2+0x3a>
 800054c:	2001      	movs	r0, #1
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	2001      	movs	r0, #1
 8000552:	2cff      	cmp	r4, #255	@ 0xff
 8000554:	d1fb      	bne.n	800054e <__eqsf2+0x3a>
 8000556:	4335      	orrs	r5, r6
 8000558:	d1f9      	bne.n	800054e <__eqsf2+0x3a>
 800055a:	404b      	eors	r3, r1
 800055c:	0018      	movs	r0, r3
 800055e:	e7f6      	b.n	800054e <__eqsf2+0x3a>
 8000560:	2000      	movs	r0, #0
 8000562:	e7f4      	b.n	800054e <__eqsf2+0x3a>

08000564 <__gesf2>:
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	0042      	lsls	r2, r0, #1
 8000568:	0244      	lsls	r4, r0, #9
 800056a:	024d      	lsls	r5, r1, #9
 800056c:	0fc3      	lsrs	r3, r0, #31
 800056e:	0048      	lsls	r0, r1, #1
 8000570:	0a64      	lsrs	r4, r4, #9
 8000572:	0e12      	lsrs	r2, r2, #24
 8000574:	0a6d      	lsrs	r5, r5, #9
 8000576:	0e00      	lsrs	r0, r0, #24
 8000578:	0fc9      	lsrs	r1, r1, #31
 800057a:	2aff      	cmp	r2, #255	@ 0xff
 800057c:	d019      	beq.n	80005b2 <__gesf2+0x4e>
 800057e:	28ff      	cmp	r0, #255	@ 0xff
 8000580:	d00b      	beq.n	800059a <__gesf2+0x36>
 8000582:	2a00      	cmp	r2, #0
 8000584:	d11e      	bne.n	80005c4 <__gesf2+0x60>
 8000586:	2800      	cmp	r0, #0
 8000588:	d10b      	bne.n	80005a2 <__gesf2+0x3e>
 800058a:	2d00      	cmp	r5, #0
 800058c:	d027      	beq.n	80005de <__gesf2+0x7a>
 800058e:	2c00      	cmp	r4, #0
 8000590:	d134      	bne.n	80005fc <__gesf2+0x98>
 8000592:	2900      	cmp	r1, #0
 8000594:	d02f      	beq.n	80005f6 <__gesf2+0x92>
 8000596:	0008      	movs	r0, r1
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	2d00      	cmp	r5, #0
 800059c:	d128      	bne.n	80005f0 <__gesf2+0x8c>
 800059e:	2a00      	cmp	r2, #0
 80005a0:	d101      	bne.n	80005a6 <__gesf2+0x42>
 80005a2:	2c00      	cmp	r4, #0
 80005a4:	d0f5      	beq.n	8000592 <__gesf2+0x2e>
 80005a6:	428b      	cmp	r3, r1
 80005a8:	d107      	bne.n	80005ba <__gesf2+0x56>
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d023      	beq.n	80005f6 <__gesf2+0x92>
 80005ae:	0018      	movs	r0, r3
 80005b0:	e7f2      	b.n	8000598 <__gesf2+0x34>
 80005b2:	2c00      	cmp	r4, #0
 80005b4:	d11c      	bne.n	80005f0 <__gesf2+0x8c>
 80005b6:	28ff      	cmp	r0, #255	@ 0xff
 80005b8:	d014      	beq.n	80005e4 <__gesf2+0x80>
 80005ba:	1e58      	subs	r0, r3, #1
 80005bc:	2302      	movs	r3, #2
 80005be:	4018      	ands	r0, r3
 80005c0:	3801      	subs	r0, #1
 80005c2:	e7e9      	b.n	8000598 <__gesf2+0x34>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d0f8      	beq.n	80005ba <__gesf2+0x56>
 80005c8:	428b      	cmp	r3, r1
 80005ca:	d1f6      	bne.n	80005ba <__gesf2+0x56>
 80005cc:	4282      	cmp	r2, r0
 80005ce:	dcf4      	bgt.n	80005ba <__gesf2+0x56>
 80005d0:	dbeb      	blt.n	80005aa <__gesf2+0x46>
 80005d2:	42ac      	cmp	r4, r5
 80005d4:	d8f1      	bhi.n	80005ba <__gesf2+0x56>
 80005d6:	2000      	movs	r0, #0
 80005d8:	42ac      	cmp	r4, r5
 80005da:	d2dd      	bcs.n	8000598 <__gesf2+0x34>
 80005dc:	e7e5      	b.n	80005aa <__gesf2+0x46>
 80005de:	2c00      	cmp	r4, #0
 80005e0:	d0da      	beq.n	8000598 <__gesf2+0x34>
 80005e2:	e7ea      	b.n	80005ba <__gesf2+0x56>
 80005e4:	2d00      	cmp	r5, #0
 80005e6:	d103      	bne.n	80005f0 <__gesf2+0x8c>
 80005e8:	428b      	cmp	r3, r1
 80005ea:	d1e6      	bne.n	80005ba <__gesf2+0x56>
 80005ec:	2000      	movs	r0, #0
 80005ee:	e7d3      	b.n	8000598 <__gesf2+0x34>
 80005f0:	2002      	movs	r0, #2
 80005f2:	4240      	negs	r0, r0
 80005f4:	e7d0      	b.n	8000598 <__gesf2+0x34>
 80005f6:	2001      	movs	r0, #1
 80005f8:	4240      	negs	r0, r0
 80005fa:	e7cd      	b.n	8000598 <__gesf2+0x34>
 80005fc:	428b      	cmp	r3, r1
 80005fe:	d0e8      	beq.n	80005d2 <__gesf2+0x6e>
 8000600:	e7db      	b.n	80005ba <__gesf2+0x56>
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__lesf2>:
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	0042      	lsls	r2, r0, #1
 8000608:	0244      	lsls	r4, r0, #9
 800060a:	024d      	lsls	r5, r1, #9
 800060c:	0fc3      	lsrs	r3, r0, #31
 800060e:	0048      	lsls	r0, r1, #1
 8000610:	0a64      	lsrs	r4, r4, #9
 8000612:	0e12      	lsrs	r2, r2, #24
 8000614:	0a6d      	lsrs	r5, r5, #9
 8000616:	0e00      	lsrs	r0, r0, #24
 8000618:	0fc9      	lsrs	r1, r1, #31
 800061a:	2aff      	cmp	r2, #255	@ 0xff
 800061c:	d01a      	beq.n	8000654 <__lesf2+0x50>
 800061e:	28ff      	cmp	r0, #255	@ 0xff
 8000620:	d00e      	beq.n	8000640 <__lesf2+0x3c>
 8000622:	2a00      	cmp	r2, #0
 8000624:	d11e      	bne.n	8000664 <__lesf2+0x60>
 8000626:	2800      	cmp	r0, #0
 8000628:	d10e      	bne.n	8000648 <__lesf2+0x44>
 800062a:	2d00      	cmp	r5, #0
 800062c:	d02a      	beq.n	8000684 <__lesf2+0x80>
 800062e:	2c00      	cmp	r4, #0
 8000630:	d00c      	beq.n	800064c <__lesf2+0x48>
 8000632:	428b      	cmp	r3, r1
 8000634:	d01d      	beq.n	8000672 <__lesf2+0x6e>
 8000636:	1e58      	subs	r0, r3, #1
 8000638:	2302      	movs	r3, #2
 800063a:	4018      	ands	r0, r3
 800063c:	3801      	subs	r0, #1
 800063e:	e010      	b.n	8000662 <__lesf2+0x5e>
 8000640:	2d00      	cmp	r5, #0
 8000642:	d10d      	bne.n	8000660 <__lesf2+0x5c>
 8000644:	2a00      	cmp	r2, #0
 8000646:	d120      	bne.n	800068a <__lesf2+0x86>
 8000648:	2c00      	cmp	r4, #0
 800064a:	d11e      	bne.n	800068a <__lesf2+0x86>
 800064c:	2900      	cmp	r1, #0
 800064e:	d023      	beq.n	8000698 <__lesf2+0x94>
 8000650:	0008      	movs	r0, r1
 8000652:	e006      	b.n	8000662 <__lesf2+0x5e>
 8000654:	2c00      	cmp	r4, #0
 8000656:	d103      	bne.n	8000660 <__lesf2+0x5c>
 8000658:	28ff      	cmp	r0, #255	@ 0xff
 800065a:	d1ec      	bne.n	8000636 <__lesf2+0x32>
 800065c:	2d00      	cmp	r5, #0
 800065e:	d017      	beq.n	8000690 <__lesf2+0x8c>
 8000660:	2002      	movs	r0, #2
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	2800      	cmp	r0, #0
 8000666:	d0e6      	beq.n	8000636 <__lesf2+0x32>
 8000668:	428b      	cmp	r3, r1
 800066a:	d1e4      	bne.n	8000636 <__lesf2+0x32>
 800066c:	4282      	cmp	r2, r0
 800066e:	dce2      	bgt.n	8000636 <__lesf2+0x32>
 8000670:	db04      	blt.n	800067c <__lesf2+0x78>
 8000672:	42ac      	cmp	r4, r5
 8000674:	d8df      	bhi.n	8000636 <__lesf2+0x32>
 8000676:	2000      	movs	r0, #0
 8000678:	42ac      	cmp	r4, r5
 800067a:	d2f2      	bcs.n	8000662 <__lesf2+0x5e>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00b      	beq.n	8000698 <__lesf2+0x94>
 8000680:	0018      	movs	r0, r3
 8000682:	e7ee      	b.n	8000662 <__lesf2+0x5e>
 8000684:	2c00      	cmp	r4, #0
 8000686:	d0ec      	beq.n	8000662 <__lesf2+0x5e>
 8000688:	e7d5      	b.n	8000636 <__lesf2+0x32>
 800068a:	428b      	cmp	r3, r1
 800068c:	d1d3      	bne.n	8000636 <__lesf2+0x32>
 800068e:	e7f5      	b.n	800067c <__lesf2+0x78>
 8000690:	2000      	movs	r0, #0
 8000692:	428b      	cmp	r3, r1
 8000694:	d0e5      	beq.n	8000662 <__lesf2+0x5e>
 8000696:	e7ce      	b.n	8000636 <__lesf2+0x32>
 8000698:	2001      	movs	r0, #1
 800069a:	4240      	negs	r0, r0
 800069c:	e7e1      	b.n	8000662 <__lesf2+0x5e>
 800069e:	46c0      	nop			@ (mov r8, r8)

080006a0 <__aeabi_fmul>:
 80006a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006a2:	464f      	mov	r7, r9
 80006a4:	4646      	mov	r6, r8
 80006a6:	46d6      	mov	lr, sl
 80006a8:	0243      	lsls	r3, r0, #9
 80006aa:	0a5b      	lsrs	r3, r3, #9
 80006ac:	0045      	lsls	r5, r0, #1
 80006ae:	b5c0      	push	{r6, r7, lr}
 80006b0:	4699      	mov	r9, r3
 80006b2:	1c0f      	adds	r7, r1, #0
 80006b4:	0e2d      	lsrs	r5, r5, #24
 80006b6:	0fc6      	lsrs	r6, r0, #31
 80006b8:	2d00      	cmp	r5, #0
 80006ba:	d100      	bne.n	80006be <__aeabi_fmul+0x1e>
 80006bc:	e088      	b.n	80007d0 <__aeabi_fmul+0x130>
 80006be:	2dff      	cmp	r5, #255	@ 0xff
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fmul+0x24>
 80006c2:	e08d      	b.n	80007e0 <__aeabi_fmul+0x140>
 80006c4:	2280      	movs	r2, #128	@ 0x80
 80006c6:	00db      	lsls	r3, r3, #3
 80006c8:	04d2      	lsls	r2, r2, #19
 80006ca:	431a      	orrs	r2, r3
 80006cc:	2300      	movs	r3, #0
 80006ce:	4691      	mov	r9, r2
 80006d0:	4698      	mov	r8, r3
 80006d2:	469a      	mov	sl, r3
 80006d4:	3d7f      	subs	r5, #127	@ 0x7f
 80006d6:	027c      	lsls	r4, r7, #9
 80006d8:	007b      	lsls	r3, r7, #1
 80006da:	0a64      	lsrs	r4, r4, #9
 80006dc:	0e1b      	lsrs	r3, r3, #24
 80006de:	0fff      	lsrs	r7, r7, #31
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d068      	beq.n	80007b6 <__aeabi_fmul+0x116>
 80006e4:	2bff      	cmp	r3, #255	@ 0xff
 80006e6:	d021      	beq.n	800072c <__aeabi_fmul+0x8c>
 80006e8:	2280      	movs	r2, #128	@ 0x80
 80006ea:	00e4      	lsls	r4, r4, #3
 80006ec:	04d2      	lsls	r2, r2, #19
 80006ee:	4314      	orrs	r4, r2
 80006f0:	4642      	mov	r2, r8
 80006f2:	3b7f      	subs	r3, #127	@ 0x7f
 80006f4:	195b      	adds	r3, r3, r5
 80006f6:	2100      	movs	r1, #0
 80006f8:	1c5d      	adds	r5, r3, #1
 80006fa:	2a0a      	cmp	r2, #10
 80006fc:	dc2e      	bgt.n	800075c <__aeabi_fmul+0xbc>
 80006fe:	407e      	eors	r6, r7
 8000700:	4642      	mov	r2, r8
 8000702:	2a02      	cmp	r2, #2
 8000704:	dc23      	bgt.n	800074e <__aeabi_fmul+0xae>
 8000706:	3a01      	subs	r2, #1
 8000708:	2a01      	cmp	r2, #1
 800070a:	d900      	bls.n	800070e <__aeabi_fmul+0x6e>
 800070c:	e0bd      	b.n	800088a <__aeabi_fmul+0x1ea>
 800070e:	2902      	cmp	r1, #2
 8000710:	d06e      	beq.n	80007f0 <__aeabi_fmul+0x150>
 8000712:	2901      	cmp	r1, #1
 8000714:	d12c      	bne.n	8000770 <__aeabi_fmul+0xd0>
 8000716:	2000      	movs	r0, #0
 8000718:	2200      	movs	r2, #0
 800071a:	05c0      	lsls	r0, r0, #23
 800071c:	07f6      	lsls	r6, r6, #31
 800071e:	4310      	orrs	r0, r2
 8000720:	4330      	orrs	r0, r6
 8000722:	bce0      	pop	{r5, r6, r7}
 8000724:	46ba      	mov	sl, r7
 8000726:	46b1      	mov	r9, r6
 8000728:	46a8      	mov	r8, r5
 800072a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800072c:	002b      	movs	r3, r5
 800072e:	33ff      	adds	r3, #255	@ 0xff
 8000730:	2c00      	cmp	r4, #0
 8000732:	d065      	beq.n	8000800 <__aeabi_fmul+0x160>
 8000734:	2203      	movs	r2, #3
 8000736:	4641      	mov	r1, r8
 8000738:	4311      	orrs	r1, r2
 800073a:	0032      	movs	r2, r6
 800073c:	3501      	adds	r5, #1
 800073e:	4688      	mov	r8, r1
 8000740:	407a      	eors	r2, r7
 8000742:	35ff      	adds	r5, #255	@ 0xff
 8000744:	290a      	cmp	r1, #10
 8000746:	dd00      	ble.n	800074a <__aeabi_fmul+0xaa>
 8000748:	e0d8      	b.n	80008fc <__aeabi_fmul+0x25c>
 800074a:	0016      	movs	r6, r2
 800074c:	2103      	movs	r1, #3
 800074e:	4640      	mov	r0, r8
 8000750:	2201      	movs	r2, #1
 8000752:	4082      	lsls	r2, r0
 8000754:	20a6      	movs	r0, #166	@ 0xa6
 8000756:	00c0      	lsls	r0, r0, #3
 8000758:	4202      	tst	r2, r0
 800075a:	d020      	beq.n	800079e <__aeabi_fmul+0xfe>
 800075c:	4653      	mov	r3, sl
 800075e:	2b02      	cmp	r3, #2
 8000760:	d046      	beq.n	80007f0 <__aeabi_fmul+0x150>
 8000762:	2b03      	cmp	r3, #3
 8000764:	d100      	bne.n	8000768 <__aeabi_fmul+0xc8>
 8000766:	e0bb      	b.n	80008e0 <__aeabi_fmul+0x240>
 8000768:	4651      	mov	r1, sl
 800076a:	464c      	mov	r4, r9
 800076c:	2901      	cmp	r1, #1
 800076e:	d0d2      	beq.n	8000716 <__aeabi_fmul+0x76>
 8000770:	002b      	movs	r3, r5
 8000772:	337f      	adds	r3, #127	@ 0x7f
 8000774:	2b00      	cmp	r3, #0
 8000776:	dd70      	ble.n	800085a <__aeabi_fmul+0x1ba>
 8000778:	0762      	lsls	r2, r4, #29
 800077a:	d004      	beq.n	8000786 <__aeabi_fmul+0xe6>
 800077c:	220f      	movs	r2, #15
 800077e:	4022      	ands	r2, r4
 8000780:	2a04      	cmp	r2, #4
 8000782:	d000      	beq.n	8000786 <__aeabi_fmul+0xe6>
 8000784:	3404      	adds	r4, #4
 8000786:	0122      	lsls	r2, r4, #4
 8000788:	d503      	bpl.n	8000792 <__aeabi_fmul+0xf2>
 800078a:	4b63      	ldr	r3, [pc, #396]	@ (8000918 <__aeabi_fmul+0x278>)
 800078c:	401c      	ands	r4, r3
 800078e:	002b      	movs	r3, r5
 8000790:	3380      	adds	r3, #128	@ 0x80
 8000792:	2bfe      	cmp	r3, #254	@ 0xfe
 8000794:	dc2c      	bgt.n	80007f0 <__aeabi_fmul+0x150>
 8000796:	01a2      	lsls	r2, r4, #6
 8000798:	0a52      	lsrs	r2, r2, #9
 800079a:	b2d8      	uxtb	r0, r3
 800079c:	e7bd      	b.n	800071a <__aeabi_fmul+0x7a>
 800079e:	2090      	movs	r0, #144	@ 0x90
 80007a0:	0080      	lsls	r0, r0, #2
 80007a2:	4202      	tst	r2, r0
 80007a4:	d127      	bne.n	80007f6 <__aeabi_fmul+0x156>
 80007a6:	38b9      	subs	r0, #185	@ 0xb9
 80007a8:	38ff      	subs	r0, #255	@ 0xff
 80007aa:	4210      	tst	r0, r2
 80007ac:	d06d      	beq.n	800088a <__aeabi_fmul+0x1ea>
 80007ae:	003e      	movs	r6, r7
 80007b0:	46a1      	mov	r9, r4
 80007b2:	468a      	mov	sl, r1
 80007b4:	e7d2      	b.n	800075c <__aeabi_fmul+0xbc>
 80007b6:	2c00      	cmp	r4, #0
 80007b8:	d141      	bne.n	800083e <__aeabi_fmul+0x19e>
 80007ba:	2301      	movs	r3, #1
 80007bc:	4642      	mov	r2, r8
 80007be:	431a      	orrs	r2, r3
 80007c0:	4690      	mov	r8, r2
 80007c2:	002b      	movs	r3, r5
 80007c4:	4642      	mov	r2, r8
 80007c6:	2101      	movs	r1, #1
 80007c8:	1c5d      	adds	r5, r3, #1
 80007ca:	2a0a      	cmp	r2, #10
 80007cc:	dd97      	ble.n	80006fe <__aeabi_fmul+0x5e>
 80007ce:	e7c5      	b.n	800075c <__aeabi_fmul+0xbc>
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d126      	bne.n	8000822 <__aeabi_fmul+0x182>
 80007d4:	2304      	movs	r3, #4
 80007d6:	4698      	mov	r8, r3
 80007d8:	3b03      	subs	r3, #3
 80007da:	2500      	movs	r5, #0
 80007dc:	469a      	mov	sl, r3
 80007de:	e77a      	b.n	80006d6 <__aeabi_fmul+0x36>
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d118      	bne.n	8000816 <__aeabi_fmul+0x176>
 80007e4:	2308      	movs	r3, #8
 80007e6:	4698      	mov	r8, r3
 80007e8:	3b06      	subs	r3, #6
 80007ea:	25ff      	movs	r5, #255	@ 0xff
 80007ec:	469a      	mov	sl, r3
 80007ee:	e772      	b.n	80006d6 <__aeabi_fmul+0x36>
 80007f0:	20ff      	movs	r0, #255	@ 0xff
 80007f2:	2200      	movs	r2, #0
 80007f4:	e791      	b.n	800071a <__aeabi_fmul+0x7a>
 80007f6:	2280      	movs	r2, #128	@ 0x80
 80007f8:	2600      	movs	r6, #0
 80007fa:	20ff      	movs	r0, #255	@ 0xff
 80007fc:	03d2      	lsls	r2, r2, #15
 80007fe:	e78c      	b.n	800071a <__aeabi_fmul+0x7a>
 8000800:	4641      	mov	r1, r8
 8000802:	2202      	movs	r2, #2
 8000804:	3501      	adds	r5, #1
 8000806:	4311      	orrs	r1, r2
 8000808:	4688      	mov	r8, r1
 800080a:	35ff      	adds	r5, #255	@ 0xff
 800080c:	290a      	cmp	r1, #10
 800080e:	dca5      	bgt.n	800075c <__aeabi_fmul+0xbc>
 8000810:	2102      	movs	r1, #2
 8000812:	407e      	eors	r6, r7
 8000814:	e774      	b.n	8000700 <__aeabi_fmul+0x60>
 8000816:	230c      	movs	r3, #12
 8000818:	4698      	mov	r8, r3
 800081a:	3b09      	subs	r3, #9
 800081c:	25ff      	movs	r5, #255	@ 0xff
 800081e:	469a      	mov	sl, r3
 8000820:	e759      	b.n	80006d6 <__aeabi_fmul+0x36>
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fbb0 	bl	8000f88 <__clzsi2>
 8000828:	464a      	mov	r2, r9
 800082a:	1f43      	subs	r3, r0, #5
 800082c:	2576      	movs	r5, #118	@ 0x76
 800082e:	409a      	lsls	r2, r3
 8000830:	2300      	movs	r3, #0
 8000832:	426d      	negs	r5, r5
 8000834:	4691      	mov	r9, r2
 8000836:	4698      	mov	r8, r3
 8000838:	469a      	mov	sl, r3
 800083a:	1a2d      	subs	r5, r5, r0
 800083c:	e74b      	b.n	80006d6 <__aeabi_fmul+0x36>
 800083e:	0020      	movs	r0, r4
 8000840:	f000 fba2 	bl	8000f88 <__clzsi2>
 8000844:	4642      	mov	r2, r8
 8000846:	1f43      	subs	r3, r0, #5
 8000848:	409c      	lsls	r4, r3
 800084a:	1a2b      	subs	r3, r5, r0
 800084c:	3b76      	subs	r3, #118	@ 0x76
 800084e:	2100      	movs	r1, #0
 8000850:	1c5d      	adds	r5, r3, #1
 8000852:	2a0a      	cmp	r2, #10
 8000854:	dc00      	bgt.n	8000858 <__aeabi_fmul+0x1b8>
 8000856:	e752      	b.n	80006fe <__aeabi_fmul+0x5e>
 8000858:	e780      	b.n	800075c <__aeabi_fmul+0xbc>
 800085a:	2201      	movs	r2, #1
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	2b1b      	cmp	r3, #27
 8000860:	dd00      	ble.n	8000864 <__aeabi_fmul+0x1c4>
 8000862:	e758      	b.n	8000716 <__aeabi_fmul+0x76>
 8000864:	359e      	adds	r5, #158	@ 0x9e
 8000866:	0022      	movs	r2, r4
 8000868:	40ac      	lsls	r4, r5
 800086a:	40da      	lsrs	r2, r3
 800086c:	1e63      	subs	r3, r4, #1
 800086e:	419c      	sbcs	r4, r3
 8000870:	4322      	orrs	r2, r4
 8000872:	0753      	lsls	r3, r2, #29
 8000874:	d004      	beq.n	8000880 <__aeabi_fmul+0x1e0>
 8000876:	230f      	movs	r3, #15
 8000878:	4013      	ands	r3, r2
 800087a:	2b04      	cmp	r3, #4
 800087c:	d000      	beq.n	8000880 <__aeabi_fmul+0x1e0>
 800087e:	3204      	adds	r2, #4
 8000880:	0153      	lsls	r3, r2, #5
 8000882:	d537      	bpl.n	80008f4 <__aeabi_fmul+0x254>
 8000884:	2001      	movs	r0, #1
 8000886:	2200      	movs	r2, #0
 8000888:	e747      	b.n	800071a <__aeabi_fmul+0x7a>
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	464a      	mov	r2, r9
 800088e:	0424      	lsls	r4, r4, #16
 8000890:	0c24      	lsrs	r4, r4, #16
 8000892:	0027      	movs	r7, r4
 8000894:	0c10      	lsrs	r0, r2, #16
 8000896:	0412      	lsls	r2, r2, #16
 8000898:	0c12      	lsrs	r2, r2, #16
 800089a:	4344      	muls	r4, r0
 800089c:	4357      	muls	r7, r2
 800089e:	4348      	muls	r0, r1
 80008a0:	4351      	muls	r1, r2
 80008a2:	0c3a      	lsrs	r2, r7, #16
 80008a4:	1909      	adds	r1, r1, r4
 80008a6:	1852      	adds	r2, r2, r1
 80008a8:	4294      	cmp	r4, r2
 80008aa:	d903      	bls.n	80008b4 <__aeabi_fmul+0x214>
 80008ac:	2180      	movs	r1, #128	@ 0x80
 80008ae:	0249      	lsls	r1, r1, #9
 80008b0:	468c      	mov	ip, r1
 80008b2:	4460      	add	r0, ip
 80008b4:	043f      	lsls	r7, r7, #16
 80008b6:	0411      	lsls	r1, r2, #16
 80008b8:	0c3f      	lsrs	r7, r7, #16
 80008ba:	19c9      	adds	r1, r1, r7
 80008bc:	018c      	lsls	r4, r1, #6
 80008be:	1e67      	subs	r7, r4, #1
 80008c0:	41bc      	sbcs	r4, r7
 80008c2:	0c12      	lsrs	r2, r2, #16
 80008c4:	0e89      	lsrs	r1, r1, #26
 80008c6:	1812      	adds	r2, r2, r0
 80008c8:	430c      	orrs	r4, r1
 80008ca:	0192      	lsls	r2, r2, #6
 80008cc:	4314      	orrs	r4, r2
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	d50e      	bpl.n	80008f0 <__aeabi_fmul+0x250>
 80008d2:	2301      	movs	r3, #1
 80008d4:	0862      	lsrs	r2, r4, #1
 80008d6:	401c      	ands	r4, r3
 80008d8:	4314      	orrs	r4, r2
 80008da:	e749      	b.n	8000770 <__aeabi_fmul+0xd0>
 80008dc:	003e      	movs	r6, r7
 80008de:	46a1      	mov	r9, r4
 80008e0:	2280      	movs	r2, #128	@ 0x80
 80008e2:	464b      	mov	r3, r9
 80008e4:	03d2      	lsls	r2, r2, #15
 80008e6:	431a      	orrs	r2, r3
 80008e8:	0252      	lsls	r2, r2, #9
 80008ea:	20ff      	movs	r0, #255	@ 0xff
 80008ec:	0a52      	lsrs	r2, r2, #9
 80008ee:	e714      	b.n	800071a <__aeabi_fmul+0x7a>
 80008f0:	001d      	movs	r5, r3
 80008f2:	e73d      	b.n	8000770 <__aeabi_fmul+0xd0>
 80008f4:	0192      	lsls	r2, r2, #6
 80008f6:	2000      	movs	r0, #0
 80008f8:	0a52      	lsrs	r2, r2, #9
 80008fa:	e70e      	b.n	800071a <__aeabi_fmul+0x7a>
 80008fc:	290f      	cmp	r1, #15
 80008fe:	d1ed      	bne.n	80008dc <__aeabi_fmul+0x23c>
 8000900:	2280      	movs	r2, #128	@ 0x80
 8000902:	464b      	mov	r3, r9
 8000904:	03d2      	lsls	r2, r2, #15
 8000906:	4213      	tst	r3, r2
 8000908:	d0ea      	beq.n	80008e0 <__aeabi_fmul+0x240>
 800090a:	4214      	tst	r4, r2
 800090c:	d1e8      	bne.n	80008e0 <__aeabi_fmul+0x240>
 800090e:	003e      	movs	r6, r7
 8000910:	20ff      	movs	r0, #255	@ 0xff
 8000912:	4322      	orrs	r2, r4
 8000914:	e701      	b.n	800071a <__aeabi_fmul+0x7a>
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	f7ffffff 	.word	0xf7ffffff

0800091c <__aeabi_fsub>:
 800091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091e:	4647      	mov	r7, r8
 8000920:	46ce      	mov	lr, r9
 8000922:	024e      	lsls	r6, r1, #9
 8000924:	0243      	lsls	r3, r0, #9
 8000926:	0045      	lsls	r5, r0, #1
 8000928:	0a72      	lsrs	r2, r6, #9
 800092a:	0fc4      	lsrs	r4, r0, #31
 800092c:	0048      	lsls	r0, r1, #1
 800092e:	b580      	push	{r7, lr}
 8000930:	4694      	mov	ip, r2
 8000932:	0a5f      	lsrs	r7, r3, #9
 8000934:	0e2d      	lsrs	r5, r5, #24
 8000936:	099b      	lsrs	r3, r3, #6
 8000938:	0e00      	lsrs	r0, r0, #24
 800093a:	0fc9      	lsrs	r1, r1, #31
 800093c:	09b6      	lsrs	r6, r6, #6
 800093e:	28ff      	cmp	r0, #255	@ 0xff
 8000940:	d024      	beq.n	800098c <__aeabi_fsub+0x70>
 8000942:	2201      	movs	r2, #1
 8000944:	4051      	eors	r1, r2
 8000946:	1a2a      	subs	r2, r5, r0
 8000948:	428c      	cmp	r4, r1
 800094a:	d00f      	beq.n	800096c <__aeabi_fsub+0x50>
 800094c:	2a00      	cmp	r2, #0
 800094e:	dc00      	bgt.n	8000952 <__aeabi_fsub+0x36>
 8000950:	e16a      	b.n	8000c28 <__aeabi_fsub+0x30c>
 8000952:	2800      	cmp	r0, #0
 8000954:	d135      	bne.n	80009c2 <__aeabi_fsub+0xa6>
 8000956:	2e00      	cmp	r6, #0
 8000958:	d100      	bne.n	800095c <__aeabi_fsub+0x40>
 800095a:	e0a2      	b.n	8000aa2 <__aeabi_fsub+0x186>
 800095c:	1e51      	subs	r1, r2, #1
 800095e:	2a01      	cmp	r2, #1
 8000960:	d100      	bne.n	8000964 <__aeabi_fsub+0x48>
 8000962:	e124      	b.n	8000bae <__aeabi_fsub+0x292>
 8000964:	2aff      	cmp	r2, #255	@ 0xff
 8000966:	d021      	beq.n	80009ac <__aeabi_fsub+0x90>
 8000968:	000a      	movs	r2, r1
 800096a:	e02f      	b.n	80009cc <__aeabi_fsub+0xb0>
 800096c:	2a00      	cmp	r2, #0
 800096e:	dc00      	bgt.n	8000972 <__aeabi_fsub+0x56>
 8000970:	e167      	b.n	8000c42 <__aeabi_fsub+0x326>
 8000972:	2800      	cmp	r0, #0
 8000974:	d05e      	beq.n	8000a34 <__aeabi_fsub+0x118>
 8000976:	2dff      	cmp	r5, #255	@ 0xff
 8000978:	d018      	beq.n	80009ac <__aeabi_fsub+0x90>
 800097a:	2180      	movs	r1, #128	@ 0x80
 800097c:	04c9      	lsls	r1, r1, #19
 800097e:	430e      	orrs	r6, r1
 8000980:	2a1b      	cmp	r2, #27
 8000982:	dc00      	bgt.n	8000986 <__aeabi_fsub+0x6a>
 8000984:	e076      	b.n	8000a74 <__aeabi_fsub+0x158>
 8000986:	002a      	movs	r2, r5
 8000988:	3301      	adds	r3, #1
 800098a:	e032      	b.n	80009f2 <__aeabi_fsub+0xd6>
 800098c:	002a      	movs	r2, r5
 800098e:	3aff      	subs	r2, #255	@ 0xff
 8000990:	4691      	mov	r9, r2
 8000992:	2e00      	cmp	r6, #0
 8000994:	d042      	beq.n	8000a1c <__aeabi_fsub+0x100>
 8000996:	428c      	cmp	r4, r1
 8000998:	d055      	beq.n	8000a46 <__aeabi_fsub+0x12a>
 800099a:	464a      	mov	r2, r9
 800099c:	2a00      	cmp	r2, #0
 800099e:	d100      	bne.n	80009a2 <__aeabi_fsub+0x86>
 80009a0:	e09c      	b.n	8000adc <__aeabi_fsub+0x1c0>
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d100      	bne.n	80009a8 <__aeabi_fsub+0x8c>
 80009a6:	e077      	b.n	8000a98 <__aeabi_fsub+0x17c>
 80009a8:	000c      	movs	r4, r1
 80009aa:	0033      	movs	r3, r6
 80009ac:	08db      	lsrs	r3, r3, #3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d100      	bne.n	80009b4 <__aeabi_fsub+0x98>
 80009b2:	e06e      	b.n	8000a92 <__aeabi_fsub+0x176>
 80009b4:	2280      	movs	r2, #128	@ 0x80
 80009b6:	03d2      	lsls	r2, r2, #15
 80009b8:	4313      	orrs	r3, r2
 80009ba:	025b      	lsls	r3, r3, #9
 80009bc:	20ff      	movs	r0, #255	@ 0xff
 80009be:	0a5b      	lsrs	r3, r3, #9
 80009c0:	e024      	b.n	8000a0c <__aeabi_fsub+0xf0>
 80009c2:	2dff      	cmp	r5, #255	@ 0xff
 80009c4:	d0f2      	beq.n	80009ac <__aeabi_fsub+0x90>
 80009c6:	2180      	movs	r1, #128	@ 0x80
 80009c8:	04c9      	lsls	r1, r1, #19
 80009ca:	430e      	orrs	r6, r1
 80009cc:	2101      	movs	r1, #1
 80009ce:	2a1b      	cmp	r2, #27
 80009d0:	dc08      	bgt.n	80009e4 <__aeabi_fsub+0xc8>
 80009d2:	0031      	movs	r1, r6
 80009d4:	2020      	movs	r0, #32
 80009d6:	40d1      	lsrs	r1, r2
 80009d8:	1a82      	subs	r2, r0, r2
 80009da:	4096      	lsls	r6, r2
 80009dc:	0032      	movs	r2, r6
 80009de:	1e50      	subs	r0, r2, #1
 80009e0:	4182      	sbcs	r2, r0
 80009e2:	4311      	orrs	r1, r2
 80009e4:	1a5b      	subs	r3, r3, r1
 80009e6:	015a      	lsls	r2, r3, #5
 80009e8:	d460      	bmi.n	8000aac <__aeabi_fsub+0x190>
 80009ea:	2107      	movs	r1, #7
 80009ec:	002a      	movs	r2, r5
 80009ee:	4019      	ands	r1, r3
 80009f0:	d057      	beq.n	8000aa2 <__aeabi_fsub+0x186>
 80009f2:	210f      	movs	r1, #15
 80009f4:	4019      	ands	r1, r3
 80009f6:	2904      	cmp	r1, #4
 80009f8:	d000      	beq.n	80009fc <__aeabi_fsub+0xe0>
 80009fa:	3304      	adds	r3, #4
 80009fc:	0159      	lsls	r1, r3, #5
 80009fe:	d550      	bpl.n	8000aa2 <__aeabi_fsub+0x186>
 8000a00:	1c50      	adds	r0, r2, #1
 8000a02:	2afe      	cmp	r2, #254	@ 0xfe
 8000a04:	d045      	beq.n	8000a92 <__aeabi_fsub+0x176>
 8000a06:	019b      	lsls	r3, r3, #6
 8000a08:	b2c0      	uxtb	r0, r0
 8000a0a:	0a5b      	lsrs	r3, r3, #9
 8000a0c:	05c0      	lsls	r0, r0, #23
 8000a0e:	4318      	orrs	r0, r3
 8000a10:	07e4      	lsls	r4, r4, #31
 8000a12:	4320      	orrs	r0, r4
 8000a14:	bcc0      	pop	{r6, r7}
 8000a16:	46b9      	mov	r9, r7
 8000a18:	46b0      	mov	r8, r6
 8000a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4051      	eors	r1, r2
 8000a20:	428c      	cmp	r4, r1
 8000a22:	d1ba      	bne.n	800099a <__aeabi_fsub+0x7e>
 8000a24:	464a      	mov	r2, r9
 8000a26:	2a00      	cmp	r2, #0
 8000a28:	d010      	beq.n	8000a4c <__aeabi_fsub+0x130>
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fsub+0x114>
 8000a2e:	e098      	b.n	8000b62 <__aeabi_fsub+0x246>
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7bb      	b.n	80009ac <__aeabi_fsub+0x90>
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	d034      	beq.n	8000aa2 <__aeabi_fsub+0x186>
 8000a38:	1e51      	subs	r1, r2, #1
 8000a3a:	2a01      	cmp	r2, #1
 8000a3c:	d06e      	beq.n	8000b1c <__aeabi_fsub+0x200>
 8000a3e:	2aff      	cmp	r2, #255	@ 0xff
 8000a40:	d0b4      	beq.n	80009ac <__aeabi_fsub+0x90>
 8000a42:	000a      	movs	r2, r1
 8000a44:	e79c      	b.n	8000980 <__aeabi_fsub+0x64>
 8000a46:	2a00      	cmp	r2, #0
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fsub+0x130>
 8000a4a:	e088      	b.n	8000b5e <__aeabi_fsub+0x242>
 8000a4c:	20fe      	movs	r0, #254	@ 0xfe
 8000a4e:	1c6a      	adds	r2, r5, #1
 8000a50:	4210      	tst	r0, r2
 8000a52:	d000      	beq.n	8000a56 <__aeabi_fsub+0x13a>
 8000a54:	e092      	b.n	8000b7c <__aeabi_fsub+0x260>
 8000a56:	2d00      	cmp	r5, #0
 8000a58:	d000      	beq.n	8000a5c <__aeabi_fsub+0x140>
 8000a5a:	e0a4      	b.n	8000ba6 <__aeabi_fsub+0x28a>
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_fsub+0x146>
 8000a60:	e0cb      	b.n	8000bfa <__aeabi_fsub+0x2de>
 8000a62:	2e00      	cmp	r6, #0
 8000a64:	d000      	beq.n	8000a68 <__aeabi_fsub+0x14c>
 8000a66:	e0ca      	b.n	8000bfe <__aeabi_fsub+0x2e2>
 8000a68:	2200      	movs	r2, #0
 8000a6a:	08db      	lsrs	r3, r3, #3
 8000a6c:	025b      	lsls	r3, r3, #9
 8000a6e:	0a5b      	lsrs	r3, r3, #9
 8000a70:	b2d0      	uxtb	r0, r2
 8000a72:	e7cb      	b.n	8000a0c <__aeabi_fsub+0xf0>
 8000a74:	0031      	movs	r1, r6
 8000a76:	2020      	movs	r0, #32
 8000a78:	40d1      	lsrs	r1, r2
 8000a7a:	1a82      	subs	r2, r0, r2
 8000a7c:	4096      	lsls	r6, r2
 8000a7e:	0032      	movs	r2, r6
 8000a80:	1e50      	subs	r0, r2, #1
 8000a82:	4182      	sbcs	r2, r0
 8000a84:	430a      	orrs	r2, r1
 8000a86:	189b      	adds	r3, r3, r2
 8000a88:	015a      	lsls	r2, r3, #5
 8000a8a:	d5ae      	bpl.n	80009ea <__aeabi_fsub+0xce>
 8000a8c:	1c6a      	adds	r2, r5, #1
 8000a8e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a90:	d14a      	bne.n	8000b28 <__aeabi_fsub+0x20c>
 8000a92:	20ff      	movs	r0, #255	@ 0xff
 8000a94:	2300      	movs	r3, #0
 8000a96:	e7b9      	b.n	8000a0c <__aeabi_fsub+0xf0>
 8000a98:	22ff      	movs	r2, #255	@ 0xff
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d14b      	bne.n	8000b36 <__aeabi_fsub+0x21a>
 8000a9e:	000c      	movs	r4, r1
 8000aa0:	0033      	movs	r3, r6
 8000aa2:	08db      	lsrs	r3, r3, #3
 8000aa4:	2aff      	cmp	r2, #255	@ 0xff
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_fsub+0x18e>
 8000aa8:	e781      	b.n	80009ae <__aeabi_fsub+0x92>
 8000aaa:	e7df      	b.n	8000a6c <__aeabi_fsub+0x150>
 8000aac:	019f      	lsls	r7, r3, #6
 8000aae:	09bf      	lsrs	r7, r7, #6
 8000ab0:	0038      	movs	r0, r7
 8000ab2:	f000 fa69 	bl	8000f88 <__clzsi2>
 8000ab6:	3805      	subs	r0, #5
 8000ab8:	4087      	lsls	r7, r0
 8000aba:	4285      	cmp	r5, r0
 8000abc:	dc21      	bgt.n	8000b02 <__aeabi_fsub+0x1e6>
 8000abe:	003b      	movs	r3, r7
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	1b42      	subs	r2, r0, r5
 8000ac4:	3201      	adds	r2, #1
 8000ac6:	40d3      	lsrs	r3, r2
 8000ac8:	1a8a      	subs	r2, r1, r2
 8000aca:	4097      	lsls	r7, r2
 8000acc:	1e7a      	subs	r2, r7, #1
 8000ace:	4197      	sbcs	r7, r2
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	433b      	orrs	r3, r7
 8000ad4:	0759      	lsls	r1, r3, #29
 8000ad6:	d000      	beq.n	8000ada <__aeabi_fsub+0x1be>
 8000ad8:	e78b      	b.n	80009f2 <__aeabi_fsub+0xd6>
 8000ada:	e78f      	b.n	80009fc <__aeabi_fsub+0xe0>
 8000adc:	20fe      	movs	r0, #254	@ 0xfe
 8000ade:	1c6a      	adds	r2, r5, #1
 8000ae0:	4210      	tst	r0, r2
 8000ae2:	d112      	bne.n	8000b0a <__aeabi_fsub+0x1ee>
 8000ae4:	2d00      	cmp	r5, #0
 8000ae6:	d152      	bne.n	8000b8e <__aeabi_fsub+0x272>
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d07c      	beq.n	8000be6 <__aeabi_fsub+0x2ca>
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d0bb      	beq.n	8000a68 <__aeabi_fsub+0x14c>
 8000af0:	1b9a      	subs	r2, r3, r6
 8000af2:	0150      	lsls	r0, r2, #5
 8000af4:	d400      	bmi.n	8000af8 <__aeabi_fsub+0x1dc>
 8000af6:	e08b      	b.n	8000c10 <__aeabi_fsub+0x2f4>
 8000af8:	2401      	movs	r4, #1
 8000afa:	2200      	movs	r2, #0
 8000afc:	1af3      	subs	r3, r6, r3
 8000afe:	400c      	ands	r4, r1
 8000b00:	e7e8      	b.n	8000ad4 <__aeabi_fsub+0x1b8>
 8000b02:	4b56      	ldr	r3, [pc, #344]	@ (8000c5c <__aeabi_fsub+0x340>)
 8000b04:	1a2a      	subs	r2, r5, r0
 8000b06:	403b      	ands	r3, r7
 8000b08:	e7e4      	b.n	8000ad4 <__aeabi_fsub+0x1b8>
 8000b0a:	1b9f      	subs	r7, r3, r6
 8000b0c:	017a      	lsls	r2, r7, #5
 8000b0e:	d446      	bmi.n	8000b9e <__aeabi_fsub+0x282>
 8000b10:	2f00      	cmp	r7, #0
 8000b12:	d1cd      	bne.n	8000ab0 <__aeabi_fsub+0x194>
 8000b14:	2400      	movs	r4, #0
 8000b16:	2000      	movs	r0, #0
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e777      	b.n	8000a0c <__aeabi_fsub+0xf0>
 8000b1c:	199b      	adds	r3, r3, r6
 8000b1e:	2501      	movs	r5, #1
 8000b20:	3201      	adds	r2, #1
 8000b22:	0159      	lsls	r1, r3, #5
 8000b24:	d400      	bmi.n	8000b28 <__aeabi_fsub+0x20c>
 8000b26:	e760      	b.n	80009ea <__aeabi_fsub+0xce>
 8000b28:	2101      	movs	r1, #1
 8000b2a:	484d      	ldr	r0, [pc, #308]	@ (8000c60 <__aeabi_fsub+0x344>)
 8000b2c:	4019      	ands	r1, r3
 8000b2e:	085b      	lsrs	r3, r3, #1
 8000b30:	4003      	ands	r3, r0
 8000b32:	430b      	orrs	r3, r1
 8000b34:	e7ce      	b.n	8000ad4 <__aeabi_fsub+0x1b8>
 8000b36:	1e57      	subs	r7, r2, #1
 8000b38:	2a01      	cmp	r2, #1
 8000b3a:	d05a      	beq.n	8000bf2 <__aeabi_fsub+0x2d6>
 8000b3c:	000c      	movs	r4, r1
 8000b3e:	2aff      	cmp	r2, #255	@ 0xff
 8000b40:	d033      	beq.n	8000baa <__aeabi_fsub+0x28e>
 8000b42:	2201      	movs	r2, #1
 8000b44:	2f1b      	cmp	r7, #27
 8000b46:	dc07      	bgt.n	8000b58 <__aeabi_fsub+0x23c>
 8000b48:	2120      	movs	r1, #32
 8000b4a:	1bc9      	subs	r1, r1, r7
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	408b      	lsls	r3, r1
 8000b50:	40fa      	lsrs	r2, r7
 8000b52:	1e59      	subs	r1, r3, #1
 8000b54:	418b      	sbcs	r3, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	0005      	movs	r5, r0
 8000b5a:	1ab3      	subs	r3, r6, r2
 8000b5c:	e743      	b.n	80009e6 <__aeabi_fsub+0xca>
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d123      	bne.n	8000baa <__aeabi_fsub+0x28e>
 8000b62:	22ff      	movs	r2, #255	@ 0xff
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d09b      	beq.n	8000aa0 <__aeabi_fsub+0x184>
 8000b68:	1e51      	subs	r1, r2, #1
 8000b6a:	2a01      	cmp	r2, #1
 8000b6c:	d0d6      	beq.n	8000b1c <__aeabi_fsub+0x200>
 8000b6e:	2aff      	cmp	r2, #255	@ 0xff
 8000b70:	d01b      	beq.n	8000baa <__aeabi_fsub+0x28e>
 8000b72:	291b      	cmp	r1, #27
 8000b74:	dd2c      	ble.n	8000bd0 <__aeabi_fsub+0x2b4>
 8000b76:	0002      	movs	r2, r0
 8000b78:	1c73      	adds	r3, r6, #1
 8000b7a:	e73a      	b.n	80009f2 <__aeabi_fsub+0xd6>
 8000b7c:	2aff      	cmp	r2, #255	@ 0xff
 8000b7e:	d088      	beq.n	8000a92 <__aeabi_fsub+0x176>
 8000b80:	199b      	adds	r3, r3, r6
 8000b82:	085b      	lsrs	r3, r3, #1
 8000b84:	0759      	lsls	r1, r3, #29
 8000b86:	d000      	beq.n	8000b8a <__aeabi_fsub+0x26e>
 8000b88:	e733      	b.n	80009f2 <__aeabi_fsub+0xd6>
 8000b8a:	08db      	lsrs	r3, r3, #3
 8000b8c:	e76e      	b.n	8000a6c <__aeabi_fsub+0x150>
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d110      	bne.n	8000bb4 <__aeabi_fsub+0x298>
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d043      	beq.n	8000c1e <__aeabi_fsub+0x302>
 8000b96:	2401      	movs	r4, #1
 8000b98:	0033      	movs	r3, r6
 8000b9a:	400c      	ands	r4, r1
 8000b9c:	e706      	b.n	80009ac <__aeabi_fsub+0x90>
 8000b9e:	2401      	movs	r4, #1
 8000ba0:	1af7      	subs	r7, r6, r3
 8000ba2:	400c      	ands	r4, r1
 8000ba4:	e784      	b.n	8000ab0 <__aeabi_fsub+0x194>
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d104      	bne.n	8000bb4 <__aeabi_fsub+0x298>
 8000baa:	0033      	movs	r3, r6
 8000bac:	e6fe      	b.n	80009ac <__aeabi_fsub+0x90>
 8000bae:	2501      	movs	r5, #1
 8000bb0:	1b9b      	subs	r3, r3, r6
 8000bb2:	e718      	b.n	80009e6 <__aeabi_fsub+0xca>
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d100      	bne.n	8000bba <__aeabi_fsub+0x29e>
 8000bb8:	e6f8      	b.n	80009ac <__aeabi_fsub+0x90>
 8000bba:	2280      	movs	r2, #128	@ 0x80
 8000bbc:	03d2      	lsls	r2, r2, #15
 8000bbe:	4297      	cmp	r7, r2
 8000bc0:	d304      	bcc.n	8000bcc <__aeabi_fsub+0x2b0>
 8000bc2:	4594      	cmp	ip, r2
 8000bc4:	d202      	bcs.n	8000bcc <__aeabi_fsub+0x2b0>
 8000bc6:	2401      	movs	r4, #1
 8000bc8:	0033      	movs	r3, r6
 8000bca:	400c      	ands	r4, r1
 8000bcc:	08db      	lsrs	r3, r3, #3
 8000bce:	e6f1      	b.n	80009b4 <__aeabi_fsub+0x98>
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2520      	movs	r5, #32
 8000bd4:	40ca      	lsrs	r2, r1
 8000bd6:	1a69      	subs	r1, r5, r1
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	1e59      	subs	r1, r3, #1
 8000bdc:	418b      	sbcs	r3, r1
 8000bde:	4313      	orrs	r3, r2
 8000be0:	0005      	movs	r5, r0
 8000be2:	199b      	adds	r3, r3, r6
 8000be4:	e750      	b.n	8000a88 <__aeabi_fsub+0x16c>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d094      	beq.n	8000b14 <__aeabi_fsub+0x1f8>
 8000bea:	2401      	movs	r4, #1
 8000bec:	0033      	movs	r3, r6
 8000bee:	400c      	ands	r4, r1
 8000bf0:	e73a      	b.n	8000a68 <__aeabi_fsub+0x14c>
 8000bf2:	000c      	movs	r4, r1
 8000bf4:	2501      	movs	r5, #1
 8000bf6:	1af3      	subs	r3, r6, r3
 8000bf8:	e6f5      	b.n	80009e6 <__aeabi_fsub+0xca>
 8000bfa:	0033      	movs	r3, r6
 8000bfc:	e734      	b.n	8000a68 <__aeabi_fsub+0x14c>
 8000bfe:	199b      	adds	r3, r3, r6
 8000c00:	2200      	movs	r2, #0
 8000c02:	0159      	lsls	r1, r3, #5
 8000c04:	d5c1      	bpl.n	8000b8a <__aeabi_fsub+0x26e>
 8000c06:	4a15      	ldr	r2, [pc, #84]	@ (8000c5c <__aeabi_fsub+0x340>)
 8000c08:	4013      	ands	r3, r2
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	e72d      	b.n	8000a6c <__aeabi_fsub+0x150>
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	d100      	bne.n	8000c16 <__aeabi_fsub+0x2fa>
 8000c14:	e77e      	b.n	8000b14 <__aeabi_fsub+0x1f8>
 8000c16:	0013      	movs	r3, r2
 8000c18:	2200      	movs	r2, #0
 8000c1a:	08db      	lsrs	r3, r3, #3
 8000c1c:	e726      	b.n	8000a6c <__aeabi_fsub+0x150>
 8000c1e:	2380      	movs	r3, #128	@ 0x80
 8000c20:	2400      	movs	r4, #0
 8000c22:	20ff      	movs	r0, #255	@ 0xff
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	e6f1      	b.n	8000a0c <__aeabi_fsub+0xf0>
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_fsub+0x312>
 8000c2c:	e756      	b.n	8000adc <__aeabi_fsub+0x1c0>
 8000c2e:	1b47      	subs	r7, r0, r5
 8000c30:	003a      	movs	r2, r7
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	d100      	bne.n	8000c38 <__aeabi_fsub+0x31c>
 8000c36:	e730      	b.n	8000a9a <__aeabi_fsub+0x17e>
 8000c38:	2280      	movs	r2, #128	@ 0x80
 8000c3a:	04d2      	lsls	r2, r2, #19
 8000c3c:	000c      	movs	r4, r1
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	e77f      	b.n	8000b42 <__aeabi_fsub+0x226>
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d100      	bne.n	8000c48 <__aeabi_fsub+0x32c>
 8000c46:	e701      	b.n	8000a4c <__aeabi_fsub+0x130>
 8000c48:	1b41      	subs	r1, r0, r5
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	d101      	bne.n	8000c52 <__aeabi_fsub+0x336>
 8000c4e:	000a      	movs	r2, r1
 8000c50:	e788      	b.n	8000b64 <__aeabi_fsub+0x248>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	04d2      	lsls	r2, r2, #19
 8000c56:	4313      	orrs	r3, r2
 8000c58:	e78b      	b.n	8000b72 <__aeabi_fsub+0x256>
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	fbffffff 	.word	0xfbffffff
 8000c60:	7dffffff 	.word	0x7dffffff

08000c64 <__aeabi_f2iz>:
 8000c64:	0241      	lsls	r1, r0, #9
 8000c66:	0042      	lsls	r2, r0, #1
 8000c68:	0fc3      	lsrs	r3, r0, #31
 8000c6a:	0a49      	lsrs	r1, r1, #9
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	0e12      	lsrs	r2, r2, #24
 8000c70:	2a7e      	cmp	r2, #126	@ 0x7e
 8000c72:	dd03      	ble.n	8000c7c <__aeabi_f2iz+0x18>
 8000c74:	2a9d      	cmp	r2, #157	@ 0x9d
 8000c76:	dd02      	ble.n	8000c7e <__aeabi_f2iz+0x1a>
 8000c78:	4a09      	ldr	r2, [pc, #36]	@ (8000ca0 <__aeabi_f2iz+0x3c>)
 8000c7a:	1898      	adds	r0, r3, r2
 8000c7c:	4770      	bx	lr
 8000c7e:	2080      	movs	r0, #128	@ 0x80
 8000c80:	0400      	lsls	r0, r0, #16
 8000c82:	4301      	orrs	r1, r0
 8000c84:	2a95      	cmp	r2, #149	@ 0x95
 8000c86:	dc07      	bgt.n	8000c98 <__aeabi_f2iz+0x34>
 8000c88:	2096      	movs	r0, #150	@ 0x96
 8000c8a:	1a82      	subs	r2, r0, r2
 8000c8c:	40d1      	lsrs	r1, r2
 8000c8e:	4248      	negs	r0, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f3      	bne.n	8000c7c <__aeabi_f2iz+0x18>
 8000c94:	0008      	movs	r0, r1
 8000c96:	e7f1      	b.n	8000c7c <__aeabi_f2iz+0x18>
 8000c98:	3a96      	subs	r2, #150	@ 0x96
 8000c9a:	4091      	lsls	r1, r2
 8000c9c:	e7f7      	b.n	8000c8e <__aeabi_f2iz+0x2a>
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	7fffffff 	.word	0x7fffffff

08000ca4 <__eqdf2>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4657      	mov	r7, sl
 8000ca8:	46de      	mov	lr, fp
 8000caa:	464e      	mov	r6, r9
 8000cac:	4645      	mov	r5, r8
 8000cae:	b5e0      	push	{r5, r6, r7, lr}
 8000cb0:	000d      	movs	r5, r1
 8000cb2:	0004      	movs	r4, r0
 8000cb4:	0fe8      	lsrs	r0, r5, #31
 8000cb6:	4683      	mov	fp, r0
 8000cb8:	0309      	lsls	r1, r1, #12
 8000cba:	0fd8      	lsrs	r0, r3, #31
 8000cbc:	0b09      	lsrs	r1, r1, #12
 8000cbe:	4682      	mov	sl, r0
 8000cc0:	4819      	ldr	r0, [pc, #100]	@ (8000d28 <__eqdf2+0x84>)
 8000cc2:	468c      	mov	ip, r1
 8000cc4:	031f      	lsls	r7, r3, #12
 8000cc6:	0069      	lsls	r1, r5, #1
 8000cc8:	005e      	lsls	r6, r3, #1
 8000cca:	0d49      	lsrs	r1, r1, #21
 8000ccc:	0b3f      	lsrs	r7, r7, #12
 8000cce:	0d76      	lsrs	r6, r6, #21
 8000cd0:	4281      	cmp	r1, r0
 8000cd2:	d018      	beq.n	8000d06 <__eqdf2+0x62>
 8000cd4:	4286      	cmp	r6, r0
 8000cd6:	d00f      	beq.n	8000cf8 <__eqdf2+0x54>
 8000cd8:	2001      	movs	r0, #1
 8000cda:	42b1      	cmp	r1, r6
 8000cdc:	d10d      	bne.n	8000cfa <__eqdf2+0x56>
 8000cde:	45bc      	cmp	ip, r7
 8000ce0:	d10b      	bne.n	8000cfa <__eqdf2+0x56>
 8000ce2:	4294      	cmp	r4, r2
 8000ce4:	d109      	bne.n	8000cfa <__eqdf2+0x56>
 8000ce6:	45d3      	cmp	fp, sl
 8000ce8:	d01c      	beq.n	8000d24 <__eqdf2+0x80>
 8000cea:	2900      	cmp	r1, #0
 8000cec:	d105      	bne.n	8000cfa <__eqdf2+0x56>
 8000cee:	4660      	mov	r0, ip
 8000cf0:	4320      	orrs	r0, r4
 8000cf2:	1e43      	subs	r3, r0, #1
 8000cf4:	4198      	sbcs	r0, r3
 8000cf6:	e000      	b.n	8000cfa <__eqdf2+0x56>
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	bcf0      	pop	{r4, r5, r6, r7}
 8000cfc:	46bb      	mov	fp, r7
 8000cfe:	46b2      	mov	sl, r6
 8000d00:	46a9      	mov	r9, r5
 8000d02:	46a0      	mov	r8, r4
 8000d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d06:	2001      	movs	r0, #1
 8000d08:	428e      	cmp	r6, r1
 8000d0a:	d1f6      	bne.n	8000cfa <__eqdf2+0x56>
 8000d0c:	4661      	mov	r1, ip
 8000d0e:	4339      	orrs	r1, r7
 8000d10:	000f      	movs	r7, r1
 8000d12:	4317      	orrs	r7, r2
 8000d14:	4327      	orrs	r7, r4
 8000d16:	d1f0      	bne.n	8000cfa <__eqdf2+0x56>
 8000d18:	465b      	mov	r3, fp
 8000d1a:	4652      	mov	r2, sl
 8000d1c:	1a98      	subs	r0, r3, r2
 8000d1e:	1e43      	subs	r3, r0, #1
 8000d20:	4198      	sbcs	r0, r3
 8000d22:	e7ea      	b.n	8000cfa <__eqdf2+0x56>
 8000d24:	2000      	movs	r0, #0
 8000d26:	e7e8      	b.n	8000cfa <__eqdf2+0x56>
 8000d28:	000007ff 	.word	0x000007ff

08000d2c <__gedf2>:
 8000d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2e:	4657      	mov	r7, sl
 8000d30:	464e      	mov	r6, r9
 8000d32:	4645      	mov	r5, r8
 8000d34:	46de      	mov	lr, fp
 8000d36:	b5e0      	push	{r5, r6, r7, lr}
 8000d38:	000d      	movs	r5, r1
 8000d3a:	030f      	lsls	r7, r1, #12
 8000d3c:	0b39      	lsrs	r1, r7, #12
 8000d3e:	b083      	sub	sp, #12
 8000d40:	0004      	movs	r4, r0
 8000d42:	4680      	mov	r8, r0
 8000d44:	9101      	str	r1, [sp, #4]
 8000d46:	0058      	lsls	r0, r3, #1
 8000d48:	0fe9      	lsrs	r1, r5, #31
 8000d4a:	4f31      	ldr	r7, [pc, #196]	@ (8000e10 <__gedf2+0xe4>)
 8000d4c:	0d40      	lsrs	r0, r0, #21
 8000d4e:	468c      	mov	ip, r1
 8000d50:	006e      	lsls	r6, r5, #1
 8000d52:	0319      	lsls	r1, r3, #12
 8000d54:	4682      	mov	sl, r0
 8000d56:	4691      	mov	r9, r2
 8000d58:	0d76      	lsrs	r6, r6, #21
 8000d5a:	0b09      	lsrs	r1, r1, #12
 8000d5c:	0fd8      	lsrs	r0, r3, #31
 8000d5e:	42be      	cmp	r6, r7
 8000d60:	d01f      	beq.n	8000da2 <__gedf2+0x76>
 8000d62:	45ba      	cmp	sl, r7
 8000d64:	d00f      	beq.n	8000d86 <__gedf2+0x5a>
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d12f      	bne.n	8000dca <__gedf2+0x9e>
 8000d6a:	4655      	mov	r5, sl
 8000d6c:	9e01      	ldr	r6, [sp, #4]
 8000d6e:	4334      	orrs	r4, r6
 8000d70:	2d00      	cmp	r5, #0
 8000d72:	d127      	bne.n	8000dc4 <__gedf2+0x98>
 8000d74:	430a      	orrs	r2, r1
 8000d76:	d03a      	beq.n	8000dee <__gedf2+0xc2>
 8000d78:	2c00      	cmp	r4, #0
 8000d7a:	d145      	bne.n	8000e08 <__gedf2+0xdc>
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	d11a      	bne.n	8000db6 <__gedf2+0x8a>
 8000d80:	2001      	movs	r0, #1
 8000d82:	4240      	negs	r0, r0
 8000d84:	e017      	b.n	8000db6 <__gedf2+0x8a>
 8000d86:	4311      	orrs	r1, r2
 8000d88:	d13b      	bne.n	8000e02 <__gedf2+0xd6>
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d102      	bne.n	8000d94 <__gedf2+0x68>
 8000d8e:	9f01      	ldr	r7, [sp, #4]
 8000d90:	4327      	orrs	r7, r4
 8000d92:	d0f3      	beq.n	8000d7c <__gedf2+0x50>
 8000d94:	4584      	cmp	ip, r0
 8000d96:	d109      	bne.n	8000dac <__gedf2+0x80>
 8000d98:	4663      	mov	r3, ip
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f0      	beq.n	8000d80 <__gedf2+0x54>
 8000d9e:	4660      	mov	r0, ip
 8000da0:	e009      	b.n	8000db6 <__gedf2+0x8a>
 8000da2:	9f01      	ldr	r7, [sp, #4]
 8000da4:	4327      	orrs	r7, r4
 8000da6:	d12c      	bne.n	8000e02 <__gedf2+0xd6>
 8000da8:	45b2      	cmp	sl, r6
 8000daa:	d024      	beq.n	8000df6 <__gedf2+0xca>
 8000dac:	4663      	mov	r3, ip
 8000dae:	2002      	movs	r0, #2
 8000db0:	3b01      	subs	r3, #1
 8000db2:	4018      	ands	r0, r3
 8000db4:	3801      	subs	r0, #1
 8000db6:	b003      	add	sp, #12
 8000db8:	bcf0      	pop	{r4, r5, r6, r7}
 8000dba:	46bb      	mov	fp, r7
 8000dbc:	46b2      	mov	sl, r6
 8000dbe:	46a9      	mov	r9, r5
 8000dc0:	46a0      	mov	r8, r4
 8000dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d0d9      	beq.n	8000d7c <__gedf2+0x50>
 8000dc8:	e7e4      	b.n	8000d94 <__gedf2+0x68>
 8000dca:	4654      	mov	r4, sl
 8000dcc:	2c00      	cmp	r4, #0
 8000dce:	d0ed      	beq.n	8000dac <__gedf2+0x80>
 8000dd0:	4584      	cmp	ip, r0
 8000dd2:	d1eb      	bne.n	8000dac <__gedf2+0x80>
 8000dd4:	4556      	cmp	r6, sl
 8000dd6:	dce9      	bgt.n	8000dac <__gedf2+0x80>
 8000dd8:	dbde      	blt.n	8000d98 <__gedf2+0x6c>
 8000dda:	9b01      	ldr	r3, [sp, #4]
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	d8e5      	bhi.n	8000dac <__gedf2+0x80>
 8000de0:	d1da      	bne.n	8000d98 <__gedf2+0x6c>
 8000de2:	45c8      	cmp	r8, r9
 8000de4:	d8e2      	bhi.n	8000dac <__gedf2+0x80>
 8000de6:	2000      	movs	r0, #0
 8000de8:	45c8      	cmp	r8, r9
 8000dea:	d2e4      	bcs.n	8000db6 <__gedf2+0x8a>
 8000dec:	e7d4      	b.n	8000d98 <__gedf2+0x6c>
 8000dee:	2000      	movs	r0, #0
 8000df0:	2c00      	cmp	r4, #0
 8000df2:	d0e0      	beq.n	8000db6 <__gedf2+0x8a>
 8000df4:	e7da      	b.n	8000dac <__gedf2+0x80>
 8000df6:	4311      	orrs	r1, r2
 8000df8:	d103      	bne.n	8000e02 <__gedf2+0xd6>
 8000dfa:	4584      	cmp	ip, r0
 8000dfc:	d1d6      	bne.n	8000dac <__gedf2+0x80>
 8000dfe:	2000      	movs	r0, #0
 8000e00:	e7d9      	b.n	8000db6 <__gedf2+0x8a>
 8000e02:	2002      	movs	r0, #2
 8000e04:	4240      	negs	r0, r0
 8000e06:	e7d6      	b.n	8000db6 <__gedf2+0x8a>
 8000e08:	4584      	cmp	ip, r0
 8000e0a:	d0e6      	beq.n	8000dda <__gedf2+0xae>
 8000e0c:	e7ce      	b.n	8000dac <__gedf2+0x80>
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	000007ff 	.word	0x000007ff

08000e14 <__ledf2>:
 8000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e16:	4657      	mov	r7, sl
 8000e18:	464e      	mov	r6, r9
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	46de      	mov	lr, fp
 8000e1e:	b5e0      	push	{r5, r6, r7, lr}
 8000e20:	000d      	movs	r5, r1
 8000e22:	030f      	lsls	r7, r1, #12
 8000e24:	0004      	movs	r4, r0
 8000e26:	4680      	mov	r8, r0
 8000e28:	0fe8      	lsrs	r0, r5, #31
 8000e2a:	0b39      	lsrs	r1, r7, #12
 8000e2c:	4684      	mov	ip, r0
 8000e2e:	b083      	sub	sp, #12
 8000e30:	0058      	lsls	r0, r3, #1
 8000e32:	4f30      	ldr	r7, [pc, #192]	@ (8000ef4 <__ledf2+0xe0>)
 8000e34:	0d40      	lsrs	r0, r0, #21
 8000e36:	9101      	str	r1, [sp, #4]
 8000e38:	031e      	lsls	r6, r3, #12
 8000e3a:	0069      	lsls	r1, r5, #1
 8000e3c:	4682      	mov	sl, r0
 8000e3e:	4691      	mov	r9, r2
 8000e40:	0d49      	lsrs	r1, r1, #21
 8000e42:	0b36      	lsrs	r6, r6, #12
 8000e44:	0fd8      	lsrs	r0, r3, #31
 8000e46:	42b9      	cmp	r1, r7
 8000e48:	d020      	beq.n	8000e8c <__ledf2+0x78>
 8000e4a:	45ba      	cmp	sl, r7
 8000e4c:	d00f      	beq.n	8000e6e <__ledf2+0x5a>
 8000e4e:	2900      	cmp	r1, #0
 8000e50:	d12b      	bne.n	8000eaa <__ledf2+0x96>
 8000e52:	9901      	ldr	r1, [sp, #4]
 8000e54:	430c      	orrs	r4, r1
 8000e56:	4651      	mov	r1, sl
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d137      	bne.n	8000ecc <__ledf2+0xb8>
 8000e5c:	4332      	orrs	r2, r6
 8000e5e:	d038      	beq.n	8000ed2 <__ledf2+0xbe>
 8000e60:	2c00      	cmp	r4, #0
 8000e62:	d144      	bne.n	8000eee <__ledf2+0xda>
 8000e64:	2800      	cmp	r0, #0
 8000e66:	d119      	bne.n	8000e9c <__ledf2+0x88>
 8000e68:	2001      	movs	r0, #1
 8000e6a:	4240      	negs	r0, r0
 8000e6c:	e016      	b.n	8000e9c <__ledf2+0x88>
 8000e6e:	4316      	orrs	r6, r2
 8000e70:	d113      	bne.n	8000e9a <__ledf2+0x86>
 8000e72:	2900      	cmp	r1, #0
 8000e74:	d102      	bne.n	8000e7c <__ledf2+0x68>
 8000e76:	9f01      	ldr	r7, [sp, #4]
 8000e78:	4327      	orrs	r7, r4
 8000e7a:	d0f3      	beq.n	8000e64 <__ledf2+0x50>
 8000e7c:	4584      	cmp	ip, r0
 8000e7e:	d020      	beq.n	8000ec2 <__ledf2+0xae>
 8000e80:	4663      	mov	r3, ip
 8000e82:	2002      	movs	r0, #2
 8000e84:	3b01      	subs	r3, #1
 8000e86:	4018      	ands	r0, r3
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e007      	b.n	8000e9c <__ledf2+0x88>
 8000e8c:	9f01      	ldr	r7, [sp, #4]
 8000e8e:	4327      	orrs	r7, r4
 8000e90:	d103      	bne.n	8000e9a <__ledf2+0x86>
 8000e92:	458a      	cmp	sl, r1
 8000e94:	d1f4      	bne.n	8000e80 <__ledf2+0x6c>
 8000e96:	4316      	orrs	r6, r2
 8000e98:	d01f      	beq.n	8000eda <__ledf2+0xc6>
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	b003      	add	sp, #12
 8000e9e:	bcf0      	pop	{r4, r5, r6, r7}
 8000ea0:	46bb      	mov	fp, r7
 8000ea2:	46b2      	mov	sl, r6
 8000ea4:	46a9      	mov	r9, r5
 8000ea6:	46a0      	mov	r8, r4
 8000ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eaa:	4654      	mov	r4, sl
 8000eac:	2c00      	cmp	r4, #0
 8000eae:	d0e7      	beq.n	8000e80 <__ledf2+0x6c>
 8000eb0:	4584      	cmp	ip, r0
 8000eb2:	d1e5      	bne.n	8000e80 <__ledf2+0x6c>
 8000eb4:	4551      	cmp	r1, sl
 8000eb6:	dce3      	bgt.n	8000e80 <__ledf2+0x6c>
 8000eb8:	db03      	blt.n	8000ec2 <__ledf2+0xae>
 8000eba:	9b01      	ldr	r3, [sp, #4]
 8000ebc:	42b3      	cmp	r3, r6
 8000ebe:	d8df      	bhi.n	8000e80 <__ledf2+0x6c>
 8000ec0:	d00f      	beq.n	8000ee2 <__ledf2+0xce>
 8000ec2:	4663      	mov	r3, ip
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0cf      	beq.n	8000e68 <__ledf2+0x54>
 8000ec8:	4660      	mov	r0, ip
 8000eca:	e7e7      	b.n	8000e9c <__ledf2+0x88>
 8000ecc:	2c00      	cmp	r4, #0
 8000ece:	d0c9      	beq.n	8000e64 <__ledf2+0x50>
 8000ed0:	e7d4      	b.n	8000e7c <__ledf2+0x68>
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	2c00      	cmp	r4, #0
 8000ed6:	d0e1      	beq.n	8000e9c <__ledf2+0x88>
 8000ed8:	e7d2      	b.n	8000e80 <__ledf2+0x6c>
 8000eda:	4584      	cmp	ip, r0
 8000edc:	d1d0      	bne.n	8000e80 <__ledf2+0x6c>
 8000ede:	2000      	movs	r0, #0
 8000ee0:	e7dc      	b.n	8000e9c <__ledf2+0x88>
 8000ee2:	45c8      	cmp	r8, r9
 8000ee4:	d8cc      	bhi.n	8000e80 <__ledf2+0x6c>
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	45c8      	cmp	r8, r9
 8000eea:	d2d7      	bcs.n	8000e9c <__ledf2+0x88>
 8000eec:	e7e9      	b.n	8000ec2 <__ledf2+0xae>
 8000eee:	4584      	cmp	ip, r0
 8000ef0:	d0e3      	beq.n	8000eba <__ledf2+0xa6>
 8000ef2:	e7c5      	b.n	8000e80 <__ledf2+0x6c>
 8000ef4:	000007ff 	.word	0x000007ff

08000ef8 <__aeabi_f2d>:
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	0242      	lsls	r2, r0, #9
 8000efc:	0043      	lsls	r3, r0, #1
 8000efe:	0fc4      	lsrs	r4, r0, #31
 8000f00:	20fe      	movs	r0, #254	@ 0xfe
 8000f02:	0e1b      	lsrs	r3, r3, #24
 8000f04:	1c59      	adds	r1, r3, #1
 8000f06:	0a55      	lsrs	r5, r2, #9
 8000f08:	4208      	tst	r0, r1
 8000f0a:	d00c      	beq.n	8000f26 <__aeabi_f2d+0x2e>
 8000f0c:	21e0      	movs	r1, #224	@ 0xe0
 8000f0e:	0089      	lsls	r1, r1, #2
 8000f10:	468c      	mov	ip, r1
 8000f12:	076d      	lsls	r5, r5, #29
 8000f14:	0b12      	lsrs	r2, r2, #12
 8000f16:	4463      	add	r3, ip
 8000f18:	051b      	lsls	r3, r3, #20
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	07e4      	lsls	r4, r4, #31
 8000f1e:	4323      	orrs	r3, r4
 8000f20:	0028      	movs	r0, r5
 8000f22:	0019      	movs	r1, r3
 8000f24:	bd70      	pop	{r4, r5, r6, pc}
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d114      	bne.n	8000f54 <__aeabi_f2d+0x5c>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d01b      	beq.n	8000f66 <__aeabi_f2d+0x6e>
 8000f2e:	0028      	movs	r0, r5
 8000f30:	f000 f82a 	bl	8000f88 <__clzsi2>
 8000f34:	280a      	cmp	r0, #10
 8000f36:	dc1c      	bgt.n	8000f72 <__aeabi_f2d+0x7a>
 8000f38:	230b      	movs	r3, #11
 8000f3a:	002a      	movs	r2, r5
 8000f3c:	1a1b      	subs	r3, r3, r0
 8000f3e:	40da      	lsrs	r2, r3
 8000f40:	0003      	movs	r3, r0
 8000f42:	3315      	adds	r3, #21
 8000f44:	409d      	lsls	r5, r3
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <__aeabi_f2d+0x88>)
 8000f48:	0312      	lsls	r2, r2, #12
 8000f4a:	1a1b      	subs	r3, r3, r0
 8000f4c:	055b      	lsls	r3, r3, #21
 8000f4e:	0b12      	lsrs	r2, r2, #12
 8000f50:	0d5b      	lsrs	r3, r3, #21
 8000f52:	e7e1      	b.n	8000f18 <__aeabi_f2d+0x20>
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d009      	beq.n	8000f6c <__aeabi_f2d+0x74>
 8000f58:	0b13      	lsrs	r3, r2, #12
 8000f5a:	2280      	movs	r2, #128	@ 0x80
 8000f5c:	0312      	lsls	r2, r2, #12
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	076d      	lsls	r5, r5, #29
 8000f62:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <__aeabi_f2d+0x8c>)
 8000f64:	e7d8      	b.n	8000f18 <__aeabi_f2d+0x20>
 8000f66:	2300      	movs	r3, #0
 8000f68:	2200      	movs	r2, #0
 8000f6a:	e7d5      	b.n	8000f18 <__aeabi_f2d+0x20>
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <__aeabi_f2d+0x8c>)
 8000f70:	e7d2      	b.n	8000f18 <__aeabi_f2d+0x20>
 8000f72:	0003      	movs	r3, r0
 8000f74:	002a      	movs	r2, r5
 8000f76:	3b0b      	subs	r3, #11
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	2500      	movs	r5, #0
 8000f7c:	e7e3      	b.n	8000f46 <__aeabi_f2d+0x4e>
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	00000389 	.word	0x00000389
 8000f84:	000007ff 	.word	0x000007ff

08000f88 <__clzsi2>:
 8000f88:	211c      	movs	r1, #28
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	041b      	lsls	r3, r3, #16
 8000f8e:	4298      	cmp	r0, r3
 8000f90:	d301      	bcc.n	8000f96 <__clzsi2+0xe>
 8000f92:	0c00      	lsrs	r0, r0, #16
 8000f94:	3910      	subs	r1, #16
 8000f96:	0a1b      	lsrs	r3, r3, #8
 8000f98:	4298      	cmp	r0, r3
 8000f9a:	d301      	bcc.n	8000fa0 <__clzsi2+0x18>
 8000f9c:	0a00      	lsrs	r0, r0, #8
 8000f9e:	3908      	subs	r1, #8
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	4298      	cmp	r0, r3
 8000fa4:	d301      	bcc.n	8000faa <__clzsi2+0x22>
 8000fa6:	0900      	lsrs	r0, r0, #4
 8000fa8:	3904      	subs	r1, #4
 8000faa:	a202      	add	r2, pc, #8	@ (adr r2, 8000fb4 <__clzsi2+0x2c>)
 8000fac:	5c10      	ldrb	r0, [r2, r0]
 8000fae:	1840      	adds	r0, r0, r1
 8000fb0:	4770      	bx	lr
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	02020304 	.word	0x02020304
 8000fb8:	01010101 	.word	0x01010101
	...

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fca:	f001 fdcc 	bl	8002b66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fce:	f000 f82d 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd2:	f000 f983 	bl	80012dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000fd6:	f000 f931 	bl	800123c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000fda:	f000 f86b 	bl	80010b4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000fde:	f000 f8ed 	bl	80011bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Initialise the VL53L0X
  	statInfo_t_VL53L0X distanceStr;
  	initVL53L0X(1, &hi2c1);
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <main+0x5c>)
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f000 fd08 	bl	80019fc <initVL53L0X>

  	// Configure the sensor for high accuracy and speed in 20 cm.
  	setSignalRateLimit(200);
 8000fec:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <main+0x60>)
 8000fee:	1c18      	adds	r0, r3, #0
 8000ff0:	f000 ff82 	bl	8001ef8 <setSignalRateLimit>
  	setVcselPulsePeriod(VcselPeriodPreRange, 10);
 8000ff4:	210a      	movs	r1, #10
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f001 f900 	bl	80021fc <setVcselPulsePeriod>
  	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 8000ffc:	210e      	movs	r1, #14
 8000ffe:	2001      	movs	r0, #1
 8001000:	f001 f8fc 	bl	80021fc <setVcselPulsePeriod>
  	setMeasurementTimingBudget(300 * 1000UL);
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <main+0x64>)
 8001006:	0018      	movs	r0, r3
 8001008:	f000 ffa4 	bl	8001f54 <setMeasurementTimingBudget>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	// uint16_t distance is the distance in millimeters.
		// statInfo_t_VL53L0X distanceStr is the statistics read from the sensor.
		distance = readRangeSingleMillimeters(&distanceStr);
 800100c:	230e      	movs	r3, #14
 800100e:	18fc      	adds	r4, r7, r3
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	0018      	movs	r0, r3
 8001014:	f001 fafc 	bl	8002610 <readRangeSingleMillimeters>
 8001018:	0003      	movs	r3, r0
 800101a:	8023      	strh	r3, [r4, #0]
 800101c:	46c0      	nop			@ (mov r8, r8)
 800101e:	e7f5      	b.n	800100c <main+0x48>
 8001020:	20000090 	.word	0x20000090
 8001024:	43480000 	.word	0x43480000
 8001028:	000493e0 	.word	0x000493e0

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b08f      	sub	sp, #60	@ 0x3c
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	2418      	movs	r4, #24
 8001034:	193b      	adds	r3, r7, r4
 8001036:	0018      	movs	r0, r3
 8001038:	2320      	movs	r3, #32
 800103a:	001a      	movs	r2, r3
 800103c:	2100      	movs	r1, #0
 800103e:	f006 fac1 	bl	80075c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	0018      	movs	r0, r3
 8001046:	2314      	movs	r3, #20
 8001048:	001a      	movs	r2, r3
 800104a:	2100      	movs	r1, #0
 800104c:	f006 faba 	bl	80075c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001050:	193b      	adds	r3, r7, r4
 8001052:	2202      	movs	r2, #2
 8001054:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001056:	193b      	adds	r3, r7, r4
 8001058:	2280      	movs	r2, #128	@ 0x80
 800105a:	0052      	lsls	r2, r2, #1
 800105c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800105e:	193b      	adds	r3, r7, r4
 8001060:	2280      	movs	r2, #128	@ 0x80
 8001062:	0152      	lsls	r2, r2, #5
 8001064:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001066:	193b      	adds	r3, r7, r4
 8001068:	2240      	movs	r2, #64	@ 0x40
 800106a:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106c:	193b      	adds	r3, r7, r4
 800106e:	0018      	movs	r0, r3
 8001070:	f005 f8a2 	bl	80061b8 <HAL_RCC_OscConfig>
 8001074:	1e03      	subs	r3, r0, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001078:	f000 f9d4 	bl	8001424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2207      	movs	r2, #7
 8001080:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2100      	movs	r1, #0
 800109e:	0018      	movs	r0, r3
 80010a0:	f005 fab0 	bl	8006604 <HAL_RCC_ClockConfig>
 80010a4:	1e03      	subs	r3, r0, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010a8:	f000 f9bc 	bl	8001424 <Error_Handler>
  }
}
 80010ac:	46c0      	nop			@ (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b00f      	add	sp, #60	@ 0x3c
 80010b2:	bd90      	pop	{r4, r7, pc}

080010b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	0018      	movs	r0, r3
 80010be:	230c      	movs	r3, #12
 80010c0:	001a      	movs	r2, r3
 80010c2:	2100      	movs	r1, #0
 80010c4:	f006 fa7e 	bl	80075c4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010c8:	4b38      	ldr	r3, [pc, #224]	@ (80011ac <MX_ADC1_Init+0xf8>)
 80010ca:	4a39      	ldr	r2, [pc, #228]	@ (80011b0 <MX_ADC1_Init+0xfc>)
 80010cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80010ce:	4b37      	ldr	r3, [pc, #220]	@ (80011ac <MX_ADC1_Init+0xf8>)
 80010d0:	22c0      	movs	r2, #192	@ 0xc0
 80010d2:	0612      	lsls	r2, r2, #24
 80010d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010d6:	4b35      	ldr	r3, [pc, #212]	@ (80011ac <MX_ADC1_Init+0xf8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010dc:	4b33      	ldr	r3, [pc, #204]	@ (80011ac <MX_ADC1_Init+0xf8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80010e2:	4b32      	ldr	r3, [pc, #200]	@ (80011ac <MX_ADC1_Init+0xf8>)
 80010e4:	2280      	movs	r2, #128	@ 0x80
 80010e6:	0612      	lsls	r2, r2, #24
 80010e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ea:	4b30      	ldr	r3, [pc, #192]	@ (80011ac <MX_ADC1_Init+0xf8>)
 80010ec:	2204      	movs	r2, #4
 80010ee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010f0:	4b2e      	ldr	r3, [pc, #184]	@ (80011ac <MX_ADC1_Init+0xf8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80010f6:	4b2d      	ldr	r3, [pc, #180]	@ (80011ac <MX_ADC1_Init+0xf8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010fc:	4b2b      	ldr	r3, [pc, #172]	@ (80011ac <MX_ADC1_Init+0xf8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 8001102:	4b2a      	ldr	r3, [pc, #168]	@ (80011ac <MX_ADC1_Init+0xf8>)
 8001104:	2200      	movs	r2, #0
 8001106:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001108:	4b28      	ldr	r3, [pc, #160]	@ (80011ac <MX_ADC1_Init+0xf8>)
 800110a:	2220      	movs	r2, #32
 800110c:	2100      	movs	r1, #0
 800110e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001110:	4b26      	ldr	r3, [pc, #152]	@ (80011ac <MX_ADC1_Init+0xf8>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001116:	4b25      	ldr	r3, [pc, #148]	@ (80011ac <MX_ADC1_Init+0xf8>)
 8001118:	2200      	movs	r2, #0
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800111c:	4b23      	ldr	r3, [pc, #140]	@ (80011ac <MX_ADC1_Init+0xf8>)
 800111e:	222c      	movs	r2, #44	@ 0x2c
 8001120:	2100      	movs	r1, #0
 8001122:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001124:	4b21      	ldr	r3, [pc, #132]	@ (80011ac <MX_ADC1_Init+0xf8>)
 8001126:	2200      	movs	r2, #0
 8001128:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800112a:	4b20      	ldr	r3, [pc, #128]	@ (80011ac <MX_ADC1_Init+0xf8>)
 800112c:	2200      	movs	r2, #0
 800112e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001130:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <MX_ADC1_Init+0xf8>)
 8001132:	223c      	movs	r2, #60	@ 0x3c
 8001134:	2100      	movs	r1, #0
 8001136:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001138:	4b1c      	ldr	r3, [pc, #112]	@ (80011ac <MX_ADC1_Init+0xf8>)
 800113a:	2200      	movs	r2, #0
 800113c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800113e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <MX_ADC1_Init+0xf8>)
 8001140:	0018      	movs	r0, r3
 8001142:	f001 fe8b 	bl	8002e5c <HAL_ADC_Init>
 8001146:	1e03      	subs	r3, r0, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800114a:	f000 f96b 	bl	8001424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2201      	movs	r2, #1
 8001152:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2201      	movs	r2, #1
 8001158:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115a:	1d3a      	adds	r2, r7, #4
 800115c:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <MX_ADC1_Init+0xf8>)
 800115e:	0011      	movs	r1, r2
 8001160:	0018      	movs	r0, r3
 8001162:	f002 f821 	bl	80031a8 <HAL_ADC_ConfigChannel>
 8001166:	1e03      	subs	r3, r0, #0
 8001168:	d001      	beq.n	800116e <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 800116a:	f000 f95b 	bl	8001424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	4a10      	ldr	r2, [pc, #64]	@ (80011b4 <MX_ADC1_Init+0x100>)
 8001172:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001174:	1d3a      	adds	r2, r7, #4
 8001176:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <MX_ADC1_Init+0xf8>)
 8001178:	0011      	movs	r1, r2
 800117a:	0018      	movs	r0, r3
 800117c:	f002 f814 	bl	80031a8 <HAL_ADC_ConfigChannel>
 8001180:	1e03      	subs	r3, r0, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8001184:	f000 f94e 	bl	8001424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	4a0b      	ldr	r2, [pc, #44]	@ (80011b8 <MX_ADC1_Init+0x104>)
 800118c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118e:	1d3a      	adds	r2, r7, #4
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_ADC1_Init+0xf8>)
 8001192:	0011      	movs	r1, r2
 8001194:	0018      	movs	r0, r3
 8001196:	f002 f807 	bl	80031a8 <HAL_ADC_ConfigChannel>
 800119a:	1e03      	subs	r3, r0, #0
 800119c:	d001      	beq.n	80011a2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800119e:	f000 f941 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a2:	46c0      	nop			@ (mov r8, r8)
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b004      	add	sp, #16
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	2000002c 	.word	0x2000002c
 80011b0:	40012400 	.word	0x40012400
 80011b4:	04000002 	.word	0x04000002
 80011b8:	08000004 	.word	0x08000004

080011bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001234 <MX_I2C1_Init+0x78>)
 80011c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001238 <MX_I2C1_Init+0x7c>)
 80011ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011cc:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d2:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d8:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011f8:	0018      	movs	r0, r3
 80011fa:	f002 fd3d 	bl	8003c78 <HAL_I2C_Init>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d001      	beq.n	8001206 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001202:	f000 f90f 	bl	8001424 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001206:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <MX_I2C1_Init+0x74>)
 8001208:	2100      	movs	r1, #0
 800120a:	0018      	movs	r0, r3
 800120c:	f004 ff3c 	bl	8006088 <HAL_I2CEx_ConfigAnalogFilter>
 8001210:	1e03      	subs	r3, r0, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001214:	f000 f906 	bl	8001424 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <MX_I2C1_Init+0x74>)
 800121a:	2100      	movs	r1, #0
 800121c:	0018      	movs	r0, r3
 800121e:	f004 ff7f 	bl	8006120 <HAL_I2CEx_ConfigDigitalFilter>
 8001222:	1e03      	subs	r3, r0, #0
 8001224:	d001      	beq.n	800122a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001226:	f000 f8fd 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000090 	.word	0x20000090
 8001234:	40005400 	.word	0x40005400
 8001238:	00402d41 	.word	0x00402d41

0800123c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001240:	4b24      	ldr	r3, [pc, #144]	@ (80012d4 <MX_USART1_UART_Init+0x98>)
 8001242:	4a25      	ldr	r2, [pc, #148]	@ (80012d8 <MX_USART1_UART_Init+0x9c>)
 8001244:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001246:	4b23      	ldr	r3, [pc, #140]	@ (80012d4 <MX_USART1_UART_Init+0x98>)
 8001248:	22e1      	movs	r2, #225	@ 0xe1
 800124a:	0252      	lsls	r2, r2, #9
 800124c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <MX_USART1_UART_Init+0x98>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <MX_USART1_UART_Init+0x98>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800125a:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <MX_USART1_UART_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <MX_USART1_UART_Init+0x98>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <MX_USART1_UART_Init+0x98>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <MX_USART1_UART_Init+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001272:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <MX_USART1_UART_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001278:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <MX_USART1_UART_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <MX_USART1_UART_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001284:	4813      	ldr	r0, [pc, #76]	@ (80012d4 <MX_USART1_UART_Init+0x98>)
 8001286:	2300      	movs	r3, #0
 8001288:	2200      	movs	r2, #0
 800128a:	2100      	movs	r1, #0
 800128c:	f006 f80e 	bl	80072ac <HAL_RS485Ex_Init>
 8001290:	1e03      	subs	r3, r0, #0
 8001292:	d001      	beq.n	8001298 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001294:	f000 f8c6 	bl	8001424 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001298:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <MX_USART1_UART_Init+0x98>)
 800129a:	2100      	movs	r1, #0
 800129c:	0018      	movs	r0, r3
 800129e:	f006 f8b1 	bl	8007404 <HAL_UARTEx_SetTxFifoThreshold>
 80012a2:	1e03      	subs	r3, r0, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 80012a6:	f000 f8bd 	bl	8001424 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <MX_USART1_UART_Init+0x98>)
 80012ac:	2100      	movs	r1, #0
 80012ae:	0018      	movs	r0, r3
 80012b0:	f006 f8e8 	bl	8007484 <HAL_UARTEx_SetRxFifoThreshold>
 80012b4:	1e03      	subs	r3, r0, #0
 80012b6:	d001      	beq.n	80012bc <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 80012b8:	f000 f8b4 	bl	8001424 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012bc:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <MX_USART1_UART_Init+0x98>)
 80012be:	0018      	movs	r0, r3
 80012c0:	f006 f866 	bl	8007390 <HAL_UARTEx_DisableFifoMode>
 80012c4:	1e03      	subs	r3, r0, #0
 80012c6:	d001      	beq.n	80012cc <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 80012c8:	f000 f8ac 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012cc:	46c0      	nop			@ (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	200000e4 	.word	0x200000e4
 80012d8:	40013800 	.word	0x40013800

080012dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b08b      	sub	sp, #44	@ 0x2c
 80012e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	2414      	movs	r4, #20
 80012e4:	193b      	adds	r3, r7, r4
 80012e6:	0018      	movs	r0, r3
 80012e8:	2314      	movs	r3, #20
 80012ea:	001a      	movs	r2, r3
 80012ec:	2100      	movs	r1, #0
 80012ee:	f006 f969 	bl	80075c4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	4b48      	ldr	r3, [pc, #288]	@ (8001414 <MX_GPIO_Init+0x138>)
 80012f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012f6:	4b47      	ldr	r3, [pc, #284]	@ (8001414 <MX_GPIO_Init+0x138>)
 80012f8:	2104      	movs	r1, #4
 80012fa:	430a      	orrs	r2, r1
 80012fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80012fe:	4b45      	ldr	r3, [pc, #276]	@ (8001414 <MX_GPIO_Init+0x138>)
 8001300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001302:	2204      	movs	r2, #4
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800130a:	4b42      	ldr	r3, [pc, #264]	@ (8001414 <MX_GPIO_Init+0x138>)
 800130c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800130e:	4b41      	ldr	r3, [pc, #260]	@ (8001414 <MX_GPIO_Init+0x138>)
 8001310:	2120      	movs	r1, #32
 8001312:	430a      	orrs	r2, r1
 8001314:	635a      	str	r2, [r3, #52]	@ 0x34
 8001316:	4b3f      	ldr	r3, [pc, #252]	@ (8001414 <MX_GPIO_Init+0x138>)
 8001318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800131a:	2220      	movs	r2, #32
 800131c:	4013      	ands	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b3c      	ldr	r3, [pc, #240]	@ (8001414 <MX_GPIO_Init+0x138>)
 8001324:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001326:	4b3b      	ldr	r3, [pc, #236]	@ (8001414 <MX_GPIO_Init+0x138>)
 8001328:	2101      	movs	r1, #1
 800132a:	430a      	orrs	r2, r1
 800132c:	635a      	str	r2, [r3, #52]	@ 0x34
 800132e:	4b39      	ldr	r3, [pc, #228]	@ (8001414 <MX_GPIO_Init+0x138>)
 8001330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001332:	2201      	movs	r2, #1
 8001334:	4013      	ands	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	4b36      	ldr	r3, [pc, #216]	@ (8001414 <MX_GPIO_Init+0x138>)
 800133c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800133e:	4b35      	ldr	r3, [pc, #212]	@ (8001414 <MX_GPIO_Init+0x138>)
 8001340:	2102      	movs	r1, #2
 8001342:	430a      	orrs	r2, r1
 8001344:	635a      	str	r2, [r3, #52]	@ 0x34
 8001346:	4b33      	ldr	r3, [pc, #204]	@ (8001414 <MX_GPIO_Init+0x138>)
 8001348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800134a:	2202      	movs	r2, #2
 800134c:	4013      	ands	r3, r2
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001352:	4b30      	ldr	r3, [pc, #192]	@ (8001414 <MX_GPIO_Init+0x138>)
 8001354:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001356:	4b2f      	ldr	r3, [pc, #188]	@ (8001414 <MX_GPIO_Init+0x138>)
 8001358:	2108      	movs	r1, #8
 800135a:	430a      	orrs	r2, r1
 800135c:	635a      	str	r2, [r3, #52]	@ 0x34
 800135e:	4b2d      	ldr	r3, [pc, #180]	@ (8001414 <MX_GPIO_Init+0x138>)
 8001360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001362:	2208      	movs	r2, #8
 8001364:	4013      	ands	r3, r2
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_DCV_A_Pin|MCU_DCV_B_Pin|HPU_Gate_Pin, GPIO_PIN_RESET);
 800136a:	492b      	ldr	r1, [pc, #172]	@ (8001418 <MX_GPIO_Init+0x13c>)
 800136c:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <MX_GPIO_Init+0x140>)
 800136e:	2200      	movs	r2, #0
 8001370:	0018      	movs	r0, r3
 8001372:	f002 fc63 	bl	8003c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Water_Solinoid_GPIO_Port, Water_Solinoid_Pin, GPIO_PIN_RESET);
 8001376:	4b2a      	ldr	r3, [pc, #168]	@ (8001420 <MX_GPIO_Init+0x144>)
 8001378:	2200      	movs	r2, #0
 800137a:	2104      	movs	r1, #4
 800137c:	0018      	movs	r0, r3
 800137e:	f002 fc5d 	bl	8003c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MCU_DCV_A_Pin MCU_DCV_B_Pin HPU_Gate_Pin */
  GPIO_InitStruct.Pin = MCU_DCV_A_Pin|MCU_DCV_B_Pin|HPU_Gate_Pin;
 8001382:	193b      	adds	r3, r7, r4
 8001384:	4a24      	ldr	r2, [pc, #144]	@ (8001418 <MX_GPIO_Init+0x13c>)
 8001386:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	193b      	adds	r3, r7, r4
 800138a:	2201      	movs	r2, #1
 800138c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	193b      	adds	r3, r7, r4
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	193b      	adds	r3, r7, r4
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	193b      	adds	r3, r7, r4
 800139c:	4a1f      	ldr	r2, [pc, #124]	@ (800141c <MX_GPIO_Init+0x140>)
 800139e:	0019      	movs	r1, r3
 80013a0:	0010      	movs	r0, r2
 80013a2:	f002 fad9 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pin : Oil_High_Pin */
  GPIO_InitStruct.Pin = Oil_High_Pin;
 80013a6:	193b      	adds	r3, r7, r4
 80013a8:	2280      	movs	r2, #128	@ 0x80
 80013aa:	0212      	lsls	r2, r2, #8
 80013ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ae:	193b      	adds	r3, r7, r4
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	193b      	adds	r3, r7, r4
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Oil_High_GPIO_Port, &GPIO_InitStruct);
 80013ba:	193a      	adds	r2, r7, r4
 80013bc:	23a0      	movs	r3, #160	@ 0xa0
 80013be:	05db      	lsls	r3, r3, #23
 80013c0:	0011      	movs	r1, r2
 80013c2:	0018      	movs	r0, r3
 80013c4:	f002 fac8 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : Oil_Low_Pin Oil_E_Stop_Pin */
  GPIO_InitStruct.Pin = Oil_Low_Pin|Oil_E_Stop_Pin;
 80013c8:	193b      	adds	r3, r7, r4
 80013ca:	2203      	movs	r2, #3
 80013cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ce:	193b      	adds	r3, r7, r4
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	193b      	adds	r3, r7, r4
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013da:	193b      	adds	r3, r7, r4
 80013dc:	4a10      	ldr	r2, [pc, #64]	@ (8001420 <MX_GPIO_Init+0x144>)
 80013de:	0019      	movs	r1, r3
 80013e0:	0010      	movs	r0, r2
 80013e2:	f002 fab9 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pin : Water_Solinoid_Pin */
  GPIO_InitStruct.Pin = Water_Solinoid_Pin;
 80013e6:	0021      	movs	r1, r4
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	2204      	movs	r2, #4
 80013ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ee:	187b      	adds	r3, r7, r1
 80013f0:	2201      	movs	r2, #1
 80013f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Water_Solinoid_GPIO_Port, &GPIO_InitStruct);
 8001400:	187b      	adds	r3, r7, r1
 8001402:	4a07      	ldr	r2, [pc, #28]	@ (8001420 <MX_GPIO_Init+0x144>)
 8001404:	0019      	movs	r1, r3
 8001406:	0010      	movs	r0, r2
 8001408:	f002 faa6 	bl	8003958 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800140c:	46c0      	nop			@ (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	b00b      	add	sp, #44	@ 0x2c
 8001412:	bd90      	pop	{r4, r7, pc}
 8001414:	40021000 	.word	0x40021000
 8001418:	00001003 	.word	0x00001003
 800141c:	50000400 	.word	0x50000400
 8001420:	50000c00 	.word	0x50000c00

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142c:	46c0      	nop			@ (mov r8, r8)
 800142e:	e7fd      	b.n	800142c <Error_Handler+0x8>

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <HAL_MspInit+0x44>)
 8001438:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800143a:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <HAL_MspInit+0x44>)
 800143c:	2101      	movs	r1, #1
 800143e:	430a      	orrs	r2, r1
 8001440:	641a      	str	r2, [r3, #64]	@ 0x40
 8001442:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <HAL_MspInit+0x44>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	2201      	movs	r2, #1
 8001448:	4013      	ands	r3, r2
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <HAL_MspInit+0x44>)
 8001450:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <HAL_MspInit+0x44>)
 8001454:	2180      	movs	r1, #128	@ 0x80
 8001456:	0549      	lsls	r1, r1, #21
 8001458:	430a      	orrs	r2, r1
 800145a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800145c:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <HAL_MspInit+0x44>)
 800145e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001460:	2380      	movs	r3, #128	@ 0x80
 8001462:	055b      	lsls	r3, r3, #21
 8001464:	4013      	ands	r3, r2
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b002      	add	sp, #8
 8001470:	bd80      	pop	{r7, pc}
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	40021000 	.word	0x40021000

08001478 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b093      	sub	sp, #76	@ 0x4c
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	2334      	movs	r3, #52	@ 0x34
 8001482:	18fb      	adds	r3, r7, r3
 8001484:	0018      	movs	r0, r3
 8001486:	2314      	movs	r3, #20
 8001488:	001a      	movs	r2, r3
 800148a:	2100      	movs	r1, #0
 800148c:	f006 f89a 	bl	80075c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001490:	2414      	movs	r4, #20
 8001492:	193b      	adds	r3, r7, r4
 8001494:	0018      	movs	r0, r3
 8001496:	2320      	movs	r3, #32
 8001498:	001a      	movs	r2, r3
 800149a:	2100      	movs	r1, #0
 800149c:	f006 f892 	bl	80075c4 <memset>
  if(hadc->Instance==ADC1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001524 <HAL_ADC_MspInit+0xac>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d138      	bne.n	800151c <HAL_ADC_MspInit+0xa4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014aa:	193b      	adds	r3, r7, r4
 80014ac:	2220      	movs	r2, #32
 80014ae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80014b0:	193b      	adds	r3, r7, r4
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b6:	193b      	adds	r3, r7, r4
 80014b8:	0018      	movs	r0, r3
 80014ba:	f005 fa49 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 80014be:	1e03      	subs	r3, r0, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 80014c2:	f7ff ffaf 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014c6:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <HAL_ADC_MspInit+0xb0>)
 80014c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014ca:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <HAL_ADC_MspInit+0xb0>)
 80014cc:	2180      	movs	r1, #128	@ 0x80
 80014ce:	0349      	lsls	r1, r1, #13
 80014d0:	430a      	orrs	r2, r1
 80014d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80014d4:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <HAL_ADC_MspInit+0xb0>)
 80014d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014d8:	2380      	movs	r3, #128	@ 0x80
 80014da:	035b      	lsls	r3, r3, #13
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <HAL_ADC_MspInit+0xb0>)
 80014e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <HAL_ADC_MspInit+0xb0>)
 80014e8:	2101      	movs	r1, #1
 80014ea:	430a      	orrs	r2, r1
 80014ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <HAL_ADC_MspInit+0xb0>)
 80014f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014f2:	2201      	movs	r2, #1
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80014fa:	2134      	movs	r1, #52	@ 0x34
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	2207      	movs	r2, #7
 8001500:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001502:	187b      	adds	r3, r7, r1
 8001504:	2203      	movs	r2, #3
 8001506:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	187b      	adds	r3, r7, r1
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	187a      	adds	r2, r7, r1
 8001510:	23a0      	movs	r3, #160	@ 0xa0
 8001512:	05db      	lsls	r3, r3, #23
 8001514:	0011      	movs	r1, r2
 8001516:	0018      	movs	r0, r3
 8001518:	f002 fa1e 	bl	8003958 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800151c:	46c0      	nop			@ (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	b013      	add	sp, #76	@ 0x4c
 8001522:	bd90      	pop	{r4, r7, pc}
 8001524:	40012400 	.word	0x40012400
 8001528:	40021000 	.word	0x40021000

0800152c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b093      	sub	sp, #76	@ 0x4c
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	2334      	movs	r3, #52	@ 0x34
 8001536:	18fb      	adds	r3, r7, r3
 8001538:	0018      	movs	r0, r3
 800153a:	2314      	movs	r3, #20
 800153c:	001a      	movs	r2, r3
 800153e:	2100      	movs	r1, #0
 8001540:	f006 f840 	bl	80075c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001544:	2414      	movs	r4, #20
 8001546:	193b      	adds	r3, r7, r4
 8001548:	0018      	movs	r0, r3
 800154a:	2320      	movs	r3, #32
 800154c:	001a      	movs	r2, r3
 800154e:	2100      	movs	r1, #0
 8001550:	f006 f838 	bl	80075c4 <memset>
  if(hi2c->Instance==I2C1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a23      	ldr	r2, [pc, #140]	@ (80015e8 <HAL_I2C_MspInit+0xbc>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d13f      	bne.n	80015de <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800155e:	193b      	adds	r3, r7, r4
 8001560:	2202      	movs	r2, #2
 8001562:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001564:	193b      	adds	r3, r7, r4
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800156a:	193b      	adds	r3, r7, r4
 800156c:	0018      	movs	r0, r3
 800156e:	f005 f9ef 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 8001572:	1e03      	subs	r3, r0, #0
 8001574:	d001      	beq.n	800157a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001576:	f7ff ff55 	bl	8001424 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <HAL_I2C_MspInit+0xc0>)
 800157c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800157e:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <HAL_I2C_MspInit+0xc0>)
 8001580:	2101      	movs	r1, #1
 8001582:	430a      	orrs	r2, r1
 8001584:	635a      	str	r2, [r3, #52]	@ 0x34
 8001586:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <HAL_I2C_MspInit+0xc0>)
 8001588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800158a:	2201      	movs	r2, #1
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001592:	2134      	movs	r1, #52	@ 0x34
 8001594:	187b      	adds	r3, r7, r1
 8001596:	22c0      	movs	r2, #192	@ 0xc0
 8001598:	00d2      	lsls	r2, r2, #3
 800159a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159c:	187b      	adds	r3, r7, r1
 800159e:	2212      	movs	r2, #18
 80015a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	187b      	adds	r3, r7, r1
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	187b      	adds	r3, r7, r1
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80015ae:	187b      	adds	r3, r7, r1
 80015b0:	2206      	movs	r2, #6
 80015b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	187a      	adds	r2, r7, r1
 80015b6:	23a0      	movs	r3, #160	@ 0xa0
 80015b8:	05db      	lsls	r3, r3, #23
 80015ba:	0011      	movs	r1, r2
 80015bc:	0018      	movs	r0, r3
 80015be:	f002 f9cb 	bl	8003958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <HAL_I2C_MspInit+0xc0>)
 80015c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015c6:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <HAL_I2C_MspInit+0xc0>)
 80015c8:	2180      	movs	r1, #128	@ 0x80
 80015ca:	0389      	lsls	r1, r1, #14
 80015cc:	430a      	orrs	r2, r1
 80015ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <HAL_I2C_MspInit+0xc0>)
 80015d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	039b      	lsls	r3, r3, #14
 80015d8:	4013      	ands	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015de:	46c0      	nop			@ (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b013      	add	sp, #76	@ 0x4c
 80015e4:	bd90      	pop	{r4, r7, pc}
 80015e6:	46c0      	nop			@ (mov r8, r8)
 80015e8:	40005400 	.word	0x40005400
 80015ec:	40021000 	.word	0x40021000

080015f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b095      	sub	sp, #84	@ 0x54
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	233c      	movs	r3, #60	@ 0x3c
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	0018      	movs	r0, r3
 80015fe:	2314      	movs	r3, #20
 8001600:	001a      	movs	r2, r3
 8001602:	2100      	movs	r1, #0
 8001604:	f005 ffde 	bl	80075c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001608:	241c      	movs	r4, #28
 800160a:	193b      	adds	r3, r7, r4
 800160c:	0018      	movs	r0, r3
 800160e:	2320      	movs	r3, #32
 8001610:	001a      	movs	r2, r3
 8001612:	2100      	movs	r1, #0
 8001614:	f005 ffd6 	bl	80075c4 <memset>
  if(huart->Instance==USART1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a46      	ldr	r2, [pc, #280]	@ (8001738 <HAL_UART_MspInit+0x148>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d000      	beq.n	8001624 <HAL_UART_MspInit+0x34>
 8001622:	e084      	b.n	800172e <HAL_UART_MspInit+0x13e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001624:	193b      	adds	r3, r7, r4
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800162a:	193b      	adds	r3, r7, r4
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001630:	193b      	adds	r3, r7, r4
 8001632:	0018      	movs	r0, r3
 8001634:	f005 f98c 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 8001638:	1e03      	subs	r3, r0, #0
 800163a:	d001      	beq.n	8001640 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800163c:	f7ff fef2 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001640:	4b3e      	ldr	r3, [pc, #248]	@ (800173c <HAL_UART_MspInit+0x14c>)
 8001642:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001644:	4b3d      	ldr	r3, [pc, #244]	@ (800173c <HAL_UART_MspInit+0x14c>)
 8001646:	2180      	movs	r1, #128	@ 0x80
 8001648:	01c9      	lsls	r1, r1, #7
 800164a:	430a      	orrs	r2, r1
 800164c:	641a      	str	r2, [r3, #64]	@ 0x40
 800164e:	4b3b      	ldr	r3, [pc, #236]	@ (800173c <HAL_UART_MspInit+0x14c>)
 8001650:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001652:	2380      	movs	r3, #128	@ 0x80
 8001654:	01db      	lsls	r3, r3, #7
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
 800165a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800165c:	4b37      	ldr	r3, [pc, #220]	@ (800173c <HAL_UART_MspInit+0x14c>)
 800165e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001660:	4b36      	ldr	r3, [pc, #216]	@ (800173c <HAL_UART_MspInit+0x14c>)
 8001662:	2104      	movs	r1, #4
 8001664:	430a      	orrs	r2, r1
 8001666:	635a      	str	r2, [r3, #52]	@ 0x34
 8001668:	4b34      	ldr	r3, [pc, #208]	@ (800173c <HAL_UART_MspInit+0x14c>)
 800166a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800166c:	2204      	movs	r2, #4
 800166e:	4013      	ands	r3, r2
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001674:	4b31      	ldr	r3, [pc, #196]	@ (800173c <HAL_UART_MspInit+0x14c>)
 8001676:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001678:	4b30      	ldr	r3, [pc, #192]	@ (800173c <HAL_UART_MspInit+0x14c>)
 800167a:	2102      	movs	r1, #2
 800167c:	430a      	orrs	r2, r1
 800167e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001680:	4b2e      	ldr	r3, [pc, #184]	@ (800173c <HAL_UART_MspInit+0x14c>)
 8001682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001684:	2202      	movs	r2, #2
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b2b      	ldr	r3, [pc, #172]	@ (800173c <HAL_UART_MspInit+0x14c>)
 800168e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001690:	4b2a      	ldr	r3, [pc, #168]	@ (800173c <HAL_UART_MspInit+0x14c>)
 8001692:	2101      	movs	r1, #1
 8001694:	430a      	orrs	r2, r1
 8001696:	635a      	str	r2, [r3, #52]	@ 0x34
 8001698:	4b28      	ldr	r3, [pc, #160]	@ (800173c <HAL_UART_MspInit+0x14c>)
 800169a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800169c:	2201      	movs	r2, #1
 800169e:	4013      	ands	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016a4:	213c      	movs	r1, #60	@ 0x3c
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	2280      	movs	r2, #128	@ 0x80
 80016aa:	01d2      	lsls	r2, r2, #7
 80016ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	000c      	movs	r4, r1
 80016b0:	193b      	adds	r3, r7, r4
 80016b2:	2202      	movs	r2, #2
 80016b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	193b      	adds	r3, r7, r4
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	193b      	adds	r3, r7, r4
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80016c2:	193b      	adds	r3, r7, r4
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c8:	193b      	adds	r3, r7, r4
 80016ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001740 <HAL_UART_MspInit+0x150>)
 80016cc:	0019      	movs	r1, r3
 80016ce:	0010      	movs	r0, r2
 80016d0:	f002 f942 	bl	8003958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016d4:	193b      	adds	r3, r7, r4
 80016d6:	2204      	movs	r2, #4
 80016d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	2202      	movs	r2, #2
 80016de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	193b      	adds	r3, r7, r4
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	193b      	adds	r3, r7, r4
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80016ec:	193b      	adds	r3, r7, r4
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	193b      	adds	r3, r7, r4
 80016f4:	4a13      	ldr	r2, [pc, #76]	@ (8001744 <HAL_UART_MspInit+0x154>)
 80016f6:	0019      	movs	r1, r3
 80016f8:	0010      	movs	r0, r2
 80016fa:	f002 f92d 	bl	8003958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016fe:	0021      	movs	r1, r4
 8001700:	187b      	adds	r3, r7, r1
 8001702:	2280      	movs	r2, #128	@ 0x80
 8001704:	0152      	lsls	r2, r2, #5
 8001706:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	187b      	adds	r3, r7, r1
 800170a:	2202      	movs	r2, #2
 800170c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	187b      	adds	r3, r7, r1
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	187b      	adds	r3, r7, r1
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800171a:	187b      	adds	r3, r7, r1
 800171c:	2201      	movs	r2, #1
 800171e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	187a      	adds	r2, r7, r1
 8001722:	23a0      	movs	r3, #160	@ 0xa0
 8001724:	05db      	lsls	r3, r3, #23
 8001726:	0011      	movs	r1, r2
 8001728:	0018      	movs	r0, r3
 800172a:	f002 f915 	bl	8003958 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	b015      	add	sp, #84	@ 0x54
 8001734:	bd90      	pop	{r4, r7, pc}
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	40013800 	.word	0x40013800
 800173c:	40021000 	.word	0x40021000
 8001740:	50000800 	.word	0x50000800
 8001744:	50000400 	.word	0x50000400

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800174c:	46c0      	nop			@ (mov r8, r8)
 800174e:	e7fd      	b.n	800174c <NMI_Handler+0x4>

08001750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001754:	46c0      	nop			@ (mov r8, r8)
 8001756:	e7fd      	b.n	8001754 <HardFault_Handler+0x4>

08001758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175c:	46c0      	nop			@ (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001770:	f001 fa5a 	bl	8002c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001774:	46c0      	nop			@ (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001780:	4b03      	ldr	r3, [pc, #12]	@ (8001790 <SystemInit+0x14>)
 8001782:	2280      	movs	r2, #128	@ 0x80
 8001784:	0512      	lsls	r2, r2, #20
 8001786:	609a      	str	r2, [r3, #8]
#endif
}
 8001788:	46c0      	nop			@ (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <writeReg>:

//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af04      	add	r7, sp, #16
 800179a:	0002      	movs	r2, r0
 800179c:	1dfb      	adds	r3, r7, #7
 800179e:	701a      	strb	r2, [r3, #0]
 80017a0:	1dbb      	adds	r3, r7, #6
 80017a2:	1c0a      	adds	r2, r1, #0
 80017a4:	701a      	strb	r2, [r3, #0]

  msgBuffer[0] = value; // Assign the value to the buffer.
 80017a6:	4b17      	ldr	r3, [pc, #92]	@ (8001804 <writeReg+0x70>)
 80017a8:	1dba      	adds	r2, r7, #6
 80017aa:	7812      	ldrb	r2, [r2, #0]
 80017ac:	701a      	strb	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 80017ae:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <writeReg+0x74>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	0019      	movs	r1, r3
 80017b4:	1dfb      	adds	r3, r7, #7
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	4814      	ldr	r0, [pc, #80]	@ (800180c <writeReg+0x78>)
 80017bc:	2364      	movs	r3, #100	@ 0x64
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	2301      	movs	r3, #1
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <writeReg+0x70>)
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	f002 fafb 	bl	8003dc4 <HAL_I2C_Mem_Write>
 80017ce:	0003      	movs	r3, r0
 80017d0:	001a      	movs	r2, r3
 80017d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <writeReg+0x7c>)
 80017d4:	701a      	strb	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write_DMA(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 1);
 80017d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <writeReg+0x74>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	0019      	movs	r1, r3
 80017dc:	1dfb      	adds	r3, r7, #7
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	480a      	ldr	r0, [pc, #40]	@ (800180c <writeReg+0x78>)
 80017e4:	2301      	movs	r3, #1
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <writeReg+0x70>)
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2301      	movs	r3, #1
 80017ee:	f002 fd4b 	bl	8004288 <HAL_I2C_Mem_Write_DMA>
 80017f2:	0003      	movs	r3, r0
 80017f4:	001a      	movs	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <writeReg+0x7c>)
 80017f8:	701a      	strb	r2, [r3, #0]
}
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b002      	add	sp, #8
 8001800:	bd80      	pop	{r7, pc}
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	200001d8 	.word	0x200001d8
 8001808:	20000004 	.word	0x20000004
 800180c:	20000184 	.word	0x20000184
 8001810:	200001dc 	.word	0x200001dc

08001814 <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af04      	add	r7, sp, #16
 800181a:	0002      	movs	r2, r0
 800181c:	1dfb      	adds	r3, r7, #7
 800181e:	701a      	strb	r2, [r3, #0]
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	1c0a      	adds	r2, r1, #0
 8001824:	801a      	strh	r2, [r3, #0]

  memcpy(msgBuffer, &value, 2); // Assign the value to the buffer.
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	881a      	ldrh	r2, [r3, #0]
 800182a:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <writeReg16Bit+0x4c>)
 800182c:	801a      	strh	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 800182e:	4b0d      	ldr	r3, [pc, #52]	@ (8001864 <writeReg16Bit+0x50>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	0019      	movs	r1, r3
 8001834:	1dfb      	adds	r3, r7, #7
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b29a      	uxth	r2, r3
 800183a:	480b      	ldr	r0, [pc, #44]	@ (8001868 <writeReg16Bit+0x54>)
 800183c:	2364      	movs	r3, #100	@ 0x64
 800183e:	9302      	str	r3, [sp, #8]
 8001840:	2302      	movs	r3, #2
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <writeReg16Bit+0x4c>)
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2301      	movs	r3, #1
 800184a:	f002 fabb 	bl	8003dc4 <HAL_I2C_Mem_Write>
 800184e:	0003      	movs	r3, r0
 8001850:	001a      	movs	r2, r3
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <writeReg16Bit+0x58>)
 8001854:	701a      	strb	r2, [r3, #0]
}
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	46bd      	mov	sp, r7
 800185a:	b002      	add	sp, #8
 800185c:	bd80      	pop	{r7, pc}
 800185e:	46c0      	nop			@ (mov r8, r8)
 8001860:	200001d8 	.word	0x200001d8
 8001864:	20000004 	.word	0x20000004
 8001868:	20000184 	.word	0x20000184
 800186c:	200001dc 	.word	0x200001dc

08001870 <readReg>:
  memcpy(msgBuffer, &value, 4); // Assign the value to the buffer.
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 4, I2C_TIMEOUT);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af04      	add	r7, sp, #16
 8001876:	0002      	movs	r2, r0
 8001878:	1dfb      	adds	r3, r7, #7
 800187a:	701a      	strb	r2, [r3, #0]
  uint8_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 800187c:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <readReg+0x50>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2201      	movs	r2, #1
 8001882:	4313      	orrs	r3, r2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	0019      	movs	r1, r3
 8001888:	1dfb      	adds	r3, r7, #7
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b29a      	uxth	r2, r3
 800188e:	480d      	ldr	r0, [pc, #52]	@ (80018c4 <readReg+0x54>)
 8001890:	2364      	movs	r3, #100	@ 0x64
 8001892:	9302      	str	r3, [sp, #8]
 8001894:	2301      	movs	r3, #1
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <readReg+0x58>)
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2301      	movs	r3, #1
 800189e:	f002 fbbf 	bl	8004020 <HAL_I2C_Mem_Read>
 80018a2:	0003      	movs	r3, r0
 80018a4:	001a      	movs	r2, r3
 80018a6:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <readReg+0x5c>)
 80018a8:	701a      	strb	r2, [r3, #0]
  value = msgBuffer[0];
 80018aa:	210f      	movs	r1, #15
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	4a06      	ldr	r2, [pc, #24]	@ (80018c8 <readReg+0x58>)
 80018b0:	7812      	ldrb	r2, [r2, #0]
 80018b2:	701a      	strb	r2, [r3, #0]

  return value;
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	781b      	ldrb	r3, [r3, #0]
}
 80018b8:	0018      	movs	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b004      	add	sp, #16
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000004 	.word	0x20000004
 80018c4:	20000184 	.word	0x20000184
 80018c8:	200001d8 	.word	0x200001d8
 80018cc:	200001dc 	.word	0x200001dc

080018d0 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af04      	add	r7, sp, #16
 80018d6:	0002      	movs	r2, r0
 80018d8:	1dfb      	adds	r3, r7, #7
 80018da:	701a      	strb	r2, [r3, #0]
  uint16_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 80018dc:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <readReg16Bit+0x50>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2201      	movs	r2, #1
 80018e2:	4313      	orrs	r3, r2
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	0019      	movs	r1, r3
 80018e8:	1dfb      	adds	r3, r7, #7
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	480d      	ldr	r0, [pc, #52]	@ (8001924 <readReg16Bit+0x54>)
 80018f0:	2364      	movs	r3, #100	@ 0x64
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	2302      	movs	r3, #2
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <readReg16Bit+0x58>)
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2301      	movs	r3, #1
 80018fe:	f002 fb8f 	bl	8004020 <HAL_I2C_Mem_Read>
 8001902:	0003      	movs	r3, r0
 8001904:	001a      	movs	r2, r3
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <readReg16Bit+0x5c>)
 8001908:	701a      	strb	r2, [r3, #0]
  memcpy(&value, msgBuffer, 2);
 800190a:	4b07      	ldr	r3, [pc, #28]	@ (8001928 <readReg16Bit+0x58>)
 800190c:	881a      	ldrh	r2, [r3, #0]
 800190e:	210e      	movs	r1, #14
 8001910:	187b      	adds	r3, r7, r1
 8001912:	801a      	strh	r2, [r3, #0]

  return value;
 8001914:	187b      	adds	r3, r7, r1
 8001916:	881b      	ldrh	r3, [r3, #0]
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b004      	add	sp, #16
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000004 	.word	0x20000004
 8001924:	20000184 	.word	0x20000184
 8001928:	200001d8 	.word	0x200001d8
 800192c:	200001dc 	.word	0x200001dc

08001930 <writeMulti>:
  return value;
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void writeMulti(uint8_t reg, uint8_t const *src, uint8_t count){
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b087      	sub	sp, #28
 8001934:	af04      	add	r7, sp, #16
 8001936:	6039      	str	r1, [r7, #0]
 8001938:	0011      	movs	r1, r2
 800193a:	1dfb      	adds	r3, r7, #7
 800193c:	1c02      	adds	r2, r0, #0
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	1dbb      	adds	r3, r7, #6
 8001942:	1c0a      	adds	r2, r1, #0
 8001944:	701a      	strb	r2, [r3, #0]

  memcpy(msgBuffer, src, 4);
 8001946:	4a11      	ldr	r2, [pc, #68]	@ (800198c <writeMulti+0x5c>)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	0010      	movs	r0, r2
 800194c:	0019      	movs	r1, r3
 800194e:	2304      	movs	r3, #4
 8001950:	001a      	movs	r2, r3
 8001952:	f005 fe63 	bl	800761c <memcpy>
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, count, I2C_TIMEOUT);
 8001956:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <writeMulti+0x60>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	001c      	movs	r4, r3
 800195c:	1dfb      	adds	r3, r7, #7
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b29a      	uxth	r2, r3
 8001962:	1dbb      	adds	r3, r7, #6
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	480a      	ldr	r0, [pc, #40]	@ (8001994 <writeMulti+0x64>)
 800196a:	2164      	movs	r1, #100	@ 0x64
 800196c:	9102      	str	r1, [sp, #8]
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <writeMulti+0x5c>)
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2301      	movs	r3, #1
 8001976:	0021      	movs	r1, r4
 8001978:	f002 fa24 	bl	8003dc4 <HAL_I2C_Mem_Write>
 800197c:	0003      	movs	r3, r0
 800197e:	001a      	movs	r2, r3
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <writeMulti+0x68>)
 8001982:	701a      	strb	r2, [r3, #0]
}
 8001984:	46c0      	nop			@ (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	b003      	add	sp, #12
 800198a:	bd90      	pop	{r4, r7, pc}
 800198c:	200001d8 	.word	0x200001d8
 8001990:	20000004 	.word	0x20000004
 8001994:	20000184 	.word	0x20000184
 8001998:	200001dc 	.word	0x200001dc

0800199c <readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(uint8_t reg, uint8_t * dst, uint8_t count) {
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b087      	sub	sp, #28
 80019a0:	af04      	add	r7, sp, #16
 80019a2:	6039      	str	r1, [r7, #0]
 80019a4:	0011      	movs	r1, r2
 80019a6:	1dfb      	adds	r3, r7, #7
 80019a8:	1c02      	adds	r2, r0, #0
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	1dbb      	adds	r3, r7, #6
 80019ae:	1c0a      	adds	r2, r1, #0
 80019b0:	701a      	strb	r2, [r3, #0]

	i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, dst, count, I2C_TIMEOUT);
 80019b2:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <readMulti+0x54>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2201      	movs	r2, #1
 80019b8:	4313      	orrs	r3, r2
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	001c      	movs	r4, r3
 80019be:	1dfb      	adds	r3, r7, #7
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	1dbb      	adds	r3, r7, #6
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	480a      	ldr	r0, [pc, #40]	@ (80019f4 <readMulti+0x58>)
 80019cc:	2164      	movs	r1, #100	@ 0x64
 80019ce:	9102      	str	r1, [sp, #8]
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2301      	movs	r3, #1
 80019d8:	0021      	movs	r1, r4
 80019da:	f002 fb21 	bl	8004020 <HAL_I2C_Mem_Read>
 80019de:	0003      	movs	r3, r0
 80019e0:	001a      	movs	r2, r3
 80019e2:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <readMulti+0x5c>)
 80019e4:	701a      	strb	r2, [r3, #0]
}
 80019e6:	46c0      	nop			@ (mov r8, r8)
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b003      	add	sp, #12
 80019ec:	bd90      	pop	{r4, r7, pc}
 80019ee:	46c0      	nop			@ (mov r8, r8)
 80019f0:	20000004 	.word	0x20000004
 80019f4:	20000184 	.word	0x20000184
 80019f8:	200001dc 	.word	0x200001dc

080019fc <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is HAL_OK or not given, the sensor is configured for 2V8
// mode.
uint8_t initVL53L0X(uint8_t io_2v8, I2C_HandleTypeDef *handler){
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	0002      	movs	r2, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	1dfb      	adds	r3, r7, #7
 8001a08:	701a      	strb	r2, [r3, #0]
  // VL53L0X_DataInit() begin

  // Handler
  memcpy(&VL53L0X_I2C_Handler, handler, sizeof(*handler));
 8001a0a:	6839      	ldr	r1, [r7, #0]
 8001a0c:	4b5f      	ldr	r3, [pc, #380]	@ (8001b8c <initVL53L0X+0x190>)
 8001a0e:	2254      	movs	r2, #84	@ 0x54
 8001a10:	0018      	movs	r0, r3
 8001a12:	f005 fe03 	bl	800761c <memcpy>

  // Reset the message buffer.
  msgBuffer[0] = 0;
 8001a16:	4b5e      	ldr	r3, [pc, #376]	@ (8001b90 <initVL53L0X+0x194>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
  msgBuffer[1] = 0;
 8001a1c:	4b5c      	ldr	r3, [pc, #368]	@ (8001b90 <initVL53L0X+0x194>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	705a      	strb	r2, [r3, #1]
  msgBuffer[2] = 0;
 8001a22:	4b5b      	ldr	r3, [pc, #364]	@ (8001b90 <initVL53L0X+0x194>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	709a      	strb	r2, [r3, #2]
  msgBuffer[3] = 0;
 8001a28:	4b59      	ldr	r3, [pc, #356]	@ (8001b90 <initVL53L0X+0x194>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	70da      	strb	r2, [r3, #3]

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 8001a2e:	1dfb      	adds	r3, r7, #7
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00b      	beq.n	8001a4e <initVL53L0X+0x52>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8001a36:	2089      	movs	r0, #137	@ 0x89
 8001a38:	f7ff ff1a 	bl	8001870 <readReg>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	001a      	movs	r2, r3
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8001a40:	2301      	movs	r3, #1
 8001a42:	4313      	orrs	r3, r2
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	0019      	movs	r1, r3
 8001a48:	2089      	movs	r0, #137	@ 0x89
 8001a4a:	f7ff fea3 	bl	8001794 <writeReg>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 8001a4e:	2100      	movs	r1, #0
 8001a50:	2088      	movs	r0, #136	@ 0x88
 8001a52:	f7ff fe9f 	bl	8001794 <writeReg>

  writeReg(0x80, 0x01);
 8001a56:	2101      	movs	r1, #1
 8001a58:	2080      	movs	r0, #128	@ 0x80
 8001a5a:	f7ff fe9b 	bl	8001794 <writeReg>
  writeReg(0xFF, 0x01);
 8001a5e:	2101      	movs	r1, #1
 8001a60:	20ff      	movs	r0, #255	@ 0xff
 8001a62:	f7ff fe97 	bl	8001794 <writeReg>
  writeReg(0x00, 0x00);
 8001a66:	2100      	movs	r1, #0
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff fe93 	bl	8001794 <writeReg>
  g_stopVariable = readReg(0x91);
 8001a6e:	2091      	movs	r0, #145	@ 0x91
 8001a70:	f7ff fefe 	bl	8001870 <readReg>
 8001a74:	0003      	movs	r3, r0
 8001a76:	001a      	movs	r2, r3
 8001a78:	4b46      	ldr	r3, [pc, #280]	@ (8001b94 <initVL53L0X+0x198>)
 8001a7a:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff fe88 	bl	8001794 <writeReg>
  writeReg(0xFF, 0x00);
 8001a84:	2100      	movs	r1, #0
 8001a86:	20ff      	movs	r0, #255	@ 0xff
 8001a88:	f7ff fe84 	bl	8001794 <writeReg>
  writeReg(0x80, 0x00);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2080      	movs	r0, #128	@ 0x80
 8001a90:	f7ff fe80 	bl	8001794 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 8001a94:	2060      	movs	r0, #96	@ 0x60
 8001a96:	f7ff feeb 	bl	8001870 <readReg>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	2312      	movs	r3, #18
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	2060      	movs	r0, #96	@ 0x60
 8001aa8:	f7ff fe74 	bl	8001794 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 8001aac:	23fa      	movs	r3, #250	@ 0xfa
 8001aae:	059b      	lsls	r3, r3, #22
 8001ab0:	1c18      	adds	r0, r3, #0
 8001ab2:	f000 fa21 	bl	8001ef8 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8001ab6:	21ff      	movs	r1, #255	@ 0xff
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f7ff fe6b 	bl	8001794 <writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  uint8_t spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return HAL_ERROR; }
 8001abe:	2313      	movs	r3, #19
 8001ac0:	18fa      	adds	r2, r7, r3
 8001ac2:	2314      	movs	r3, #20
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	0011      	movs	r1, r2
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f000 fdff 	bl	80026cc <getSpadInfo>
 8001ace:	1e03      	subs	r3, r0, #0
 8001ad0:	d101      	bne.n	8001ad6 <initVL53L0X+0xda>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e209      	b.n	8001eea <initVL53L0X+0x4ee>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8001ad6:	230c      	movs	r3, #12
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	2206      	movs	r2, #6
 8001adc:	0019      	movs	r1, r3
 8001ade:	20b0      	movs	r0, #176	@ 0xb0
 8001ae0:	f7ff ff5c 	bl	800199c <readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	20ff      	movs	r0, #255	@ 0xff
 8001ae8:	f7ff fe54 	bl	8001794 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8001aec:	2100      	movs	r1, #0
 8001aee:	204f      	movs	r0, #79	@ 0x4f
 8001af0:	f7ff fe50 	bl	8001794 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8001af4:	212c      	movs	r1, #44	@ 0x2c
 8001af6:	204e      	movs	r0, #78	@ 0x4e
 8001af8:	f7ff fe4c 	bl	8001794 <writeReg>
  writeReg(0xFF, 0x00);
 8001afc:	2100      	movs	r1, #0
 8001afe:	20ff      	movs	r0, #255	@ 0xff
 8001b00:	f7ff fe48 	bl	8001794 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8001b04:	21b4      	movs	r1, #180	@ 0xb4
 8001b06:	20b6      	movs	r0, #182	@ 0xb6
 8001b08:	f7ff fe44 	bl	8001794 <writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8001b0c:	2313      	movs	r3, #19
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <initVL53L0X+0x11e>
 8001b16:	220c      	movs	r2, #12
 8001b18:	e000      	b.n	8001b1c <initVL53L0X+0x120>
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2315      	movs	r3, #21
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	701a      	strb	r2, [r3, #0]
  uint8_t spads_enabled = 0;
 8001b22:	2317      	movs	r3, #23
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < 48; i++)
 8001b2a:	2316      	movs	r3, #22
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	e050      	b.n	8001bd6 <initVL53L0X+0x1da>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 8001b34:	2316      	movs	r3, #22
 8001b36:	18fa      	adds	r2, r7, r3
 8001b38:	2315      	movs	r3, #21
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	7812      	ldrb	r2, [r2, #0]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d307      	bcc.n	8001b54 <initVL53L0X+0x158>
 8001b44:	2314      	movs	r3, #20
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2217      	movs	r2, #23
 8001b4c:	18ba      	adds	r2, r7, r2
 8001b4e:	7812      	ldrb	r2, [r2, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d121      	bne.n	8001b98 <initVL53L0X+0x19c>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8001b54:	2116      	movs	r1, #22
 8001b56:	187b      	adds	r3, r7, r1
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	08db      	lsrs	r3, r3, #3
 8001b5c:	b2d8      	uxtb	r0, r3
 8001b5e:	0002      	movs	r2, r0
 8001b60:	240c      	movs	r4, #12
 8001b62:	193b      	adds	r3, r7, r4
 8001b64:	5c9b      	ldrb	r3, [r3, r2]
 8001b66:	b25b      	sxtb	r3, r3
 8001b68:	187a      	adds	r2, r7, r1
 8001b6a:	7812      	ldrb	r2, [r2, #0]
 8001b6c:	2107      	movs	r1, #7
 8001b6e:	400a      	ands	r2, r1
 8001b70:	2101      	movs	r1, #1
 8001b72:	4091      	lsls	r1, r2
 8001b74:	000a      	movs	r2, r1
 8001b76:	b252      	sxtb	r2, r2
 8001b78:	43d2      	mvns	r2, r2
 8001b7a:	b252      	sxtb	r2, r2
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	b25b      	sxtb	r3, r3
 8001b80:	0002      	movs	r2, r0
 8001b82:	b2d9      	uxtb	r1, r3
 8001b84:	193b      	adds	r3, r7, r4
 8001b86:	5499      	strb	r1, [r3, r2]
 8001b88:	e01f      	b.n	8001bca <initVL53L0X+0x1ce>
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	20000184 	.word	0x20000184
 8001b90:	200001d8 	.word	0x200001d8
 8001b94:	2000017e 	.word	0x2000017e
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8001b98:	2016      	movs	r0, #22
 8001b9a:	183b      	adds	r3, r7, r0
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	08db      	lsrs	r3, r3, #3
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	230c      	movs	r3, #12
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	5c9b      	ldrb	r3, [r3, r2]
 8001baa:	0019      	movs	r1, r3
 8001bac:	183b      	adds	r3, r7, r0
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	4119      	asrs	r1, r3
 8001bb6:	000b      	movs	r3, r1
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d005      	beq.n	8001bca <initVL53L0X+0x1ce>
    {
      spads_enabled++;
 8001bbe:	2117      	movs	r1, #23
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	781a      	ldrb	r2, [r3, #0]
 8001bc4:	187b      	adds	r3, r7, r1
 8001bc6:	3201      	adds	r2, #1
 8001bc8:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < 48; i++)
 8001bca:	2116      	movs	r1, #22
 8001bcc:	187b      	adds	r3, r7, r1
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	187b      	adds	r3, r7, r1
 8001bd2:	3201      	adds	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	2316      	movs	r3, #22
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b2f      	cmp	r3, #47	@ 0x2f
 8001bde:	d9a9      	bls.n	8001b34 <initVL53L0X+0x138>
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8001be0:	230c      	movs	r3, #12
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	2206      	movs	r2, #6
 8001be6:	0019      	movs	r1, r3
 8001be8:	20b0      	movs	r0, #176	@ 0xb0
 8001bea:	f7ff fea1 	bl	8001930 <writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 8001bee:	2101      	movs	r1, #1
 8001bf0:	20ff      	movs	r0, #255	@ 0xff
 8001bf2:	f7ff fdcf 	bl	8001794 <writeReg>
  writeReg(0x00, 0x00);
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f7ff fdcb 	bl	8001794 <writeReg>

  writeReg(0xFF, 0x00);
 8001bfe:	2100      	movs	r1, #0
 8001c00:	20ff      	movs	r0, #255	@ 0xff
 8001c02:	f7ff fdc7 	bl	8001794 <writeReg>
  writeReg(0x09, 0x00);
 8001c06:	2100      	movs	r1, #0
 8001c08:	2009      	movs	r0, #9
 8001c0a:	f7ff fdc3 	bl	8001794 <writeReg>
  writeReg(0x10, 0x00);
 8001c0e:	2100      	movs	r1, #0
 8001c10:	2010      	movs	r0, #16
 8001c12:	f7ff fdbf 	bl	8001794 <writeReg>
  writeReg(0x11, 0x00);
 8001c16:	2100      	movs	r1, #0
 8001c18:	2011      	movs	r0, #17
 8001c1a:	f7ff fdbb 	bl	8001794 <writeReg>

  writeReg(0x24, 0x01);
 8001c1e:	2101      	movs	r1, #1
 8001c20:	2024      	movs	r0, #36	@ 0x24
 8001c22:	f7ff fdb7 	bl	8001794 <writeReg>
  writeReg(0x25, 0xFF);
 8001c26:	21ff      	movs	r1, #255	@ 0xff
 8001c28:	2025      	movs	r0, #37	@ 0x25
 8001c2a:	f7ff fdb3 	bl	8001794 <writeReg>
  writeReg(0x75, 0x00);
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2075      	movs	r0, #117	@ 0x75
 8001c32:	f7ff fdaf 	bl	8001794 <writeReg>

  writeReg(0xFF, 0x01);
 8001c36:	2101      	movs	r1, #1
 8001c38:	20ff      	movs	r0, #255	@ 0xff
 8001c3a:	f7ff fdab 	bl	8001794 <writeReg>
  writeReg(0x4E, 0x2C);
 8001c3e:	212c      	movs	r1, #44	@ 0x2c
 8001c40:	204e      	movs	r0, #78	@ 0x4e
 8001c42:	f7ff fda7 	bl	8001794 <writeReg>
  writeReg(0x48, 0x00);
 8001c46:	2100      	movs	r1, #0
 8001c48:	2048      	movs	r0, #72	@ 0x48
 8001c4a:	f7ff fda3 	bl	8001794 <writeReg>
  writeReg(0x30, 0x20);
 8001c4e:	2120      	movs	r1, #32
 8001c50:	2030      	movs	r0, #48	@ 0x30
 8001c52:	f7ff fd9f 	bl	8001794 <writeReg>

  writeReg(0xFF, 0x00);
 8001c56:	2100      	movs	r1, #0
 8001c58:	20ff      	movs	r0, #255	@ 0xff
 8001c5a:	f7ff fd9b 	bl	8001794 <writeReg>
  writeReg(0x30, 0x09);
 8001c5e:	2109      	movs	r1, #9
 8001c60:	2030      	movs	r0, #48	@ 0x30
 8001c62:	f7ff fd97 	bl	8001794 <writeReg>
  writeReg(0x54, 0x00);
 8001c66:	2100      	movs	r1, #0
 8001c68:	2054      	movs	r0, #84	@ 0x54
 8001c6a:	f7ff fd93 	bl	8001794 <writeReg>
  writeReg(0x31, 0x04);
 8001c6e:	2104      	movs	r1, #4
 8001c70:	2031      	movs	r0, #49	@ 0x31
 8001c72:	f7ff fd8f 	bl	8001794 <writeReg>
  writeReg(0x32, 0x03);
 8001c76:	2103      	movs	r1, #3
 8001c78:	2032      	movs	r0, #50	@ 0x32
 8001c7a:	f7ff fd8b 	bl	8001794 <writeReg>
  writeReg(0x40, 0x83);
 8001c7e:	2183      	movs	r1, #131	@ 0x83
 8001c80:	2040      	movs	r0, #64	@ 0x40
 8001c82:	f7ff fd87 	bl	8001794 <writeReg>
  writeReg(0x46, 0x25);
 8001c86:	2125      	movs	r1, #37	@ 0x25
 8001c88:	2046      	movs	r0, #70	@ 0x46
 8001c8a:	f7ff fd83 	bl	8001794 <writeReg>
  writeReg(0x60, 0x00);
 8001c8e:	2100      	movs	r1, #0
 8001c90:	2060      	movs	r0, #96	@ 0x60
 8001c92:	f7ff fd7f 	bl	8001794 <writeReg>
  writeReg(0x27, 0x00);
 8001c96:	2100      	movs	r1, #0
 8001c98:	2027      	movs	r0, #39	@ 0x27
 8001c9a:	f7ff fd7b 	bl	8001794 <writeReg>
  writeReg(0x50, 0x06);
 8001c9e:	2106      	movs	r1, #6
 8001ca0:	2050      	movs	r0, #80	@ 0x50
 8001ca2:	f7ff fd77 	bl	8001794 <writeReg>
  writeReg(0x51, 0x00);
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	2051      	movs	r0, #81	@ 0x51
 8001caa:	f7ff fd73 	bl	8001794 <writeReg>
  writeReg(0x52, 0x96);
 8001cae:	2196      	movs	r1, #150	@ 0x96
 8001cb0:	2052      	movs	r0, #82	@ 0x52
 8001cb2:	f7ff fd6f 	bl	8001794 <writeReg>
  writeReg(0x56, 0x08);
 8001cb6:	2108      	movs	r1, #8
 8001cb8:	2056      	movs	r0, #86	@ 0x56
 8001cba:	f7ff fd6b 	bl	8001794 <writeReg>
  writeReg(0x57, 0x30);
 8001cbe:	2130      	movs	r1, #48	@ 0x30
 8001cc0:	2057      	movs	r0, #87	@ 0x57
 8001cc2:	f7ff fd67 	bl	8001794 <writeReg>
  writeReg(0x61, 0x00);
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2061      	movs	r0, #97	@ 0x61
 8001cca:	f7ff fd63 	bl	8001794 <writeReg>
  writeReg(0x62, 0x00);
 8001cce:	2100      	movs	r1, #0
 8001cd0:	2062      	movs	r0, #98	@ 0x62
 8001cd2:	f7ff fd5f 	bl	8001794 <writeReg>
  writeReg(0x64, 0x00);
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2064      	movs	r0, #100	@ 0x64
 8001cda:	f7ff fd5b 	bl	8001794 <writeReg>
  writeReg(0x65, 0x00);
 8001cde:	2100      	movs	r1, #0
 8001ce0:	2065      	movs	r0, #101	@ 0x65
 8001ce2:	f7ff fd57 	bl	8001794 <writeReg>
  writeReg(0x66, 0xA0);
 8001ce6:	21a0      	movs	r1, #160	@ 0xa0
 8001ce8:	2066      	movs	r0, #102	@ 0x66
 8001cea:	f7ff fd53 	bl	8001794 <writeReg>

  writeReg(0xFF, 0x01);
 8001cee:	2101      	movs	r1, #1
 8001cf0:	20ff      	movs	r0, #255	@ 0xff
 8001cf2:	f7ff fd4f 	bl	8001794 <writeReg>
  writeReg(0x22, 0x32);
 8001cf6:	2132      	movs	r1, #50	@ 0x32
 8001cf8:	2022      	movs	r0, #34	@ 0x22
 8001cfa:	f7ff fd4b 	bl	8001794 <writeReg>
  writeReg(0x47, 0x14);
 8001cfe:	2114      	movs	r1, #20
 8001d00:	2047      	movs	r0, #71	@ 0x47
 8001d02:	f7ff fd47 	bl	8001794 <writeReg>
  writeReg(0x49, 0xFF);
 8001d06:	21ff      	movs	r1, #255	@ 0xff
 8001d08:	2049      	movs	r0, #73	@ 0x49
 8001d0a:	f7ff fd43 	bl	8001794 <writeReg>
  writeReg(0x4A, 0x00);
 8001d0e:	2100      	movs	r1, #0
 8001d10:	204a      	movs	r0, #74	@ 0x4a
 8001d12:	f7ff fd3f 	bl	8001794 <writeReg>

  writeReg(0xFF, 0x00);
 8001d16:	2100      	movs	r1, #0
 8001d18:	20ff      	movs	r0, #255	@ 0xff
 8001d1a:	f7ff fd3b 	bl	8001794 <writeReg>
  writeReg(0x7A, 0x0A);
 8001d1e:	210a      	movs	r1, #10
 8001d20:	207a      	movs	r0, #122	@ 0x7a
 8001d22:	f7ff fd37 	bl	8001794 <writeReg>
  writeReg(0x7B, 0x00);
 8001d26:	2100      	movs	r1, #0
 8001d28:	207b      	movs	r0, #123	@ 0x7b
 8001d2a:	f7ff fd33 	bl	8001794 <writeReg>
  writeReg(0x78, 0x21);
 8001d2e:	2121      	movs	r1, #33	@ 0x21
 8001d30:	2078      	movs	r0, #120	@ 0x78
 8001d32:	f7ff fd2f 	bl	8001794 <writeReg>

  writeReg(0xFF, 0x01);
 8001d36:	2101      	movs	r1, #1
 8001d38:	20ff      	movs	r0, #255	@ 0xff
 8001d3a:	f7ff fd2b 	bl	8001794 <writeReg>
  writeReg(0x23, 0x34);
 8001d3e:	2134      	movs	r1, #52	@ 0x34
 8001d40:	2023      	movs	r0, #35	@ 0x23
 8001d42:	f7ff fd27 	bl	8001794 <writeReg>
  writeReg(0x42, 0x00);
 8001d46:	2100      	movs	r1, #0
 8001d48:	2042      	movs	r0, #66	@ 0x42
 8001d4a:	f7ff fd23 	bl	8001794 <writeReg>
  writeReg(0x44, 0xFF);
 8001d4e:	21ff      	movs	r1, #255	@ 0xff
 8001d50:	2044      	movs	r0, #68	@ 0x44
 8001d52:	f7ff fd1f 	bl	8001794 <writeReg>
  writeReg(0x45, 0x26);
 8001d56:	2126      	movs	r1, #38	@ 0x26
 8001d58:	2045      	movs	r0, #69	@ 0x45
 8001d5a:	f7ff fd1b 	bl	8001794 <writeReg>
  writeReg(0x46, 0x05);
 8001d5e:	2105      	movs	r1, #5
 8001d60:	2046      	movs	r0, #70	@ 0x46
 8001d62:	f7ff fd17 	bl	8001794 <writeReg>
  writeReg(0x40, 0x40);
 8001d66:	2140      	movs	r1, #64	@ 0x40
 8001d68:	2040      	movs	r0, #64	@ 0x40
 8001d6a:	f7ff fd13 	bl	8001794 <writeReg>
  writeReg(0x0E, 0x06);
 8001d6e:	2106      	movs	r1, #6
 8001d70:	200e      	movs	r0, #14
 8001d72:	f7ff fd0f 	bl	8001794 <writeReg>
  writeReg(0x20, 0x1A);
 8001d76:	211a      	movs	r1, #26
 8001d78:	2020      	movs	r0, #32
 8001d7a:	f7ff fd0b 	bl	8001794 <writeReg>
  writeReg(0x43, 0x40);
 8001d7e:	2140      	movs	r1, #64	@ 0x40
 8001d80:	2043      	movs	r0, #67	@ 0x43
 8001d82:	f7ff fd07 	bl	8001794 <writeReg>

  writeReg(0xFF, 0x00);
 8001d86:	2100      	movs	r1, #0
 8001d88:	20ff      	movs	r0, #255	@ 0xff
 8001d8a:	f7ff fd03 	bl	8001794 <writeReg>
  writeReg(0x34, 0x03);
 8001d8e:	2103      	movs	r1, #3
 8001d90:	2034      	movs	r0, #52	@ 0x34
 8001d92:	f7ff fcff 	bl	8001794 <writeReg>
  writeReg(0x35, 0x44);
 8001d96:	2144      	movs	r1, #68	@ 0x44
 8001d98:	2035      	movs	r0, #53	@ 0x35
 8001d9a:	f7ff fcfb 	bl	8001794 <writeReg>

  writeReg(0xFF, 0x01);
 8001d9e:	2101      	movs	r1, #1
 8001da0:	20ff      	movs	r0, #255	@ 0xff
 8001da2:	f7ff fcf7 	bl	8001794 <writeReg>
  writeReg(0x31, 0x04);
 8001da6:	2104      	movs	r1, #4
 8001da8:	2031      	movs	r0, #49	@ 0x31
 8001daa:	f7ff fcf3 	bl	8001794 <writeReg>
  writeReg(0x4B, 0x09);
 8001dae:	2109      	movs	r1, #9
 8001db0:	204b      	movs	r0, #75	@ 0x4b
 8001db2:	f7ff fcef 	bl	8001794 <writeReg>
  writeReg(0x4C, 0x05);
 8001db6:	2105      	movs	r1, #5
 8001db8:	204c      	movs	r0, #76	@ 0x4c
 8001dba:	f7ff fceb 	bl	8001794 <writeReg>
  writeReg(0x4D, 0x04);
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	204d      	movs	r0, #77	@ 0x4d
 8001dc2:	f7ff fce7 	bl	8001794 <writeReg>

  writeReg(0xFF, 0x00);
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	20ff      	movs	r0, #255	@ 0xff
 8001dca:	f7ff fce3 	bl	8001794 <writeReg>
  writeReg(0x44, 0x00);
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2044      	movs	r0, #68	@ 0x44
 8001dd2:	f7ff fcdf 	bl	8001794 <writeReg>
  writeReg(0x45, 0x20);
 8001dd6:	2120      	movs	r1, #32
 8001dd8:	2045      	movs	r0, #69	@ 0x45
 8001dda:	f7ff fcdb 	bl	8001794 <writeReg>
  writeReg(0x47, 0x08);
 8001dde:	2108      	movs	r1, #8
 8001de0:	2047      	movs	r0, #71	@ 0x47
 8001de2:	f7ff fcd7 	bl	8001794 <writeReg>
  writeReg(0x48, 0x28);
 8001de6:	2128      	movs	r1, #40	@ 0x28
 8001de8:	2048      	movs	r0, #72	@ 0x48
 8001dea:	f7ff fcd3 	bl	8001794 <writeReg>
  writeReg(0x67, 0x00);
 8001dee:	2100      	movs	r1, #0
 8001df0:	2067      	movs	r0, #103	@ 0x67
 8001df2:	f7ff fccf 	bl	8001794 <writeReg>
  writeReg(0x70, 0x04);
 8001df6:	2104      	movs	r1, #4
 8001df8:	2070      	movs	r0, #112	@ 0x70
 8001dfa:	f7ff fccb 	bl	8001794 <writeReg>
  writeReg(0x71, 0x01);
 8001dfe:	2101      	movs	r1, #1
 8001e00:	2071      	movs	r0, #113	@ 0x71
 8001e02:	f7ff fcc7 	bl	8001794 <writeReg>
  writeReg(0x72, 0xFE);
 8001e06:	21fe      	movs	r1, #254	@ 0xfe
 8001e08:	2072      	movs	r0, #114	@ 0x72
 8001e0a:	f7ff fcc3 	bl	8001794 <writeReg>
  writeReg(0x76, 0x00);
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2076      	movs	r0, #118	@ 0x76
 8001e12:	f7ff fcbf 	bl	8001794 <writeReg>
  writeReg(0x77, 0x00);
 8001e16:	2100      	movs	r1, #0
 8001e18:	2077      	movs	r0, #119	@ 0x77
 8001e1a:	f7ff fcbb 	bl	8001794 <writeReg>

  writeReg(0xFF, 0x01);
 8001e1e:	2101      	movs	r1, #1
 8001e20:	20ff      	movs	r0, #255	@ 0xff
 8001e22:	f7ff fcb7 	bl	8001794 <writeReg>
  writeReg(0x0D, 0x01);
 8001e26:	2101      	movs	r1, #1
 8001e28:	200d      	movs	r0, #13
 8001e2a:	f7ff fcb3 	bl	8001794 <writeReg>

  writeReg(0xFF, 0x00);
 8001e2e:	2100      	movs	r1, #0
 8001e30:	20ff      	movs	r0, #255	@ 0xff
 8001e32:	f7ff fcaf 	bl	8001794 <writeReg>
  writeReg(0x80, 0x01);
 8001e36:	2101      	movs	r1, #1
 8001e38:	2080      	movs	r0, #128	@ 0x80
 8001e3a:	f7ff fcab 	bl	8001794 <writeReg>
  writeReg(0x01, 0xF8);
 8001e3e:	21f8      	movs	r1, #248	@ 0xf8
 8001e40:	2001      	movs	r0, #1
 8001e42:	f7ff fca7 	bl	8001794 <writeReg>

  writeReg(0xFF, 0x01);
 8001e46:	2101      	movs	r1, #1
 8001e48:	20ff      	movs	r0, #255	@ 0xff
 8001e4a:	f7ff fca3 	bl	8001794 <writeReg>
  writeReg(0x8E, 0x01);
 8001e4e:	2101      	movs	r1, #1
 8001e50:	208e      	movs	r0, #142	@ 0x8e
 8001e52:	f7ff fc9f 	bl	8001794 <writeReg>
  writeReg(0x00, 0x01);
 8001e56:	2101      	movs	r1, #1
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7ff fc9b 	bl	8001794 <writeReg>
  writeReg(0xFF, 0x00);
 8001e5e:	2100      	movs	r1, #0
 8001e60:	20ff      	movs	r0, #255	@ 0xff
 8001e62:	f7ff fc97 	bl	8001794 <writeReg>
  writeReg(0x80, 0x00);
 8001e66:	2100      	movs	r1, #0
 8001e68:	2080      	movs	r0, #128	@ 0x80
 8001e6a:	f7ff fc93 	bl	8001794 <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8001e6e:	2104      	movs	r1, #4
 8001e70:	200a      	movs	r0, #10
 8001e72:	f7ff fc8f 	bl	8001794 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8001e76:	2084      	movs	r0, #132	@ 0x84
 8001e78:	f7ff fcfa 	bl	8001870 <readReg>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	001a      	movs	r2, r3
 8001e80:	2310      	movs	r3, #16
 8001e82:	439a      	bics	r2, r3
 8001e84:	0013      	movs	r3, r2
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	0019      	movs	r1, r3
 8001e8a:	2084      	movs	r0, #132	@ 0x84
 8001e8c:	f7ff fc82 	bl	8001794 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001e90:	2101      	movs	r1, #1
 8001e92:	200b      	movs	r0, #11
 8001e94:	f7ff fc7e 	bl	8001794 <writeReg>

  // -- VL53L0X_SetGpioConfig() end

  g_measTimBudUs = getMeasurementTimingBudget();
 8001e98:	f000 f924 	bl	80020e4 <getMeasurementTimingBudget>
 8001e9c:	0002      	movs	r2, r0
 8001e9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <initVL53L0X+0x4f8>)
 8001ea0:	601a      	str	r2, [r3, #0]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001ea2:	21e8      	movs	r1, #232	@ 0xe8
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	f7ff fc75 	bl	8001794 <writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(g_measTimBudUs);
 8001eaa:	4b12      	ldr	r3, [pc, #72]	@ (8001ef4 <initVL53L0X+0x4f8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f000 f850 	bl	8001f54 <setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f7ff fc6c 	bl	8001794 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return HAL_ERROR; }
 8001ebc:	2040      	movs	r0, #64	@ 0x40
 8001ebe:	f000 fde7 	bl	8002a90 <performSingleRefCalibration>
 8001ec2:	1e03      	subs	r3, r0, #0
 8001ec4:	d101      	bne.n	8001eca <initVL53L0X+0x4ce>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00f      	b.n	8001eea <initVL53L0X+0x4ee>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001eca:	2102      	movs	r1, #2
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f7ff fc61 	bl	8001794 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return HAL_ERROR; }
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f000 fddc 	bl	8002a90 <performSingleRefCalibration>
 8001ed8:	1e03      	subs	r3, r0, #0
 8001eda:	d101      	bne.n	8001ee0 <initVL53L0X+0x4e4>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e004      	b.n	8001eea <initVL53L0X+0x4ee>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001ee0:	21e8      	movs	r1, #232	@ 0xe8
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	f7ff fc56 	bl	8001794 <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b007      	add	sp, #28
 8001ef0:	bd90      	pop	{r4, r7, pc}
 8001ef2:	46c0      	nop			@ (mov r8, r8)
 8001ef4:	20000180 	.word	0x20000180

08001ef8 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
uint8_t setSignalRateLimit(float limit_Mcps)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return HAL_ERROR; }
 8001f00:	2100      	movs	r1, #0
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7fe fac6 	bl	8000494 <__aeabi_fcmplt>
 8001f08:	1e03      	subs	r3, r0, #0
 8001f0a:	d108      	bne.n	8001f1e <setSignalRateLimit+0x26>
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7fe fff3 	bl	8000ef8 <__aeabi_f2d>
 8001f12:	4a0e      	ldr	r2, [pc, #56]	@ (8001f4c <setSignalRateLimit+0x54>)
 8001f14:	4b0e      	ldr	r3, [pc, #56]	@ (8001f50 <setSignalRateLimit+0x58>)
 8001f16:	f7fe fa97 	bl	8000448 <__aeabi_dcmpgt>
 8001f1a:	1e03      	subs	r3, r0, #0
 8001f1c:	d001      	beq.n	8001f22 <setSignalRateLimit+0x2a>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00f      	b.n	8001f42 <setSignalRateLimit+0x4a>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8001f22:	2186      	movs	r1, #134	@ 0x86
 8001f24:	05c9      	lsls	r1, r1, #23
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7fe fbba 	bl	80006a0 <__aeabi_fmul>
 8001f2c:	1c03      	adds	r3, r0, #0
 8001f2e:	1c18      	adds	r0, r3, #0
 8001f30:	f7fe fad8 	bl	80004e4 <__aeabi_f2uiz>
 8001f34:	0003      	movs	r3, r0
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	0019      	movs	r1, r3
 8001f3a:	2044      	movs	r0, #68	@ 0x44
 8001f3c:	f7ff fc6a 	bl	8001814 <writeReg16Bit>
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	0018      	movs	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b002      	add	sp, #8
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			@ (mov r8, r8)
 8001f4c:	0a3d70a4 	.word	0x0a3d70a4
 8001f50:	407fffd7 	.word	0x407fffd7

08001f54 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
uint8_t setMeasurementTimingBudget(uint32_t budget_us)
{
 8001f54:	b5b0      	push	{r4, r5, r7, lr}
 8001f56:	b092      	sub	sp, #72	@ 0x48
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8001f5c:	2340      	movs	r3, #64	@ 0x40
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	22a5      	movs	r2, #165	@ 0xa5
 8001f62:	00d2      	lsls	r2, r2, #3
 8001f64:	801a      	strh	r2, [r3, #0]
  uint16_t const EndOverhead        = 960;
 8001f66:	233e      	movs	r3, #62	@ 0x3e
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	22f0      	movs	r2, #240	@ 0xf0
 8001f6c:	0092      	lsls	r2, r2, #2
 8001f6e:	801a      	strh	r2, [r3, #0]
  uint16_t const MsrcOverhead       = 660;
 8001f70:	233c      	movs	r3, #60	@ 0x3c
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	22a5      	movs	r2, #165	@ 0xa5
 8001f76:	0092      	lsls	r2, r2, #2
 8001f78:	801a      	strh	r2, [r3, #0]
  uint16_t const TccOverhead        = 590;
 8001f7a:	233a      	movs	r3, #58	@ 0x3a
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	4a54      	ldr	r2, [pc, #336]	@ (80020d0 <setMeasurementTimingBudget+0x17c>)
 8001f80:	801a      	strh	r2, [r3, #0]
  uint16_t const DssOverhead        = 690;
 8001f82:	2338      	movs	r3, #56	@ 0x38
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	4a53      	ldr	r2, [pc, #332]	@ (80020d4 <setMeasurementTimingBudget+0x180>)
 8001f88:	801a      	strh	r2, [r3, #0]
  uint16_t const PreRangeOverhead   = 660;
 8001f8a:	2336      	movs	r3, #54	@ 0x36
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	22a5      	movs	r2, #165	@ 0xa5
 8001f90:	0092      	lsls	r2, r2, #2
 8001f92:	801a      	strh	r2, [r3, #0]
  uint16_t const FinalRangeOverhead = 550;
 8001f94:	2334      	movs	r3, #52	@ 0x34
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	4a4f      	ldr	r2, [pc, #316]	@ (80020d8 <setMeasurementTimingBudget+0x184>)
 8001f9a:	801a      	strh	r2, [r3, #0]

  uint32_t const MinTimingBudget = 20000;
 8001f9c:	4b4f      	ldr	r3, [pc, #316]	@ (80020dc <setMeasurementTimingBudget+0x188>)
 8001f9e:	633b      	str	r3, [r7, #48]	@ 0x30

  if (budget_us < MinTimingBudget) { return HAL_ERROR; }
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d201      	bcs.n	8001fac <setMeasurementTimingBudget+0x58>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e08c      	b.n	80020c6 <setMeasurementTimingBudget+0x172>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 8001fac:	2340      	movs	r3, #64	@ 0x40
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	881a      	ldrh	r2, [r3, #0]
 8001fb2:	233e      	movs	r3, #62	@ 0x3e
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	18d3      	adds	r3, r2, r3
 8001fba:	647b      	str	r3, [r7, #68]	@ 0x44

  getSequenceStepEnables(&enables);
 8001fbc:	2424      	movs	r4, #36	@ 0x24
 8001fbe:	193b      	adds	r3, r7, r4
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f000 fc1d 	bl	8002800 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 8001fc6:	250c      	movs	r5, #12
 8001fc8:	197a      	adds	r2, r7, r5
 8001fca:	193b      	adds	r3, r7, r4
 8001fcc:	0011      	movs	r1, r2
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f000 fc50 	bl	8002874 <getSequenceStepTimeouts>

  if (enables.tcc)
 8001fd4:	193b      	adds	r3, r7, r4
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <setMeasurementTimingBudget+0x9a>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001fdc:	197b      	adds	r3, r7, r5
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	233a      	movs	r3, #58	@ 0x3a
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	18d3      	adds	r3, r2, r3
 8001fe8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001fea:	18d3      	adds	r3, r2, r3
 8001fec:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.dss)
 8001fee:	2324      	movs	r3, #36	@ 0x24
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	789b      	ldrb	r3, [r3, #2]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00b      	beq.n	8002010 <setMeasurementTimingBudget+0xbc>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001ff8:	230c      	movs	r3, #12
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	2338      	movs	r3, #56	@ 0x38
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	18d3      	adds	r3, r2, r3
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800200a:	18d3      	adds	r3, r2, r3
 800200c:	647b      	str	r3, [r7, #68]	@ 0x44
 800200e:	e00e      	b.n	800202e <setMeasurementTimingBudget+0xda>
  }
  else if (enables.msrc)
 8002010:	2324      	movs	r3, #36	@ 0x24
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	785b      	ldrb	r3, [r3, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <setMeasurementTimingBudget+0xda>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 800201a:	230c      	movs	r3, #12
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	233c      	movs	r3, #60	@ 0x3c
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	18d3      	adds	r3, r2, r3
 8002028:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800202a:	18d3      	adds	r3, r2, r3
 800202c:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.pre_range)
 800202e:	2324      	movs	r3, #36	@ 0x24
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	78db      	ldrb	r3, [r3, #3]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d009      	beq.n	800204c <setMeasurementTimingBudget+0xf8>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002038:	230c      	movs	r3, #12
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	2336      	movs	r3, #54	@ 0x36
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	18d3      	adds	r3, r2, r3
 8002046:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002048:	18d3      	adds	r3, r2, r3
 800204a:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.final_range)
 800204c:	2324      	movs	r3, #36	@ 0x24
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	791b      	ldrb	r3, [r3, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d036      	beq.n	80020c4 <setMeasurementTimingBudget+0x170>
  {
    used_budget_us += FinalRangeOverhead;
 8002056:	2334      	movs	r3, #52	@ 0x34
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800205e:	18d3      	adds	r3, r2, r3
 8002060:	647b      	str	r3, [r7, #68]	@ 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8002062:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	429a      	cmp	r2, r3
 8002068:	d901      	bls.n	800206e <setMeasurementTimingBudget+0x11a>
    {
      // "Requested timeout too big."
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e02b      	b.n	80020c6 <setMeasurementTimingBudget+0x172>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	62fb      	str	r3, [r7, #44]	@ 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 8002076:	240c      	movs	r4, #12
 8002078:	193b      	adds	r3, r7, r4
 800207a:	885b      	ldrh	r3, [r3, #2]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 800207c:	b2da      	uxtb	r2, r3
 800207e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002080:	0011      	movs	r1, r2
 8002082:	0018      	movs	r0, r3
 8002084:	f000 fcd3 	bl	8002a2e <timeoutMicrosecondsToMclks>
 8002088:	0002      	movs	r2, r0
    uint16_t final_range_timeout_mclks =
 800208a:	2042      	movs	r0, #66	@ 0x42
 800208c:	183b      	adds	r3, r7, r0
 800208e:	801a      	strh	r2, [r3, #0]

    if (enables.pre_range)
 8002090:	2324      	movs	r3, #36	@ 0x24
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	78db      	ldrb	r3, [r3, #3]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d006      	beq.n	80020a8 <setMeasurementTimingBudget+0x154>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 800209a:	193b      	adds	r3, r7, r4
 800209c:	88d9      	ldrh	r1, [r3, #6]
 800209e:	183b      	adds	r3, r7, r0
 80020a0:	183a      	adds	r2, r7, r0
 80020a2:	8812      	ldrh	r2, [r2, #0]
 80020a4:	188a      	adds	r2, r1, r2
 80020a6:	801a      	strh	r2, [r3, #0]
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80020a8:	2342      	movs	r3, #66	@ 0x42
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	0018      	movs	r0, r3
 80020b0:	f000 fc5b 	bl	800296a <encodeTimeout>
 80020b4:	0003      	movs	r3, r0
 80020b6:	0019      	movs	r1, r3
 80020b8:	2071      	movs	r0, #113	@ 0x71
 80020ba:	f7ff fbab 	bl	8001814 <writeReg16Bit>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    g_measTimBudUs = budget_us; // store for internal reuse
 80020be:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <setMeasurementTimingBudget+0x18c>)
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b012      	add	sp, #72	@ 0x48
 80020cc:	bdb0      	pop	{r4, r5, r7, pc}
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	0000024e 	.word	0x0000024e
 80020d4:	000002b2 	.word	0x000002b2
 80020d8:	00000226 	.word	0x00000226
 80020dc:	00004e20 	.word	0x00004e20
 80020e0:	20000180 	.word	0x20000180

080020e4 <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(void)
{
 80020e4:	b5b0      	push	{r4, r5, r7, lr}
 80020e6:	b08c      	sub	sp, #48	@ 0x30
 80020e8:	af00      	add	r7, sp, #0
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 80020ea:	212a      	movs	r1, #42	@ 0x2a
 80020ec:	187b      	adds	r3, r7, r1
 80020ee:	4a3e      	ldr	r2, [pc, #248]	@ (80021e8 <getMeasurementTimingBudget+0x104>)
 80020f0:	801a      	strh	r2, [r3, #0]
  uint16_t const EndOverhead        = 960;
 80020f2:	2028      	movs	r0, #40	@ 0x28
 80020f4:	183b      	adds	r3, r7, r0
 80020f6:	22f0      	movs	r2, #240	@ 0xf0
 80020f8:	0092      	lsls	r2, r2, #2
 80020fa:	801a      	strh	r2, [r3, #0]
  uint16_t const MsrcOverhead       = 660;
 80020fc:	2326      	movs	r3, #38	@ 0x26
 80020fe:	18fb      	adds	r3, r7, r3
 8002100:	22a5      	movs	r2, #165	@ 0xa5
 8002102:	0092      	lsls	r2, r2, #2
 8002104:	801a      	strh	r2, [r3, #0]
  uint16_t const TccOverhead        = 590;
 8002106:	2524      	movs	r5, #36	@ 0x24
 8002108:	197b      	adds	r3, r7, r5
 800210a:	4a38      	ldr	r2, [pc, #224]	@ (80021ec <getMeasurementTimingBudget+0x108>)
 800210c:	801a      	strh	r2, [r3, #0]
  uint16_t const DssOverhead        = 690;
 800210e:	2322      	movs	r3, #34	@ 0x22
 8002110:	18fb      	adds	r3, r7, r3
 8002112:	4a37      	ldr	r2, [pc, #220]	@ (80021f0 <getMeasurementTimingBudget+0x10c>)
 8002114:	801a      	strh	r2, [r3, #0]
  uint16_t const PreRangeOverhead   = 660;
 8002116:	2320      	movs	r3, #32
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	22a5      	movs	r2, #165	@ 0xa5
 800211c:	0092      	lsls	r2, r2, #2
 800211e:	801a      	strh	r2, [r3, #0]
  uint16_t const FinalRangeOverhead = 550;
 8002120:	231e      	movs	r3, #30
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	4a33      	ldr	r2, [pc, #204]	@ (80021f4 <getMeasurementTimingBudget+0x110>)
 8002126:	801a      	strh	r2, [r3, #0]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8002128:	187b      	adds	r3, r7, r1
 800212a:	881a      	ldrh	r2, [r3, #0]
 800212c:	183b      	adds	r3, r7, r0
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	18d3      	adds	r3, r2, r3
 8002132:	62fb      	str	r3, [r7, #44]	@ 0x2c

  getSequenceStepEnables(&enables);
 8002134:	2418      	movs	r4, #24
 8002136:	193b      	adds	r3, r7, r4
 8002138:	0018      	movs	r0, r3
 800213a:	f000 fb61 	bl	8002800 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 800213e:	003a      	movs	r2, r7
 8002140:	193b      	adds	r3, r7, r4
 8002142:	0011      	movs	r1, r2
 8002144:	0018      	movs	r0, r3
 8002146:	f000 fb95 	bl	8002874 <getSequenceStepTimeouts>

  if (enables.tcc)
 800214a:	193b      	adds	r3, r7, r4
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d007      	beq.n	8002162 <getMeasurementTimingBudget+0x7e>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002152:	003b      	movs	r3, r7
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	197b      	adds	r3, r7, r5
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	18d3      	adds	r3, r2, r3
 800215c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800215e:	18d3      	adds	r3, r2, r3
 8002160:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.dss)
 8002162:	2318      	movs	r3, #24
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	789b      	ldrb	r3, [r3, #2]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <getMeasurementTimingBudget+0x9e>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800216c:	003b      	movs	r3, r7
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	2322      	movs	r3, #34	@ 0x22
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	18d3      	adds	r3, r2, r3
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800217c:	18d3      	adds	r3, r2, r3
 800217e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002180:	e00d      	b.n	800219e <getMeasurementTimingBudget+0xba>
  }
  else if (enables.msrc)
 8002182:	2318      	movs	r3, #24
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	785b      	ldrb	r3, [r3, #1]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <getMeasurementTimingBudget+0xba>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 800218c:	003b      	movs	r3, r7
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	2326      	movs	r3, #38	@ 0x26
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	18d3      	adds	r3, r2, r3
 8002198:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800219a:	18d3      	adds	r3, r2, r3
 800219c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.pre_range)
 800219e:	2318      	movs	r3, #24
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	78db      	ldrb	r3, [r3, #3]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <getMeasurementTimingBudget+0xd6>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80021a8:	003b      	movs	r3, r7
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	2320      	movs	r3, #32
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	18d3      	adds	r3, r2, r3
 80021b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021b6:	18d3      	adds	r3, r2, r3
 80021b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.final_range)
 80021ba:	2318      	movs	r3, #24
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	791b      	ldrb	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <getMeasurementTimingBudget+0xf2>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80021c4:	003b      	movs	r3, r7
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	231e      	movs	r3, #30
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	18d3      	adds	r3, r2, r3
 80021d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021d2:	18d3      	adds	r3, r2, r3
 80021d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  g_measTimBudUs = budget_us; // store for internal reuse
 80021d6:	4b08      	ldr	r3, [pc, #32]	@ (80021f8 <getMeasurementTimingBudget+0x114>)
 80021d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021da:	601a      	str	r2, [r3, #0]
  return budget_us;
 80021dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b00c      	add	sp, #48	@ 0x30
 80021e4:	bdb0      	pop	{r4, r5, r7, pc}
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	00000776 	.word	0x00000776
 80021ec:	0000024e 	.word	0x0000024e
 80021f0:	000002b2 	.word	0x000002b2
 80021f4:	00000226 	.word	0x00000226
 80021f8:	20000180 	.word	0x20000180

080021fc <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
uint8_t setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 80021fc:	b5b0      	push	{r4, r5, r7, lr}
 80021fe:	b08c      	sub	sp, #48	@ 0x30
 8002200:	af00      	add	r7, sp, #0
 8002202:	0002      	movs	r2, r0
 8002204:	1dfb      	adds	r3, r7, #7
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	1dbb      	adds	r3, r7, #6
 800220a:	1c0a      	adds	r2, r1, #0
 800220c:	701a      	strb	r2, [r3, #0]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 800220e:	1dbb      	adds	r3, r7, #6
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	085b      	lsrs	r3, r3, #1
 8002214:	b2da      	uxtb	r2, r3
 8002216:	232d      	movs	r3, #45	@ 0x2d
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	3a01      	subs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]

  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  getSequenceStepEnables(&enables);
 800221e:	2420      	movs	r4, #32
 8002220:	193b      	adds	r3, r7, r4
 8002222:	0018      	movs	r0, r3
 8002224:	f000 faec 	bl	8002800 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 8002228:	2308      	movs	r3, #8
 800222a:	18fa      	adds	r2, r7, r3
 800222c:	193b      	adds	r3, r7, r4
 800222e:	0011      	movs	r1, r2
 8002230:	0018      	movs	r0, r3
 8002232:	f000 fb1f 	bl	8002874 <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8002236:	1dfb      	adds	r3, r7, #7
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d162      	bne.n	8002304 <setVcselPulsePeriod+0x108>
  {
    // "Set phase check limits"
    switch (period_pclks)
 800223e:	1dbb      	adds	r3, r7, #6
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b12      	cmp	r3, #18
 8002244:	d017      	beq.n	8002276 <setVcselPulsePeriod+0x7a>
 8002246:	dc1b      	bgt.n	8002280 <setVcselPulsePeriod+0x84>
 8002248:	2b10      	cmp	r3, #16
 800224a:	d00f      	beq.n	800226c <setVcselPulsePeriod+0x70>
 800224c:	dc18      	bgt.n	8002280 <setVcselPulsePeriod+0x84>
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d002      	beq.n	8002258 <setVcselPulsePeriod+0x5c>
 8002252:	2b0e      	cmp	r3, #14
 8002254:	d005      	beq.n	8002262 <setVcselPulsePeriod+0x66>
 8002256:	e013      	b.n	8002280 <setVcselPulsePeriod+0x84>
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 8002258:	2118      	movs	r1, #24
 800225a:	2057      	movs	r0, #87	@ 0x57
 800225c:	f7ff fa9a 	bl	8001794 <writeReg>
        break;
 8002260:	e010      	b.n	8002284 <setVcselPulsePeriod+0x88>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 8002262:	2130      	movs	r1, #48	@ 0x30
 8002264:	2057      	movs	r0, #87	@ 0x57
 8002266:	f7ff fa95 	bl	8001794 <writeReg>
        break;
 800226a:	e00b      	b.n	8002284 <setVcselPulsePeriod+0x88>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 800226c:	2140      	movs	r1, #64	@ 0x40
 800226e:	2057      	movs	r0, #87	@ 0x57
 8002270:	f7ff fa90 	bl	8001794 <writeReg>
        break;
 8002274:	e006      	b.n	8002284 <setVcselPulsePeriod+0x88>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8002276:	2150      	movs	r1, #80	@ 0x50
 8002278:	2057      	movs	r0, #87	@ 0x57
 800227a:	f7ff fa8b 	bl	8001794 <writeReg>
        break;
 800227e:	e001      	b.n	8002284 <setVcselPulsePeriod+0x88>

      default:
        // invalid period
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e111      	b.n	80024a8 <setVcselPulsePeriod+0x2ac>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 8002284:	2108      	movs	r1, #8
 8002286:	2056      	movs	r0, #86	@ 0x56
 8002288:	f7ff fa84 	bl	8001794 <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 800228c:	232d      	movs	r3, #45	@ 0x2d
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	0019      	movs	r1, r3
 8002294:	2050      	movs	r0, #80	@ 0x50
 8002296:	f7ff fa7d 	bl	8001794 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 800229a:	2408      	movs	r4, #8
 800229c:	193b      	adds	r3, r7, r4
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	1dbb      	adds	r3, r7, #6
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	0019      	movs	r1, r3
 80022a6:	0010      	movs	r0, r2
 80022a8:	f000 fbc1 	bl	8002a2e <timeoutMicrosecondsToMclks>
 80022ac:	0002      	movs	r2, r0
    uint16_t new_pre_range_timeout_mclks =
 80022ae:	212a      	movs	r1, #42	@ 0x2a
 80022b0:	187b      	adds	r3, r7, r1
 80022b2:	801a      	strh	r2, [r3, #0]

    writeReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80022b4:	187b      	adds	r3, r7, r1
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f000 fb56 	bl	800296a <encodeTimeout>
 80022be:	0003      	movs	r3, r0
 80022c0:	0019      	movs	r1, r3
 80022c2:	2051      	movs	r0, #81	@ 0x51
 80022c4:	f7ff faa6 	bl	8001814 <writeReg16Bit>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 80022c8:	193b      	adds	r3, r7, r4
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	1dbb      	adds	r3, r7, #6
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	0019      	movs	r1, r3
 80022d2:	0010      	movs	r0, r2
 80022d4:	f000 fbab 	bl	8002a2e <timeoutMicrosecondsToMclks>
 80022d8:	0002      	movs	r2, r0
    uint16_t new_msrc_timeout_mclks =
 80022da:	2128      	movs	r1, #40	@ 0x28
 80022dc:	187b      	adds	r3, r7, r1
 80022de:	801a      	strh	r2, [r3, #0]

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 80022e0:	187b      	adds	r3, r7, r1
 80022e2:	881a      	ldrh	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d805      	bhi.n	80022f8 <setVcselPulsePeriod+0xfc>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 80022ec:	187b      	adds	r3, r7, r1
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	e000      	b.n	80022fa <setVcselPulsePeriod+0xfe>
 80022f8:	23ff      	movs	r3, #255	@ 0xff
 80022fa:	0019      	movs	r1, r3
 80022fc:	2046      	movs	r0, #70	@ 0x46
 80022fe:	f7ff fa49 	bl	8001794 <writeReg>
 8002302:	e0b7      	b.n	8002474 <setVcselPulsePeriod+0x278>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8002304:	1dfb      	adds	r3, r7, #7
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d000      	beq.n	800230e <setVcselPulsePeriod+0x112>
 800230c:	e0b0      	b.n	8002470 <setVcselPulsePeriod+0x274>
  {
    switch (period_pclks)
 800230e:	1dbb      	adds	r3, r7, #6
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b0e      	cmp	r3, #14
 8002314:	d061      	beq.n	80023da <setVcselPulsePeriod+0x1de>
 8002316:	dd00      	ble.n	800231a <setVcselPulsePeriod+0x11e>
 8002318:	e07c      	b.n	8002414 <setVcselPulsePeriod+0x218>
 800231a:	2b0c      	cmp	r3, #12
 800231c:	d040      	beq.n	80023a0 <setVcselPulsePeriod+0x1a4>
 800231e:	dd00      	ble.n	8002322 <setVcselPulsePeriod+0x126>
 8002320:	e078      	b.n	8002414 <setVcselPulsePeriod+0x218>
 8002322:	2b08      	cmp	r3, #8
 8002324:	d002      	beq.n	800232c <setVcselPulsePeriod+0x130>
 8002326:	2b0a      	cmp	r3, #10
 8002328:	d01d      	beq.n	8002366 <setVcselPulsePeriod+0x16a>
 800232a:	e073      	b.n	8002414 <setVcselPulsePeriod+0x218>
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 800232c:	2110      	movs	r1, #16
 800232e:	2048      	movs	r0, #72	@ 0x48
 8002330:	f7ff fa30 	bl	8001794 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8002334:	2108      	movs	r1, #8
 8002336:	2047      	movs	r0, #71	@ 0x47
 8002338:	f7ff fa2c 	bl	8001794 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 800233c:	2102      	movs	r1, #2
 800233e:	2032      	movs	r0, #50	@ 0x32
 8002340:	f7ff fa28 	bl	8001794 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 8002344:	210c      	movs	r1, #12
 8002346:	2030      	movs	r0, #48	@ 0x30
 8002348:	f7ff fa24 	bl	8001794 <writeReg>
        writeReg(0xFF, 0x01);
 800234c:	2101      	movs	r1, #1
 800234e:	20ff      	movs	r0, #255	@ 0xff
 8002350:	f7ff fa20 	bl	8001794 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 8002354:	2130      	movs	r1, #48	@ 0x30
 8002356:	2030      	movs	r0, #48	@ 0x30
 8002358:	f7ff fa1c 	bl	8001794 <writeReg>
        writeReg(0xFF, 0x00);
 800235c:	2100      	movs	r1, #0
 800235e:	20ff      	movs	r0, #255	@ 0xff
 8002360:	f7ff fa18 	bl	8001794 <writeReg>
        break;
 8002364:	e058      	b.n	8002418 <setVcselPulsePeriod+0x21c>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 8002366:	2128      	movs	r1, #40	@ 0x28
 8002368:	2048      	movs	r0, #72	@ 0x48
 800236a:	f7ff fa13 	bl	8001794 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800236e:	2108      	movs	r1, #8
 8002370:	2047      	movs	r0, #71	@ 0x47
 8002372:	f7ff fa0f 	bl	8001794 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8002376:	2103      	movs	r1, #3
 8002378:	2032      	movs	r0, #50	@ 0x32
 800237a:	f7ff fa0b 	bl	8001794 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 800237e:	2109      	movs	r1, #9
 8002380:	2030      	movs	r0, #48	@ 0x30
 8002382:	f7ff fa07 	bl	8001794 <writeReg>
        writeReg(0xFF, 0x01);
 8002386:	2101      	movs	r1, #1
 8002388:	20ff      	movs	r0, #255	@ 0xff
 800238a:	f7ff fa03 	bl	8001794 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 800238e:	2120      	movs	r1, #32
 8002390:	2030      	movs	r0, #48	@ 0x30
 8002392:	f7ff f9ff 	bl	8001794 <writeReg>
        writeReg(0xFF, 0x00);
 8002396:	2100      	movs	r1, #0
 8002398:	20ff      	movs	r0, #255	@ 0xff
 800239a:	f7ff f9fb 	bl	8001794 <writeReg>
        break;
 800239e:	e03b      	b.n	8002418 <setVcselPulsePeriod+0x21c>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 80023a0:	2138      	movs	r1, #56	@ 0x38
 80023a2:	2048      	movs	r0, #72	@ 0x48
 80023a4:	f7ff f9f6 	bl	8001794 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80023a8:	2108      	movs	r1, #8
 80023aa:	2047      	movs	r0, #71	@ 0x47
 80023ac:	f7ff f9f2 	bl	8001794 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80023b0:	2103      	movs	r1, #3
 80023b2:	2032      	movs	r0, #50	@ 0x32
 80023b4:	f7ff f9ee 	bl	8001794 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 80023b8:	2108      	movs	r1, #8
 80023ba:	2030      	movs	r0, #48	@ 0x30
 80023bc:	f7ff f9ea 	bl	8001794 <writeReg>
        writeReg(0xFF, 0x01);
 80023c0:	2101      	movs	r1, #1
 80023c2:	20ff      	movs	r0, #255	@ 0xff
 80023c4:	f7ff f9e6 	bl	8001794 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 80023c8:	2120      	movs	r1, #32
 80023ca:	2030      	movs	r0, #48	@ 0x30
 80023cc:	f7ff f9e2 	bl	8001794 <writeReg>
        writeReg(0xFF, 0x00);
 80023d0:	2100      	movs	r1, #0
 80023d2:	20ff      	movs	r0, #255	@ 0xff
 80023d4:	f7ff f9de 	bl	8001794 <writeReg>
        break;
 80023d8:	e01e      	b.n	8002418 <setVcselPulsePeriod+0x21c>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 80023da:	2148      	movs	r1, #72	@ 0x48
 80023dc:	2048      	movs	r0, #72	@ 0x48
 80023de:	f7ff f9d9 	bl	8001794 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80023e2:	2108      	movs	r1, #8
 80023e4:	2047      	movs	r0, #71	@ 0x47
 80023e6:	f7ff f9d5 	bl	8001794 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80023ea:	2103      	movs	r1, #3
 80023ec:	2032      	movs	r0, #50	@ 0x32
 80023ee:	f7ff f9d1 	bl	8001794 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 80023f2:	2107      	movs	r1, #7
 80023f4:	2030      	movs	r0, #48	@ 0x30
 80023f6:	f7ff f9cd 	bl	8001794 <writeReg>
        writeReg(0xFF, 0x01);
 80023fa:	2101      	movs	r1, #1
 80023fc:	20ff      	movs	r0, #255	@ 0xff
 80023fe:	f7ff f9c9 	bl	8001794 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8002402:	2120      	movs	r1, #32
 8002404:	2030      	movs	r0, #48	@ 0x30
 8002406:	f7ff f9c5 	bl	8001794 <writeReg>
        writeReg(0xFF, 0x00);
 800240a:	2100      	movs	r1, #0
 800240c:	20ff      	movs	r0, #255	@ 0xff
 800240e:	f7ff f9c1 	bl	8001794 <writeReg>
        break;
 8002412:	e001      	b.n	8002418 <setVcselPulsePeriod+0x21c>

      default:
        // invalid period
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e047      	b.n	80024a8 <setVcselPulsePeriod+0x2ac>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8002418:	232d      	movs	r3, #45	@ 0x2d
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	0019      	movs	r1, r3
 8002420:	2070      	movs	r0, #112	@ 0x70
 8002422:	f7ff f9b7 	bl	8001794 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8002426:	2408      	movs	r4, #8
 8002428:	193b      	adds	r3, r7, r4
 800242a:	695a      	ldr	r2, [r3, #20]
 800242c:	1dbb      	adds	r3, r7, #6
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	0019      	movs	r1, r3
 8002432:	0010      	movs	r0, r2
 8002434:	f000 fafb 	bl	8002a2e <timeoutMicrosecondsToMclks>
 8002438:	0002      	movs	r2, r0
    uint16_t new_final_range_timeout_mclks =
 800243a:	202e      	movs	r0, #46	@ 0x2e
 800243c:	183b      	adds	r3, r7, r0
 800243e:	801a      	strh	r2, [r3, #0]

    if (enables.pre_range)
 8002440:	2320      	movs	r3, #32
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	78db      	ldrb	r3, [r3, #3]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d006      	beq.n	8002458 <setVcselPulsePeriod+0x25c>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 800244a:	193b      	adds	r3, r7, r4
 800244c:	88d9      	ldrh	r1, [r3, #6]
 800244e:	183b      	adds	r3, r7, r0
 8002450:	183a      	adds	r2, r7, r0
 8002452:	8812      	ldrh	r2, [r2, #0]
 8002454:	188a      	adds	r2, r1, r2
 8002456:	801a      	strh	r2, [r3, #0]
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8002458:	232e      	movs	r3, #46	@ 0x2e
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	0018      	movs	r0, r3
 8002460:	f000 fa83 	bl	800296a <encodeTimeout>
 8002464:	0003      	movs	r3, r0
 8002466:	0019      	movs	r1, r3
 8002468:	2071      	movs	r0, #113	@ 0x71
 800246a:	f7ff f9d3 	bl	8001814 <writeReg16Bit>
 800246e:	e001      	b.n	8002474 <setVcselPulsePeriod+0x278>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e019      	b.n	80024a8 <setVcselPulsePeriod+0x2ac>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(g_measTimBudUs);
 8002474:	4b0e      	ldr	r3, [pc, #56]	@ (80024b0 <setVcselPulsePeriod+0x2b4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0018      	movs	r0, r3
 800247a:	f7ff fd6b 	bl	8001f54 <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 800247e:	2527      	movs	r5, #39	@ 0x27
 8002480:	197c      	adds	r4, r7, r5
 8002482:	2001      	movs	r0, #1
 8002484:	f7ff f9f4 	bl	8001870 <readReg>
 8002488:	0003      	movs	r3, r0
 800248a:	7023      	strb	r3, [r4, #0]
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 800248c:	2102      	movs	r1, #2
 800248e:	2001      	movs	r0, #1
 8002490:	f7ff f980 	bl	8001794 <writeReg>
  performSingleRefCalibration(0x0);
 8002494:	2000      	movs	r0, #0
 8002496:	f000 fafb 	bl	8002a90 <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 800249a:	197b      	adds	r3, r7, r5
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	0019      	movs	r1, r3
 80024a0:	2001      	movs	r0, #1
 80024a2:	f7ff f977 	bl	8001794 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b00c      	add	sp, #48	@ 0x30
 80024ae:	bdb0      	pop	{r4, r5, r7, pc}
 80024b0:	20000180 	.word	0x20000180

080024b4 <getVcselPulsePeriod>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(vcselPeriodType type)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	0002      	movs	r2, r0
 80024bc:	1dfb      	adds	r3, r7, #7
 80024be:	701a      	strb	r2, [r3, #0]
  if (type == VcselPeriodPreRange)
 80024c0:	1dfb      	adds	r3, r7, #7
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d108      	bne.n	80024da <getVcselPulsePeriod+0x26>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80024c8:	2050      	movs	r0, #80	@ 0x50
 80024ca:	f7ff f9d1 	bl	8001870 <readReg>
 80024ce:	0003      	movs	r3, r0
 80024d0:	3301      	adds	r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	18db      	adds	r3, r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	e00d      	b.n	80024f6 <getVcselPulsePeriod+0x42>
  }
  else if (type == VcselPeriodFinalRange)
 80024da:	1dfb      	adds	r3, r7, #7
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d108      	bne.n	80024f4 <getVcselPulsePeriod+0x40>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80024e2:	2070      	movs	r0, #112	@ 0x70
 80024e4:	f7ff f9c4 	bl	8001870 <readReg>
 80024e8:	0003      	movs	r3, r0
 80024ea:	3301      	adds	r3, #1
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	18db      	adds	r3, r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	e000      	b.n	80024f6 <getVcselPulsePeriod+0x42>
  }
  else { return 255; }
 80024f4:	23ff      	movs	r3, #255	@ 0xff
}
 80024f6:	0018      	movs	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b002      	add	sp, #8
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeContinuousMillimeters( statInfo_t_VL53L0X *extraStats ) {
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint8_t tempBuffer[12];
  uint16_t temp;
  startTimeout();
 8002508:	f000 fba0 	bl	8002c4c <HAL_GetTick>
 800250c:	0003      	movs	r3, r0
 800250e:	b29a      	uxth	r2, r3
 8002510:	4b3b      	ldr	r3, [pc, #236]	@ (8002600 <readRangeContinuousMillimeters+0x100>)
 8002512:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 8002514:	e014      	b.n	8002540 <readRangeContinuousMillimeters+0x40>
    if (checkTimeoutExpired())
 8002516:	4b3b      	ldr	r3, [pc, #236]	@ (8002604 <readRangeContinuousMillimeters+0x104>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d010      	beq.n	8002540 <readRangeContinuousMillimeters+0x40>
 800251e:	f000 fb95 	bl	8002c4c <HAL_GetTick>
 8002522:	0003      	movs	r3, r0
 8002524:	b29b      	uxth	r3, r3
 8002526:	001a      	movs	r2, r3
 8002528:	4b35      	ldr	r3, [pc, #212]	@ (8002600 <readRangeContinuousMillimeters+0x100>)
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	4a35      	ldr	r2, [pc, #212]	@ (8002604 <readRangeContinuousMillimeters+0x104>)
 8002530:	8812      	ldrh	r2, [r2, #0]
 8002532:	4293      	cmp	r3, r2
 8002534:	dd04      	ble.n	8002540 <readRangeContinuousMillimeters+0x40>
    {
      g_isTimeout = HAL_OK;
 8002536:	4b34      	ldr	r3, [pc, #208]	@ (8002608 <readRangeContinuousMillimeters+0x108>)
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
      return 65535;
 800253c:	4b33      	ldr	r3, [pc, #204]	@ (800260c <readRangeContinuousMillimeters+0x10c>)
 800253e:	e05b      	b.n	80025f8 <readRangeContinuousMillimeters+0xf8>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 8002540:	2013      	movs	r0, #19
 8002542:	f7ff f995 	bl	8001870 <readReg>
 8002546:	0003      	movs	r3, r0
 8002548:	001a      	movs	r2, r3
 800254a:	2307      	movs	r3, #7
 800254c:	4013      	ands	r3, r2
 800254e:	d0e2      	beq.n	8002516 <readRangeContinuousMillimeters+0x16>
    }
  }
  if( extraStats == 0 ){
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d107      	bne.n	8002566 <readRangeContinuousMillimeters+0x66>
    // assumptions: Linearity Corrective Gain is 1000 (default);
    // fractional ranging is not enabled
    temp = readReg16Bit(RESULT_RANGE_STATUS + 10);
 8002556:	2316      	movs	r3, #22
 8002558:	18fc      	adds	r4, r7, r3
 800255a:	201e      	movs	r0, #30
 800255c:	f7ff f9b8 	bl	80018d0 <readReg16Bit>
 8002560:	0003      	movs	r3, r0
 8002562:	8023      	strh	r3, [r4, #0]
 8002564:	e041      	b.n	80025ea <readRangeContinuousMillimeters+0xea>
    //   4: 0 ?
    //   5: ???
    // 6,7: signal count rate [mcps], uint16_t, fixpoint9.7
    // 9,8: AmbientRateRtnMegaCps  [mcps], uint16_t, fixpoimt9.7
    // A,B: uncorrected distance [mm], uint16_t
    readMulti(0x14, tempBuffer, 12);
 8002566:	2408      	movs	r4, #8
 8002568:	193b      	adds	r3, r7, r4
 800256a:	220c      	movs	r2, #12
 800256c:	0019      	movs	r1, r3
 800256e:	2014      	movs	r0, #20
 8002570:	f7ff fa14 	bl	800199c <readMulti>
    extraStats->rangeStatus =  tempBuffer[0x00]>>3;
 8002574:	0021      	movs	r1, r4
 8002576:	187b      	adds	r3, r7, r1
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	08db      	lsrs	r3, r3, #3
 800257c:	b2da      	uxtb	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	721a      	strb	r2, [r3, #8]
    extraStats->spadCnt     = (tempBuffer[0x02]<<8) | tempBuffer[0x03];
 8002582:	187b      	adds	r3, r7, r1
 8002584:	789b      	ldrb	r3, [r3, #2]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	b21a      	sxth	r2, r3
 800258a:	187b      	adds	r3, r7, r1
 800258c:	78db      	ldrb	r3, [r3, #3]
 800258e:	b21b      	sxth	r3, r3
 8002590:	4313      	orrs	r3, r2
 8002592:	b21b      	sxth	r3, r3
 8002594:	b29a      	uxth	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	80da      	strh	r2, [r3, #6]
    extraStats->signalCnt   = (tempBuffer[0x06]<<8) | tempBuffer[0x07];
 800259a:	187b      	adds	r3, r7, r1
 800259c:	799b      	ldrb	r3, [r3, #6]
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	b21a      	sxth	r2, r3
 80025a2:	187b      	adds	r3, r7, r1
 80025a4:	79db      	ldrb	r3, [r3, #7]
 80025a6:	b21b      	sxth	r3, r3
 80025a8:	4313      	orrs	r3, r2
 80025aa:	b21b      	sxth	r3, r3
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	805a      	strh	r2, [r3, #2]
    extraStats->ambientCnt  = (tempBuffer[0x08]<<8) | tempBuffer[0x09];
 80025b2:	187b      	adds	r3, r7, r1
 80025b4:	7a1b      	ldrb	r3, [r3, #8]
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	b21a      	sxth	r2, r3
 80025ba:	187b      	adds	r3, r7, r1
 80025bc:	7a5b      	ldrb	r3, [r3, #9]
 80025be:	b21b      	sxth	r3, r3
 80025c0:	4313      	orrs	r3, r2
 80025c2:	b21b      	sxth	r3, r3
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	809a      	strh	r2, [r3, #4]
    temp                    = (tempBuffer[0x0A]<<8) | tempBuffer[0x0B];
 80025ca:	187b      	adds	r3, r7, r1
 80025cc:	7a9b      	ldrb	r3, [r3, #10]
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	b21a      	sxth	r2, r3
 80025d2:	187b      	adds	r3, r7, r1
 80025d4:	7adb      	ldrb	r3, [r3, #11]
 80025d6:	b21b      	sxth	r3, r3
 80025d8:	4313      	orrs	r3, r2
 80025da:	b21a      	sxth	r2, r3
 80025dc:	2116      	movs	r1, #22
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	801a      	strh	r2, [r3, #0]
    extraStats->rawDistance = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	187a      	adds	r2, r7, r1
 80025e6:	8812      	ldrh	r2, [r2, #0]
 80025e8:	801a      	strh	r2, [r3, #0]
  }
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80025ea:	2101      	movs	r1, #1
 80025ec:	200b      	movs	r0, #11
 80025ee:	f7ff f8d1 	bl	8001794 <writeReg>
  return temp;
 80025f2:	2316      	movs	r3, #22
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	881b      	ldrh	r3, [r3, #0]
}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b007      	add	sp, #28
 80025fe:	bd90      	pop	{r4, r7, pc}
 8002600:	2000017c 	.word	0x2000017c
 8002604:	20000178 	.word	0x20000178
 8002608:	2000017a 	.word	0x2000017a
 800260c:	0000ffff 	.word	0x0000ffff

08002610 <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeSingleMillimeters( statInfo_t_VL53L0X *extraStats ) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  writeReg(0x80, 0x01);
 8002618:	2101      	movs	r1, #1
 800261a:	2080      	movs	r0, #128	@ 0x80
 800261c:	f7ff f8ba 	bl	8001794 <writeReg>
  writeReg(0xFF, 0x01);
 8002620:	2101      	movs	r1, #1
 8002622:	20ff      	movs	r0, #255	@ 0xff
 8002624:	f7ff f8b6 	bl	8001794 <writeReg>
  writeReg(0x00, 0x00);
 8002628:	2100      	movs	r1, #0
 800262a:	2000      	movs	r0, #0
 800262c:	f7ff f8b2 	bl	8001794 <writeReg>
  writeReg(0x91, g_stopVariable);
 8002630:	4b21      	ldr	r3, [pc, #132]	@ (80026b8 <readRangeSingleMillimeters+0xa8>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	0019      	movs	r1, r3
 8002636:	2091      	movs	r0, #145	@ 0x91
 8002638:	f7ff f8ac 	bl	8001794 <writeReg>
  writeReg(0x00, 0x01);
 800263c:	2101      	movs	r1, #1
 800263e:	2000      	movs	r0, #0
 8002640:	f7ff f8a8 	bl	8001794 <writeReg>
  writeReg(0xFF, 0x00);
 8002644:	2100      	movs	r1, #0
 8002646:	20ff      	movs	r0, #255	@ 0xff
 8002648:	f7ff f8a4 	bl	8001794 <writeReg>
  writeReg(0x80, 0x00);
 800264c:	2100      	movs	r1, #0
 800264e:	2080      	movs	r0, #128	@ 0x80
 8002650:	f7ff f8a0 	bl	8001794 <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 8002654:	2101      	movs	r1, #1
 8002656:	2000      	movs	r0, #0
 8002658:	f7ff f89c 	bl	8001794 <writeReg>
  // "Wait until start bit has been cleared"
  startTimeout();
 800265c:	f000 faf6 	bl	8002c4c <HAL_GetTick>
 8002660:	0003      	movs	r3, r0
 8002662:	b29a      	uxth	r2, r3
 8002664:	4b15      	ldr	r3, [pc, #84]	@ (80026bc <readRangeSingleMillimeters+0xac>)
 8002666:	801a      	strh	r2, [r3, #0]
  while (readReg(SYSRANGE_START) & 0x01){
 8002668:	e014      	b.n	8002694 <readRangeSingleMillimeters+0x84>
    if (checkTimeoutExpired()){
 800266a:	4b15      	ldr	r3, [pc, #84]	@ (80026c0 <readRangeSingleMillimeters+0xb0>)
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d010      	beq.n	8002694 <readRangeSingleMillimeters+0x84>
 8002672:	f000 faeb 	bl	8002c4c <HAL_GetTick>
 8002676:	0003      	movs	r3, r0
 8002678:	b29b      	uxth	r3, r3
 800267a:	001a      	movs	r2, r3
 800267c:	4b0f      	ldr	r3, [pc, #60]	@ (80026bc <readRangeSingleMillimeters+0xac>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	4a0f      	ldr	r2, [pc, #60]	@ (80026c0 <readRangeSingleMillimeters+0xb0>)
 8002684:	8812      	ldrh	r2, [r2, #0]
 8002686:	4293      	cmp	r3, r2
 8002688:	dd04      	ble.n	8002694 <readRangeSingleMillimeters+0x84>
      g_isTimeout = HAL_OK;
 800268a:	4b0e      	ldr	r3, [pc, #56]	@ (80026c4 <readRangeSingleMillimeters+0xb4>)
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
      return 65535;
 8002690:	4b0d      	ldr	r3, [pc, #52]	@ (80026c8 <readRangeSingleMillimeters+0xb8>)
 8002692:	e00c      	b.n	80026ae <readRangeSingleMillimeters+0x9e>
  while (readReg(SYSRANGE_START) & 0x01){
 8002694:	2000      	movs	r0, #0
 8002696:	f7ff f8eb 	bl	8001870 <readReg>
 800269a:	0003      	movs	r3, r0
 800269c:	001a      	movs	r2, r3
 800269e:	2301      	movs	r3, #1
 80026a0:	4013      	ands	r3, r2
 80026a2:	d1e2      	bne.n	800266a <readRangeSingleMillimeters+0x5a>
    }
  }
  return readRangeContinuousMillimeters( extraStats );
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	0018      	movs	r0, r3
 80026a8:	f7ff ff2a 	bl	8002500 <readRangeContinuousMillimeters>
 80026ac:	0003      	movs	r3, r0
}
 80026ae:	0018      	movs	r0, r3
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b002      	add	sp, #8
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	46c0      	nop			@ (mov r8, r8)
 80026b8:	2000017e 	.word	0x2000017e
 80026bc:	2000017c 	.word	0x2000017c
 80026c0:	20000178 	.word	0x20000178
 80026c4:	2000017a 	.word	0x2000017a
 80026c8:	0000ffff 	.word	0x0000ffff

080026cc <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
uint8_t getSpadInfo(uint8_t * count, uint8_t * type_is_aperture)
{
 80026cc:	b5b0      	push	{r4, r5, r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80026d6:	2101      	movs	r1, #1
 80026d8:	2080      	movs	r0, #128	@ 0x80
 80026da:	f7ff f85b 	bl	8001794 <writeReg>
  writeReg(0xFF, 0x01);
 80026de:	2101      	movs	r1, #1
 80026e0:	20ff      	movs	r0, #255	@ 0xff
 80026e2:	f7ff f857 	bl	8001794 <writeReg>
  writeReg(0x00, 0x00);
 80026e6:	2100      	movs	r1, #0
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7ff f853 	bl	8001794 <writeReg>

  writeReg(0xFF, 0x06);
 80026ee:	2106      	movs	r1, #6
 80026f0:	20ff      	movs	r0, #255	@ 0xff
 80026f2:	f7ff f84f 	bl	8001794 <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 80026f6:	2083      	movs	r0, #131	@ 0x83
 80026f8:	f7ff f8ba 	bl	8001870 <readReg>
 80026fc:	0003      	movs	r3, r0
 80026fe:	001a      	movs	r2, r3
 8002700:	2304      	movs	r3, #4
 8002702:	4313      	orrs	r3, r2
 8002704:	b2db      	uxtb	r3, r3
 8002706:	0019      	movs	r1, r3
 8002708:	2083      	movs	r0, #131	@ 0x83
 800270a:	f7ff f843 	bl	8001794 <writeReg>
  writeReg(0xFF, 0x07);
 800270e:	2107      	movs	r1, #7
 8002710:	20ff      	movs	r0, #255	@ 0xff
 8002712:	f7ff f83f 	bl	8001794 <writeReg>
  writeReg(0x81, 0x01);
 8002716:	2101      	movs	r1, #1
 8002718:	2081      	movs	r0, #129	@ 0x81
 800271a:	f7ff f83b 	bl	8001794 <writeReg>

  writeReg(0x80, 0x01);
 800271e:	2101      	movs	r1, #1
 8002720:	2080      	movs	r0, #128	@ 0x80
 8002722:	f7ff f837 	bl	8001794 <writeReg>

  writeReg(0x94, 0x6b);
 8002726:	216b      	movs	r1, #107	@ 0x6b
 8002728:	2094      	movs	r0, #148	@ 0x94
 800272a:	f7ff f833 	bl	8001794 <writeReg>
  writeReg(0x83, 0x00);
 800272e:	2100      	movs	r1, #0
 8002730:	2083      	movs	r0, #131	@ 0x83
 8002732:	f7ff f82f 	bl	8001794 <writeReg>
  startTimeout();
 8002736:	f000 fa89 	bl	8002c4c <HAL_GetTick>
 800273a:	0003      	movs	r3, r0
 800273c:	b29a      	uxth	r2, r3
 800273e:	4b2e      	ldr	r3, [pc, #184]	@ (80027f8 <getSpadInfo+0x12c>)
 8002740:	801a      	strh	r2, [r3, #0]
  while (readReg(0x83) == 0x00)
 8002742:	e011      	b.n	8002768 <getSpadInfo+0x9c>
  {
    if (checkTimeoutExpired()) { return HAL_ERROR; }
 8002744:	4b2d      	ldr	r3, [pc, #180]	@ (80027fc <getSpadInfo+0x130>)
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00d      	beq.n	8002768 <getSpadInfo+0x9c>
 800274c:	f000 fa7e 	bl	8002c4c <HAL_GetTick>
 8002750:	0003      	movs	r3, r0
 8002752:	b29b      	uxth	r3, r3
 8002754:	001a      	movs	r2, r3
 8002756:	4b28      	ldr	r3, [pc, #160]	@ (80027f8 <getSpadInfo+0x12c>)
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	4a27      	ldr	r2, [pc, #156]	@ (80027fc <getSpadInfo+0x130>)
 800275e:	8812      	ldrh	r2, [r2, #0]
 8002760:	4293      	cmp	r3, r2
 8002762:	dd01      	ble.n	8002768 <getSpadInfo+0x9c>
 8002764:	2301      	movs	r3, #1
 8002766:	e043      	b.n	80027f0 <getSpadInfo+0x124>
  while (readReg(0x83) == 0x00)
 8002768:	2083      	movs	r0, #131	@ 0x83
 800276a:	f7ff f881 	bl	8001870 <readReg>
 800276e:	1e03      	subs	r3, r0, #0
 8002770:	d0e8      	beq.n	8002744 <getSpadInfo+0x78>
  }
  writeReg(0x83, 0x01);
 8002772:	2101      	movs	r1, #1
 8002774:	2083      	movs	r0, #131	@ 0x83
 8002776:	f7ff f80d 	bl	8001794 <writeReg>
  tmp = readReg(0x92);
 800277a:	250f      	movs	r5, #15
 800277c:	197c      	adds	r4, r7, r5
 800277e:	2092      	movs	r0, #146	@ 0x92
 8002780:	f7ff f876 	bl	8001870 <readReg>
 8002784:	0003      	movs	r3, r0
 8002786:	7023      	strb	r3, [r4, #0]

  *count = tmp & 0x7f;
 8002788:	0029      	movs	r1, r5
 800278a:	187b      	adds	r3, r7, r1
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	227f      	movs	r2, #127	@ 0x7f
 8002790:	4013      	ands	r3, r2
 8002792:	b2da      	uxtb	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8002798:	187b      	adds	r3, r7, r1
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	09db      	lsrs	r3, r3, #7
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 80027a4:	2100      	movs	r1, #0
 80027a6:	2081      	movs	r0, #129	@ 0x81
 80027a8:	f7fe fff4 	bl	8001794 <writeReg>
  writeReg(0xFF, 0x06);
 80027ac:	2106      	movs	r1, #6
 80027ae:	20ff      	movs	r0, #255	@ 0xff
 80027b0:	f7fe fff0 	bl	8001794 <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 80027b4:	2083      	movs	r0, #131	@ 0x83
 80027b6:	f7ff f85b 	bl	8001870 <readReg>
 80027ba:	0003      	movs	r3, r0
 80027bc:	001a      	movs	r2, r3
 80027be:	2304      	movs	r3, #4
 80027c0:	439a      	bics	r2, r3
 80027c2:	0013      	movs	r3, r2
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	0019      	movs	r1, r3
 80027c8:	2083      	movs	r0, #131	@ 0x83
 80027ca:	f7fe ffe3 	bl	8001794 <writeReg>
  writeReg(0xFF, 0x01);
 80027ce:	2101      	movs	r1, #1
 80027d0:	20ff      	movs	r0, #255	@ 0xff
 80027d2:	f7fe ffdf 	bl	8001794 <writeReg>
  writeReg(0x00, 0x01);
 80027d6:	2101      	movs	r1, #1
 80027d8:	2000      	movs	r0, #0
 80027da:	f7fe ffdb 	bl	8001794 <writeReg>

  writeReg(0xFF, 0x00);
 80027de:	2100      	movs	r1, #0
 80027e0:	20ff      	movs	r0, #255	@ 0xff
 80027e2:	f7fe ffd7 	bl	8001794 <writeReg>
  writeReg(0x80, 0x00);
 80027e6:	2100      	movs	r1, #0
 80027e8:	2080      	movs	r0, #128	@ 0x80
 80027ea:	f7fe ffd3 	bl	8001794 <writeReg>

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	0018      	movs	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b004      	add	sp, #16
 80027f6:	bdb0      	pop	{r4, r5, r7, pc}
 80027f8:	2000017c 	.word	0x2000017c
 80027fc:	20000178 	.word	0x20000178

08002800 <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(SequenceStepEnables * enables)
{
 8002800:	b5b0      	push	{r4, r5, r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8002808:	250f      	movs	r5, #15
 800280a:	197c      	adds	r4, r7, r5
 800280c:	2001      	movs	r0, #1
 800280e:	f7ff f82f 	bl	8001870 <readReg>
 8002812:	0003      	movs	r3, r0
 8002814:	7023      	strb	r3, [r4, #0]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8002816:	0029      	movs	r1, r5
 8002818:	187b      	adds	r3, r7, r1
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	091b      	lsrs	r3, r3, #4
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2201      	movs	r2, #1
 8002822:	4013      	ands	r3, r2
 8002824:	b2da      	uxtb	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 800282a:	187b      	adds	r3, r7, r1
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	08db      	lsrs	r3, r3, #3
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2201      	movs	r2, #1
 8002834:	4013      	ands	r3, r2
 8002836:	b2da      	uxtb	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 800283c:	187b      	adds	r3, r7, r1
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	089b      	lsrs	r3, r3, #2
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2201      	movs	r2, #1
 8002846:	4013      	ands	r3, r2
 8002848:	b2da      	uxtb	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 800284e:	187b      	adds	r3, r7, r1
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	099b      	lsrs	r3, r3, #6
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2201      	movs	r2, #1
 8002858:	4013      	ands	r3, r2
 800285a:	b2da      	uxtb	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8002860:	187b      	adds	r3, r7, r1
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	09db      	lsrs	r3, r3, #7
 8002866:	b2da      	uxtb	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	711a      	strb	r2, [r3, #4]
}
 800286c:	46c0      	nop			@ (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	b004      	add	sp, #16
 8002872:	bdb0      	pop	{r4, r5, r7, pc}

08002874 <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 800287e:	2000      	movs	r0, #0
 8002880:	f7ff fe18 	bl	80024b4 <getVcselPulsePeriod>
 8002884:	0003      	movs	r3, r0
 8002886:	001a      	movs	r2, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 800288c:	2046      	movs	r0, #70	@ 0x46
 800288e:	f7fe ffef 	bl	8001870 <readReg>
 8002892:	0003      	movs	r3, r0
 8002894:	3301      	adds	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	0019      	movs	r1, r3
 80028a8:	0010      	movs	r0, r2
 80028aa:	f000 f891 	bl	80029d0 <timeoutMclksToMicroseconds>
 80028ae:	0002      	movs	r2, r0
  timeouts->msrc_dss_tcc_us =
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80028b4:	2051      	movs	r0, #81	@ 0x51
 80028b6:	f7ff f80b 	bl	80018d0 <readReg16Bit>
 80028ba:	0003      	movs	r3, r0
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 f83e 	bl	800293e <decodeTimeout>
 80028c2:	0003      	movs	r3, r0
 80028c4:	001a      	movs	r2, r3
  timeouts->pre_range_mclks =
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	0019      	movs	r1, r3
 80028d6:	0010      	movs	r0, r2
 80028d8:	f000 f87a 	bl	80029d0 <timeoutMclksToMicroseconds>
 80028dc:	0002      	movs	r2, r0
  timeouts->pre_range_us =
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80028e2:	2001      	movs	r0, #1
 80028e4:	f7ff fde6 	bl	80024b4 <getVcselPulsePeriod>
 80028e8:	0003      	movs	r3, r0
 80028ea:	001a      	movs	r2, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80028f0:	2071      	movs	r0, #113	@ 0x71
 80028f2:	f7fe ffed 	bl	80018d0 <readReg16Bit>
 80028f6:	0003      	movs	r3, r0
 80028f8:	0018      	movs	r0, r3
 80028fa:	f000 f820 	bl	800293e <decodeTimeout>
 80028fe:	0003      	movs	r3, r0
 8002900:	001a      	movs	r2, r3
  timeouts->final_range_mclks =
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	78db      	ldrb	r3, [r3, #3]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <getSequenceStepTimeouts+0xaa>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	891a      	ldrh	r2, [r3, #8]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	88db      	ldrh	r3, [r3, #6]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	b29a      	uxth	r2, r3
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8002926:	b2db      	uxtb	r3, r3
 8002928:	0019      	movs	r1, r3
 800292a:	0010      	movs	r0, r2
 800292c:	f000 f850 	bl	80029d0 <timeoutMclksToMicroseconds>
 8002930:	0002      	movs	r2, r0
  timeouts->final_range_us =
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	615a      	str	r2, [r3, #20]
}
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	b002      	add	sp, #8
 800293c:	bd80      	pop	{r7, pc}

0800293e <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	0002      	movs	r2, r0
 8002946:	1dbb      	adds	r3, r7, #6
 8002948:	801a      	strh	r2, [r3, #0]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 800294a:	1dbb      	adds	r3, r7, #6
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	22ff      	movs	r2, #255	@ 0xff
 8002950:	4013      	ands	r3, r2
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002952:	1dba      	adds	r2, r7, #6
 8002954:	8812      	ldrh	r2, [r2, #0]
 8002956:	0a12      	lsrs	r2, r2, #8
 8002958:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 800295a:	4093      	lsls	r3, r2
 800295c:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 800295e:	3301      	adds	r3, #1
 8002960:	b29b      	uxth	r3, r3
}
 8002962:	0018      	movs	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	b002      	add	sp, #8
 8002968:	bd80      	pop	{r7, pc}

0800296a <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	0002      	movs	r2, r0
 8002972:	1dbb      	adds	r3, r7, #6
 8002974:	801a      	strh	r2, [r3, #0]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 800297a:	230a      	movs	r3, #10
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	2200      	movs	r2, #0
 8002980:	801a      	strh	r2, [r3, #0]

  if (timeout_mclks > 0)
 8002982:	1dbb      	adds	r3, r7, #6
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d01d      	beq.n	80029c6 <encodeTimeout+0x5c>
  {
    ls_byte = timeout_mclks - 1;
 800298a:	1dbb      	adds	r3, r7, #6
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	3b01      	subs	r3, #1
 8002990:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8002992:	e008      	b.n	80029a6 <encodeTimeout+0x3c>
    {
      ls_byte >>= 1;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	085b      	lsrs	r3, r3, #1
 8002998:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 800299a:	210a      	movs	r1, #10
 800299c:	187b      	adds	r3, r7, r1
 800299e:	881a      	ldrh	r2, [r3, #0]
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	3201      	adds	r2, #1
 80029a4:	801a      	strh	r2, [r3, #0]
    while ((ls_byte & 0xFFFFFF00) > 0)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2bff      	cmp	r3, #255	@ 0xff
 80029aa:	d8f3      	bhi.n	8002994 <encodeTimeout+0x2a>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80029ac:	230a      	movs	r3, #10
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	21ff      	movs	r1, #255	@ 0xff
 80029bc:	400b      	ands	r3, r1
 80029be:	b29b      	uxth	r3, r3
 80029c0:	4313      	orrs	r3, r2
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	e000      	b.n	80029c8 <encodeTimeout+0x5e>
  }
  else { return 0; }
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	0018      	movs	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b004      	add	sp, #16
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	0002      	movs	r2, r0
 80029d8:	1dbb      	adds	r3, r7, #6
 80029da:	801a      	strh	r2, [r3, #0]
 80029dc:	1d7b      	adds	r3, r7, #5
 80029de:	1c0a      	adds	r2, r1, #0
 80029e0:	701a      	strb	r2, [r3, #0]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80029e2:	1d7b      	adds	r3, r7, #5
 80029e4:	781a      	ldrb	r2, [r3, #0]
 80029e6:	0013      	movs	r3, r2
 80029e8:	015b      	lsls	r3, r3, #5
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	015b      	lsls	r3, r3, #5
 80029ee:	189b      	adds	r3, r3, r2
 80029f0:	011a      	lsls	r2, r3, #4
 80029f2:	1ad2      	subs	r2, r2, r3
 80029f4:	0213      	lsls	r3, r2, #8
 80029f6:	001a      	movs	r2, r3
 80029f8:	0013      	movs	r3, r2
 80029fa:	33f5      	adds	r3, #245	@ 0xf5
 80029fc:	33ff      	adds	r3, #255	@ 0xff
 80029fe:	22fa      	movs	r2, #250	@ 0xfa
 8002a00:	0091      	lsls	r1, r2, #2
 8002a02:	0018      	movs	r0, r3
 8002a04:	f7fd fb80 	bl	8000108 <__udivsi3>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8002a0c:	1dbb      	adds	r3, r7, #6
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	435a      	muls	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	085b      	lsrs	r3, r3, #1
 8002a18:	18d3      	adds	r3, r2, r3
 8002a1a:	22fa      	movs	r2, #250	@ 0xfa
 8002a1c:	0091      	lsls	r1, r2, #2
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f7fd fb72 	bl	8000108 <__udivsi3>
 8002a24:	0003      	movs	r3, r0
}
 8002a26:	0018      	movs	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b004      	add	sp, #16
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	000a      	movs	r2, r1
 8002a38:	1cfb      	adds	r3, r7, #3
 8002a3a:	701a      	strb	r2, [r3, #0]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002a3c:	1cfb      	adds	r3, r7, #3
 8002a3e:	781a      	ldrb	r2, [r3, #0]
 8002a40:	0013      	movs	r3, r2
 8002a42:	015b      	lsls	r3, r3, #5
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	015b      	lsls	r3, r3, #5
 8002a48:	189b      	adds	r3, r3, r2
 8002a4a:	011a      	lsls	r2, r3, #4
 8002a4c:	1ad2      	subs	r2, r2, r3
 8002a4e:	0213      	lsls	r3, r2, #8
 8002a50:	001a      	movs	r2, r3
 8002a52:	0013      	movs	r3, r2
 8002a54:	33f5      	adds	r3, #245	@ 0xf5
 8002a56:	33ff      	adds	r3, #255	@ 0xff
 8002a58:	22fa      	movs	r2, #250	@ 0xfa
 8002a5a:	0091      	lsls	r1, r2, #2
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f7fd fb53 	bl	8000108 <__udivsi3>
 8002a62:	0003      	movs	r3, r0
 8002a64:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	0013      	movs	r3, r2
 8002a6a:	015b      	lsls	r3, r3, #5
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	189b      	adds	r3, r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	001a      	movs	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	18d3      	adds	r3, r2, r3
 8002a7c:	68f9      	ldr	r1, [r7, #12]
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f7fd fb42 	bl	8000108 <__udivsi3>
 8002a84:	0003      	movs	r3, r0
}
 8002a86:	0018      	movs	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b004      	add	sp, #16
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
uint8_t performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	0002      	movs	r2, r0
 8002a98:	1dfb      	adds	r3, r7, #7
 8002a9a:	701a      	strb	r2, [r3, #0]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8002a9c:	1dfb      	adds	r3, r7, #7
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7fe fe73 	bl	8001794 <writeReg>

  startTimeout();
 8002aae:	f000 f8cd 	bl	8002c4c <HAL_GetTick>
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	4b15      	ldr	r3, [pc, #84]	@ (8002b0c <performSingleRefCalibration+0x7c>)
 8002ab8:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002aba:	e011      	b.n	8002ae0 <performSingleRefCalibration+0x50>
  {
    if (checkTimeoutExpired()) { return HAL_ERROR; }
 8002abc:	4b14      	ldr	r3, [pc, #80]	@ (8002b10 <performSingleRefCalibration+0x80>)
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00d      	beq.n	8002ae0 <performSingleRefCalibration+0x50>
 8002ac4:	f000 f8c2 	bl	8002c4c <HAL_GetTick>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	001a      	movs	r2, r3
 8002ace:	4b0f      	ldr	r3, [pc, #60]	@ (8002b0c <performSingleRefCalibration+0x7c>)
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	4a0e      	ldr	r2, [pc, #56]	@ (8002b10 <performSingleRefCalibration+0x80>)
 8002ad6:	8812      	ldrh	r2, [r2, #0]
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	dd01      	ble.n	8002ae0 <performSingleRefCalibration+0x50>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e010      	b.n	8002b02 <performSingleRefCalibration+0x72>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002ae0:	2013      	movs	r0, #19
 8002ae2:	f7fe fec5 	bl	8001870 <readReg>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	001a      	movs	r2, r3
 8002aea:	2307      	movs	r3, #7
 8002aec:	4013      	ands	r3, r2
 8002aee:	d0e5      	beq.n	8002abc <performSingleRefCalibration+0x2c>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002af0:	2101      	movs	r1, #1
 8002af2:	200b      	movs	r0, #11
 8002af4:	f7fe fe4e 	bl	8001794 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 8002af8:	2100      	movs	r1, #0
 8002afa:	2000      	movs	r0, #0
 8002afc:	f7fe fe4a 	bl	8001794 <writeReg>

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b002      	add	sp, #8
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	46c0      	nop			@ (mov r8, r8)
 8002b0c:	2000017c 	.word	0x2000017c
 8002b10:	20000178 	.word	0x20000178

08002b14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b14:	480d      	ldr	r0, [pc, #52]	@ (8002b4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b18:	f7fe fe30 	bl	800177c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002b1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b1e:	e003      	b.n	8002b28 <LoopCopyDataInit>

08002b20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002b20:	4b0b      	ldr	r3, [pc, #44]	@ (8002b50 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002b22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002b24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002b26:	3104      	adds	r1, #4

08002b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002b28:	480a      	ldr	r0, [pc, #40]	@ (8002b54 <LoopForever+0xa>)
  ldr r3, =_edata
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <LoopForever+0xe>)
  adds r2, r0, r1
 8002b2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002b2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002b30:	d3f6      	bcc.n	8002b20 <CopyDataInit>
  ldr r2, =_sbss
 8002b32:	4a0a      	ldr	r2, [pc, #40]	@ (8002b5c <LoopForever+0x12>)
  b LoopFillZerobss
 8002b34:	e002      	b.n	8002b3c <LoopFillZerobss>

08002b36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  str  r3, [r2]
 8002b38:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b3a:	3204      	adds	r2, #4

08002b3c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002b3c:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <LoopForever+0x16>)
  cmp r2, r3
 8002b3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002b40:	d3f9      	bcc.n	8002b36 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002b42:	f004 fd47 	bl	80075d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b46:	f7fe fa3d 	bl	8000fc4 <main>

08002b4a <LoopForever>:

LoopForever:
    b LoopForever
 8002b4a:	e7fe      	b.n	8002b4a <LoopForever>
  ldr   r0, =_estack
 8002b4c:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8002b50:	080076d8 	.word	0x080076d8
  ldr r0, =_sdata
 8002b54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002b58:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8002b5c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8002b60:	200001e4 	.word	0x200001e4

08002b64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b64:	e7fe      	b.n	8002b64 <ADC1_IRQHandler>

08002b66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b6c:	1dfb      	adds	r3, r7, #7
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b72:	2003      	movs	r0, #3
 8002b74:	f000 f80e 	bl	8002b94 <HAL_InitTick>
 8002b78:	1e03      	subs	r3, r0, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002b7c:	1dfb      	adds	r3, r7, #7
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	e001      	b.n	8002b88 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b84:	f7fe fc54 	bl	8001430 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b88:	1dfb      	adds	r3, r7, #7
 8002b8a:	781b      	ldrb	r3, [r3, #0]
}
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b002      	add	sp, #8
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b9c:	230f      	movs	r3, #15
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c1c <HAL_InitTick+0x88>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d02b      	beq.n	8002c04 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002bac:	4b1c      	ldr	r3, [pc, #112]	@ (8002c20 <HAL_InitTick+0x8c>)
 8002bae:	681c      	ldr	r4, [r3, #0]
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c1c <HAL_InitTick+0x88>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	23fa      	movs	r3, #250	@ 0xfa
 8002bb8:	0098      	lsls	r0, r3, #2
 8002bba:	f7fd faa5 	bl	8000108 <__udivsi3>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	0020      	movs	r0, r4
 8002bc4:	f7fd faa0 	bl	8000108 <__udivsi3>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f000 fd69 	bl	80036a2 <HAL_SYSTICK_Config>
 8002bd0:	1e03      	subs	r3, r0, #0
 8002bd2:	d112      	bne.n	8002bfa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d80a      	bhi.n	8002bf0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	2301      	movs	r3, #1
 8002bde:	425b      	negs	r3, r3
 8002be0:	2200      	movs	r2, #0
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 fd48 	bl	8003678 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002be8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c24 <HAL_InitTick+0x90>)
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	e00d      	b.n	8002c0c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002bf0:	230f      	movs	r3, #15
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	e008      	b.n	8002c0c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bfa:	230f      	movs	r3, #15
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	2201      	movs	r2, #1
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e003      	b.n	8002c0c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c04:	230f      	movs	r3, #15
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002c0c:	230f      	movs	r3, #15
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	781b      	ldrb	r3, [r3, #0]
}
 8002c12:	0018      	movs	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b005      	add	sp, #20
 8002c18:	bd90      	pop	{r4, r7, pc}
 8002c1a:	46c0      	nop			@ (mov r8, r8)
 8002c1c:	2000000c 	.word	0x2000000c
 8002c20:	20000000 	.word	0x20000000
 8002c24:	20000008 	.word	0x20000008

08002c28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c2c:	4b05      	ldr	r3, [pc, #20]	@ (8002c44 <HAL_IncTick+0x1c>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	001a      	movs	r2, r3
 8002c32:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <HAL_IncTick+0x20>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	18d2      	adds	r2, r2, r3
 8002c38:	4b03      	ldr	r3, [pc, #12]	@ (8002c48 <HAL_IncTick+0x20>)
 8002c3a:	601a      	str	r2, [r3, #0]
}
 8002c3c:	46c0      	nop			@ (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	46c0      	nop			@ (mov r8, r8)
 8002c44:	2000000c 	.word	0x2000000c
 8002c48:	200001e0 	.word	0x200001e0

08002c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c50:	4b02      	ldr	r3, [pc, #8]	@ (8002c5c <HAL_GetTick+0x10>)
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	0018      	movs	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			@ (mov r8, r8)
 8002c5c:	200001e0 	.word	0x200001e0

08002c60 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a05      	ldr	r2, [pc, #20]	@ (8002c84 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002c70:	401a      	ands	r2, r3
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	601a      	str	r2, [r3, #0]
}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b002      	add	sp, #8
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			@ (mov r8, r8)
 8002c84:	ff3fffff 	.word	0xff3fffff

08002c88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	23c0      	movs	r3, #192	@ 0xc0
 8002c96:	041b      	lsls	r3, r3, #16
 8002c98:	4013      	ands	r3, r2
}
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b002      	add	sp, #8
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	2104      	movs	r1, #4
 8002cb6:	400a      	ands	r2, r1
 8002cb8:	2107      	movs	r1, #7
 8002cba:	4091      	lsls	r1, r2
 8002cbc:	000a      	movs	r2, r1
 8002cbe:	43d2      	mvns	r2, r2
 8002cc0:	401a      	ands	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2104      	movs	r1, #4
 8002cc6:	400b      	ands	r3, r1
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4099      	lsls	r1, r3
 8002ccc:	000b      	movs	r3, r1
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002cd4:	46c0      	nop			@ (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b004      	add	sp, #16
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	2104      	movs	r1, #4
 8002cee:	400a      	ands	r2, r1
 8002cf0:	2107      	movs	r1, #7
 8002cf2:	4091      	lsls	r1, r2
 8002cf4:	000a      	movs	r2, r1
 8002cf6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2104      	movs	r1, #4
 8002cfc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002cfe:	40da      	lsrs	r2, r3
 8002d00:	0013      	movs	r3, r2
}
 8002d02:	0018      	movs	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b002      	add	sp, #8
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	211f      	movs	r1, #31
 8002d1e:	400a      	ands	r2, r1
 8002d20:	210f      	movs	r1, #15
 8002d22:	4091      	lsls	r1, r2
 8002d24:	000a      	movs	r2, r1
 8002d26:	43d2      	mvns	r2, r2
 8002d28:	401a      	ands	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0e9b      	lsrs	r3, r3, #26
 8002d2e:	210f      	movs	r1, #15
 8002d30:	4019      	ands	r1, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	201f      	movs	r0, #31
 8002d36:	4003      	ands	r3, r0
 8002d38:	4099      	lsls	r1, r3
 8002d3a:	000b      	movs	r3, r1
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d42:	46c0      	nop			@ (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b004      	add	sp, #16
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	025b      	lsls	r3, r3, #9
 8002d5c:	0a5b      	lsrs	r3, r3, #9
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d64:	46c0      	nop			@ (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b002      	add	sp, #8
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	0252      	lsls	r2, r2, #9
 8002d7e:	0a52      	lsrs	r2, r2, #9
 8002d80:	43d2      	mvns	r2, r2
 8002d82:	401a      	ands	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d88:	46c0      	nop			@ (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	0212      	lsls	r2, r2, #8
 8002da4:	43d2      	mvns	r2, r2
 8002da6:	401a      	ands	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	400b      	ands	r3, r1
 8002db0:	4904      	ldr	r1, [pc, #16]	@ (8002dc4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002db2:	400b      	ands	r3, r1
 8002db4:	431a      	orrs	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b004      	add	sp, #16
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			@ (mov r8, r8)
 8002dc4:	7fffff00 	.word	0x7fffff00

08002dc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a05      	ldr	r2, [pc, #20]	@ (8002dec <LL_ADC_EnableInternalRegulator+0x24>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2280      	movs	r2, #128	@ 0x80
 8002dda:	0552      	lsls	r2, r2, #21
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002de2:	46c0      	nop			@ (mov r8, r8)
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b002      	add	sp, #8
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	6fffffe8 	.word	0x6fffffe8

08002df0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	2380      	movs	r3, #128	@ 0x80
 8002dfe:	055b      	lsls	r3, r3, #21
 8002e00:	401a      	ands	r2, r3
 8002e02:	2380      	movs	r3, #128	@ 0x80
 8002e04:	055b      	lsls	r3, r3, #21
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d101      	bne.n	8002e0e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	0018      	movs	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b002      	add	sp, #8
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2201      	movs	r2, #1
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <LL_ADC_IsEnabled+0x18>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <LL_ADC_IsEnabled+0x1a>
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	0018      	movs	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b002      	add	sp, #8
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2204      	movs	r2, #4
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d101      	bne.n	8002e52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	0018      	movs	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b002      	add	sp, #8
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e64:	231f      	movs	r3, #31
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	2200      	movs	r2, #0
 8002e6a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e17e      	b.n	8003180 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10a      	bne.n	8002ea0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7fe faf3 	bl	8001478 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2254      	movs	r2, #84	@ 0x54
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f7ff ffa3 	bl	8002df0 <LL_ADC_IsInternalRegulatorEnabled>
 8002eaa:	1e03      	subs	r3, r0, #0
 8002eac:	d114      	bne.n	8002ed8 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f7ff ff88 	bl	8002dc8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002eb8:	4bb3      	ldr	r3, [pc, #716]	@ (8003188 <HAL_ADC_Init+0x32c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	49b3      	ldr	r1, [pc, #716]	@ (800318c <HAL_ADC_Init+0x330>)
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f7fd f922 	bl	8000108 <__udivsi3>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002eca:	e002      	b.n	8002ed2 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f9      	bne.n	8002ecc <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	0018      	movs	r0, r3
 8002ede:	f7ff ff87 	bl	8002df0 <LL_ADC_IsInternalRegulatorEnabled>
 8002ee2:	1e03      	subs	r3, r0, #0
 8002ee4:	d10f      	bne.n	8002f06 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eea:	2210      	movs	r2, #16
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002efe:	231f      	movs	r3, #31
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	2201      	movs	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7ff ff95 	bl	8002e3a <LL_ADC_REG_IsConversionOngoing>
 8002f10:	0003      	movs	r3, r0
 8002f12:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f18:	2210      	movs	r2, #16
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d000      	beq.n	8002f20 <HAL_ADC_Init+0xc4>
 8002f1e:	e122      	b.n	8003166 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d000      	beq.n	8002f28 <HAL_ADC_Init+0xcc>
 8002f26:	e11e      	b.n	8003166 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2c:	4a98      	ldr	r2, [pc, #608]	@ (8003190 <HAL_ADC_Init+0x334>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2202      	movs	r2, #2
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f7ff ff6b 	bl	8002e18 <LL_ADC_IsEnabled>
 8002f42:	1e03      	subs	r3, r0, #0
 8002f44:	d000      	beq.n	8002f48 <HAL_ADC_Init+0xec>
 8002f46:	e0ad      	b.n	80030a4 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7e1b      	ldrb	r3, [r3, #24]
 8002f50:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f52:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7e5b      	ldrb	r3, [r3, #25]
 8002f58:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f5a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7e9b      	ldrb	r3, [r3, #26]
 8002f60:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f62:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <HAL_ADC_Init+0x116>
 8002f6c:	2380      	movs	r3, #128	@ 0x80
 8002f6e:	015b      	lsls	r3, r3, #5
 8002f70:	e000      	b.n	8002f74 <HAL_ADC_Init+0x118>
 8002f72:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f74:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f7a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	da04      	bge.n	8002f8e <HAL_ADC_Init+0x132>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	e001      	b.n	8002f92 <HAL_ADC_Init+0x136>
 8002f8e:	2380      	movs	r3, #128	@ 0x80
 8002f90:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002f92:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	212c      	movs	r1, #44	@ 0x2c
 8002f98:	5c5b      	ldrb	r3, [r3, r1]
 8002f9a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002f9c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	5c9b      	ldrb	r3, [r3, r2]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d115      	bne.n	8002fda <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	7e9b      	ldrb	r3, [r3, #26]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d105      	bne.n	8002fc2 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2280      	movs	r2, #128	@ 0x80
 8002fba:	0252      	lsls	r2, r2, #9
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	e00b      	b.n	8002fda <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fe6:	23e0      	movs	r3, #224	@ 0xe0
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	4a65      	ldr	r2, [pc, #404]	@ (8003194 <HAL_ADC_Init+0x338>)
 8003000:	4013      	ands	r3, r2
 8003002:	0019      	movs	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	430a      	orrs	r2, r1
 800300c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	0f9b      	lsrs	r3, r3, #30
 8003014:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800301a:	4313      	orrs	r3, r2
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	223c      	movs	r2, #60	@ 0x3c
 8003026:	5c9b      	ldrb	r3, [r3, r2]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d111      	bne.n	8003050 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	0f9b      	lsrs	r3, r3, #30
 8003032:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003038:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 800303e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003044:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	2201      	movs	r2, #1
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	4a50      	ldr	r2, [pc, #320]	@ (8003198 <HAL_ADC_Init+0x33c>)
 8003058:	4013      	ands	r3, r2
 800305a:	0019      	movs	r1, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	430a      	orrs	r2, r1
 8003064:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	23c0      	movs	r3, #192	@ 0xc0
 800306c:	061b      	lsls	r3, r3, #24
 800306e:	429a      	cmp	r2, r3
 8003070:	d018      	beq.n	80030a4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003076:	2380      	movs	r3, #128	@ 0x80
 8003078:	05db      	lsls	r3, r3, #23
 800307a:	429a      	cmp	r2, r3
 800307c:	d012      	beq.n	80030a4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003082:	2380      	movs	r3, #128	@ 0x80
 8003084:	061b      	lsls	r3, r3, #24
 8003086:	429a      	cmp	r2, r3
 8003088:	d00c      	beq.n	80030a4 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800308a:	4b44      	ldr	r3, [pc, #272]	@ (800319c <HAL_ADC_Init+0x340>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a44      	ldr	r2, [pc, #272]	@ (80031a0 <HAL_ADC_Init+0x344>)
 8003090:	4013      	ands	r3, r2
 8003092:	0019      	movs	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	23f0      	movs	r3, #240	@ 0xf0
 800309a:	039b      	lsls	r3, r3, #14
 800309c:	401a      	ands	r2, r3
 800309e:	4b3f      	ldr	r3, [pc, #252]	@ (800319c <HAL_ADC_Init+0x340>)
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ac:	001a      	movs	r2, r3
 80030ae:	2100      	movs	r1, #0
 80030b0:	f7ff fdf7 	bl	8002ca2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030bc:	4939      	ldr	r1, [pc, #228]	@ (80031a4 <HAL_ADC_Init+0x348>)
 80030be:	001a      	movs	r2, r3
 80030c0:	f7ff fdef 	bl	8002ca2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d109      	bne.n	80030e0 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2110      	movs	r1, #16
 80030d8:	4249      	negs	r1, r1
 80030da:	430a      	orrs	r2, r1
 80030dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80030de:	e018      	b.n	8003112 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	2380      	movs	r3, #128	@ 0x80
 80030e6:	039b      	lsls	r3, r3, #14
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d112      	bne.n	8003112 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	221c      	movs	r2, #28
 80030fc:	4013      	ands	r3, r2
 80030fe:	2210      	movs	r2, #16
 8003100:	4252      	negs	r2, r2
 8003102:	409a      	lsls	r2, r3
 8003104:	0011      	movs	r1, r2
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2100      	movs	r1, #0
 8003118:	0018      	movs	r0, r3
 800311a:	f7ff fddf 	bl	8002cdc <LL_ADC_GetSamplingTimeCommonChannels>
 800311e:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003124:	429a      	cmp	r2, r3
 8003126:	d10b      	bne.n	8003140 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003132:	2203      	movs	r2, #3
 8003134:	4393      	bics	r3, r2
 8003136:	2201      	movs	r2, #1
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800313e:	e01c      	b.n	800317a <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003144:	2212      	movs	r2, #18
 8003146:	4393      	bics	r3, r2
 8003148:	2210      	movs	r2, #16
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003154:	2201      	movs	r2, #1
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800315c:	231f      	movs	r3, #31
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003164:	e009      	b.n	800317a <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316a:	2210      	movs	r2, #16
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003172:	231f      	movs	r3, #31
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800317a:	231f      	movs	r3, #31
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	781b      	ldrb	r3, [r3, #0]
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b008      	add	sp, #32
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000000 	.word	0x20000000
 800318c:	00030d40 	.word	0x00030d40
 8003190:	fffffefd 	.word	0xfffffefd
 8003194:	ffde0201 	.word	0xffde0201
 8003198:	1ffffc02 	.word	0x1ffffc02
 800319c:	40012708 	.word	0x40012708
 80031a0:	ffc3ffff 	.word	0xffc3ffff
 80031a4:	7fffff04 	.word	0x7fffff04

080031a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b2:	2317      	movs	r3, #23
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2254      	movs	r2, #84	@ 0x54
 80031c2:	5c9b      	ldrb	r3, [r3, r2]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x24>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e1be      	b.n	800354a <HAL_ADC_ConfigChannel+0x3a2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2254      	movs	r2, #84	@ 0x54
 80031d0:	2101      	movs	r1, #1
 80031d2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	0018      	movs	r0, r3
 80031da:	f7ff fe2e 	bl	8002e3a <LL_ADC_REG_IsConversionOngoing>
 80031de:	1e03      	subs	r3, r0, #0
 80031e0:	d000      	beq.n	80031e4 <HAL_ADC_ConfigChannel+0x3c>
 80031e2:	e1a1      	b.n	8003528 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d100      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x46>
 80031ec:	e152      	b.n	8003494 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	2380      	movs	r3, #128	@ 0x80
 80031f4:	061b      	lsls	r3, r3, #24
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d004      	beq.n	8003204 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80031fe:	4ac2      	ldr	r2, [pc, #776]	@ (8003508 <HAL_ADC_ConfigChannel+0x360>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d108      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	0019      	movs	r1, r3
 800320e:	0010      	movs	r0, r2
 8003210:	f7ff fd9b 	bl	8002d4a <LL_ADC_REG_SetSequencerChAdd>
 8003214:	e0ed      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	211f      	movs	r1, #31
 8003220:	400b      	ands	r3, r1
 8003222:	210f      	movs	r1, #15
 8003224:	4099      	lsls	r1, r3
 8003226:	000b      	movs	r3, r1
 8003228:	43db      	mvns	r3, r3
 800322a:	4013      	ands	r3, r2
 800322c:	0019      	movs	r1, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	025b      	lsls	r3, r3, #9
 8003234:	0a5b      	lsrs	r3, r3, #9
 8003236:	d105      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x9c>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	0e9b      	lsrs	r3, r3, #26
 800323e:	221f      	movs	r2, #31
 8003240:	4013      	ands	r3, r2
 8003242:	e0bc      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2201      	movs	r2, #1
 800324a:	4013      	ands	r3, r2
 800324c:	d000      	beq.n	8003250 <HAL_ADC_ConfigChannel+0xa8>
 800324e:	e0b5      	b.n	80033bc <HAL_ADC_ConfigChannel+0x214>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2202      	movs	r2, #2
 8003256:	4013      	ands	r3, r2
 8003258:	d000      	beq.n	800325c <HAL_ADC_ConfigChannel+0xb4>
 800325a:	e0ad      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x210>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2204      	movs	r2, #4
 8003262:	4013      	ands	r3, r2
 8003264:	d000      	beq.n	8003268 <HAL_ADC_ConfigChannel+0xc0>
 8003266:	e0a5      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x20c>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2208      	movs	r2, #8
 800326e:	4013      	ands	r3, r2
 8003270:	d000      	beq.n	8003274 <HAL_ADC_ConfigChannel+0xcc>
 8003272:	e09d      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x208>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2210      	movs	r2, #16
 800327a:	4013      	ands	r3, r2
 800327c:	d000      	beq.n	8003280 <HAL_ADC_ConfigChannel+0xd8>
 800327e:	e095      	b.n	80033ac <HAL_ADC_ConfigChannel+0x204>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2220      	movs	r2, #32
 8003286:	4013      	ands	r3, r2
 8003288:	d000      	beq.n	800328c <HAL_ADC_ConfigChannel+0xe4>
 800328a:	e08d      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x200>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2240      	movs	r2, #64	@ 0x40
 8003292:	4013      	ands	r3, r2
 8003294:	d000      	beq.n	8003298 <HAL_ADC_ConfigChannel+0xf0>
 8003296:	e085      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x1fc>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2280      	movs	r2, #128	@ 0x80
 800329e:	4013      	ands	r3, r2
 80032a0:	d000      	beq.n	80032a4 <HAL_ADC_ConfigChannel+0xfc>
 80032a2:	e07d      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x1f8>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	2380      	movs	r3, #128	@ 0x80
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4013      	ands	r3, r2
 80032ae:	d000      	beq.n	80032b2 <HAL_ADC_ConfigChannel+0x10a>
 80032b0:	e074      	b.n	800339c <HAL_ADC_ConfigChannel+0x1f4>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	2380      	movs	r3, #128	@ 0x80
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4013      	ands	r3, r2
 80032bc:	d000      	beq.n	80032c0 <HAL_ADC_ConfigChannel+0x118>
 80032be:	e06b      	b.n	8003398 <HAL_ADC_ConfigChannel+0x1f0>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	2380      	movs	r3, #128	@ 0x80
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4013      	ands	r3, r2
 80032ca:	d000      	beq.n	80032ce <HAL_ADC_ConfigChannel+0x126>
 80032cc:	e062      	b.n	8003394 <HAL_ADC_ConfigChannel+0x1ec>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	2380      	movs	r3, #128	@ 0x80
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	4013      	ands	r3, r2
 80032d8:	d000      	beq.n	80032dc <HAL_ADC_ConfigChannel+0x134>
 80032da:	e059      	b.n	8003390 <HAL_ADC_ConfigChannel+0x1e8>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2380      	movs	r3, #128	@ 0x80
 80032e2:	015b      	lsls	r3, r3, #5
 80032e4:	4013      	ands	r3, r2
 80032e6:	d151      	bne.n	800338c <HAL_ADC_ConfigChannel+0x1e4>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	2380      	movs	r3, #128	@ 0x80
 80032ee:	019b      	lsls	r3, r3, #6
 80032f0:	4013      	ands	r3, r2
 80032f2:	d149      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x1e0>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	2380      	movs	r3, #128	@ 0x80
 80032fa:	01db      	lsls	r3, r3, #7
 80032fc:	4013      	ands	r3, r2
 80032fe:	d141      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x1dc>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	2380      	movs	r3, #128	@ 0x80
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	4013      	ands	r3, r2
 800330a:	d139      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x1d8>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	2380      	movs	r3, #128	@ 0x80
 8003312:	025b      	lsls	r3, r3, #9
 8003314:	4013      	ands	r3, r2
 8003316:	d131      	bne.n	800337c <HAL_ADC_ConfigChannel+0x1d4>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	2380      	movs	r3, #128	@ 0x80
 800331e:	029b      	lsls	r3, r3, #10
 8003320:	4013      	ands	r3, r2
 8003322:	d129      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x1d0>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	2380      	movs	r3, #128	@ 0x80
 800332a:	02db      	lsls	r3, r3, #11
 800332c:	4013      	ands	r3, r2
 800332e:	d121      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x1cc>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	2380      	movs	r3, #128	@ 0x80
 8003336:	031b      	lsls	r3, r3, #12
 8003338:	4013      	ands	r3, r2
 800333a:	d119      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x1c8>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	2380      	movs	r3, #128	@ 0x80
 8003342:	035b      	lsls	r3, r3, #13
 8003344:	4013      	ands	r3, r2
 8003346:	d111      	bne.n	800336c <HAL_ADC_ConfigChannel+0x1c4>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2380      	movs	r3, #128	@ 0x80
 800334e:	039b      	lsls	r3, r3, #14
 8003350:	4013      	ands	r3, r2
 8003352:	d109      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x1c0>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	2380      	movs	r3, #128	@ 0x80
 800335a:	03db      	lsls	r3, r3, #15
 800335c:	4013      	ands	r3, r2
 800335e:	d001      	beq.n	8003364 <HAL_ADC_ConfigChannel+0x1bc>
 8003360:	2316      	movs	r3, #22
 8003362:	e02c      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 8003364:	2300      	movs	r3, #0
 8003366:	e02a      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 8003368:	2315      	movs	r3, #21
 800336a:	e028      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 800336c:	2314      	movs	r3, #20
 800336e:	e026      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 8003370:	2313      	movs	r3, #19
 8003372:	e024      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 8003374:	2312      	movs	r3, #18
 8003376:	e022      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 8003378:	2311      	movs	r3, #17
 800337a:	e020      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 800337c:	2310      	movs	r3, #16
 800337e:	e01e      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 8003380:	230f      	movs	r3, #15
 8003382:	e01c      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 8003384:	230e      	movs	r3, #14
 8003386:	e01a      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 8003388:	230d      	movs	r3, #13
 800338a:	e018      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 800338c:	230c      	movs	r3, #12
 800338e:	e016      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 8003390:	230b      	movs	r3, #11
 8003392:	e014      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 8003394:	230a      	movs	r3, #10
 8003396:	e012      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 8003398:	2309      	movs	r3, #9
 800339a:	e010      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 800339c:	2308      	movs	r3, #8
 800339e:	e00e      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 80033a0:	2307      	movs	r3, #7
 80033a2:	e00c      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 80033a4:	2306      	movs	r3, #6
 80033a6:	e00a      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 80033a8:	2305      	movs	r3, #5
 80033aa:	e008      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 80033ac:	2304      	movs	r3, #4
 80033ae:	e006      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 80033b0:	2303      	movs	r3, #3
 80033b2:	e004      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e002      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <HAL_ADC_ConfigChannel+0x216>
 80033bc:	2300      	movs	r3, #0
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	6852      	ldr	r2, [r2, #4]
 80033c2:	201f      	movs	r0, #31
 80033c4:	4002      	ands	r2, r0
 80033c6:	4093      	lsls	r3, r2
 80033c8:	000a      	movs	r2, r1
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	089b      	lsrs	r3, r3, #2
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d808      	bhi.n	80033f2 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	001a      	movs	r2, r3
 80033ee:	f7ff fc8c 	bl	8002d0a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6819      	ldr	r1, [r3, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	001a      	movs	r2, r3
 8003400:	f7ff fcc6 	bl	8002d90 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	db00      	blt.n	800340e <HAL_ADC_ConfigChannel+0x266>
 800340c:	e096      	b.n	800353c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800340e:	4b3f      	ldr	r3, [pc, #252]	@ (800350c <HAL_ADC_ConfigChannel+0x364>)
 8003410:	0018      	movs	r0, r3
 8003412:	f7ff fc39 	bl	8002c88 <LL_ADC_GetCommonPathInternalCh>
 8003416:	0003      	movs	r3, r0
 8003418:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a3c      	ldr	r2, [pc, #240]	@ (8003510 <HAL_ADC_ConfigChannel+0x368>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d123      	bne.n	800346c <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	2380      	movs	r3, #128	@ 0x80
 8003428:	041b      	lsls	r3, r3, #16
 800342a:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800342c:	d11e      	bne.n	800346c <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2280      	movs	r2, #128	@ 0x80
 8003432:	0412      	lsls	r2, r2, #16
 8003434:	4313      	orrs	r3, r2
 8003436:	4a35      	ldr	r2, [pc, #212]	@ (800350c <HAL_ADC_ConfigChannel+0x364>)
 8003438:	0019      	movs	r1, r3
 800343a:	0010      	movs	r0, r2
 800343c:	f7ff fc10 	bl	8002c60 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8003440:	4b34      	ldr	r3, [pc, #208]	@ (8003514 <HAL_ADC_ConfigChannel+0x36c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4934      	ldr	r1, [pc, #208]	@ (8003518 <HAL_ADC_ConfigChannel+0x370>)
 8003446:	0018      	movs	r0, r3
 8003448:	f7fc fe5e 	bl	8000108 <__udivsi3>
 800344c:	0003      	movs	r3, r0
 800344e:	001a      	movs	r2, r3
 8003450:	0013      	movs	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	189b      	adds	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	3301      	adds	r3, #1
 800345a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800345c:	e002      	b.n	8003464 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	3b01      	subs	r3, #1
 8003462:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f9      	bne.n	800345e <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800346a:	e067      	b.n	800353c <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a2a      	ldr	r2, [pc, #168]	@ (800351c <HAL_ADC_ConfigChannel+0x374>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d162      	bne.n	800353c <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	2380      	movs	r3, #128	@ 0x80
 800347a:	03db      	lsls	r3, r3, #15
 800347c:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800347e:	d15d      	bne.n	800353c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2280      	movs	r2, #128	@ 0x80
 8003484:	03d2      	lsls	r2, r2, #15
 8003486:	4313      	orrs	r3, r2
 8003488:	4a20      	ldr	r2, [pc, #128]	@ (800350c <HAL_ADC_ConfigChannel+0x364>)
 800348a:	0019      	movs	r1, r3
 800348c:	0010      	movs	r0, r2
 800348e:	f7ff fbe7 	bl	8002c60 <LL_ADC_SetCommonPathInternalCh>
 8003492:	e053      	b.n	800353c <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	2380      	movs	r3, #128	@ 0x80
 800349a:	061b      	lsls	r3, r3, #24
 800349c:	429a      	cmp	r2, r3
 800349e:	d004      	beq.n	80034aa <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034a4:	4a18      	ldr	r2, [pc, #96]	@ (8003508 <HAL_ADC_ConfigChannel+0x360>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d107      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	0019      	movs	r1, r3
 80034b4:	0010      	movs	r0, r2
 80034b6:	f7ff fc59 	bl	8002d6c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	da3c      	bge.n	800353c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034c2:	4b12      	ldr	r3, [pc, #72]	@ (800350c <HAL_ADC_ConfigChannel+0x364>)
 80034c4:	0018      	movs	r0, r3
 80034c6:	f7ff fbdf 	bl	8002c88 <LL_ADC_GetCommonPathInternalCh>
 80034ca:	0003      	movs	r3, r0
 80034cc:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a0f      	ldr	r2, [pc, #60]	@ (8003510 <HAL_ADC_ConfigChannel+0x368>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d108      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4a11      	ldr	r2, [pc, #68]	@ (8003520 <HAL_ADC_ConfigChannel+0x378>)
 80034dc:	4013      	ands	r3, r2
 80034de:	4a0b      	ldr	r2, [pc, #44]	@ (800350c <HAL_ADC_ConfigChannel+0x364>)
 80034e0:	0019      	movs	r1, r3
 80034e2:	0010      	movs	r0, r2
 80034e4:	f7ff fbbc 	bl	8002c60 <LL_ADC_SetCommonPathInternalCh>
 80034e8:	e028      	b.n	800353c <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a0b      	ldr	r2, [pc, #44]	@ (800351c <HAL_ADC_ConfigChannel+0x374>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d123      	bne.n	800353c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4a0b      	ldr	r2, [pc, #44]	@ (8003524 <HAL_ADC_ConfigChannel+0x37c>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	4a04      	ldr	r2, [pc, #16]	@ (800350c <HAL_ADC_ConfigChannel+0x364>)
 80034fc:	0019      	movs	r1, r3
 80034fe:	0010      	movs	r0, r2
 8003500:	f7ff fbae 	bl	8002c60 <LL_ADC_SetCommonPathInternalCh>
 8003504:	e01a      	b.n	800353c <HAL_ADC_ConfigChannel+0x394>
 8003506:	46c0      	nop			@ (mov r8, r8)
 8003508:	80000004 	.word	0x80000004
 800350c:	40012708 	.word	0x40012708
 8003510:	a4000200 	.word	0xa4000200
 8003514:	20000000 	.word	0x20000000
 8003518:	00030d40 	.word	0x00030d40
 800351c:	a8000400 	.word	0xa8000400
 8003520:	ff7fffff 	.word	0xff7fffff
 8003524:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352c:	2220      	movs	r2, #32
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003534:	2317      	movs	r3, #23
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	2201      	movs	r2, #1
 800353a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2254      	movs	r2, #84	@ 0x54
 8003540:	2100      	movs	r1, #0
 8003542:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8003544:	2317      	movs	r3, #23
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	781b      	ldrb	r3, [r3, #0]
}
 800354a:	0018      	movs	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	b006      	add	sp, #24
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			@ (mov r8, r8)

08003554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003554:	b590      	push	{r4, r7, lr}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	0002      	movs	r2, r0
 800355c:	6039      	str	r1, [r7, #0]
 800355e:	1dfb      	adds	r3, r7, #7
 8003560:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003562:	1dfb      	adds	r3, r7, #7
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b7f      	cmp	r3, #127	@ 0x7f
 8003568:	d828      	bhi.n	80035bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800356a:	4a2f      	ldr	r2, [pc, #188]	@ (8003628 <__NVIC_SetPriority+0xd4>)
 800356c:	1dfb      	adds	r3, r7, #7
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	b25b      	sxtb	r3, r3
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	33c0      	adds	r3, #192	@ 0xc0
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	589b      	ldr	r3, [r3, r2]
 800357a:	1dfa      	adds	r2, r7, #7
 800357c:	7812      	ldrb	r2, [r2, #0]
 800357e:	0011      	movs	r1, r2
 8003580:	2203      	movs	r2, #3
 8003582:	400a      	ands	r2, r1
 8003584:	00d2      	lsls	r2, r2, #3
 8003586:	21ff      	movs	r1, #255	@ 0xff
 8003588:	4091      	lsls	r1, r2
 800358a:	000a      	movs	r2, r1
 800358c:	43d2      	mvns	r2, r2
 800358e:	401a      	ands	r2, r3
 8003590:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	019b      	lsls	r3, r3, #6
 8003596:	22ff      	movs	r2, #255	@ 0xff
 8003598:	401a      	ands	r2, r3
 800359a:	1dfb      	adds	r3, r7, #7
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	0018      	movs	r0, r3
 80035a0:	2303      	movs	r3, #3
 80035a2:	4003      	ands	r3, r0
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035a8:	481f      	ldr	r0, [pc, #124]	@ (8003628 <__NVIC_SetPriority+0xd4>)
 80035aa:	1dfb      	adds	r3, r7, #7
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	b25b      	sxtb	r3, r3
 80035b0:	089b      	lsrs	r3, r3, #2
 80035b2:	430a      	orrs	r2, r1
 80035b4:	33c0      	adds	r3, #192	@ 0xc0
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80035ba:	e031      	b.n	8003620 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035bc:	4a1b      	ldr	r2, [pc, #108]	@ (800362c <__NVIC_SetPriority+0xd8>)
 80035be:	1dfb      	adds	r3, r7, #7
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	0019      	movs	r1, r3
 80035c4:	230f      	movs	r3, #15
 80035c6:	400b      	ands	r3, r1
 80035c8:	3b08      	subs	r3, #8
 80035ca:	089b      	lsrs	r3, r3, #2
 80035cc:	3306      	adds	r3, #6
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	18d3      	adds	r3, r2, r3
 80035d2:	3304      	adds	r3, #4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	1dfa      	adds	r2, r7, #7
 80035d8:	7812      	ldrb	r2, [r2, #0]
 80035da:	0011      	movs	r1, r2
 80035dc:	2203      	movs	r2, #3
 80035de:	400a      	ands	r2, r1
 80035e0:	00d2      	lsls	r2, r2, #3
 80035e2:	21ff      	movs	r1, #255	@ 0xff
 80035e4:	4091      	lsls	r1, r2
 80035e6:	000a      	movs	r2, r1
 80035e8:	43d2      	mvns	r2, r2
 80035ea:	401a      	ands	r2, r3
 80035ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	019b      	lsls	r3, r3, #6
 80035f2:	22ff      	movs	r2, #255	@ 0xff
 80035f4:	401a      	ands	r2, r3
 80035f6:	1dfb      	adds	r3, r7, #7
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	0018      	movs	r0, r3
 80035fc:	2303      	movs	r3, #3
 80035fe:	4003      	ands	r3, r0
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003604:	4809      	ldr	r0, [pc, #36]	@ (800362c <__NVIC_SetPriority+0xd8>)
 8003606:	1dfb      	adds	r3, r7, #7
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	001c      	movs	r4, r3
 800360c:	230f      	movs	r3, #15
 800360e:	4023      	ands	r3, r4
 8003610:	3b08      	subs	r3, #8
 8003612:	089b      	lsrs	r3, r3, #2
 8003614:	430a      	orrs	r2, r1
 8003616:	3306      	adds	r3, #6
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	18c3      	adds	r3, r0, r3
 800361c:	3304      	adds	r3, #4
 800361e:	601a      	str	r2, [r3, #0]
}
 8003620:	46c0      	nop			@ (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b003      	add	sp, #12
 8003626:	bd90      	pop	{r4, r7, pc}
 8003628:	e000e100 	.word	0xe000e100
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	1e5a      	subs	r2, r3, #1
 800363c:	2380      	movs	r3, #128	@ 0x80
 800363e:	045b      	lsls	r3, r3, #17
 8003640:	429a      	cmp	r2, r3
 8003642:	d301      	bcc.n	8003648 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003644:	2301      	movs	r3, #1
 8003646:	e010      	b.n	800366a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003648:	4b0a      	ldr	r3, [pc, #40]	@ (8003674 <SysTick_Config+0x44>)
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	3a01      	subs	r2, #1
 800364e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003650:	2301      	movs	r3, #1
 8003652:	425b      	negs	r3, r3
 8003654:	2103      	movs	r1, #3
 8003656:	0018      	movs	r0, r3
 8003658:	f7ff ff7c 	bl	8003554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800365c:	4b05      	ldr	r3, [pc, #20]	@ (8003674 <SysTick_Config+0x44>)
 800365e:	2200      	movs	r2, #0
 8003660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003662:	4b04      	ldr	r3, [pc, #16]	@ (8003674 <SysTick_Config+0x44>)
 8003664:	2207      	movs	r2, #7
 8003666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003668:	2300      	movs	r3, #0
}
 800366a:	0018      	movs	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	b002      	add	sp, #8
 8003670:	bd80      	pop	{r7, pc}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	e000e010 	.word	0xe000e010

08003678 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	210f      	movs	r1, #15
 8003684:	187b      	adds	r3, r7, r1
 8003686:	1c02      	adds	r2, r0, #0
 8003688:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	187b      	adds	r3, r7, r1
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	b25b      	sxtb	r3, r3
 8003692:	0011      	movs	r1, r2
 8003694:	0018      	movs	r0, r3
 8003696:	f7ff ff5d 	bl	8003554 <__NVIC_SetPriority>
}
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	46bd      	mov	sp, r7
 800369e:	b004      	add	sp, #16
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	0018      	movs	r0, r3
 80036ae:	f7ff ffbf 	bl	8003630 <SysTick_Config>
 80036b2:	0003      	movs	r3, r0
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b002      	add	sp, #8
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ca:	2317      	movs	r3, #23
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2224      	movs	r2, #36	@ 0x24
 80036d6:	5c9b      	ldrb	r3, [r3, r2]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_DMA_Start_IT+0x24>
 80036dc:	2302      	movs	r3, #2
 80036de:	e070      	b.n	80037c2 <HAL_DMA_Start_IT+0x106>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2224      	movs	r2, #36	@ 0x24
 80036e4:	2101      	movs	r1, #1
 80036e6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2225      	movs	r2, #37	@ 0x25
 80036ec:	5c9b      	ldrb	r3, [r3, r2]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d157      	bne.n	80037a4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2225      	movs	r2, #37	@ 0x25
 80036f8:	2102      	movs	r1, #2
 80036fa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2101      	movs	r1, #1
 800370e:	438a      	bics	r2, r1
 8003710:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	68b9      	ldr	r1, [r7, #8]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f8dd 	bl	80038d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	210e      	movs	r1, #14
 8003732:	430a      	orrs	r2, r1
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	e00f      	b.n	8003758 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2104      	movs	r1, #4
 8003744:	438a      	bics	r2, r1
 8003746:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	210a      	movs	r1, #10
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	2380      	movs	r3, #128	@ 0x80
 8003760:	025b      	lsls	r3, r3, #9
 8003762:	4013      	ands	r3, r2
 8003764:	d008      	beq.n	8003778 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003770:	2180      	movs	r1, #128	@ 0x80
 8003772:	0049      	lsls	r1, r1, #1
 8003774:	430a      	orrs	r2, r1
 8003776:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800378a:	2180      	movs	r1, #128	@ 0x80
 800378c:	0049      	lsls	r1, r1, #1
 800378e:	430a      	orrs	r2, r1
 8003790:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2101      	movs	r1, #1
 800379e:	430a      	orrs	r2, r1
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e007      	b.n	80037b4 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2224      	movs	r2, #36	@ 0x24
 80037a8:	2100      	movs	r1, #0
 80037aa:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80037ac:	2317      	movs	r3, #23
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	2202      	movs	r2, #2
 80037b2:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2224      	movs	r2, #36	@ 0x24
 80037b8:	2100      	movs	r1, #0
 80037ba:	5499      	strb	r1, [r3, r2]

  return status;
 80037bc:	2317      	movs	r3, #23
 80037be:	18fb      	adds	r3, r7, r3
 80037c0:	781b      	ldrb	r3, [r3, #0]
}
 80037c2:	0018      	movs	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b006      	add	sp, #24
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037d4:	230f      	movs	r3, #15
 80037d6:	18fb      	adds	r3, r7, r3
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2224      	movs	r2, #36	@ 0x24
 80037e0:	2100      	movs	r1, #0
 80037e2:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2224      	movs	r2, #36	@ 0x24
 80037e8:	5c9b      	ldrb	r3, [r3, r2]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_DMA_Abort_IT+0x26>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e05e      	b.n	80038b0 <HAL_DMA_Abort_IT+0xe4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2224      	movs	r2, #36	@ 0x24
 80037f6:	2101      	movs	r1, #1
 80037f8:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2225      	movs	r2, #37	@ 0x25
 80037fe:	5c9b      	ldrb	r3, [r3, r2]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d007      	beq.n	8003816 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2204      	movs	r2, #4
 800380a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800380c:	230f      	movs	r3, #15
 800380e:	18fb      	adds	r3, r7, r3
 8003810:	2201      	movs	r2, #1
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e049      	b.n	80038aa <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	210e      	movs	r1, #14
 8003822:	438a      	bics	r2, r1
 8003824:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2101      	movs	r1, #1
 8003832:	438a      	bics	r2, r1
 8003834:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003840:	491d      	ldr	r1, [pc, #116]	@ (80038b8 <HAL_DMA_Abort_IT+0xec>)
 8003842:	400a      	ands	r2, r1
 8003844:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8003846:	4b1d      	ldr	r3, [pc, #116]	@ (80038bc <HAL_DMA_Abort_IT+0xf0>)
 8003848:	6859      	ldr	r1, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	221c      	movs	r2, #28
 8003850:	4013      	ands	r3, r2
 8003852:	2201      	movs	r2, #1
 8003854:	409a      	lsls	r2, r3
 8003856:	4b19      	ldr	r3, [pc, #100]	@ (80038bc <HAL_DMA_Abort_IT+0xf0>)
 8003858:	430a      	orrs	r2, r1
 800385a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003864:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00c      	beq.n	8003888 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003878:	490f      	ldr	r1, [pc, #60]	@ (80038b8 <HAL_DMA_Abort_IT+0xec>)
 800387a:	400a      	ands	r2, r1
 800387c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003886:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2225      	movs	r2, #37	@ 0x25
 800388c:	2101      	movs	r1, #1
 800388e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2224      	movs	r2, #36	@ 0x24
 8003894:	2100      	movs	r1, #0
 8003896:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389c:	2b00      	cmp	r3, #0
 800389e:	d004      	beq.n	80038aa <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	0010      	movs	r0, r2
 80038a8:	4798      	blx	r3
    }
  }
  return status;
 80038aa:	230f      	movs	r3, #15
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	781b      	ldrb	r3, [r3, #0]
}
 80038b0:	0018      	movs	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b004      	add	sp, #16
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	fffffeff 	.word	0xfffffeff
 80038bc:	40020000 	.word	0x40020000

080038c0 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2225      	movs	r2, #37	@ 0x25
 80038cc:	5c9b      	ldrb	r3, [r3, r2]
 80038ce:	b2db      	uxtb	r3, r3
}
 80038d0:	0018      	movs	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b002      	add	sp, #8
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80038ee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d004      	beq.n	8003902 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003900:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003902:	4b14      	ldr	r3, [pc, #80]	@ (8003954 <DMA_SetConfig+0x7c>)
 8003904:	6859      	ldr	r1, [r3, #4]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	221c      	movs	r2, #28
 800390c:	4013      	ands	r3, r2
 800390e:	2201      	movs	r2, #1
 8003910:	409a      	lsls	r2, r3
 8003912:	4b10      	ldr	r3, [pc, #64]	@ (8003954 <DMA_SetConfig+0x7c>)
 8003914:	430a      	orrs	r2, r1
 8003916:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b10      	cmp	r3, #16
 8003926:	d108      	bne.n	800393a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003938:	e007      	b.n	800394a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	60da      	str	r2, [r3, #12]
}
 800394a:	46c0      	nop			@ (mov r8, r8)
 800394c:	46bd      	mov	sp, r7
 800394e:	b004      	add	sp, #16
 8003950:	bd80      	pop	{r7, pc}
 8003952:	46c0      	nop			@ (mov r8, r8)
 8003954:	40020000 	.word	0x40020000

08003958 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003966:	e153      	b.n	8003c10 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2101      	movs	r1, #1
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4091      	lsls	r1, r2
 8003972:	000a      	movs	r2, r1
 8003974:	4013      	ands	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d100      	bne.n	8003980 <HAL_GPIO_Init+0x28>
 800397e:	e144      	b.n	8003c0a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d003      	beq.n	8003990 <HAL_GPIO_Init+0x38>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b12      	cmp	r3, #18
 800398e:	d125      	bne.n	80039dc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	08da      	lsrs	r2, r3, #3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3208      	adds	r2, #8
 8003998:	0092      	lsls	r2, r2, #2
 800399a:	58d3      	ldr	r3, [r2, r3]
 800399c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2207      	movs	r2, #7
 80039a2:	4013      	ands	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	220f      	movs	r2, #15
 80039a8:	409a      	lsls	r2, r3
 80039aa:	0013      	movs	r3, r2
 80039ac:	43da      	mvns	r2, r3
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	4013      	ands	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	220f      	movs	r2, #15
 80039ba:	401a      	ands	r2, r3
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2107      	movs	r1, #7
 80039c0:	400b      	ands	r3, r1
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	409a      	lsls	r2, r3
 80039c6:	0013      	movs	r3, r2
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	08da      	lsrs	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3208      	adds	r2, #8
 80039d6:	0092      	lsls	r2, r2, #2
 80039d8:	6979      	ldr	r1, [r7, #20]
 80039da:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	2203      	movs	r2, #3
 80039e8:	409a      	lsls	r2, r3
 80039ea:	0013      	movs	r3, r2
 80039ec:	43da      	mvns	r2, r3
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	4013      	ands	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2203      	movs	r2, #3
 80039fa:	401a      	ands	r2, r3
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	409a      	lsls	r2, r3
 8003a02:	0013      	movs	r3, r2
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d00b      	beq.n	8003a30 <HAL_GPIO_Init+0xd8>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d007      	beq.n	8003a30 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a24:	2b11      	cmp	r3, #17
 8003a26:	d003      	beq.n	8003a30 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b12      	cmp	r3, #18
 8003a2e:	d130      	bne.n	8003a92 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	0013      	movs	r3, r2
 8003a40:	43da      	mvns	r2, r3
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	4013      	ands	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	409a      	lsls	r2, r3
 8003a52:	0013      	movs	r3, r2
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a66:	2201      	movs	r2, #1
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	0013      	movs	r3, r2
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	4013      	ands	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	091b      	lsrs	r3, r3, #4
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	401a      	ands	r2, r3
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	409a      	lsls	r2, r3
 8003a84:	0013      	movs	r3, r2
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d017      	beq.n	8003aca <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	0013      	movs	r3, r2
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	409a      	lsls	r2, r3
 8003abc:	0013      	movs	r3, r2
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	2380      	movs	r3, #128	@ 0x80
 8003ad0:	055b      	lsls	r3, r3, #21
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d100      	bne.n	8003ad8 <HAL_GPIO_Init+0x180>
 8003ad6:	e098      	b.n	8003c0a <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003ad8:	4a53      	ldr	r2, [pc, #332]	@ (8003c28 <HAL_GPIO_Init+0x2d0>)
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	089b      	lsrs	r3, r3, #2
 8003ade:	3318      	adds	r3, #24
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	589b      	ldr	r3, [r3, r2]
 8003ae4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2203      	movs	r2, #3
 8003aea:	4013      	ands	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	220f      	movs	r2, #15
 8003af0:	409a      	lsls	r2, r3
 8003af2:	0013      	movs	r3, r2
 8003af4:	43da      	mvns	r2, r3
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	4013      	ands	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	23a0      	movs	r3, #160	@ 0xa0
 8003b00:	05db      	lsls	r3, r3, #23
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d019      	beq.n	8003b3a <HAL_GPIO_Init+0x1e2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a48      	ldr	r2, [pc, #288]	@ (8003c2c <HAL_GPIO_Init+0x2d4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <HAL_GPIO_Init+0x1de>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a47      	ldr	r2, [pc, #284]	@ (8003c30 <HAL_GPIO_Init+0x2d8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00d      	beq.n	8003b32 <HAL_GPIO_Init+0x1da>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a46      	ldr	r2, [pc, #280]	@ (8003c34 <HAL_GPIO_Init+0x2dc>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <HAL_GPIO_Init+0x1d6>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a45      	ldr	r2, [pc, #276]	@ (8003c38 <HAL_GPIO_Init+0x2e0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d101      	bne.n	8003b2a <HAL_GPIO_Init+0x1d2>
 8003b26:	2305      	movs	r3, #5
 8003b28:	e008      	b.n	8003b3c <HAL_GPIO_Init+0x1e4>
 8003b2a:	2306      	movs	r3, #6
 8003b2c:	e006      	b.n	8003b3c <HAL_GPIO_Init+0x1e4>
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e004      	b.n	8003b3c <HAL_GPIO_Init+0x1e4>
 8003b32:	2302      	movs	r3, #2
 8003b34:	e002      	b.n	8003b3c <HAL_GPIO_Init+0x1e4>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <HAL_GPIO_Init+0x1e4>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	2103      	movs	r1, #3
 8003b40:	400a      	ands	r2, r1
 8003b42:	00d2      	lsls	r2, r2, #3
 8003b44:	4093      	lsls	r3, r2
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003b4c:	4936      	ldr	r1, [pc, #216]	@ (8003c28 <HAL_GPIO_Init+0x2d0>)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	089b      	lsrs	r3, r3, #2
 8003b52:	3318      	adds	r3, #24
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8003b5a:	4a33      	ldr	r2, [pc, #204]	@ (8003c28 <HAL_GPIO_Init+0x2d0>)
 8003b5c:	2380      	movs	r3, #128	@ 0x80
 8003b5e:	58d3      	ldr	r3, [r2, r3]
 8003b60:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	43da      	mvns	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	2380      	movs	r3, #128	@ 0x80
 8003b72:	025b      	lsls	r3, r3, #9
 8003b74:	4013      	ands	r3, r2
 8003b76:	d003      	beq.n	8003b80 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003b80:	4929      	ldr	r1, [pc, #164]	@ (8003c28 <HAL_GPIO_Init+0x2d0>)
 8003b82:	2280      	movs	r2, #128	@ 0x80
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8003b88:	4a27      	ldr	r2, [pc, #156]	@ (8003c28 <HAL_GPIO_Init+0x2d0>)
 8003b8a:	2384      	movs	r3, #132	@ 0x84
 8003b8c:	58d3      	ldr	r3, [r2, r3]
 8003b8e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	43da      	mvns	r2, r3
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	4013      	ands	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	2380      	movs	r3, #128	@ 0x80
 8003ba0:	029b      	lsls	r3, r3, #10
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003bae:	491e      	ldr	r1, [pc, #120]	@ (8003c28 <HAL_GPIO_Init+0x2d0>)
 8003bb0:	2284      	movs	r2, #132	@ 0x84
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c28 <HAL_GPIO_Init+0x2d0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	2380      	movs	r3, #128	@ 0x80
 8003bcc:	035b      	lsls	r3, r3, #13
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003bda:	4b13      	ldr	r3, [pc, #76]	@ (8003c28 <HAL_GPIO_Init+0x2d0>)
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8003be0:	4b11      	ldr	r3, [pc, #68]	@ (8003c28 <HAL_GPIO_Init+0x2d0>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	43da      	mvns	r2, r3
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	4013      	ands	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	2380      	movs	r3, #128	@ 0x80
 8003bf6:	039b      	lsls	r3, r3, #14
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d003      	beq.n	8003c04 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003c04:	4b08      	ldr	r3, [pc, #32]	@ (8003c28 <HAL_GPIO_Init+0x2d0>)
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	40da      	lsrs	r2, r3
 8003c18:	1e13      	subs	r3, r2, #0
 8003c1a:	d000      	beq.n	8003c1e <HAL_GPIO_Init+0x2c6>
 8003c1c:	e6a4      	b.n	8003968 <HAL_GPIO_Init+0x10>
  }
}
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	46c0      	nop			@ (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b006      	add	sp, #24
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40021800 	.word	0x40021800
 8003c2c:	50000400 	.word	0x50000400
 8003c30:	50000800 	.word	0x50000800
 8003c34:	50000c00 	.word	0x50000c00
 8003c38:	50001400 	.word	0x50001400

08003c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	0008      	movs	r0, r1
 8003c46:	0011      	movs	r1, r2
 8003c48:	1cbb      	adds	r3, r7, #2
 8003c4a:	1c02      	adds	r2, r0, #0
 8003c4c:	801a      	strh	r2, [r3, #0]
 8003c4e:	1c7b      	adds	r3, r7, #1
 8003c50:	1c0a      	adds	r2, r1, #0
 8003c52:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c54:	1c7b      	adds	r3, r7, #1
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c5c:	1cbb      	adds	r3, r7, #2
 8003c5e:	881a      	ldrh	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c64:	e003      	b.n	8003c6e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c66:	1cbb      	adds	r3, r7, #2
 8003c68:	881a      	ldrh	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b002      	add	sp, #8
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e08f      	b.n	8003daa <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2241      	movs	r2, #65	@ 0x41
 8003c8e:	5c9b      	ldrb	r3, [r3, r2]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d107      	bne.n	8003ca6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2240      	movs	r2, #64	@ 0x40
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f7fd fc43 	bl	800152c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2241      	movs	r2, #65	@ 0x41
 8003caa:	2124      	movs	r1, #36	@ 0x24
 8003cac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	438a      	bics	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	493b      	ldr	r1, [pc, #236]	@ (8003db4 <HAL_I2C_Init+0x13c>)
 8003cc8:	400a      	ands	r2, r1
 8003cca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4938      	ldr	r1, [pc, #224]	@ (8003db8 <HAL_I2C_Init+0x140>)
 8003cd8:	400a      	ands	r2, r1
 8003cda:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d108      	bne.n	8003cf6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2180      	movs	r1, #128	@ 0x80
 8003cee:	0209      	lsls	r1, r1, #8
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	609a      	str	r2, [r3, #8]
 8003cf4:	e007      	b.n	8003d06 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2184      	movs	r1, #132	@ 0x84
 8003d00:	0209      	lsls	r1, r1, #8
 8003d02:	430a      	orrs	r2, r1
 8003d04:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d109      	bne.n	8003d22 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2180      	movs	r1, #128	@ 0x80
 8003d1a:	0109      	lsls	r1, r1, #4
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	605a      	str	r2, [r3, #4]
 8003d20:	e007      	b.n	8003d32 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4923      	ldr	r1, [pc, #140]	@ (8003dbc <HAL_I2C_Init+0x144>)
 8003d2e:	400a      	ands	r2, r1
 8003d30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4920      	ldr	r1, [pc, #128]	@ (8003dc0 <HAL_I2C_Init+0x148>)
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	491a      	ldr	r1, [pc, #104]	@ (8003db8 <HAL_I2C_Init+0x140>)
 8003d4e:	400a      	ands	r2, r1
 8003d50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69d9      	ldr	r1, [r3, #28]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1a      	ldr	r2, [r3, #32]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2101      	movs	r1, #1
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2241      	movs	r2, #65	@ 0x41
 8003d96:	2120      	movs	r1, #32
 8003d98:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2242      	movs	r2, #66	@ 0x42
 8003da4:	2100      	movs	r1, #0
 8003da6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	0018      	movs	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b002      	add	sp, #8
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	46c0      	nop			@ (mov r8, r8)
 8003db4:	f0ffffff 	.word	0xf0ffffff
 8003db8:	ffff7fff 	.word	0xffff7fff
 8003dbc:	fffff7ff 	.word	0xfffff7ff
 8003dc0:	02008000 	.word	0x02008000

08003dc4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b089      	sub	sp, #36	@ 0x24
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	000c      	movs	r4, r1
 8003dce:	0010      	movs	r0, r2
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	230a      	movs	r3, #10
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	1c22      	adds	r2, r4, #0
 8003dd8:	801a      	strh	r2, [r3, #0]
 8003dda:	2308      	movs	r3, #8
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	1c02      	adds	r2, r0, #0
 8003de0:	801a      	strh	r2, [r3, #0]
 8003de2:	1dbb      	adds	r3, r7, #6
 8003de4:	1c0a      	adds	r2, r1, #0
 8003de6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2241      	movs	r2, #65	@ 0x41
 8003dec:	5c9b      	ldrb	r3, [r3, r2]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d000      	beq.n	8003df6 <HAL_I2C_Mem_Write+0x32>
 8003df4:	e10c      	b.n	8004010 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d004      	beq.n	8003e06 <HAL_I2C_Mem_Write+0x42>
 8003dfc:	232c      	movs	r3, #44	@ 0x2c
 8003dfe:	18fb      	adds	r3, r7, r3
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d105      	bne.n	8003e12 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2280      	movs	r2, #128	@ 0x80
 8003e0a:	0092      	lsls	r2, r2, #2
 8003e0c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e0ff      	b.n	8004012 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2240      	movs	r2, #64	@ 0x40
 8003e16:	5c9b      	ldrb	r3, [r3, r2]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_I2C_Mem_Write+0x5c>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e0f8      	b.n	8004012 <HAL_I2C_Mem_Write+0x24e>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2240      	movs	r2, #64	@ 0x40
 8003e24:	2101      	movs	r1, #1
 8003e26:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e28:	f7fe ff10 	bl	8002c4c <HAL_GetTick>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e30:	2380      	movs	r3, #128	@ 0x80
 8003e32:	0219      	lsls	r1, r3, #8
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	2319      	movs	r3, #25
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f001 fe21 	bl	8005a84 <I2C_WaitOnFlagUntilTimeout>
 8003e42:	1e03      	subs	r3, r0, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e0e3      	b.n	8004012 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2241      	movs	r2, #65	@ 0x41
 8003e4e:	2121      	movs	r1, #33	@ 0x21
 8003e50:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2242      	movs	r2, #66	@ 0x42
 8003e56:	2140      	movs	r1, #64	@ 0x40
 8003e58:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	222c      	movs	r2, #44	@ 0x2c
 8003e6a:	18ba      	adds	r2, r7, r2
 8003e6c:	8812      	ldrh	r2, [r2, #0]
 8003e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e76:	1dbb      	adds	r3, r7, #6
 8003e78:	881c      	ldrh	r4, [r3, #0]
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	881a      	ldrh	r2, [r3, #0]
 8003e80:	230a      	movs	r3, #10
 8003e82:	18fb      	adds	r3, r7, r3
 8003e84:	8819      	ldrh	r1, [r3, #0]
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	9301      	str	r3, [sp, #4]
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	0023      	movs	r3, r4
 8003e92:	f000 ff63 	bl	8004d5c <I2C_RequestMemoryWrite>
 8003e96:	1e03      	subs	r3, r0, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2240      	movs	r2, #64	@ 0x40
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e0b5      	b.n	8004012 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2bff      	cmp	r3, #255	@ 0xff
 8003eae:	d911      	bls.n	8003ed4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	22ff      	movs	r2, #255	@ 0xff
 8003eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	2380      	movs	r3, #128	@ 0x80
 8003ebe:	045c      	lsls	r4, r3, #17
 8003ec0:	230a      	movs	r3, #10
 8003ec2:	18fb      	adds	r3, r7, r3
 8003ec4:	8819      	ldrh	r1, [r3, #0]
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	0023      	movs	r3, r4
 8003ece:	f001 ffb3 	bl	8005e38 <I2C_TransferConfig>
 8003ed2:	e012      	b.n	8003efa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	2380      	movs	r3, #128	@ 0x80
 8003ee6:	049c      	lsls	r4, r3, #18
 8003ee8:	230a      	movs	r3, #10
 8003eea:	18fb      	adds	r3, r7, r3
 8003eec:	8819      	ldrh	r1, [r3, #0]
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	0023      	movs	r3, r4
 8003ef6:	f001 ff9f 	bl	8005e38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	0018      	movs	r0, r3
 8003f02:	f001 fe17 	bl	8005b34 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f06:	1e03      	subs	r3, r0, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e081      	b.n	8004012 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	781a      	ldrb	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d03a      	beq.n	8003fbe <HAL_I2C_Mem_Write+0x1fa>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d136      	bne.n	8003fbe <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	0013      	movs	r3, r2
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2180      	movs	r1, #128	@ 0x80
 8003f5e:	f001 fd91 	bl	8005a84 <I2C_WaitOnFlagUntilTimeout>
 8003f62:	1e03      	subs	r3, r0, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e053      	b.n	8004012 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2bff      	cmp	r3, #255	@ 0xff
 8003f72:	d911      	bls.n	8003f98 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	22ff      	movs	r2, #255	@ 0xff
 8003f78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	2380      	movs	r3, #128	@ 0x80
 8003f82:	045c      	lsls	r4, r3, #17
 8003f84:	230a      	movs	r3, #10
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	8819      	ldrh	r1, [r3, #0]
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	0023      	movs	r3, r4
 8003f92:	f001 ff51 	bl	8005e38 <I2C_TransferConfig>
 8003f96:	e012      	b.n	8003fbe <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	2380      	movs	r3, #128	@ 0x80
 8003faa:	049c      	lsls	r4, r3, #18
 8003fac:	230a      	movs	r3, #10
 8003fae:	18fb      	adds	r3, r7, r3
 8003fb0:	8819      	ldrh	r1, [r3, #0]
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	0023      	movs	r3, r4
 8003fba:	f001 ff3d 	bl	8005e38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d198      	bne.n	8003efa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f001 fdf6 	bl	8005bc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fd4:	1e03      	subs	r3, r0, #0
 8003fd6:	d001      	beq.n	8003fdc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e01a      	b.n	8004012 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	490b      	ldr	r1, [pc, #44]	@ (800401c <HAL_I2C_Mem_Write+0x258>)
 8003ff0:	400a      	ands	r2, r1
 8003ff2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2241      	movs	r2, #65	@ 0x41
 8003ff8:	2120      	movs	r1, #32
 8003ffa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2242      	movs	r2, #66	@ 0x42
 8004000:	2100      	movs	r1, #0
 8004002:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2240      	movs	r2, #64	@ 0x40
 8004008:	2100      	movs	r1, #0
 800400a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	0018      	movs	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	b007      	add	sp, #28
 8004018:	bd90      	pop	{r4, r7, pc}
 800401a:	46c0      	nop			@ (mov r8, r8)
 800401c:	fe00e800 	.word	0xfe00e800

08004020 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004020:	b590      	push	{r4, r7, lr}
 8004022:	b089      	sub	sp, #36	@ 0x24
 8004024:	af02      	add	r7, sp, #8
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	000c      	movs	r4, r1
 800402a:	0010      	movs	r0, r2
 800402c:	0019      	movs	r1, r3
 800402e:	230a      	movs	r3, #10
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	1c22      	adds	r2, r4, #0
 8004034:	801a      	strh	r2, [r3, #0]
 8004036:	2308      	movs	r3, #8
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	1c02      	adds	r2, r0, #0
 800403c:	801a      	strh	r2, [r3, #0]
 800403e:	1dbb      	adds	r3, r7, #6
 8004040:	1c0a      	adds	r2, r1, #0
 8004042:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2241      	movs	r2, #65	@ 0x41
 8004048:	5c9b      	ldrb	r3, [r3, r2]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b20      	cmp	r3, #32
 800404e:	d000      	beq.n	8004052 <HAL_I2C_Mem_Read+0x32>
 8004050:	e110      	b.n	8004274 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004054:	2b00      	cmp	r3, #0
 8004056:	d004      	beq.n	8004062 <HAL_I2C_Mem_Read+0x42>
 8004058:	232c      	movs	r3, #44	@ 0x2c
 800405a:	18fb      	adds	r3, r7, r3
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d105      	bne.n	800406e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2280      	movs	r2, #128	@ 0x80
 8004066:	0092      	lsls	r2, r2, #2
 8004068:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e103      	b.n	8004276 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2240      	movs	r2, #64	@ 0x40
 8004072:	5c9b      	ldrb	r3, [r3, r2]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_I2C_Mem_Read+0x5c>
 8004078:	2302      	movs	r3, #2
 800407a:	e0fc      	b.n	8004276 <HAL_I2C_Mem_Read+0x256>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2240      	movs	r2, #64	@ 0x40
 8004080:	2101      	movs	r1, #1
 8004082:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004084:	f7fe fde2 	bl	8002c4c <HAL_GetTick>
 8004088:	0003      	movs	r3, r0
 800408a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800408c:	2380      	movs	r3, #128	@ 0x80
 800408e:	0219      	lsls	r1, r3, #8
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	2319      	movs	r3, #25
 8004098:	2201      	movs	r2, #1
 800409a:	f001 fcf3 	bl	8005a84 <I2C_WaitOnFlagUntilTimeout>
 800409e:	1e03      	subs	r3, r0, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e0e7      	b.n	8004276 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2241      	movs	r2, #65	@ 0x41
 80040aa:	2122      	movs	r1, #34	@ 0x22
 80040ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2242      	movs	r2, #66	@ 0x42
 80040b2:	2140      	movs	r1, #64	@ 0x40
 80040b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	222c      	movs	r2, #44	@ 0x2c
 80040c6:	18ba      	adds	r2, r7, r2
 80040c8:	8812      	ldrh	r2, [r2, #0]
 80040ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040d2:	1dbb      	adds	r3, r7, #6
 80040d4:	881c      	ldrh	r4, [r3, #0]
 80040d6:	2308      	movs	r3, #8
 80040d8:	18fb      	adds	r3, r7, r3
 80040da:	881a      	ldrh	r2, [r3, #0]
 80040dc:	230a      	movs	r3, #10
 80040de:	18fb      	adds	r3, r7, r3
 80040e0:	8819      	ldrh	r1, [r3, #0]
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	0023      	movs	r3, r4
 80040ee:	f000 fe99 	bl	8004e24 <I2C_RequestMemoryRead>
 80040f2:	1e03      	subs	r3, r0, #0
 80040f4:	d005      	beq.n	8004102 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2240      	movs	r2, #64	@ 0x40
 80040fa:	2100      	movs	r1, #0
 80040fc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e0b9      	b.n	8004276 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004106:	b29b      	uxth	r3, r3
 8004108:	2bff      	cmp	r3, #255	@ 0xff
 800410a:	d911      	bls.n	8004130 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	22ff      	movs	r2, #255	@ 0xff
 8004110:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004116:	b2da      	uxtb	r2, r3
 8004118:	2380      	movs	r3, #128	@ 0x80
 800411a:	045c      	lsls	r4, r3, #17
 800411c:	230a      	movs	r3, #10
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	8819      	ldrh	r1, [r3, #0]
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	4b56      	ldr	r3, [pc, #344]	@ (8004280 <HAL_I2C_Mem_Read+0x260>)
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	0023      	movs	r3, r4
 800412a:	f001 fe85 	bl	8005e38 <I2C_TransferConfig>
 800412e:	e012      	b.n	8004156 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413e:	b2da      	uxtb	r2, r3
 8004140:	2380      	movs	r3, #128	@ 0x80
 8004142:	049c      	lsls	r4, r3, #18
 8004144:	230a      	movs	r3, #10
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	8819      	ldrh	r1, [r3, #0]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	4b4c      	ldr	r3, [pc, #304]	@ (8004280 <HAL_I2C_Mem_Read+0x260>)
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	0023      	movs	r3, r4
 8004152:	f001 fe71 	bl	8005e38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	0013      	movs	r3, r2
 8004160:	2200      	movs	r2, #0
 8004162:	2104      	movs	r1, #4
 8004164:	f001 fc8e 	bl	8005a84 <I2C_WaitOnFlagUntilTimeout>
 8004168:	1e03      	subs	r3, r0, #0
 800416a:	d001      	beq.n	8004170 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e082      	b.n	8004276 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d03a      	beq.n	8004222 <HAL_I2C_Mem_Read+0x202>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d136      	bne.n	8004222 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	0013      	movs	r3, r2
 80041be:	2200      	movs	r2, #0
 80041c0:	2180      	movs	r1, #128	@ 0x80
 80041c2:	f001 fc5f 	bl	8005a84 <I2C_WaitOnFlagUntilTimeout>
 80041c6:	1e03      	subs	r3, r0, #0
 80041c8:	d001      	beq.n	80041ce <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e053      	b.n	8004276 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2bff      	cmp	r3, #255	@ 0xff
 80041d6:	d911      	bls.n	80041fc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	22ff      	movs	r2, #255	@ 0xff
 80041dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	2380      	movs	r3, #128	@ 0x80
 80041e6:	045c      	lsls	r4, r3, #17
 80041e8:	230a      	movs	r3, #10
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	8819      	ldrh	r1, [r3, #0]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	2300      	movs	r3, #0
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	0023      	movs	r3, r4
 80041f6:	f001 fe1f 	bl	8005e38 <I2C_TransferConfig>
 80041fa:	e012      	b.n	8004222 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420a:	b2da      	uxtb	r2, r3
 800420c:	2380      	movs	r3, #128	@ 0x80
 800420e:	049c      	lsls	r4, r3, #18
 8004210:	230a      	movs	r3, #10
 8004212:	18fb      	adds	r3, r7, r3
 8004214:	8819      	ldrh	r1, [r3, #0]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	2300      	movs	r3, #0
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	0023      	movs	r3, r4
 800421e:	f001 fe0b 	bl	8005e38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d194      	bne.n	8004156 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	0018      	movs	r0, r3
 8004234:	f001 fcc4 	bl	8005bc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004238:	1e03      	subs	r3, r0, #0
 800423a:	d001      	beq.n	8004240 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e01a      	b.n	8004276 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2220      	movs	r2, #32
 8004246:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	490c      	ldr	r1, [pc, #48]	@ (8004284 <HAL_I2C_Mem_Read+0x264>)
 8004254:	400a      	ands	r2, r1
 8004256:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2241      	movs	r2, #65	@ 0x41
 800425c:	2120      	movs	r1, #32
 800425e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2242      	movs	r2, #66	@ 0x42
 8004264:	2100      	movs	r1, #0
 8004266:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2240      	movs	r2, #64	@ 0x40
 800426c:	2100      	movs	r1, #0
 800426e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004274:	2302      	movs	r3, #2
  }
}
 8004276:	0018      	movs	r0, r3
 8004278:	46bd      	mov	sp, r7
 800427a:	b007      	add	sp, #28
 800427c:	bd90      	pop	{r4, r7, pc}
 800427e:	46c0      	nop			@ (mov r8, r8)
 8004280:	80002400 	.word	0x80002400
 8004284:	fe00e800 	.word	0xfe00e800

08004288 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004288:	b5b0      	push	{r4, r5, r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af02      	add	r7, sp, #8
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	000c      	movs	r4, r1
 8004292:	0010      	movs	r0, r2
 8004294:	0019      	movs	r1, r3
 8004296:	230a      	movs	r3, #10
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	1c22      	adds	r2, r4, #0
 800429c:	801a      	strh	r2, [r3, #0]
 800429e:	2308      	movs	r3, #8
 80042a0:	18fb      	adds	r3, r7, r3
 80042a2:	1c02      	adds	r2, r0, #0
 80042a4:	801a      	strh	r2, [r3, #0]
 80042a6:	1dbb      	adds	r3, r7, #6
 80042a8:	1c0a      	adds	r2, r1, #0
 80042aa:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2241      	movs	r2, #65	@ 0x41
 80042b0:	5c9b      	ldrb	r3, [r3, r2]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d000      	beq.n	80042ba <HAL_I2C_Mem_Write_DMA+0x32>
 80042b8:	e0d8      	b.n	800446c <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <HAL_I2C_Mem_Write_DMA+0x42>
 80042c0:	232c      	movs	r3, #44	@ 0x2c
 80042c2:	18fb      	adds	r3, r7, r3
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d105      	bne.n	80042d6 <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2280      	movs	r2, #128	@ 0x80
 80042ce:	0092      	lsls	r2, r2, #2
 80042d0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e0cb      	b.n	800446e <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699a      	ldr	r2, [r3, #24]
 80042dc:	2380      	movs	r3, #128	@ 0x80
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	401a      	ands	r2, r3
 80042e2:	2380      	movs	r3, #128	@ 0x80
 80042e4:	021b      	lsls	r3, r3, #8
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d101      	bne.n	80042ee <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 80042ea:	2302      	movs	r3, #2
 80042ec:	e0bf      	b.n	800446e <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2240      	movs	r2, #64	@ 0x40
 80042f2:	5c9b      	ldrb	r3, [r3, r2]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_I2C_Mem_Write_DMA+0x74>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e0b8      	b.n	800446e <HAL_I2C_Mem_Write_DMA+0x1e6>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2240      	movs	r2, #64	@ 0x40
 8004300:	2101      	movs	r1, #1
 8004302:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2241      	movs	r2, #65	@ 0x41
 8004308:	2121      	movs	r1, #33	@ 0x21
 800430a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2242      	movs	r2, #66	@ 0x42
 8004310:	2140      	movs	r1, #64	@ 0x40
 8004312:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800431e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	222c      	movs	r2, #44	@ 0x2c
 8004324:	18ba      	adds	r2, r7, r2
 8004326:	8812      	ldrh	r2, [r2, #0]
 8004328:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4a52      	ldr	r2, [pc, #328]	@ (8004478 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 800432e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4a52      	ldr	r2, [pc, #328]	@ (800447c <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8004334:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8004336:	230a      	movs	r3, #10
 8004338:	18fb      	adds	r3, r7, r3
 800433a:	881a      	ldrh	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	2bff      	cmp	r3, #255	@ 0xff
 8004348:	d903      	bls.n	8004352 <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	22ff      	movs	r2, #255	@ 0xff
 800434e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004350:	e004      	b.n	800435c <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800435c:	1dbb      	adds	r3, r7, #6
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d10b      	bne.n	800437c <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004364:	2308      	movs	r3, #8
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b2da      	uxtb	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	4252      	negs	r2, r2
 8004378:	651a      	str	r2, [r3, #80]	@ 0x50
 800437a:	e00e      	b.n	800439a <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800437c:	2108      	movs	r1, #8
 800437e:	187b      	adds	r3, r7, r1
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	0a1b      	lsrs	r3, r3, #8
 8004384:	b29b      	uxth	r3, r3
 8004386:	b2da      	uxtb	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800438e:	187b      	adds	r3, r7, r1
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	001a      	movs	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d023      	beq.n	80043ea <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a6:	4a36      	ldr	r2, [pc, #216]	@ (8004480 <HAL_I2C_Mem_Write_DMA+0x1f8>)
 80043a8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ae:	4a35      	ldr	r2, [pc, #212]	@ (8004484 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 80043b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b6:	2200      	movs	r2, #0
 80043b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043be:	2200      	movs	r2, #0
 80043c0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80043c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3328      	adds	r3, #40	@ 0x28
 80043ce:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80043d4:	2517      	movs	r5, #23
 80043d6:	197c      	adds	r4, r7, r5
 80043d8:	f7ff f970 	bl	80036bc <HAL_DMA_Start_IT>
 80043dc:	0003      	movs	r3, r0
 80043de:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80043e0:	197b      	adds	r3, r7, r5
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d12d      	bne.n	8004444 <HAL_I2C_Mem_Write_DMA+0x1bc>
 80043e8:	e013      	b.n	8004412 <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2241      	movs	r2, #65	@ 0x41
 80043ee:	2120      	movs	r1, #32
 80043f0:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2242      	movs	r2, #66	@ 0x42
 80043f6:	2100      	movs	r1, #0
 80043f8:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	2280      	movs	r2, #128	@ 0x80
 8004400:	431a      	orrs	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2240      	movs	r2, #64	@ 0x40
 800440a:	2100      	movs	r1, #0
 800440c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e02d      	b.n	800446e <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004412:	1dbb      	adds	r3, r7, #6
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	b2da      	uxtb	r2, r3
 8004418:	2380      	movs	r3, #128	@ 0x80
 800441a:	045c      	lsls	r4, r3, #17
 800441c:	230a      	movs	r3, #10
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	8819      	ldrh	r1, [r3, #0]
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	4b18      	ldr	r3, [pc, #96]	@ (8004488 <HAL_I2C_Mem_Write_DMA+0x200>)
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	0023      	movs	r3, r4
 800442a:	f001 fd05 	bl	8005e38 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2240      	movs	r2, #64	@ 0x40
 8004432:	2100      	movs	r1, #0
 8004434:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2101      	movs	r1, #1
 800443a:	0018      	movs	r0, r3
 800443c:	f001 fd36 	bl	8005eac <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8004440:	2300      	movs	r3, #0
 8004442:	e014      	b.n	800446e <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2241      	movs	r2, #65	@ 0x41
 8004448:	2120      	movs	r1, #32
 800444a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2242      	movs	r2, #66	@ 0x42
 8004450:	2100      	movs	r1, #0
 8004452:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004458:	2210      	movs	r2, #16
 800445a:	431a      	orrs	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2240      	movs	r2, #64	@ 0x40
 8004464:	2100      	movs	r1, #0
 8004466:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 800446c:	2302      	movs	r3, #2
  }
}
 800446e:	0018      	movs	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	b006      	add	sp, #24
 8004474:	bdb0      	pop	{r4, r5, r7, pc}
 8004476:	46c0      	nop			@ (mov r8, r8)
 8004478:	ffff0000 	.word	0xffff0000
 800447c:	08004935 	.word	0x08004935
 8004480:	08005975 	.word	0x08005975
 8004484:	08005a15 	.word	0x08005a15
 8004488:	80002000 	.word	0x80002000

0800448c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004494:	46c0      	nop			@ (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	b002      	add	sp, #8
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80044a4:	46c0      	nop			@ (mov r8, r8)
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b002      	add	sp, #8
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80044b4:	46c0      	nop			@ (mov r8, r8)
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b002      	add	sp, #8
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80044c4:	46c0      	nop			@ (mov r8, r8)
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b002      	add	sp, #8
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	0008      	movs	r0, r1
 80044d6:	0011      	movs	r1, r2
 80044d8:	1cfb      	adds	r3, r7, #3
 80044da:	1c02      	adds	r2, r0, #0
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	003b      	movs	r3, r7
 80044e0:	1c0a      	adds	r2, r1, #0
 80044e2:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80044e4:	46c0      	nop			@ (mov r8, r8)
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b002      	add	sp, #8
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80044f4:	46c0      	nop			@ (mov r8, r8)
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b002      	add	sp, #8
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004504:	46c0      	nop			@ (mov r8, r8)
 8004506:	46bd      	mov	sp, r7
 8004508:	b002      	add	sp, #8
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004514:	46c0      	nop			@ (mov r8, r8)
 8004516:	46bd      	mov	sp, r7
 8004518:	b002      	add	sp, #8
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004524:	46c0      	nop			@ (mov r8, r8)
 8004526:	46bd      	mov	sp, r7
 8004528:	b002      	add	sp, #8
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004534:	46c0      	nop			@ (mov r8, r8)
 8004536:	46bd      	mov	sp, r7
 8004538:	b002      	add	sp, #8
 800453a:	bd80      	pop	{r7, pc}

0800453c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2240      	movs	r2, #64	@ 0x40
 8004556:	5c9b      	ldrb	r3, [r3, r2]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <I2C_Slave_ISR_IT+0x24>
 800455c:	2302      	movs	r3, #2
 800455e:	e0e7      	b.n	8004730 <I2C_Slave_ISR_IT+0x1f4>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2240      	movs	r2, #64	@ 0x40
 8004564:	2101      	movs	r1, #1
 8004566:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	2220      	movs	r2, #32
 800456c:	4013      	ands	r3, r2
 800456e:	d00a      	beq.n	8004586 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004576:	d006      	beq.n	8004586 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	0011      	movs	r1, r2
 800457e:	0018      	movs	r0, r3
 8004580:	f000 feca 	bl	8005318 <I2C_ITSlaveCplt>
 8004584:	e0cf      	b.n	8004726 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2210      	movs	r2, #16
 800458a:	4013      	ands	r3, r2
 800458c:	d052      	beq.n	8004634 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2210      	movs	r2, #16
 8004592:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004594:	d04e      	beq.n	8004634 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d12d      	bne.n	80045fc <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2241      	movs	r2, #65	@ 0x41
 80045a4:	5c9b      	ldrb	r3, [r3, r2]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b28      	cmp	r3, #40	@ 0x28
 80045aa:	d10b      	bne.n	80045c4 <I2C_Slave_ISR_IT+0x88>
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	2380      	movs	r3, #128	@ 0x80
 80045b0:	049b      	lsls	r3, r3, #18
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d106      	bne.n	80045c4 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	0011      	movs	r1, r2
 80045bc:	0018      	movs	r0, r3
 80045be:	f001 f833 	bl	8005628 <I2C_ITListenCplt>
 80045c2:	e036      	b.n	8004632 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2241      	movs	r2, #65	@ 0x41
 80045c8:	5c9b      	ldrb	r3, [r3, r2]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b29      	cmp	r3, #41	@ 0x29
 80045ce:	d110      	bne.n	80045f2 <I2C_Slave_ISR_IT+0xb6>
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	4a59      	ldr	r2, [pc, #356]	@ (8004738 <I2C_Slave_ISR_IT+0x1fc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00c      	beq.n	80045f2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2210      	movs	r2, #16
 80045de:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	0018      	movs	r0, r3
 80045e4:	f001 f9a3 	bl	800592e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	0018      	movs	r0, r3
 80045ec:	f000 fd62 	bl	80050b4 <I2C_ITSlaveSeqCplt>
 80045f0:	e01f      	b.n	8004632 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2210      	movs	r2, #16
 80045f8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80045fa:	e091      	b.n	8004720 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2210      	movs	r2, #16
 8004602:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004608:	2204      	movs	r2, #4
 800460a:	431a      	orrs	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <I2C_Slave_ISR_IT+0xe6>
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	2380      	movs	r3, #128	@ 0x80
 800461a:	045b      	lsls	r3, r3, #17
 800461c:	429a      	cmp	r2, r3
 800461e:	d000      	beq.n	8004622 <I2C_Slave_ISR_IT+0xe6>
 8004620:	e07e      	b.n	8004720 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	0011      	movs	r1, r2
 800462a:	0018      	movs	r0, r3
 800462c:	f001 f854 	bl	80056d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004630:	e076      	b.n	8004720 <I2C_Slave_ISR_IT+0x1e4>
 8004632:	e075      	b.n	8004720 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	2204      	movs	r2, #4
 8004638:	4013      	ands	r3, r2
 800463a:	d02f      	beq.n	800469c <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2204      	movs	r2, #4
 8004640:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004642:	d02b      	beq.n	800469c <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d018      	beq.n	8004680 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004684:	b29b      	uxth	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d14c      	bne.n	8004724 <I2C_Slave_ISR_IT+0x1e8>
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	4a2a      	ldr	r2, [pc, #168]	@ (8004738 <I2C_Slave_ISR_IT+0x1fc>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d048      	beq.n	8004724 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	0018      	movs	r0, r3
 8004696:	f000 fd0d 	bl	80050b4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800469a:	e043      	b.n	8004724 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2208      	movs	r2, #8
 80046a0:	4013      	ands	r3, r2
 80046a2:	d00a      	beq.n	80046ba <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2208      	movs	r2, #8
 80046a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80046aa:	d006      	beq.n	80046ba <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	0011      	movs	r1, r2
 80046b2:	0018      	movs	r0, r3
 80046b4:	f000 fc18 	bl	8004ee8 <I2C_ITAddrCplt>
 80046b8:	e035      	b.n	8004726 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	2202      	movs	r2, #2
 80046be:	4013      	ands	r3, r2
 80046c0:	d031      	beq.n	8004726 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80046c8:	d02d      	beq.n	8004726 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d018      	beq.n	8004706 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d8:	781a      	ldrb	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004704:	e00f      	b.n	8004726 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	2380      	movs	r3, #128	@ 0x80
 800470a:	045b      	lsls	r3, r3, #17
 800470c:	429a      	cmp	r2, r3
 800470e:	d002      	beq.n	8004716 <I2C_Slave_ISR_IT+0x1da>
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d107      	bne.n	8004726 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	0018      	movs	r0, r3
 800471a:	f000 fccb 	bl	80050b4 <I2C_ITSlaveSeqCplt>
 800471e:	e002      	b.n	8004726 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8004720:	46c0      	nop			@ (mov r8, r8)
 8004722:	e000      	b.n	8004726 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8004724:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2240      	movs	r2, #64	@ 0x40
 800472a:	2100      	movs	r1, #0
 800472c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	0018      	movs	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	b006      	add	sp, #24
 8004736:	bd80      	pop	{r7, pc}
 8004738:	ffff0000 	.word	0xffff0000

0800473c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800473c:	b590      	push	{r4, r7, lr}
 800473e:	b089      	sub	sp, #36	@ 0x24
 8004740:	af02      	add	r7, sp, #8
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2240      	movs	r2, #64	@ 0x40
 800474c:	5c9b      	ldrb	r3, [r3, r2]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <I2C_Master_ISR_DMA+0x1a>
 8004752:	2302      	movs	r3, #2
 8004754:	e0e7      	b.n	8004926 <I2C_Master_ISR_DMA+0x1ea>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2240      	movs	r2, #64	@ 0x40
 800475a:	2101      	movs	r1, #1
 800475c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2210      	movs	r2, #16
 8004762:	4013      	ands	r3, r2
 8004764:	d017      	beq.n	8004796 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2210      	movs	r2, #16
 800476a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800476c:	d013      	beq.n	8004796 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2210      	movs	r2, #16
 8004774:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477a:	2204      	movs	r2, #4
 800477c:	431a      	orrs	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2120      	movs	r1, #32
 8004786:	0018      	movs	r0, r3
 8004788:	f001 fb90 	bl	8005eac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	0018      	movs	r0, r3
 8004790:	f001 f8cd 	bl	800592e <I2C_Flush_TXDR>
 8004794:	e0c2      	b.n	800491c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2280      	movs	r2, #128	@ 0x80
 800479a:	4013      	ands	r3, r2
 800479c:	d100      	bne.n	80047a0 <I2C_Master_ISR_DMA+0x64>
 800479e:	e07c      	b.n	800489a <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2240      	movs	r2, #64	@ 0x40
 80047a4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80047a6:	d100      	bne.n	80047aa <I2C_Master_ISR_DMA+0x6e>
 80047a8:	e077      	b.n	800489a <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2140      	movs	r1, #64	@ 0x40
 80047b6:	438a      	bics	r2, r1
 80047b8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047be:	b29b      	uxth	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d055      	beq.n	8004870 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	2312      	movs	r3, #18
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	0592      	lsls	r2, r2, #22
 80047d2:	0d92      	lsrs	r2, r2, #22
 80047d4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2bff      	cmp	r3, #255	@ 0xff
 80047de:	d906      	bls.n	80047ee <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	22ff      	movs	r2, #255	@ 0xff
 80047e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80047e6:	2380      	movs	r3, #128	@ 0x80
 80047e8:	045b      	lsls	r3, r3, #17
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	e010      	b.n	8004810 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fc:	4a4c      	ldr	r2, [pc, #304]	@ (8004930 <I2C_Master_ISR_DMA+0x1f4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d003      	beq.n	800480a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	e002      	b.n	8004810 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800480a:	2380      	movs	r3, #128	@ 0x80
 800480c:	049b      	lsls	r3, r3, #18
 800480e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004814:	b2da      	uxtb	r2, r3
 8004816:	697c      	ldr	r4, [r7, #20]
 8004818:	2312      	movs	r3, #18
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	8819      	ldrh	r1, [r3, #0]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	2300      	movs	r3, #0
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	0023      	movs	r3, r4
 8004826:	f001 fb07 	bl	8005e38 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2241      	movs	r2, #65	@ 0x41
 8004840:	5c9b      	ldrb	r3, [r3, r2]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b22      	cmp	r3, #34	@ 0x22
 8004846:	d109      	bne.n	800485c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2180      	movs	r1, #128	@ 0x80
 8004854:	0209      	lsls	r1, r1, #8
 8004856:	430a      	orrs	r2, r1
 8004858:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800485a:	e05f      	b.n	800491c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2180      	movs	r1, #128	@ 0x80
 8004868:	01c9      	lsls	r1, r1, #7
 800486a:	430a      	orrs	r2, r1
 800486c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800486e:	e055      	b.n	800491c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	2380      	movs	r3, #128	@ 0x80
 8004878:	049b      	lsls	r3, r3, #18
 800487a:	401a      	ands	r2, r3
 800487c:	2380      	movs	r3, #128	@ 0x80
 800487e:	049b      	lsls	r3, r3, #18
 8004880:	429a      	cmp	r2, r3
 8004882:	d004      	beq.n	800488e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	0018      	movs	r0, r3
 8004888:	f000 fbd2 	bl	8005030 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800488c:	e046      	b.n	800491c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2140      	movs	r1, #64	@ 0x40
 8004892:	0018      	movs	r0, r3
 8004894:	f000 ff20 	bl	80056d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004898:	e040      	b.n	800491c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2240      	movs	r2, #64	@ 0x40
 800489e:	4013      	ands	r3, r2
 80048a0:	d02c      	beq.n	80048fc <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2240      	movs	r2, #64	@ 0x40
 80048a6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80048a8:	d028      	beq.n	80048fc <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d11d      	bne.n	80048f0 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	2380      	movs	r3, #128	@ 0x80
 80048bc:	049b      	lsls	r3, r3, #18
 80048be:	401a      	ands	r2, r3
 80048c0:	2380      	movs	r3, #128	@ 0x80
 80048c2:	049b      	lsls	r3, r3, #18
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d028      	beq.n	800491a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048cc:	4a18      	ldr	r2, [pc, #96]	@ (8004930 <I2C_Master_ISR_DMA+0x1f4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d109      	bne.n	80048e6 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2180      	movs	r1, #128	@ 0x80
 80048de:	01c9      	lsls	r1, r1, #7
 80048e0:	430a      	orrs	r2, r1
 80048e2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80048e4:	e019      	b.n	800491a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	0018      	movs	r0, r3
 80048ea:	f000 fba1 	bl	8005030 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80048ee:	e014      	b.n	800491a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2140      	movs	r1, #64	@ 0x40
 80048f4:	0018      	movs	r0, r3
 80048f6:	f000 feef 	bl	80056d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80048fa:	e00e      	b.n	800491a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2220      	movs	r2, #32
 8004900:	4013      	ands	r3, r2
 8004902:	d00b      	beq.n	800491c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800490a:	d007      	beq.n	800491c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	0011      	movs	r1, r2
 8004912:	0018      	movs	r0, r3
 8004914:	f000 fc32 	bl	800517c <I2C_ITMasterCplt>
 8004918:	e000      	b.n	800491c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800491a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2240      	movs	r2, #64	@ 0x40
 8004920:	2100      	movs	r1, #0
 8004922:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	0018      	movs	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	b007      	add	sp, #28
 800492c:	bd90      	pop	{r4, r7, pc}
 800492e:	46c0      	nop			@ (mov r8, r8)
 8004930:	ffff0000 	.word	0xffff0000

08004934 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004934:	b590      	push	{r4, r7, lr}
 8004936:	b089      	sub	sp, #36	@ 0x24
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004940:	4b90      	ldr	r3, [pc, #576]	@ (8004b84 <I2C_Mem_ISR_DMA+0x250>)
 8004942:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2240      	movs	r2, #64	@ 0x40
 8004948:	5c9b      	ldrb	r3, [r3, r2]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <I2C_Mem_ISR_DMA+0x1e>
 800494e:	2302      	movs	r3, #2
 8004950:	e113      	b.n	8004b7a <I2C_Mem_ISR_DMA+0x246>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2240      	movs	r2, #64	@ 0x40
 8004956:	2101      	movs	r1, #1
 8004958:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2210      	movs	r2, #16
 800495e:	4013      	ands	r3, r2
 8004960:	d017      	beq.n	8004992 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2210      	movs	r2, #16
 8004966:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004968:	d013      	beq.n	8004992 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2210      	movs	r2, #16
 8004970:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004976:	2204      	movs	r2, #4
 8004978:	431a      	orrs	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2120      	movs	r1, #32
 8004982:	0018      	movs	r0, r3
 8004984:	f001 fa92 	bl	8005eac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	0018      	movs	r0, r3
 800498c:	f000 ffcf 	bl	800592e <I2C_Flush_TXDR>
 8004990:	e0ee      	b.n	8004b70 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2202      	movs	r2, #2
 8004996:	4013      	ands	r3, r2
 8004998:	d00d      	beq.n	80049b6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2202      	movs	r2, #2
 800499e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80049a0:	d009      	beq.n	80049b6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2201      	movs	r2, #1
 80049b0:	4252      	negs	r2, r2
 80049b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80049b4:	e0dc      	b.n	8004b70 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2280      	movs	r2, #128	@ 0x80
 80049ba:	4013      	ands	r3, r2
 80049bc:	d063      	beq.n	8004a86 <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2240      	movs	r2, #64	@ 0x40
 80049c2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80049c4:	d05f      	beq.n	8004a86 <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2101      	movs	r1, #1
 80049ca:	0018      	movs	r0, r3
 80049cc:	f001 faf8 	bl	8005fc0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2110      	movs	r1, #16
 80049d4:	0018      	movs	r0, r3
 80049d6:	f001 fa69 	bl	8005eac <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d04a      	beq.n	8004a7a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2bff      	cmp	r3, #255	@ 0xff
 80049ec:	d910      	bls.n	8004a10 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	22ff      	movs	r2, #255	@ 0xff
 80049f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f8:	b299      	uxth	r1, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	2380      	movs	r3, #128	@ 0x80
 8004a02:	045b      	lsls	r3, r3, #17
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	2400      	movs	r4, #0
 8004a08:	9400      	str	r4, [sp, #0]
 8004a0a:	f001 fa15 	bl	8005e38 <I2C_TransferConfig>
 8004a0e:	e011      	b.n	8004a34 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a1e:	b299      	uxth	r1, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	2380      	movs	r3, #128	@ 0x80
 8004a28:	049b      	lsls	r3, r3, #18
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	2400      	movs	r4, #0
 8004a2e:	9400      	str	r4, [sp, #0]
 8004a30:	f001 fa02 	bl	8005e38 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2241      	movs	r2, #65	@ 0x41
 8004a4a:	5c9b      	ldrb	r3, [r3, r2]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b22      	cmp	r3, #34	@ 0x22
 8004a50:	d109      	bne.n	8004a66 <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2180      	movs	r1, #128	@ 0x80
 8004a5e:	0209      	lsls	r1, r1, #8
 8004a60:	430a      	orrs	r2, r1
 8004a62:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004a64:	e084      	b.n	8004b70 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2180      	movs	r1, #128	@ 0x80
 8004a72:	01c9      	lsls	r1, r1, #7
 8004a74:	430a      	orrs	r2, r1
 8004a76:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004a78:	e07a      	b.n	8004b70 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2140      	movs	r1, #64	@ 0x40
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f000 fe2a 	bl	80056d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004a84:	e074      	b.n	8004b70 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2240      	movs	r2, #64	@ 0x40
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d062      	beq.n	8004b54 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2240      	movs	r2, #64	@ 0x40
 8004a92:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004a94:	d05e      	beq.n	8004b54 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2101      	movs	r1, #1
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f001 fa90 	bl	8005fc0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2110      	movs	r1, #16
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f001 fa01 	bl	8005eac <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2241      	movs	r2, #65	@ 0x41
 8004aae:	5c9b      	ldrb	r3, [r3, r2]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b22      	cmp	r3, #34	@ 0x22
 8004ab4:	d101      	bne.n	8004aba <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 8004ab6:	4b34      	ldr	r3, [pc, #208]	@ (8004b88 <I2C_Mem_ISR_DMA+0x254>)
 8004ab8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2bff      	cmp	r3, #255	@ 0xff
 8004ac2:	d911      	bls.n	8004ae8 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	22ff      	movs	r2, #255	@ 0xff
 8004ac8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ace:	b299      	uxth	r1, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	2380      	movs	r3, #128	@ 0x80
 8004ad8:	045c      	lsls	r4, r3, #17
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	0023      	movs	r3, r4
 8004ae2:	f001 f9a9 	bl	8005e38 <I2C_TransferConfig>
 8004ae6:	e012      	b.n	8004b0e <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af6:	b299      	uxth	r1, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	2380      	movs	r3, #128	@ 0x80
 8004b00:	049c      	lsls	r4, r3, #18
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	0023      	movs	r3, r4
 8004b0a:	f001 f995 	bl	8005e38 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2241      	movs	r2, #65	@ 0x41
 8004b24:	5c9b      	ldrb	r3, [r3, r2]
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b22      	cmp	r3, #34	@ 0x22
 8004b2a:	d109      	bne.n	8004b40 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2180      	movs	r1, #128	@ 0x80
 8004b38:	0209      	lsls	r1, r1, #8
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b3e:	e017      	b.n	8004b70 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2180      	movs	r1, #128	@ 0x80
 8004b4c:	01c9      	lsls	r1, r1, #7
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b52:	e00d      	b.n	8004b70 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2220      	movs	r2, #32
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d009      	beq.n	8004b70 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b62:	d005      	beq.n	8004b70 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	0011      	movs	r1, r2
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f000 fb06 	bl	800517c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2240      	movs	r2, #64	@ 0x40
 8004b74:	2100      	movs	r1, #0
 8004b76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	b007      	add	sp, #28
 8004b80:	bd90      	pop	{r4, r7, pc}
 8004b82:	46c0      	nop			@ (mov r8, r8)
 8004b84:	80002000 	.word	0x80002000
 8004b88:	80002400 	.word	0x80002400

08004b8c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2240      	movs	r2, #64	@ 0x40
 8004ba6:	5c9b      	ldrb	r3, [r3, r2]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <I2C_Slave_ISR_DMA+0x24>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e0ce      	b.n	8004d4e <I2C_Slave_ISR_DMA+0x1c2>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2240      	movs	r2, #64	@ 0x40
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d00a      	beq.n	8004bd6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004bc6:	d006      	beq.n	8004bd6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	0011      	movs	r1, r2
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f000 fba2 	bl	8005318 <I2C_ITSlaveCplt>
 8004bd4:	e0b6      	b.n	8004d44 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2210      	movs	r2, #16
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d100      	bne.n	8004be0 <I2C_Slave_ISR_DMA+0x54>
 8004bde:	e0a3      	b.n	8004d28 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2210      	movs	r2, #16
 8004be4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004be6:	d100      	bne.n	8004bea <I2C_Slave_ISR_DMA+0x5e>
 8004be8:	e09e      	b.n	8004d28 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	2380      	movs	r3, #128	@ 0x80
 8004bee:	01db      	lsls	r3, r3, #7
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	d105      	bne.n	8004c00 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	2380      	movs	r3, #128	@ 0x80
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004bfc:	d100      	bne.n	8004c00 <I2C_Slave_ISR_DMA+0x74>
 8004bfe:	e08c      	b.n	8004d1a <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00c      	beq.n	8004c22 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	2380      	movs	r3, #128	@ 0x80
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d007      	beq.n	8004c22 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00c      	beq.n	8004c44 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	2380      	movs	r3, #128	@ 0x80
 8004c2e:	01db      	lsls	r3, r3, #7
 8004c30:	4013      	ands	r3, r2
 8004c32:	d007      	beq.n	8004c44 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8004c40:	2301      	movs	r3, #1
 8004c42:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d12d      	bne.n	8004ca6 <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2241      	movs	r2, #65	@ 0x41
 8004c4e:	5c9b      	ldrb	r3, [r3, r2]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b28      	cmp	r3, #40	@ 0x28
 8004c54:	d10b      	bne.n	8004c6e <I2C_Slave_ISR_DMA+0xe2>
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	2380      	movs	r3, #128	@ 0x80
 8004c5a:	049b      	lsls	r3, r3, #18
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d106      	bne.n	8004c6e <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	0011      	movs	r1, r2
 8004c66:	0018      	movs	r0, r3
 8004c68:	f000 fcde 	bl	8005628 <I2C_ITListenCplt>
 8004c6c:	e054      	b.n	8004d18 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2241      	movs	r2, #65	@ 0x41
 8004c72:	5c9b      	ldrb	r3, [r3, r2]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b29      	cmp	r3, #41	@ 0x29
 8004c78:	d110      	bne.n	8004c9c <I2C_Slave_ISR_DMA+0x110>
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	4a36      	ldr	r2, [pc, #216]	@ (8004d58 <I2C_Slave_ISR_DMA+0x1cc>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00c      	beq.n	8004c9c <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2210      	movs	r2, #16
 8004c88:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f000 fe4e 	bl	800592e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	0018      	movs	r0, r3
 8004c96:	f000 fa0d 	bl	80050b4 <I2C_ITSlaveSeqCplt>
 8004c9a:	e03d      	b.n	8004d18 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2210      	movs	r2, #16
 8004ca2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004ca4:	e03e      	b.n	8004d24 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2210      	movs	r2, #16
 8004cac:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb2:	2204      	movs	r2, #4
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004cba:	2317      	movs	r3, #23
 8004cbc:	18fb      	adds	r3, r7, r3
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	2141      	movs	r1, #65	@ 0x41
 8004cc2:	5c52      	ldrb	r2, [r2, r1]
 8004cc4:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <I2C_Slave_ISR_DMA+0x14a>
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	2380      	movs	r3, #128	@ 0x80
 8004cd0:	045b      	lsls	r3, r3, #17
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d126      	bne.n	8004d24 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004cd6:	2217      	movs	r2, #23
 8004cd8:	18bb      	adds	r3, r7, r2
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b21      	cmp	r3, #33	@ 0x21
 8004cde:	d003      	beq.n	8004ce8 <I2C_Slave_ISR_DMA+0x15c>
 8004ce0:	18bb      	adds	r3, r7, r2
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b29      	cmp	r3, #41	@ 0x29
 8004ce6:	d103      	bne.n	8004cf0 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2221      	movs	r2, #33	@ 0x21
 8004cec:	631a      	str	r2, [r3, #48]	@ 0x30
 8004cee:	e00b      	b.n	8004d08 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004cf0:	2217      	movs	r2, #23
 8004cf2:	18bb      	adds	r3, r7, r2
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b22      	cmp	r3, #34	@ 0x22
 8004cf8:	d003      	beq.n	8004d02 <I2C_Slave_ISR_DMA+0x176>
 8004cfa:	18bb      	adds	r3, r7, r2
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d00:	d102      	bne.n	8004d08 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2222      	movs	r2, #34	@ 0x22
 8004d06:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	0011      	movs	r1, r2
 8004d10:	0018      	movs	r0, r3
 8004d12:	f000 fce1 	bl	80056d8 <I2C_ITError>
      if (treatdmanack == 1U)
 8004d16:	e005      	b.n	8004d24 <I2C_Slave_ISR_DMA+0x198>
 8004d18:	e004      	b.n	8004d24 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2210      	movs	r2, #16
 8004d20:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004d22:	e00f      	b.n	8004d44 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 8004d24:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004d26:	e00d      	b.n	8004d44 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2208      	movs	r2, #8
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d009      	beq.n	8004d44 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2208      	movs	r2, #8
 8004d34:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004d36:	d005      	beq.n	8004d44 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	0011      	movs	r1, r2
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f000 f8d2 	bl	8004ee8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2240      	movs	r2, #64	@ 0x40
 8004d48:	2100      	movs	r1, #0
 8004d4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	0018      	movs	r0, r3
 8004d50:	46bd      	mov	sp, r7
 8004d52:	b008      	add	sp, #32
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	46c0      	nop			@ (mov r8, r8)
 8004d58:	ffff0000 	.word	0xffff0000

08004d5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004d5c:	b5b0      	push	{r4, r5, r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	000c      	movs	r4, r1
 8004d66:	0010      	movs	r0, r2
 8004d68:	0019      	movs	r1, r3
 8004d6a:	250a      	movs	r5, #10
 8004d6c:	197b      	adds	r3, r7, r5
 8004d6e:	1c22      	adds	r2, r4, #0
 8004d70:	801a      	strh	r2, [r3, #0]
 8004d72:	2308      	movs	r3, #8
 8004d74:	18fb      	adds	r3, r7, r3
 8004d76:	1c02      	adds	r2, r0, #0
 8004d78:	801a      	strh	r2, [r3, #0]
 8004d7a:	1dbb      	adds	r3, r7, #6
 8004d7c:	1c0a      	adds	r2, r1, #0
 8004d7e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004d80:	1dbb      	adds	r3, r7, #6
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	2380      	movs	r3, #128	@ 0x80
 8004d88:	045c      	lsls	r4, r3, #17
 8004d8a:	197b      	adds	r3, r7, r5
 8004d8c:	8819      	ldrh	r1, [r3, #0]
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	4b23      	ldr	r3, [pc, #140]	@ (8004e20 <I2C_RequestMemoryWrite+0xc4>)
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	0023      	movs	r3, r4
 8004d96:	f001 f84f 	bl	8005e38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d9c:	6a39      	ldr	r1, [r7, #32]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	0018      	movs	r0, r3
 8004da2:	f000 fec7 	bl	8005b34 <I2C_WaitOnTXISFlagUntilTimeout>
 8004da6:	1e03      	subs	r3, r0, #0
 8004da8:	d001      	beq.n	8004dae <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e033      	b.n	8004e16 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dae:	1dbb      	adds	r3, r7, #6
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d107      	bne.n	8004dc6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004db6:	2308      	movs	r3, #8
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004dc4:	e019      	b.n	8004dfa <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004dc6:	2308      	movs	r3, #8
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	0a1b      	lsrs	r3, r3, #8
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dda:	6a39      	ldr	r1, [r7, #32]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	0018      	movs	r0, r3
 8004de0:	f000 fea8 	bl	8005b34 <I2C_WaitOnTXISFlagUntilTimeout>
 8004de4:	1e03      	subs	r3, r0, #0
 8004de6:	d001      	beq.n	8004dec <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e014      	b.n	8004e16 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004dec:	2308      	movs	r3, #8
 8004dee:	18fb      	adds	r3, r7, r3
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004dfa:	6a3a      	ldr	r2, [r7, #32]
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	0013      	movs	r3, r2
 8004e04:	2200      	movs	r2, #0
 8004e06:	2180      	movs	r1, #128	@ 0x80
 8004e08:	f000 fe3c 	bl	8005a84 <I2C_WaitOnFlagUntilTimeout>
 8004e0c:	1e03      	subs	r3, r0, #0
 8004e0e:	d001      	beq.n	8004e14 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e000      	b.n	8004e16 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	0018      	movs	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	b004      	add	sp, #16
 8004e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e1e:	46c0      	nop			@ (mov r8, r8)
 8004e20:	80002000 	.word	0x80002000

08004e24 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004e24:	b5b0      	push	{r4, r5, r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	000c      	movs	r4, r1
 8004e2e:	0010      	movs	r0, r2
 8004e30:	0019      	movs	r1, r3
 8004e32:	250a      	movs	r5, #10
 8004e34:	197b      	adds	r3, r7, r5
 8004e36:	1c22      	adds	r2, r4, #0
 8004e38:	801a      	strh	r2, [r3, #0]
 8004e3a:	2308      	movs	r3, #8
 8004e3c:	18fb      	adds	r3, r7, r3
 8004e3e:	1c02      	adds	r2, r0, #0
 8004e40:	801a      	strh	r2, [r3, #0]
 8004e42:	1dbb      	adds	r3, r7, #6
 8004e44:	1c0a      	adds	r2, r1, #0
 8004e46:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004e48:	1dbb      	adds	r3, r7, #6
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	197b      	adds	r3, r7, r5
 8004e50:	8819      	ldrh	r1, [r3, #0]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	4b23      	ldr	r3, [pc, #140]	@ (8004ee4 <I2C_RequestMemoryRead+0xc0>)
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f000 ffed 	bl	8005e38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e60:	6a39      	ldr	r1, [r7, #32]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	0018      	movs	r0, r3
 8004e66:	f000 fe65 	bl	8005b34 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e6a:	1e03      	subs	r3, r0, #0
 8004e6c:	d001      	beq.n	8004e72 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e033      	b.n	8004eda <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e72:	1dbb      	adds	r3, r7, #6
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d107      	bne.n	8004e8a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e7a:	2308      	movs	r3, #8
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e88:	e019      	b.n	8004ebe <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	18fb      	adds	r3, r7, r3
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	0a1b      	lsrs	r3, r3, #8
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e9e:	6a39      	ldr	r1, [r7, #32]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	f000 fe46 	bl	8005b34 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ea8:	1e03      	subs	r3, r0, #0
 8004eaa:	d001      	beq.n	8004eb0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e014      	b.n	8004eda <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004eb0:	2308      	movs	r3, #8
 8004eb2:	18fb      	adds	r3, r7, r3
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004ebe:	6a3a      	ldr	r2, [r7, #32]
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	0013      	movs	r3, r2
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2140      	movs	r1, #64	@ 0x40
 8004ecc:	f000 fdda 	bl	8005a84 <I2C_WaitOnFlagUntilTimeout>
 8004ed0:	1e03      	subs	r3, r0, #0
 8004ed2:	d001      	beq.n	8004ed8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e000      	b.n	8004eda <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	0018      	movs	r0, r3
 8004edc:	46bd      	mov	sp, r7
 8004ede:	b004      	add	sp, #16
 8004ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ee2:	46c0      	nop			@ (mov r8, r8)
 8004ee4:	80002000 	.word	0x80002000

08004ee8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ee8:	b5b0      	push	{r4, r5, r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2241      	movs	r2, #65	@ 0x41
 8004ef6:	5c9b      	ldrb	r3, [r3, r2]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	001a      	movs	r2, r3
 8004efc:	2328      	movs	r3, #40	@ 0x28
 8004efe:	4013      	ands	r3, r2
 8004f00:	2b28      	cmp	r3, #40	@ 0x28
 8004f02:	d000      	beq.n	8004f06 <I2C_ITAddrCplt+0x1e>
 8004f04:	e088      	b.n	8005018 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	0c1b      	lsrs	r3, r3, #16
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	250f      	movs	r5, #15
 8004f12:	197b      	adds	r3, r7, r5
 8004f14:	2101      	movs	r1, #1
 8004f16:	400a      	ands	r2, r1
 8004f18:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	200c      	movs	r0, #12
 8004f26:	183b      	adds	r3, r7, r0
 8004f28:	21fe      	movs	r1, #254	@ 0xfe
 8004f2a:	400a      	ands	r2, r1
 8004f2c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	240a      	movs	r4, #10
 8004f38:	193b      	adds	r3, r7, r4
 8004f3a:	0592      	lsls	r2, r2, #22
 8004f3c:	0d92      	lsrs	r2, r2, #22
 8004f3e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	2308      	movs	r3, #8
 8004f4a:	18fb      	adds	r3, r7, r3
 8004f4c:	21fe      	movs	r1, #254	@ 0xfe
 8004f4e:	400a      	ands	r2, r1
 8004f50:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d148      	bne.n	8004fec <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004f5a:	0021      	movs	r1, r4
 8004f5c:	187b      	adds	r3, r7, r1
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	09db      	lsrs	r3, r3, #7
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	183b      	adds	r3, r7, r0
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	4053      	eors	r3, r2
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	001a      	movs	r2, r3
 8004f6e:	2306      	movs	r3, #6
 8004f70:	4013      	ands	r3, r2
 8004f72:	d120      	bne.n	8004fb6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004f74:	183b      	adds	r3, r7, r0
 8004f76:	187a      	adds	r2, r7, r1
 8004f78:	8812      	ldrh	r2, [r2, #0]
 8004f7a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d14c      	bne.n	8005028 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2208      	movs	r2, #8
 8004f9a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2240      	movs	r2, #64	@ 0x40
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004fa4:	183b      	adds	r3, r7, r0
 8004fa6:	881a      	ldrh	r2, [r3, #0]
 8004fa8:	197b      	adds	r3, r7, r5
 8004faa:	7819      	ldrb	r1, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	0018      	movs	r0, r3
 8004fb0:	f7ff fa8c 	bl	80044cc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004fb4:	e038      	b.n	8005028 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8004fb6:	240c      	movs	r4, #12
 8004fb8:	193b      	adds	r3, r7, r4
 8004fba:	2208      	movs	r2, #8
 8004fbc:	18ba      	adds	r2, r7, r2
 8004fbe:	8812      	ldrh	r2, [r2, #0]
 8004fc0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004fc2:	2380      	movs	r3, #128	@ 0x80
 8004fc4:	021a      	lsls	r2, r3, #8
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	0011      	movs	r1, r2
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f000 fff8 	bl	8005fc0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2240      	movs	r2, #64	@ 0x40
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004fd8:	193b      	adds	r3, r7, r4
 8004fda:	881a      	ldrh	r2, [r3, #0]
 8004fdc:	230f      	movs	r3, #15
 8004fde:	18fb      	adds	r3, r7, r3
 8004fe0:	7819      	ldrb	r1, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f7ff fa71 	bl	80044cc <HAL_I2C_AddrCallback>
}
 8004fea:	e01d      	b.n	8005028 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004fec:	2380      	movs	r3, #128	@ 0x80
 8004fee:	021a      	lsls	r2, r3, #8
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	0011      	movs	r1, r2
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f000 ffe3 	bl	8005fc0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2240      	movs	r2, #64	@ 0x40
 8004ffe:	2100      	movs	r1, #0
 8005000:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005002:	230c      	movs	r3, #12
 8005004:	18fb      	adds	r3, r7, r3
 8005006:	881a      	ldrh	r2, [r3, #0]
 8005008:	230f      	movs	r3, #15
 800500a:	18fb      	adds	r3, r7, r3
 800500c:	7819      	ldrb	r1, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	0018      	movs	r0, r3
 8005012:	f7ff fa5b 	bl	80044cc <HAL_I2C_AddrCallback>
}
 8005016:	e007      	b.n	8005028 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2208      	movs	r2, #8
 800501e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2240      	movs	r2, #64	@ 0x40
 8005024:	2100      	movs	r1, #0
 8005026:	5499      	strb	r1, [r3, r2]
}
 8005028:	46c0      	nop			@ (mov r8, r8)
 800502a:	46bd      	mov	sp, r7
 800502c:	b004      	add	sp, #16
 800502e:	bdb0      	pop	{r4, r5, r7, pc}

08005030 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2242      	movs	r2, #66	@ 0x42
 800503c:	2100      	movs	r1, #0
 800503e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2241      	movs	r2, #65	@ 0x41
 8005044:	5c9b      	ldrb	r3, [r3, r2]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b21      	cmp	r3, #33	@ 0x21
 800504a:	d117      	bne.n	800507c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2241      	movs	r2, #65	@ 0x41
 8005050:	2120      	movs	r1, #32
 8005052:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2211      	movs	r2, #17
 8005058:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2101      	movs	r1, #1
 8005064:	0018      	movs	r0, r3
 8005066:	f000 ffab 	bl	8005fc0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2240      	movs	r2, #64	@ 0x40
 800506e:	2100      	movs	r1, #0
 8005070:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	0018      	movs	r0, r3
 8005076:	f7ff fa09 	bl	800448c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800507a:	e016      	b.n	80050aa <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2241      	movs	r2, #65	@ 0x41
 8005080:	2120      	movs	r1, #32
 8005082:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2212      	movs	r2, #18
 8005088:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2102      	movs	r1, #2
 8005094:	0018      	movs	r0, r3
 8005096:	f000 ff93 	bl	8005fc0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2240      	movs	r2, #64	@ 0x40
 800509e:	2100      	movs	r1, #0
 80050a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	0018      	movs	r0, r3
 80050a6:	f7ff f9f9 	bl	800449c <HAL_I2C_MasterRxCpltCallback>
}
 80050aa:	46c0      	nop			@ (mov r8, r8)
 80050ac:	46bd      	mov	sp, r7
 80050ae:	b002      	add	sp, #8
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2242      	movs	r2, #66	@ 0x42
 80050c8:	2100      	movs	r1, #0
 80050ca:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	2380      	movs	r3, #128	@ 0x80
 80050d0:	01db      	lsls	r3, r3, #7
 80050d2:	4013      	ands	r3, r2
 80050d4:	d008      	beq.n	80050e8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4924      	ldr	r1, [pc, #144]	@ (8005174 <I2C_ITSlaveSeqCplt+0xc0>)
 80050e2:	400a      	ands	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e00c      	b.n	8005102 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	2380      	movs	r3, #128	@ 0x80
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	4013      	ands	r3, r2
 80050f0:	d007      	beq.n	8005102 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	491e      	ldr	r1, [pc, #120]	@ (8005178 <I2C_ITSlaveSeqCplt+0xc4>)
 80050fe:	400a      	ands	r2, r1
 8005100:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2241      	movs	r2, #65	@ 0x41
 8005106:	5c9b      	ldrb	r3, [r3, r2]
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b29      	cmp	r3, #41	@ 0x29
 800510c:	d114      	bne.n	8005138 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2241      	movs	r2, #65	@ 0x41
 8005112:	2128      	movs	r1, #40	@ 0x28
 8005114:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2221      	movs	r2, #33	@ 0x21
 800511a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2101      	movs	r1, #1
 8005120:	0018      	movs	r0, r3
 8005122:	f000 ff4d 	bl	8005fc0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2240      	movs	r2, #64	@ 0x40
 800512a:	2100      	movs	r1, #0
 800512c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	0018      	movs	r0, r3
 8005132:	f7ff f9bb 	bl	80044ac <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005136:	e019      	b.n	800516c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2241      	movs	r2, #65	@ 0x41
 800513c:	5c9b      	ldrb	r3, [r3, r2]
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b2a      	cmp	r3, #42	@ 0x2a
 8005142:	d113      	bne.n	800516c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2241      	movs	r2, #65	@ 0x41
 8005148:	2128      	movs	r1, #40	@ 0x28
 800514a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2222      	movs	r2, #34	@ 0x22
 8005150:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2102      	movs	r1, #2
 8005156:	0018      	movs	r0, r3
 8005158:	f000 ff32 	bl	8005fc0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2240      	movs	r2, #64	@ 0x40
 8005160:	2100      	movs	r1, #0
 8005162:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	0018      	movs	r0, r3
 8005168:	f7ff f9a8 	bl	80044bc <HAL_I2C_SlaveRxCpltCallback>
}
 800516c:	46c0      	nop			@ (mov r8, r8)
 800516e:	46bd      	mov	sp, r7
 8005170:	b004      	add	sp, #16
 8005172:	bd80      	pop	{r7, pc}
 8005174:	ffffbfff 	.word	0xffffbfff
 8005178:	ffff7fff 	.word	0xffff7fff

0800517c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2220      	movs	r2, #32
 8005190:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2241      	movs	r2, #65	@ 0x41
 8005196:	5c9b      	ldrb	r3, [r3, r2]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b21      	cmp	r3, #33	@ 0x21
 800519c:	d108      	bne.n	80051b0 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2101      	movs	r1, #1
 80051a2:	0018      	movs	r0, r3
 80051a4:	f000 ff0c 	bl	8005fc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2211      	movs	r2, #17
 80051ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80051ae:	e00d      	b.n	80051cc <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2241      	movs	r2, #65	@ 0x41
 80051b4:	5c9b      	ldrb	r3, [r3, r2]
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b22      	cmp	r3, #34	@ 0x22
 80051ba:	d107      	bne.n	80051cc <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2102      	movs	r1, #2
 80051c0:	0018      	movs	r0, r3
 80051c2:	f000 fefd 	bl	8005fc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2212      	movs	r2, #18
 80051ca:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	494e      	ldr	r1, [pc, #312]	@ (8005310 <I2C_ITMasterCplt+0x194>)
 80051d8:	400a      	ands	r2, r1
 80051da:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a4b      	ldr	r2, [pc, #300]	@ (8005314 <I2C_ITMasterCplt+0x198>)
 80051e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2210      	movs	r2, #16
 80051ec:	4013      	ands	r3, r2
 80051ee:	d009      	beq.n	8005204 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2210      	movs	r2, #16
 80051f6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fc:	2204      	movs	r2, #4
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2241      	movs	r2, #65	@ 0x41
 8005208:	5c9b      	ldrb	r3, [r3, r2]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b60      	cmp	r3, #96	@ 0x60
 800520e:	d109      	bne.n	8005224 <I2C_ITMasterCplt+0xa8>
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2204      	movs	r2, #4
 8005214:	4013      	ands	r3, r2
 8005216:	d005      	beq.n	8005224 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521e:	b2db      	uxtb	r3, r3
 8005220:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005222:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	0018      	movs	r0, r3
 8005228:	f000 fb81 	bl	800592e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005230:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2241      	movs	r2, #65	@ 0x41
 8005236:	5c9b      	ldrb	r3, [r3, r2]
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b60      	cmp	r3, #96	@ 0x60
 800523c:	d002      	beq.n	8005244 <I2C_ITMasterCplt+0xc8>
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d007      	beq.n	8005254 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	0011      	movs	r1, r2
 800524c:	0018      	movs	r0, r3
 800524e:	f000 fa43 	bl	80056d8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005252:	e058      	b.n	8005306 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2241      	movs	r2, #65	@ 0x41
 8005258:	5c9b      	ldrb	r3, [r3, r2]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b21      	cmp	r3, #33	@ 0x21
 800525e:	d126      	bne.n	80052ae <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2241      	movs	r2, #65	@ 0x41
 8005264:	2120      	movs	r1, #32
 8005266:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2242      	movs	r2, #66	@ 0x42
 8005272:	5c9b      	ldrb	r3, [r3, r2]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b40      	cmp	r3, #64	@ 0x40
 8005278:	d10c      	bne.n	8005294 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2242      	movs	r2, #66	@ 0x42
 800527e:	2100      	movs	r1, #0
 8005280:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2240      	movs	r2, #64	@ 0x40
 8005286:	2100      	movs	r1, #0
 8005288:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	0018      	movs	r0, r3
 800528e:	f7ff f935 	bl	80044fc <HAL_I2C_MemTxCpltCallback>
}
 8005292:	e038      	b.n	8005306 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2242      	movs	r2, #66	@ 0x42
 8005298:	2100      	movs	r1, #0
 800529a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2240      	movs	r2, #64	@ 0x40
 80052a0:	2100      	movs	r1, #0
 80052a2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	0018      	movs	r0, r3
 80052a8:	f7ff f8f0 	bl	800448c <HAL_I2C_MasterTxCpltCallback>
}
 80052ac:	e02b      	b.n	8005306 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2241      	movs	r2, #65	@ 0x41
 80052b2:	5c9b      	ldrb	r3, [r3, r2]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b22      	cmp	r3, #34	@ 0x22
 80052b8:	d125      	bne.n	8005306 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2241      	movs	r2, #65	@ 0x41
 80052be:	2120      	movs	r1, #32
 80052c0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2242      	movs	r2, #66	@ 0x42
 80052cc:	5c9b      	ldrb	r3, [r3, r2]
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b40      	cmp	r3, #64	@ 0x40
 80052d2:	d10c      	bne.n	80052ee <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2242      	movs	r2, #66	@ 0x42
 80052d8:	2100      	movs	r1, #0
 80052da:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2240      	movs	r2, #64	@ 0x40
 80052e0:	2100      	movs	r1, #0
 80052e2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	0018      	movs	r0, r3
 80052e8:	f7ff f910 	bl	800450c <HAL_I2C_MemRxCpltCallback>
}
 80052ec:	e00b      	b.n	8005306 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2242      	movs	r2, #66	@ 0x42
 80052f2:	2100      	movs	r1, #0
 80052f4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2240      	movs	r2, #64	@ 0x40
 80052fa:	2100      	movs	r1, #0
 80052fc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	0018      	movs	r0, r3
 8005302:	f7ff f8cb 	bl	800449c <HAL_I2C_MasterRxCpltCallback>
}
 8005306:	46c0      	nop			@ (mov r8, r8)
 8005308:	46bd      	mov	sp, r7
 800530a:	b006      	add	sp, #24
 800530c:	bd80      	pop	{r7, pc}
 800530e:	46c0      	nop			@ (mov r8, r8)
 8005310:	fe00e800 	.word	0xfe00e800
 8005314:	ffff0000 	.word	0xffff0000

08005318 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005332:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005334:	200b      	movs	r0, #11
 8005336:	183b      	adds	r3, r7, r0
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	2141      	movs	r1, #65	@ 0x41
 800533c:	5c52      	ldrb	r2, [r2, r1]
 800533e:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2220      	movs	r2, #32
 8005346:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005348:	183b      	adds	r3, r7, r0
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b21      	cmp	r3, #33	@ 0x21
 800534e:	d003      	beq.n	8005358 <I2C_ITSlaveCplt+0x40>
 8005350:	183b      	adds	r3, r7, r0
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b29      	cmp	r3, #41	@ 0x29
 8005356:	d109      	bne.n	800536c <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005358:	4aac      	ldr	r2, [pc, #688]	@ (800560c <I2C_ITSlaveCplt+0x2f4>)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	0011      	movs	r1, r2
 800535e:	0018      	movs	r0, r3
 8005360:	f000 fe2e 	bl	8005fc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2221      	movs	r2, #33	@ 0x21
 8005368:	631a      	str	r2, [r3, #48]	@ 0x30
 800536a:	e020      	b.n	80053ae <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800536c:	220b      	movs	r2, #11
 800536e:	18bb      	adds	r3, r7, r2
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b22      	cmp	r3, #34	@ 0x22
 8005374:	d003      	beq.n	800537e <I2C_ITSlaveCplt+0x66>
 8005376:	18bb      	adds	r3, r7, r2
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b2a      	cmp	r3, #42	@ 0x2a
 800537c:	d109      	bne.n	8005392 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800537e:	4aa4      	ldr	r2, [pc, #656]	@ (8005610 <I2C_ITSlaveCplt+0x2f8>)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	0011      	movs	r1, r2
 8005384:	0018      	movs	r0, r3
 8005386:	f000 fe1b 	bl	8005fc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2222      	movs	r2, #34	@ 0x22
 800538e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005390:	e00d      	b.n	80053ae <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005392:	230b      	movs	r3, #11
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b28      	cmp	r3, #40	@ 0x28
 800539a:	d108      	bne.n	80053ae <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800539c:	4a9d      	ldr	r2, [pc, #628]	@ (8005614 <I2C_ITSlaveCplt+0x2fc>)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	0011      	movs	r1, r2
 80053a2:	0018      	movs	r0, r3
 80053a4:	f000 fe0c 	bl	8005fc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2180      	movs	r1, #128	@ 0x80
 80053ba:	0209      	lsls	r1, r1, #8
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4993      	ldr	r1, [pc, #588]	@ (8005618 <I2C_ITSlaveCplt+0x300>)
 80053cc:	400a      	ands	r2, r1
 80053ce:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	0018      	movs	r0, r3
 80053d4:	f000 faab 	bl	800592e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	2380      	movs	r3, #128	@ 0x80
 80053dc:	01db      	lsls	r3, r3, #7
 80053de:	4013      	ands	r3, r2
 80053e0:	d013      	beq.n	800540a <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	498b      	ldr	r1, [pc, #556]	@ (800561c <I2C_ITSlaveCplt+0x304>)
 80053ee:	400a      	ands	r2, r1
 80053f0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01f      	beq.n	800543a <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	b29a      	uxth	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005408:	e017      	b.n	800543a <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	2380      	movs	r3, #128	@ 0x80
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	4013      	ands	r3, r2
 8005412:	d012      	beq.n	800543a <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4980      	ldr	r1, [pc, #512]	@ (8005620 <I2C_ITSlaveCplt+0x308>)
 8005420:	400a      	ands	r2, r1
 8005422:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005428:	2b00      	cmp	r3, #0
 800542a:	d006      	beq.n	800543a <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	b29a      	uxth	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2204      	movs	r2, #4
 800543e:	4013      	ands	r3, r2
 8005440:	d020      	beq.n	8005484 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2204      	movs	r2, #4
 8005446:	4393      	bics	r3, r2
 8005448:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00c      	beq.n	8005484 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005488:	b29b      	uxth	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005492:	2204      	movs	r2, #4
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2210      	movs	r2, #16
 800549e:	4013      	ands	r3, r2
 80054a0:	d04f      	beq.n	8005542 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2210      	movs	r2, #16
 80054a6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80054a8:	d04b      	beq.n	8005542 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d12d      	bne.n	8005510 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2241      	movs	r2, #65	@ 0x41
 80054b8:	5c9b      	ldrb	r3, [r3, r2]
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b28      	cmp	r3, #40	@ 0x28
 80054be:	d10b      	bne.n	80054d8 <I2C_ITSlaveCplt+0x1c0>
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	2380      	movs	r3, #128	@ 0x80
 80054c4:	049b      	lsls	r3, r3, #18
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d106      	bne.n	80054d8 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	0011      	movs	r1, r2
 80054d0:	0018      	movs	r0, r3
 80054d2:	f000 f8a9 	bl	8005628 <I2C_ITListenCplt>
 80054d6:	e034      	b.n	8005542 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2241      	movs	r2, #65	@ 0x41
 80054dc:	5c9b      	ldrb	r3, [r3, r2]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b29      	cmp	r3, #41	@ 0x29
 80054e2:	d110      	bne.n	8005506 <I2C_ITSlaveCplt+0x1ee>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4a4f      	ldr	r2, [pc, #316]	@ (8005624 <I2C_ITSlaveCplt+0x30c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d00c      	beq.n	8005506 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2210      	movs	r2, #16
 80054f2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	0018      	movs	r0, r3
 80054f8:	f000 fa19 	bl	800592e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	0018      	movs	r0, r3
 8005500:	f7ff fdd8 	bl	80050b4 <I2C_ITSlaveSeqCplt>
 8005504:	e01d      	b.n	8005542 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2210      	movs	r2, #16
 800550c:	61da      	str	r2, [r3, #28]
 800550e:	e018      	b.n	8005542 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2210      	movs	r2, #16
 8005516:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551c:	2204      	movs	r2, #4
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <I2C_ITSlaveCplt+0x21c>
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	2380      	movs	r3, #128	@ 0x80
 800552e:	045b      	lsls	r3, r3, #17
 8005530:	429a      	cmp	r2, r3
 8005532:	d106      	bne.n	8005542 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	0011      	movs	r1, r2
 800553c:	0018      	movs	r0, r3
 800553e:	f000 f8cb 	bl	80056d8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2242      	movs	r2, #66	@ 0x42
 8005546:	2100      	movs	r1, #0
 8005548:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005554:	2b00      	cmp	r3, #0
 8005556:	d013      	beq.n	8005580 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	0011      	movs	r1, r2
 8005560:	0018      	movs	r0, r3
 8005562:	f000 f8b9 	bl	80056d8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2241      	movs	r2, #65	@ 0x41
 800556a:	5c9b      	ldrb	r3, [r3, r2]
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b28      	cmp	r3, #40	@ 0x28
 8005570:	d147      	bne.n	8005602 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	0011      	movs	r1, r2
 8005578:	0018      	movs	r0, r3
 800557a:	f000 f855 	bl	8005628 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800557e:	e040      	b.n	8005602 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005584:	4a27      	ldr	r2, [pc, #156]	@ (8005624 <I2C_ITSlaveCplt+0x30c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d016      	beq.n	80055b8 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	0018      	movs	r0, r3
 800558e:	f7ff fd91 	bl	80050b4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a23      	ldr	r2, [pc, #140]	@ (8005624 <I2C_ITSlaveCplt+0x30c>)
 8005596:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2241      	movs	r2, #65	@ 0x41
 800559c:	2120      	movs	r1, #32
 800559e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2240      	movs	r2, #64	@ 0x40
 80055aa:	2100      	movs	r1, #0
 80055ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	0018      	movs	r0, r3
 80055b2:	f7fe ff9b 	bl	80044ec <HAL_I2C_ListenCpltCallback>
}
 80055b6:	e024      	b.n	8005602 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2241      	movs	r2, #65	@ 0x41
 80055bc:	5c9b      	ldrb	r3, [r3, r2]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b22      	cmp	r3, #34	@ 0x22
 80055c2:	d10f      	bne.n	80055e4 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2241      	movs	r2, #65	@ 0x41
 80055c8:	2120      	movs	r1, #32
 80055ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2240      	movs	r2, #64	@ 0x40
 80055d6:	2100      	movs	r1, #0
 80055d8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	0018      	movs	r0, r3
 80055de:	f7fe ff6d 	bl	80044bc <HAL_I2C_SlaveRxCpltCallback>
}
 80055e2:	e00e      	b.n	8005602 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2241      	movs	r2, #65	@ 0x41
 80055e8:	2120      	movs	r1, #32
 80055ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2240      	movs	r2, #64	@ 0x40
 80055f6:	2100      	movs	r1, #0
 80055f8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	0018      	movs	r0, r3
 80055fe:	f7fe ff55 	bl	80044ac <HAL_I2C_SlaveTxCpltCallback>
}
 8005602:	46c0      	nop			@ (mov r8, r8)
 8005604:	46bd      	mov	sp, r7
 8005606:	b006      	add	sp, #24
 8005608:	bd80      	pop	{r7, pc}
 800560a:	46c0      	nop			@ (mov r8, r8)
 800560c:	00008001 	.word	0x00008001
 8005610:	00008002 	.word	0x00008002
 8005614:	00008003 	.word	0x00008003
 8005618:	fe00e800 	.word	0xfe00e800
 800561c:	ffffbfff 	.word	0xffffbfff
 8005620:	ffff7fff 	.word	0xffff7fff
 8005624:	ffff0000 	.word	0xffff0000

08005628 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a26      	ldr	r2, [pc, #152]	@ (80056d0 <I2C_ITListenCplt+0xa8>)
 8005636:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2241      	movs	r2, #65	@ 0x41
 8005642:	2120      	movs	r1, #32
 8005644:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2242      	movs	r2, #66	@ 0x42
 800564a:	2100      	movs	r1, #0
 800564c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2204      	movs	r2, #4
 8005658:	4013      	ands	r3, r2
 800565a:	d022      	beq.n	80056a2 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005678:	2b00      	cmp	r3, #0
 800567a:	d012      	beq.n	80056a2 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569a:	2204      	movs	r2, #4
 800569c:	431a      	orrs	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80056a2:	4a0c      	ldr	r2, [pc, #48]	@ (80056d4 <I2C_ITListenCplt+0xac>)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	0011      	movs	r1, r2
 80056a8:	0018      	movs	r0, r3
 80056aa:	f000 fc89 	bl	8005fc0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2210      	movs	r2, #16
 80056b4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2240      	movs	r2, #64	@ 0x40
 80056ba:	2100      	movs	r1, #0
 80056bc:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	0018      	movs	r0, r3
 80056c2:	f7fe ff13 	bl	80044ec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80056c6:	46c0      	nop			@ (mov r8, r8)
 80056c8:	46bd      	mov	sp, r7
 80056ca:	b002      	add	sp, #8
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	46c0      	nop			@ (mov r8, r8)
 80056d0:	ffff0000 	.word	0xffff0000
 80056d4:	00008003 	.word	0x00008003

080056d8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80056e2:	200f      	movs	r0, #15
 80056e4:	183b      	adds	r3, r7, r0
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	2141      	movs	r1, #65	@ 0x41
 80056ea:	5c52      	ldrb	r2, [r2, r1]
 80056ec:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2242      	movs	r2, #66	@ 0x42
 80056f2:	2100      	movs	r1, #0
 80056f4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a72      	ldr	r2, [pc, #456]	@ (80058c4 <I2C_ITError+0x1ec>)
 80056fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800570e:	183b      	adds	r3, r7, r0
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b28      	cmp	r3, #40	@ 0x28
 8005714:	d007      	beq.n	8005726 <I2C_ITError+0x4e>
 8005716:	183b      	adds	r3, r7, r0
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b29      	cmp	r3, #41	@ 0x29
 800571c:	d003      	beq.n	8005726 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800571e:	183b      	adds	r3, r7, r0
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b2a      	cmp	r3, #42	@ 0x2a
 8005724:	d10c      	bne.n	8005740 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2103      	movs	r1, #3
 800572a:	0018      	movs	r0, r3
 800572c:	f000 fc48 	bl	8005fc0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2241      	movs	r2, #65	@ 0x41
 8005734:	2128      	movs	r1, #40	@ 0x28
 8005736:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a63      	ldr	r2, [pc, #396]	@ (80058c8 <I2C_ITError+0x1f0>)
 800573c:	635a      	str	r2, [r3, #52]	@ 0x34
 800573e:	e032      	b.n	80057a6 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005740:	4a62      	ldr	r2, [pc, #392]	@ (80058cc <I2C_ITError+0x1f4>)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	0011      	movs	r1, r2
 8005746:	0018      	movs	r0, r3
 8005748:	f000 fc3a 	bl	8005fc0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	0018      	movs	r0, r3
 8005750:	f000 f8ed 	bl	800592e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2241      	movs	r2, #65	@ 0x41
 8005758:	5c9b      	ldrb	r3, [r3, r2]
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b60      	cmp	r3, #96	@ 0x60
 800575e:	d01f      	beq.n	80057a0 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2241      	movs	r2, #65	@ 0x41
 8005764:	2120      	movs	r1, #32
 8005766:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	2220      	movs	r2, #32
 8005770:	4013      	ands	r3, r2
 8005772:	2b20      	cmp	r3, #32
 8005774:	d114      	bne.n	80057a0 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	2210      	movs	r2, #16
 800577e:	4013      	ands	r3, r2
 8005780:	2b10      	cmp	r3, #16
 8005782:	d109      	bne.n	8005798 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2210      	movs	r2, #16
 800578a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005790:	2204      	movs	r2, #4
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2220      	movs	r2, #32
 800579e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057aa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d03b      	beq.n	800582c <I2C_ITError+0x154>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b11      	cmp	r3, #17
 80057b8:	d002      	beq.n	80057c0 <I2C_ITError+0xe8>
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b21      	cmp	r3, #33	@ 0x21
 80057be:	d135      	bne.n	800582c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	2380      	movs	r3, #128	@ 0x80
 80057c8:	01db      	lsls	r3, r3, #7
 80057ca:	401a      	ands	r2, r3
 80057cc:	2380      	movs	r3, #128	@ 0x80
 80057ce:	01db      	lsls	r3, r3, #7
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d107      	bne.n	80057e4 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	493c      	ldr	r1, [pc, #240]	@ (80058d0 <I2C_ITError+0x1f8>)
 80057e0:	400a      	ands	r2, r1
 80057e2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e8:	0018      	movs	r0, r3
 80057ea:	f7fe f869 	bl	80038c0 <HAL_DMA_GetState>
 80057ee:	0003      	movs	r3, r0
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d016      	beq.n	8005822 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f8:	4a36      	ldr	r2, [pc, #216]	@ (80058d4 <I2C_ITError+0x1fc>)
 80057fa:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2240      	movs	r2, #64	@ 0x40
 8005800:	2100      	movs	r1, #0
 8005802:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005808:	0018      	movs	r0, r3
 800580a:	f7fd ffdf 	bl	80037cc <HAL_DMA_Abort_IT>
 800580e:	1e03      	subs	r3, r0, #0
 8005810:	d051      	beq.n	80058b6 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005816:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800581c:	0018      	movs	r0, r3
 800581e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005820:	e049      	b.n	80058b6 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	0018      	movs	r0, r3
 8005826:	f000 f859 	bl	80058dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800582a:	e044      	b.n	80058b6 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d03b      	beq.n	80058ac <I2C_ITError+0x1d4>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2b12      	cmp	r3, #18
 8005838:	d002      	beq.n	8005840 <I2C_ITError+0x168>
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b22      	cmp	r3, #34	@ 0x22
 800583e:	d135      	bne.n	80058ac <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	2380      	movs	r3, #128	@ 0x80
 8005848:	021b      	lsls	r3, r3, #8
 800584a:	401a      	ands	r2, r3
 800584c:	2380      	movs	r3, #128	@ 0x80
 800584e:	021b      	lsls	r3, r3, #8
 8005850:	429a      	cmp	r2, r3
 8005852:	d107      	bne.n	8005864 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	491e      	ldr	r1, [pc, #120]	@ (80058d8 <I2C_ITError+0x200>)
 8005860:	400a      	ands	r2, r1
 8005862:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005868:	0018      	movs	r0, r3
 800586a:	f7fe f829 	bl	80038c0 <HAL_DMA_GetState>
 800586e:	0003      	movs	r3, r0
 8005870:	2b01      	cmp	r3, #1
 8005872:	d016      	beq.n	80058a2 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005878:	4a16      	ldr	r2, [pc, #88]	@ (80058d4 <I2C_ITError+0x1fc>)
 800587a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2240      	movs	r2, #64	@ 0x40
 8005880:	2100      	movs	r1, #0
 8005882:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005888:	0018      	movs	r0, r3
 800588a:	f7fd ff9f 	bl	80037cc <HAL_DMA_Abort_IT>
 800588e:	1e03      	subs	r3, r0, #0
 8005890:	d013      	beq.n	80058ba <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005896:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800589c:	0018      	movs	r0, r3
 800589e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058a0:	e00b      	b.n	80058ba <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	0018      	movs	r0, r3
 80058a6:	f000 f819 	bl	80058dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058aa:	e006      	b.n	80058ba <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	0018      	movs	r0, r3
 80058b0:	f000 f814 	bl	80058dc <I2C_TreatErrorCallback>
  }
}
 80058b4:	e002      	b.n	80058bc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058b6:	46c0      	nop			@ (mov r8, r8)
 80058b8:	e000      	b.n	80058bc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058ba:	46c0      	nop			@ (mov r8, r8)
}
 80058bc:	46c0      	nop			@ (mov r8, r8)
 80058be:	46bd      	mov	sp, r7
 80058c0:	b004      	add	sp, #16
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	ffff0000 	.word	0xffff0000
 80058c8:	0800453d 	.word	0x0800453d
 80058cc:	00008003 	.word	0x00008003
 80058d0:	ffffbfff 	.word	0xffffbfff
 80058d4:	08005a47 	.word	0x08005a47
 80058d8:	ffff7fff 	.word	0xffff7fff

080058dc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2241      	movs	r2, #65	@ 0x41
 80058e8:	5c9b      	ldrb	r3, [r3, r2]
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b60      	cmp	r3, #96	@ 0x60
 80058ee:	d10f      	bne.n	8005910 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2241      	movs	r2, #65	@ 0x41
 80058f4:	2120      	movs	r1, #32
 80058f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2240      	movs	r2, #64	@ 0x40
 8005902:	2100      	movs	r1, #0
 8005904:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	0018      	movs	r0, r3
 800590a:	f7fe fe0f 	bl	800452c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800590e:	e00a      	b.n	8005926 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2240      	movs	r2, #64	@ 0x40
 800591a:	2100      	movs	r1, #0
 800591c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	0018      	movs	r0, r3
 8005922:	f7fe fdfb 	bl	800451c <HAL_I2C_ErrorCallback>
}
 8005926:	46c0      	nop			@ (mov r8, r8)
 8005928:	46bd      	mov	sp, r7
 800592a:	b002      	add	sp, #8
 800592c:	bd80      	pop	{r7, pc}

0800592e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b082      	sub	sp, #8
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	2202      	movs	r2, #2
 800593e:	4013      	ands	r3, r2
 8005940:	2b02      	cmp	r3, #2
 8005942:	d103      	bne.n	800594c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2200      	movs	r2, #0
 800594a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	2201      	movs	r2, #1
 8005954:	4013      	ands	r3, r2
 8005956:	2b01      	cmp	r3, #1
 8005958:	d007      	beq.n	800596a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	699a      	ldr	r2, [r3, #24]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2101      	movs	r1, #1
 8005966:	430a      	orrs	r2, r1
 8005968:	619a      	str	r2, [r3, #24]
  }
}
 800596a:	46c0      	nop			@ (mov r8, r8)
 800596c:	46bd      	mov	sp, r7
 800596e:	b002      	add	sp, #8
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005980:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4920      	ldr	r1, [pc, #128]	@ (8005a10 <I2C_DMAMasterTransmitCplt+0x9c>)
 800598e:	400a      	ands	r2, r1
 8005990:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d105      	bne.n	80059a8 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2120      	movs	r1, #32
 80059a0:	0018      	movs	r0, r3
 80059a2:	f000 fa83 	bl	8005eac <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80059a6:	e02e      	b.n	8005a06 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80059b0:	189a      	adds	r2, r3, r2
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	2bff      	cmp	r3, #255	@ 0xff
 80059be:	d903      	bls.n	80059c8 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	22ff      	movs	r2, #255	@ 0xff
 80059c4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80059c6:	e004      	b.n	80059d2 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059da:	0019      	movs	r1, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3328      	adds	r3, #40	@ 0x28
 80059e2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80059e8:	f7fd fe68 	bl	80036bc <HAL_DMA_Start_IT>
 80059ec:	1e03      	subs	r3, r0, #0
 80059ee:	d005      	beq.n	80059fc <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2110      	movs	r1, #16
 80059f4:	0018      	movs	r0, r3
 80059f6:	f7ff fe6f 	bl	80056d8 <I2C_ITError>
}
 80059fa:	e004      	b.n	8005a06 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2140      	movs	r1, #64	@ 0x40
 8005a00:	0018      	movs	r0, r3
 8005a02:	f000 fa53 	bl	8005eac <I2C_Enable_IRQ>
}
 8005a06:	46c0      	nop			@ (mov r8, r8)
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	b004      	add	sp, #16
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	46c0      	nop			@ (mov r8, r8)
 8005a10:	ffffbfff 	.word	0xffffbfff

08005a14 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a20:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2180      	movs	r1, #128	@ 0x80
 8005a2e:	0209      	lsls	r1, r1, #8
 8005a30:	430a      	orrs	r2, r1
 8005a32:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2110      	movs	r1, #16
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f7ff fe4d 	bl	80056d8 <I2C_ITError>
}
 8005a3e:	46c0      	nop			@ (mov r8, r8)
 8005a40:	46bd      	mov	sp, r7
 8005a42:	b004      	add	sp, #16
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a60:	2200      	movs	r2, #0
 8005a62:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a70:	2200      	movs	r2, #0
 8005a72:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	0018      	movs	r0, r3
 8005a78:	f7ff ff30 	bl	80058dc <I2C_TreatErrorCallback>
}
 8005a7c:	46c0      	nop			@ (mov r8, r8)
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	b004      	add	sp, #16
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	603b      	str	r3, [r7, #0]
 8005a90:	1dfb      	adds	r3, r7, #7
 8005a92:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a94:	e03a      	b.n	8005b0c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	f000 f8d3 	bl	8005c48 <I2C_IsErrorOccurred>
 8005aa2:	1e03      	subs	r3, r0, #0
 8005aa4:	d001      	beq.n	8005aaa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e040      	b.n	8005b2c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	3301      	adds	r3, #1
 8005aae:	d02d      	beq.n	8005b0c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab0:	f7fd f8cc 	bl	8002c4c <HAL_GetTick>
 8005ab4:	0002      	movs	r2, r0
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d302      	bcc.n	8005ac6 <I2C_WaitOnFlagUntilTimeout+0x42>
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d122      	bne.n	8005b0c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	425a      	negs	r2, r3
 8005ad6:	4153      	adcs	r3, r2
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	001a      	movs	r2, r3
 8005adc:	1dfb      	adds	r3, r7, #7
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d113      	bne.n	8005b0c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae8:	2220      	movs	r2, #32
 8005aea:	431a      	orrs	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2241      	movs	r2, #65	@ 0x41
 8005af4:	2120      	movs	r1, #32
 8005af6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2242      	movs	r2, #66	@ 0x42
 8005afc:	2100      	movs	r1, #0
 8005afe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2240      	movs	r2, #64	@ 0x40
 8005b04:	2100      	movs	r1, #0
 8005b06:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e00f      	b.n	8005b2c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	4013      	ands	r3, r2
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	425a      	negs	r2, r3
 8005b1c:	4153      	adcs	r3, r2
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	001a      	movs	r2, r3
 8005b22:	1dfb      	adds	r3, r7, #7
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d0b5      	beq.n	8005a96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	b004      	add	sp, #16
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b40:	e032      	b.n	8005ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f000 f87d 	bl	8005c48 <I2C_IsErrorOccurred>
 8005b4e:	1e03      	subs	r3, r0, #0
 8005b50:	d001      	beq.n	8005b56 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e030      	b.n	8005bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	d025      	beq.n	8005ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b5c:	f7fd f876 	bl	8002c4c <HAL_GetTick>
 8005b60:	0002      	movs	r2, r0
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d302      	bcc.n	8005b72 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d11a      	bne.n	8005ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d013      	beq.n	8005ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b84:	2220      	movs	r2, #32
 8005b86:	431a      	orrs	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2241      	movs	r2, #65	@ 0x41
 8005b90:	2120      	movs	r1, #32
 8005b92:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2242      	movs	r2, #66	@ 0x42
 8005b98:	2100      	movs	r1, #0
 8005b9a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2240      	movs	r2, #64	@ 0x40
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e007      	b.n	8005bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d1c5      	bne.n	8005b42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	0018      	movs	r0, r3
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	b004      	add	sp, #16
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bcc:	e02f      	b.n	8005c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f000 f837 	bl	8005c48 <I2C_IsErrorOccurred>
 8005bda:	1e03      	subs	r3, r0, #0
 8005bdc:	d001      	beq.n	8005be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e02d      	b.n	8005c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be2:	f7fd f833 	bl	8002c4c <HAL_GetTick>
 8005be6:	0002      	movs	r2, r0
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d302      	bcc.n	8005bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d11a      	bne.n	8005c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	4013      	ands	r3, r2
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	d013      	beq.n	8005c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2241      	movs	r2, #65	@ 0x41
 8005c16:	2120      	movs	r1, #32
 8005c18:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2242      	movs	r2, #66	@ 0x42
 8005c1e:	2100      	movs	r1, #0
 8005c20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2240      	movs	r2, #64	@ 0x40
 8005c26:	2100      	movs	r1, #0
 8005c28:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e007      	b.n	8005c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	2220      	movs	r2, #32
 8005c36:	4013      	ands	r3, r2
 8005c38:	2b20      	cmp	r3, #32
 8005c3a:	d1c8      	bne.n	8005bce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	0018      	movs	r0, r3
 8005c40:	46bd      	mov	sp, r7
 8005c42:	b004      	add	sp, #16
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	@ 0x28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c54:	2327      	movs	r3, #39	@ 0x27
 8005c56:	18fb      	adds	r3, r7, r3
 8005c58:	2200      	movs	r2, #0
 8005c5a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	2210      	movs	r2, #16
 8005c70:	4013      	ands	r3, r2
 8005c72:	d100      	bne.n	8005c76 <I2C_IsErrorOccurred+0x2e>
 8005c74:	e079      	b.n	8005d6a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2210      	movs	r2, #16
 8005c7c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c7e:	e057      	b.n	8005d30 <I2C_IsErrorOccurred+0xe8>
 8005c80:	2227      	movs	r2, #39	@ 0x27
 8005c82:	18bb      	adds	r3, r7, r2
 8005c84:	18ba      	adds	r2, r7, r2
 8005c86:	7812      	ldrb	r2, [r2, #0]
 8005c88:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	d04f      	beq.n	8005d30 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c90:	f7fc ffdc 	bl	8002c4c <HAL_GetTick>
 8005c94:	0002      	movs	r2, r0
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d302      	bcc.n	8005ca6 <I2C_IsErrorOccurred+0x5e>
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d144      	bne.n	8005d30 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	2380      	movs	r3, #128	@ 0x80
 8005cae:	01db      	lsls	r3, r3, #7
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005cb4:	2013      	movs	r0, #19
 8005cb6:	183b      	adds	r3, r7, r0
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	2142      	movs	r1, #66	@ 0x42
 8005cbc:	5c52      	ldrb	r2, [r2, r1]
 8005cbe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699a      	ldr	r2, [r3, #24]
 8005cc6:	2380      	movs	r3, #128	@ 0x80
 8005cc8:	021b      	lsls	r3, r3, #8
 8005cca:	401a      	ands	r2, r3
 8005ccc:	2380      	movs	r3, #128	@ 0x80
 8005cce:	021b      	lsls	r3, r3, #8
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d126      	bne.n	8005d22 <I2C_IsErrorOccurred+0xda>
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	2380      	movs	r3, #128	@ 0x80
 8005cd8:	01db      	lsls	r3, r3, #7
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d021      	beq.n	8005d22 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8005cde:	183b      	adds	r3, r7, r0
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b20      	cmp	r3, #32
 8005ce4:	d01d      	beq.n	8005d22 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2180      	movs	r1, #128	@ 0x80
 8005cf2:	01c9      	lsls	r1, r1, #7
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005cf8:	f7fc ffa8 	bl	8002c4c <HAL_GetTick>
 8005cfc:	0003      	movs	r3, r0
 8005cfe:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d00:	e00f      	b.n	8005d22 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005d02:	f7fc ffa3 	bl	8002c4c <HAL_GetTick>
 8005d06:	0002      	movs	r2, r0
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b19      	cmp	r3, #25
 8005d0e:	d908      	bls.n	8005d22 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	2220      	movs	r2, #32
 8005d14:	4313      	orrs	r3, r2
 8005d16:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005d18:	2327      	movs	r3, #39	@ 0x27
 8005d1a:	18fb      	adds	r3, r7, r3
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	701a      	strb	r2, [r3, #0]

              break;
 8005d20:	e006      	b.n	8005d30 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	d1e8      	bne.n	8005d02 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	2220      	movs	r2, #32
 8005d38:	4013      	ands	r3, r2
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	d004      	beq.n	8005d48 <I2C_IsErrorOccurred+0x100>
 8005d3e:	2327      	movs	r3, #39	@ 0x27
 8005d40:	18fb      	adds	r3, r7, r3
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d09b      	beq.n	8005c80 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005d48:	2327      	movs	r3, #39	@ 0x27
 8005d4a:	18fb      	adds	r3, r7, r3
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d103      	bne.n	8005d5a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2220      	movs	r2, #32
 8005d58:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	2204      	movs	r2, #4
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005d62:	2327      	movs	r3, #39	@ 0x27
 8005d64:	18fb      	adds	r3, r7, r3
 8005d66:	2201      	movs	r2, #1
 8005d68:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	2380      	movs	r3, #128	@ 0x80
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	4013      	ands	r3, r2
 8005d7a:	d00c      	beq.n	8005d96 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	4313      	orrs	r3, r2
 8005d82:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2280      	movs	r2, #128	@ 0x80
 8005d8a:	0052      	lsls	r2, r2, #1
 8005d8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d8e:	2327      	movs	r3, #39	@ 0x27
 8005d90:	18fb      	adds	r3, r7, r3
 8005d92:	2201      	movs	r2, #1
 8005d94:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	2380      	movs	r3, #128	@ 0x80
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d00c      	beq.n	8005dba <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	2208      	movs	r2, #8
 8005da4:	4313      	orrs	r3, r2
 8005da6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2280      	movs	r2, #128	@ 0x80
 8005dae:	00d2      	lsls	r2, r2, #3
 8005db0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005db2:	2327      	movs	r3, #39	@ 0x27
 8005db4:	18fb      	adds	r3, r7, r3
 8005db6:	2201      	movs	r2, #1
 8005db8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	2380      	movs	r3, #128	@ 0x80
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	d00c      	beq.n	8005dde <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2280      	movs	r2, #128	@ 0x80
 8005dd2:	0092      	lsls	r2, r2, #2
 8005dd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005dd6:	2327      	movs	r3, #39	@ 0x27
 8005dd8:	18fb      	adds	r3, r7, r3
 8005dda:	2201      	movs	r2, #1
 8005ddc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005dde:	2327      	movs	r3, #39	@ 0x27
 8005de0:	18fb      	adds	r3, r7, r3
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01d      	beq.n	8005e24 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	0018      	movs	r0, r3
 8005dec:	f7ff fd9f 	bl	800592e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	490e      	ldr	r1, [pc, #56]	@ (8005e34 <I2C_IsErrorOccurred+0x1ec>)
 8005dfc:	400a      	ands	r2, r1
 8005dfe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	431a      	orrs	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2241      	movs	r2, #65	@ 0x41
 8005e10:	2120      	movs	r1, #32
 8005e12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2242      	movs	r2, #66	@ 0x42
 8005e18:	2100      	movs	r1, #0
 8005e1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2240      	movs	r2, #64	@ 0x40
 8005e20:	2100      	movs	r1, #0
 8005e22:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005e24:	2327      	movs	r3, #39	@ 0x27
 8005e26:	18fb      	adds	r3, r7, r3
 8005e28:	781b      	ldrb	r3, [r3, #0]
}
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	b00a      	add	sp, #40	@ 0x28
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	46c0      	nop			@ (mov r8, r8)
 8005e34:	fe00e800 	.word	0xfe00e800

08005e38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e38:	b590      	push	{r4, r7, lr}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	0008      	movs	r0, r1
 8005e42:	0011      	movs	r1, r2
 8005e44:	607b      	str	r3, [r7, #4]
 8005e46:	240a      	movs	r4, #10
 8005e48:	193b      	adds	r3, r7, r4
 8005e4a:	1c02      	adds	r2, r0, #0
 8005e4c:	801a      	strh	r2, [r3, #0]
 8005e4e:	2009      	movs	r0, #9
 8005e50:	183b      	adds	r3, r7, r0
 8005e52:	1c0a      	adds	r2, r1, #0
 8005e54:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e56:	193b      	adds	r3, r7, r4
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	059b      	lsls	r3, r3, #22
 8005e5c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e5e:	183b      	adds	r3, r7, r0
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	0419      	lsls	r1, r3, #16
 8005e64:	23ff      	movs	r3, #255	@ 0xff
 8005e66:	041b      	lsls	r3, r3, #16
 8005e68:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e6a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e72:	4313      	orrs	r3, r2
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	085b      	lsrs	r3, r3, #1
 8005e78:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e82:	0d51      	lsrs	r1, r2, #21
 8005e84:	2280      	movs	r2, #128	@ 0x80
 8005e86:	00d2      	lsls	r2, r2, #3
 8005e88:	400a      	ands	r2, r1
 8005e8a:	4907      	ldr	r1, [pc, #28]	@ (8005ea8 <I2C_TransferConfig+0x70>)
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	43d2      	mvns	r2, r2
 8005e90:	401a      	ands	r2, r3
 8005e92:	0011      	movs	r1, r2
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005e9e:	46c0      	nop			@ (mov r8, r8)
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	b007      	add	sp, #28
 8005ea4:	bd90      	pop	{r4, r7, pc}
 8005ea6:	46c0      	nop			@ (mov r8, r8)
 8005ea8:	03ff63ff 	.word	0x03ff63ff

08005eac <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	000a      	movs	r2, r1
 8005eb6:	1cbb      	adds	r3, r7, #2
 8005eb8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8005fb4 <I2C_Enable_IRQ+0x108>)
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d035      	beq.n	8005f34 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005ecc:	4b3a      	ldr	r3, [pc, #232]	@ (8005fb8 <I2C_Enable_IRQ+0x10c>)
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d030      	beq.n	8005f34 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005ed6:	4b39      	ldr	r3, [pc, #228]	@ (8005fbc <I2C_Enable_IRQ+0x110>)
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d02b      	beq.n	8005f34 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005edc:	1cbb      	adds	r3, r7, #2
 8005ede:	2200      	movs	r2, #0
 8005ee0:	5e9b      	ldrsh	r3, [r3, r2]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	da03      	bge.n	8005eee <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	22b8      	movs	r2, #184	@ 0xb8
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005eee:	1cbb      	adds	r3, r7, #2
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	22f2      	movs	r2, #242	@ 0xf2
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005f00:	1cbb      	adds	r3, r7, #2
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	2202      	movs	r2, #2
 8005f06:	4013      	ands	r3, r2
 8005f08:	d003      	beq.n	8005f12 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	22f4      	movs	r2, #244	@ 0xf4
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005f12:	1cbb      	adds	r3, r7, #2
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	2b10      	cmp	r3, #16
 8005f18:	d103      	bne.n	8005f22 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2290      	movs	r2, #144	@ 0x90
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005f22:	1cbb      	adds	r3, r7, #2
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	d137      	bne.n	8005f9a <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005f32:	e032      	b.n	8005f9a <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005f34:	1cbb      	adds	r3, r7, #2
 8005f36:	2200      	movs	r2, #0
 8005f38:	5e9b      	ldrsh	r3, [r3, r2]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	da03      	bge.n	8005f46 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	22b8      	movs	r2, #184	@ 0xb8
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005f46:	1cbb      	adds	r3, r7, #2
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	22f2      	movs	r2, #242	@ 0xf2
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005f58:	1cbb      	adds	r3, r7, #2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	4013      	ands	r3, r2
 8005f60:	d003      	beq.n	8005f6a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	22f4      	movs	r2, #244	@ 0xf4
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005f6a:	1cbb      	adds	r3, r7, #2
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	2b10      	cmp	r3, #16
 8005f70:	d103      	bne.n	8005f7a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2290      	movs	r2, #144	@ 0x90
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005f7a:	1cbb      	adds	r3, r7, #2
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d103      	bne.n	8005f8a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2260      	movs	r2, #96	@ 0x60
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005f8a:	1cbb      	adds	r3, r7, #2
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	2b40      	cmp	r3, #64	@ 0x40
 8005f90:	d103      	bne.n	8005f9a <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2240      	movs	r2, #64	@ 0x40
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6819      	ldr	r1, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	601a      	str	r2, [r3, #0]
}
 8005faa:	46c0      	nop			@ (mov r8, r8)
 8005fac:	46bd      	mov	sp, r7
 8005fae:	b004      	add	sp, #16
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	46c0      	nop			@ (mov r8, r8)
 8005fb4:	0800473d 	.word	0x0800473d
 8005fb8:	08004b8d 	.word	0x08004b8d
 8005fbc:	08004935 	.word	0x08004935

08005fc0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	000a      	movs	r2, r1
 8005fca:	1cbb      	adds	r3, r7, #2
 8005fcc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005fd2:	1cbb      	adds	r3, r7, #2
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	4013      	ands	r3, r2
 8005fda:	d010      	beq.n	8005ffe <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2242      	movs	r2, #66	@ 0x42
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2241      	movs	r2, #65	@ 0x41
 8005fe8:	5c9b      	ldrb	r3, [r3, r2]
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	001a      	movs	r2, r3
 8005fee:	2328      	movs	r3, #40	@ 0x28
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	2b28      	cmp	r3, #40	@ 0x28
 8005ff4:	d003      	beq.n	8005ffe <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	22b0      	movs	r2, #176	@ 0xb0
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005ffe:	1cbb      	adds	r3, r7, #2
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	2202      	movs	r2, #2
 8006004:	4013      	ands	r3, r2
 8006006:	d010      	beq.n	800602a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2244      	movs	r2, #68	@ 0x44
 800600c:	4313      	orrs	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2241      	movs	r2, #65	@ 0x41
 8006014:	5c9b      	ldrb	r3, [r3, r2]
 8006016:	b2db      	uxtb	r3, r3
 8006018:	001a      	movs	r2, r3
 800601a:	2328      	movs	r3, #40	@ 0x28
 800601c:	4013      	ands	r3, r2
 800601e:	2b28      	cmp	r3, #40	@ 0x28
 8006020:	d003      	beq.n	800602a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	22b0      	movs	r2, #176	@ 0xb0
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800602a:	1cbb      	adds	r3, r7, #2
 800602c:	2200      	movs	r2, #0
 800602e:	5e9b      	ldrsh	r3, [r3, r2]
 8006030:	2b00      	cmp	r3, #0
 8006032:	da03      	bge.n	800603c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	22b8      	movs	r2, #184	@ 0xb8
 8006038:	4313      	orrs	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800603c:	1cbb      	adds	r3, r7, #2
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	2b10      	cmp	r3, #16
 8006042:	d103      	bne.n	800604c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2290      	movs	r2, #144	@ 0x90
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800604c:	1cbb      	adds	r3, r7, #2
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	2b20      	cmp	r3, #32
 8006052:	d103      	bne.n	800605c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2220      	movs	r2, #32
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800605c:	1cbb      	adds	r3, r7, #2
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	2b40      	cmp	r3, #64	@ 0x40
 8006062:	d103      	bne.n	800606c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2240      	movs	r2, #64	@ 0x40
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	43d9      	mvns	r1, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	400a      	ands	r2, r1
 800607c:	601a      	str	r2, [r3, #0]
}
 800607e:	46c0      	nop			@ (mov r8, r8)
 8006080:	46bd      	mov	sp, r7
 8006082:	b004      	add	sp, #16
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2241      	movs	r2, #65	@ 0x41
 8006096:	5c9b      	ldrb	r3, [r3, r2]
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b20      	cmp	r3, #32
 800609c:	d138      	bne.n	8006110 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2240      	movs	r2, #64	@ 0x40
 80060a2:	5c9b      	ldrb	r3, [r3, r2]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e032      	b.n	8006112 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2240      	movs	r2, #64	@ 0x40
 80060b0:	2101      	movs	r1, #1
 80060b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2241      	movs	r2, #65	@ 0x41
 80060b8:	2124      	movs	r1, #36	@ 0x24
 80060ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2101      	movs	r1, #1
 80060c8:	438a      	bics	r2, r1
 80060ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4911      	ldr	r1, [pc, #68]	@ (800611c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80060d8:	400a      	ands	r2, r1
 80060da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6819      	ldr	r1, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2101      	movs	r1, #1
 80060f8:	430a      	orrs	r2, r1
 80060fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2241      	movs	r2, #65	@ 0x41
 8006100:	2120      	movs	r1, #32
 8006102:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2240      	movs	r2, #64	@ 0x40
 8006108:	2100      	movs	r1, #0
 800610a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800610c:	2300      	movs	r3, #0
 800610e:	e000      	b.n	8006112 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006110:	2302      	movs	r3, #2
  }
}
 8006112:	0018      	movs	r0, r3
 8006114:	46bd      	mov	sp, r7
 8006116:	b002      	add	sp, #8
 8006118:	bd80      	pop	{r7, pc}
 800611a:	46c0      	nop			@ (mov r8, r8)
 800611c:	ffffefff 	.word	0xffffefff

08006120 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2241      	movs	r2, #65	@ 0x41
 800612e:	5c9b      	ldrb	r3, [r3, r2]
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b20      	cmp	r3, #32
 8006134:	d139      	bne.n	80061aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2240      	movs	r2, #64	@ 0x40
 800613a:	5c9b      	ldrb	r3, [r3, r2]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d101      	bne.n	8006144 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006140:	2302      	movs	r3, #2
 8006142:	e033      	b.n	80061ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2240      	movs	r2, #64	@ 0x40
 8006148:	2101      	movs	r1, #1
 800614a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2241      	movs	r2, #65	@ 0x41
 8006150:	2124      	movs	r1, #36	@ 0x24
 8006152:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2101      	movs	r1, #1
 8006160:	438a      	bics	r2, r1
 8006162:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4a11      	ldr	r2, [pc, #68]	@ (80061b4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006170:	4013      	ands	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	021b      	lsls	r3, r3, #8
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2101      	movs	r1, #1
 8006192:	430a      	orrs	r2, r1
 8006194:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2241      	movs	r2, #65	@ 0x41
 800619a:	2120      	movs	r1, #32
 800619c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2240      	movs	r2, #64	@ 0x40
 80061a2:	2100      	movs	r1, #0
 80061a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	e000      	b.n	80061ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80061aa:	2302      	movs	r3, #2
  }
}
 80061ac:	0018      	movs	r0, r3
 80061ae:	46bd      	mov	sp, r7
 80061b0:	b004      	add	sp, #16
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	fffff0ff 	.word	0xfffff0ff

080061b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e20f      	b.n	80065ea <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2201      	movs	r2, #1
 80061d0:	4013      	ands	r3, r2
 80061d2:	d100      	bne.n	80061d6 <HAL_RCC_OscConfig+0x1e>
 80061d4:	e069      	b.n	80062aa <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061d6:	4bc8      	ldr	r3, [pc, #800]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2238      	movs	r2, #56	@ 0x38
 80061dc:	4013      	ands	r3, r2
 80061de:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d105      	bne.n	80061f2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d15d      	bne.n	80062aa <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e1fb      	b.n	80065ea <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	2380      	movs	r3, #128	@ 0x80
 80061f8:	025b      	lsls	r3, r3, #9
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d107      	bne.n	800620e <HAL_RCC_OscConfig+0x56>
 80061fe:	4bbe      	ldr	r3, [pc, #760]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4bbd      	ldr	r3, [pc, #756]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 8006204:	2180      	movs	r1, #128	@ 0x80
 8006206:	0249      	lsls	r1, r1, #9
 8006208:	430a      	orrs	r2, r1
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	e020      	b.n	8006250 <HAL_RCC_OscConfig+0x98>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	23a0      	movs	r3, #160	@ 0xa0
 8006214:	02db      	lsls	r3, r3, #11
 8006216:	429a      	cmp	r2, r3
 8006218:	d10e      	bne.n	8006238 <HAL_RCC_OscConfig+0x80>
 800621a:	4bb7      	ldr	r3, [pc, #732]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4bb6      	ldr	r3, [pc, #728]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 8006220:	2180      	movs	r1, #128	@ 0x80
 8006222:	02c9      	lsls	r1, r1, #11
 8006224:	430a      	orrs	r2, r1
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	4bb3      	ldr	r3, [pc, #716]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	4bb2      	ldr	r3, [pc, #712]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 800622e:	2180      	movs	r1, #128	@ 0x80
 8006230:	0249      	lsls	r1, r1, #9
 8006232:	430a      	orrs	r2, r1
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	e00b      	b.n	8006250 <HAL_RCC_OscConfig+0x98>
 8006238:	4baf      	ldr	r3, [pc, #700]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4bae      	ldr	r3, [pc, #696]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 800623e:	49af      	ldr	r1, [pc, #700]	@ (80064fc <HAL_RCC_OscConfig+0x344>)
 8006240:	400a      	ands	r2, r1
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	4bac      	ldr	r3, [pc, #688]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	4bab      	ldr	r3, [pc, #684]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 800624a:	49ad      	ldr	r1, [pc, #692]	@ (8006500 <HAL_RCC_OscConfig+0x348>)
 800624c:	400a      	ands	r2, r1
 800624e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d014      	beq.n	8006282 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006258:	f7fc fcf8 	bl	8002c4c <HAL_GetTick>
 800625c:	0003      	movs	r3, r0
 800625e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006262:	f7fc fcf3 	bl	8002c4c <HAL_GetTick>
 8006266:	0002      	movs	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b64      	cmp	r3, #100	@ 0x64
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e1ba      	b.n	80065ea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006274:	4ba0      	ldr	r3, [pc, #640]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	2380      	movs	r3, #128	@ 0x80
 800627a:	029b      	lsls	r3, r3, #10
 800627c:	4013      	ands	r3, r2
 800627e:	d0f0      	beq.n	8006262 <HAL_RCC_OscConfig+0xaa>
 8006280:	e013      	b.n	80062aa <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006282:	f7fc fce3 	bl	8002c4c <HAL_GetTick>
 8006286:	0003      	movs	r3, r0
 8006288:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800628a:	e008      	b.n	800629e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800628c:	f7fc fcde 	bl	8002c4c <HAL_GetTick>
 8006290:	0002      	movs	r2, r0
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b64      	cmp	r3, #100	@ 0x64
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e1a5      	b.n	80065ea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800629e:	4b96      	ldr	r3, [pc, #600]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	2380      	movs	r3, #128	@ 0x80
 80062a4:	029b      	lsls	r3, r3, #10
 80062a6:	4013      	ands	r3, r2
 80062a8:	d1f0      	bne.n	800628c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2202      	movs	r2, #2
 80062b0:	4013      	ands	r3, r2
 80062b2:	d100      	bne.n	80062b6 <HAL_RCC_OscConfig+0xfe>
 80062b4:	e086      	b.n	80063c4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062b6:	4b90      	ldr	r3, [pc, #576]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	2238      	movs	r2, #56	@ 0x38
 80062bc:	4013      	ands	r3, r2
 80062be:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d12f      	bne.n	8006326 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e18b      	b.n	80065ea <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d2:	4b89      	ldr	r3, [pc, #548]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	4a8b      	ldr	r2, [pc, #556]	@ (8006504 <HAL_RCC_OscConfig+0x34c>)
 80062d8:	4013      	ands	r3, r2
 80062da:	0019      	movs	r1, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	021a      	lsls	r2, r3, #8
 80062e2:	4b85      	ldr	r3, [pc, #532]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80062e4:	430a      	orrs	r2, r1
 80062e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d112      	bne.n	8006314 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80062ee:	4b82      	ldr	r3, [pc, #520]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a85      	ldr	r2, [pc, #532]	@ (8006508 <HAL_RCC_OscConfig+0x350>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	0019      	movs	r1, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	4b7e      	ldr	r3, [pc, #504]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80062fe:	430a      	orrs	r2, r1
 8006300:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006302:	4b7d      	ldr	r3, [pc, #500]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	0adb      	lsrs	r3, r3, #11
 8006308:	2207      	movs	r2, #7
 800630a:	4013      	ands	r3, r2
 800630c:	4a7f      	ldr	r2, [pc, #508]	@ (800650c <HAL_RCC_OscConfig+0x354>)
 800630e:	40da      	lsrs	r2, r3
 8006310:	4b7f      	ldr	r3, [pc, #508]	@ (8006510 <HAL_RCC_OscConfig+0x358>)
 8006312:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006314:	4b7f      	ldr	r3, [pc, #508]	@ (8006514 <HAL_RCC_OscConfig+0x35c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	0018      	movs	r0, r3
 800631a:	f7fc fc3b 	bl	8002b94 <HAL_InitTick>
 800631e:	1e03      	subs	r3, r0, #0
 8006320:	d050      	beq.n	80063c4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e161      	b.n	80065ea <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d030      	beq.n	8006390 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800632e:	4b72      	ldr	r3, [pc, #456]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a75      	ldr	r2, [pc, #468]	@ (8006508 <HAL_RCC_OscConfig+0x350>)
 8006334:	4013      	ands	r3, r2
 8006336:	0019      	movs	r1, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	4b6e      	ldr	r3, [pc, #440]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 800633e:	430a      	orrs	r2, r1
 8006340:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8006342:	4b6d      	ldr	r3, [pc, #436]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	4b6c      	ldr	r3, [pc, #432]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 8006348:	2180      	movs	r1, #128	@ 0x80
 800634a:	0049      	lsls	r1, r1, #1
 800634c:	430a      	orrs	r2, r1
 800634e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006350:	f7fc fc7c 	bl	8002c4c <HAL_GetTick>
 8006354:	0003      	movs	r3, r0
 8006356:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006358:	e008      	b.n	800636c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800635a:	f7fc fc77 	bl	8002c4c <HAL_GetTick>
 800635e:	0002      	movs	r2, r0
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d901      	bls.n	800636c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e13e      	b.n	80065ea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800636c:	4b62      	ldr	r3, [pc, #392]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	2380      	movs	r3, #128	@ 0x80
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	4013      	ands	r3, r2
 8006376:	d0f0      	beq.n	800635a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006378:	4b5f      	ldr	r3, [pc, #380]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	4a61      	ldr	r2, [pc, #388]	@ (8006504 <HAL_RCC_OscConfig+0x34c>)
 800637e:	4013      	ands	r3, r2
 8006380:	0019      	movs	r1, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	021a      	lsls	r2, r3, #8
 8006388:	4b5b      	ldr	r3, [pc, #364]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 800638a:	430a      	orrs	r2, r1
 800638c:	605a      	str	r2, [r3, #4]
 800638e:	e019      	b.n	80063c4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8006390:	4b59      	ldr	r3, [pc, #356]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	4b58      	ldr	r3, [pc, #352]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 8006396:	4960      	ldr	r1, [pc, #384]	@ (8006518 <HAL_RCC_OscConfig+0x360>)
 8006398:	400a      	ands	r2, r1
 800639a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639c:	f7fc fc56 	bl	8002c4c <HAL_GetTick>
 80063a0:	0003      	movs	r3, r0
 80063a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063a4:	e008      	b.n	80063b8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80063a6:	f7fc fc51 	bl	8002c4c <HAL_GetTick>
 80063aa:	0002      	movs	r2, r0
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d901      	bls.n	80063b8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e118      	b.n	80065ea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063b8:	4b4f      	ldr	r3, [pc, #316]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	2380      	movs	r3, #128	@ 0x80
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	4013      	ands	r3, r2
 80063c2:	d1f0      	bne.n	80063a6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2208      	movs	r2, #8
 80063ca:	4013      	ands	r3, r2
 80063cc:	d042      	beq.n	8006454 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80063ce:	4b4a      	ldr	r3, [pc, #296]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	2238      	movs	r2, #56	@ 0x38
 80063d4:	4013      	ands	r3, r2
 80063d6:	2b18      	cmp	r3, #24
 80063d8:	d105      	bne.n	80063e6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d138      	bne.n	8006454 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e101      	b.n	80065ea <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d019      	beq.n	8006422 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80063ee:	4b42      	ldr	r3, [pc, #264]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80063f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80063f2:	4b41      	ldr	r3, [pc, #260]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80063f4:	2101      	movs	r1, #1
 80063f6:	430a      	orrs	r2, r1
 80063f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fa:	f7fc fc27 	bl	8002c4c <HAL_GetTick>
 80063fe:	0003      	movs	r3, r0
 8006400:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006404:	f7fc fc22 	bl	8002c4c <HAL_GetTick>
 8006408:	0002      	movs	r2, r0
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e0e9      	b.n	80065ea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8006416:	4b38      	ldr	r3, [pc, #224]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 8006418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800641a:	2202      	movs	r2, #2
 800641c:	4013      	ands	r3, r2
 800641e:	d0f1      	beq.n	8006404 <HAL_RCC_OscConfig+0x24c>
 8006420:	e018      	b.n	8006454 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006422:	4b35      	ldr	r3, [pc, #212]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 8006424:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006426:	4b34      	ldr	r3, [pc, #208]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 8006428:	2101      	movs	r1, #1
 800642a:	438a      	bics	r2, r1
 800642c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642e:	f7fc fc0d 	bl	8002c4c <HAL_GetTick>
 8006432:	0003      	movs	r3, r0
 8006434:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006438:	f7fc fc08 	bl	8002c4c <HAL_GetTick>
 800643c:	0002      	movs	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e0cf      	b.n	80065ea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800644a:	4b2b      	ldr	r3, [pc, #172]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 800644c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800644e:	2202      	movs	r2, #2
 8006450:	4013      	ands	r3, r2
 8006452:	d1f1      	bne.n	8006438 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2204      	movs	r2, #4
 800645a:	4013      	ands	r3, r2
 800645c:	d100      	bne.n	8006460 <HAL_RCC_OscConfig+0x2a8>
 800645e:	e084      	b.n	800656a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006460:	230f      	movs	r3, #15
 8006462:	18fb      	adds	r3, r7, r3
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8006468:	4b23      	ldr	r3, [pc, #140]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2238      	movs	r2, #56	@ 0x38
 800646e:	4013      	ands	r3, r2
 8006470:	2b20      	cmp	r3, #32
 8006472:	d106      	bne.n	8006482 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d000      	beq.n	800647e <HAL_RCC_OscConfig+0x2c6>
 800647c:	e075      	b.n	800656a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e0b3      	b.n	80065ea <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d106      	bne.n	8006498 <HAL_RCC_OscConfig+0x2e0>
 800648a:	4b1b      	ldr	r3, [pc, #108]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 800648c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800648e:	4b1a      	ldr	r3, [pc, #104]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 8006490:	2101      	movs	r1, #1
 8006492:	430a      	orrs	r2, r1
 8006494:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006496:	e01c      	b.n	80064d2 <HAL_RCC_OscConfig+0x31a>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	2b05      	cmp	r3, #5
 800649e:	d10c      	bne.n	80064ba <HAL_RCC_OscConfig+0x302>
 80064a0:	4b15      	ldr	r3, [pc, #84]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80064a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80064a4:	4b14      	ldr	r3, [pc, #80]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80064a6:	2104      	movs	r1, #4
 80064a8:	430a      	orrs	r2, r1
 80064aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80064ac:	4b12      	ldr	r3, [pc, #72]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80064ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80064b0:	4b11      	ldr	r3, [pc, #68]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80064b2:	2101      	movs	r1, #1
 80064b4:	430a      	orrs	r2, r1
 80064b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80064b8:	e00b      	b.n	80064d2 <HAL_RCC_OscConfig+0x31a>
 80064ba:	4b0f      	ldr	r3, [pc, #60]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80064bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80064be:	4b0e      	ldr	r3, [pc, #56]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80064c0:	2101      	movs	r1, #1
 80064c2:	438a      	bics	r2, r1
 80064c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80064c6:	4b0c      	ldr	r3, [pc, #48]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80064c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80064ca:	4b0b      	ldr	r3, [pc, #44]	@ (80064f8 <HAL_RCC_OscConfig+0x340>)
 80064cc:	2104      	movs	r1, #4
 80064ce:	438a      	bics	r2, r1
 80064d0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d028      	beq.n	800652c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064da:	f7fc fbb7 	bl	8002c4c <HAL_GetTick>
 80064de:	0003      	movs	r3, r0
 80064e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80064e2:	e01d      	b.n	8006520 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064e4:	f7fc fbb2 	bl	8002c4c <HAL_GetTick>
 80064e8:	0002      	movs	r2, r0
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	4a0b      	ldr	r2, [pc, #44]	@ (800651c <HAL_RCC_OscConfig+0x364>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d915      	bls.n	8006520 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e078      	b.n	80065ea <HAL_RCC_OscConfig+0x432>
 80064f8:	40021000 	.word	0x40021000
 80064fc:	fffeffff 	.word	0xfffeffff
 8006500:	fffbffff 	.word	0xfffbffff
 8006504:	ffff80ff 	.word	0xffff80ff
 8006508:	ffffc7ff 	.word	0xffffc7ff
 800650c:	02dc6c00 	.word	0x02dc6c00
 8006510:	20000000 	.word	0x20000000
 8006514:	20000008 	.word	0x20000008
 8006518:	fffffeff 	.word	0xfffffeff
 800651c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8006520:	4b34      	ldr	r3, [pc, #208]	@ (80065f4 <HAL_RCC_OscConfig+0x43c>)
 8006522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006524:	2202      	movs	r2, #2
 8006526:	4013      	ands	r3, r2
 8006528:	d0dc      	beq.n	80064e4 <HAL_RCC_OscConfig+0x32c>
 800652a:	e013      	b.n	8006554 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652c:	f7fc fb8e 	bl	8002c4c <HAL_GetTick>
 8006530:	0003      	movs	r3, r0
 8006532:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8006534:	e009      	b.n	800654a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006536:	f7fc fb89 	bl	8002c4c <HAL_GetTick>
 800653a:	0002      	movs	r2, r0
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	4a2d      	ldr	r2, [pc, #180]	@ (80065f8 <HAL_RCC_OscConfig+0x440>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e04f      	b.n	80065ea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800654a:	4b2a      	ldr	r3, [pc, #168]	@ (80065f4 <HAL_RCC_OscConfig+0x43c>)
 800654c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800654e:	2202      	movs	r2, #2
 8006550:	4013      	ands	r3, r2
 8006552:	d1f0      	bne.n	8006536 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006554:	230f      	movs	r3, #15
 8006556:	18fb      	adds	r3, r7, r3
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d105      	bne.n	800656a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800655e:	4b25      	ldr	r3, [pc, #148]	@ (80065f4 <HAL_RCC_OscConfig+0x43c>)
 8006560:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006562:	4b24      	ldr	r3, [pc, #144]	@ (80065f4 <HAL_RCC_OscConfig+0x43c>)
 8006564:	4925      	ldr	r1, [pc, #148]	@ (80065fc <HAL_RCC_OscConfig+0x444>)
 8006566:	400a      	ands	r2, r1
 8006568:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2210      	movs	r2, #16
 8006570:	4013      	ands	r3, r2
 8006572:	d039      	beq.n	80065e8 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01b      	beq.n	80065b4 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800657c:	4b1d      	ldr	r3, [pc, #116]	@ (80065f4 <HAL_RCC_OscConfig+0x43c>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	4b1c      	ldr	r3, [pc, #112]	@ (80065f4 <HAL_RCC_OscConfig+0x43c>)
 8006582:	2180      	movs	r1, #128	@ 0x80
 8006584:	03c9      	lsls	r1, r1, #15
 8006586:	430a      	orrs	r2, r1
 8006588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800658a:	f7fc fb5f 	bl	8002c4c <HAL_GetTick>
 800658e:	0003      	movs	r3, r0
 8006590:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006594:	f7fc fb5a 	bl	8002c4c <HAL_GetTick>
 8006598:	0002      	movs	r2, r0
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e021      	b.n	80065ea <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80065a6:	4b13      	ldr	r3, [pc, #76]	@ (80065f4 <HAL_RCC_OscConfig+0x43c>)
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	2380      	movs	r3, #128	@ 0x80
 80065ac:	041b      	lsls	r3, r3, #16
 80065ae:	4013      	ands	r3, r2
 80065b0:	d0f0      	beq.n	8006594 <HAL_RCC_OscConfig+0x3dc>
 80065b2:	e019      	b.n	80065e8 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065b4:	4b0f      	ldr	r3, [pc, #60]	@ (80065f4 <HAL_RCC_OscConfig+0x43c>)
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	4b0e      	ldr	r3, [pc, #56]	@ (80065f4 <HAL_RCC_OscConfig+0x43c>)
 80065ba:	4911      	ldr	r1, [pc, #68]	@ (8006600 <HAL_RCC_OscConfig+0x448>)
 80065bc:	400a      	ands	r2, r1
 80065be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065c0:	f7fc fb44 	bl	8002c4c <HAL_GetTick>
 80065c4:	0003      	movs	r3, r0
 80065c6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80065c8:	e008      	b.n	80065dc <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065ca:	f7fc fb3f 	bl	8002c4c <HAL_GetTick>
 80065ce:	0002      	movs	r2, r0
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e006      	b.n	80065ea <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80065dc:	4b05      	ldr	r3, [pc, #20]	@ (80065f4 <HAL_RCC_OscConfig+0x43c>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	2380      	movs	r3, #128	@ 0x80
 80065e2:	041b      	lsls	r3, r3, #16
 80065e4:	4013      	ands	r3, r2
 80065e6:	d1f0      	bne.n	80065ca <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	0018      	movs	r0, r3
 80065ec:	46bd      	mov	sp, r7
 80065ee:	b006      	add	sp, #24
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	46c0      	nop			@ (mov r8, r8)
 80065f4:	40021000 	.word	0x40021000
 80065f8:	00001388 	.word	0x00001388
 80065fc:	efffffff 	.word	0xefffffff
 8006600:	ffbfffff 	.word	0xffbfffff

08006604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e0f6      	b.n	8006806 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006618:	4b7d      	ldr	r3, [pc, #500]	@ (8006810 <HAL_RCC_ClockConfig+0x20c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2207      	movs	r2, #7
 800661e:	4013      	ands	r3, r2
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d91e      	bls.n	8006664 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006626:	4b7a      	ldr	r3, [pc, #488]	@ (8006810 <HAL_RCC_ClockConfig+0x20c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2207      	movs	r2, #7
 800662c:	4393      	bics	r3, r2
 800662e:	0019      	movs	r1, r3
 8006630:	4b77      	ldr	r3, [pc, #476]	@ (8006810 <HAL_RCC_ClockConfig+0x20c>)
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006638:	f7fc fb08 	bl	8002c4c <HAL_GetTick>
 800663c:	0003      	movs	r3, r0
 800663e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006640:	e009      	b.n	8006656 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006642:	f7fc fb03 	bl	8002c4c <HAL_GetTick>
 8006646:	0002      	movs	r2, r0
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	4a71      	ldr	r2, [pc, #452]	@ (8006814 <HAL_RCC_ClockConfig+0x210>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e0d7      	b.n	8006806 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006656:	4b6e      	ldr	r3, [pc, #440]	@ (8006810 <HAL_RCC_ClockConfig+0x20c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2207      	movs	r2, #7
 800665c:	4013      	ands	r3, r2
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	429a      	cmp	r2, r3
 8006662:	d1ee      	bne.n	8006642 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2202      	movs	r2, #2
 800666a:	4013      	ands	r3, r2
 800666c:	d017      	beq.n	800669e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2204      	movs	r2, #4
 8006674:	4013      	ands	r3, r2
 8006676:	d008      	beq.n	800668a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006678:	4b67      	ldr	r3, [pc, #412]	@ (8006818 <HAL_RCC_ClockConfig+0x214>)
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	4a67      	ldr	r2, [pc, #412]	@ (800681c <HAL_RCC_ClockConfig+0x218>)
 800667e:	401a      	ands	r2, r3
 8006680:	4b65      	ldr	r3, [pc, #404]	@ (8006818 <HAL_RCC_ClockConfig+0x214>)
 8006682:	21b0      	movs	r1, #176	@ 0xb0
 8006684:	0109      	lsls	r1, r1, #4
 8006686:	430a      	orrs	r2, r1
 8006688:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800668a:	4b63      	ldr	r3, [pc, #396]	@ (8006818 <HAL_RCC_ClockConfig+0x214>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	4a64      	ldr	r2, [pc, #400]	@ (8006820 <HAL_RCC_ClockConfig+0x21c>)
 8006690:	4013      	ands	r3, r2
 8006692:	0019      	movs	r1, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	4b5f      	ldr	r3, [pc, #380]	@ (8006818 <HAL_RCC_ClockConfig+0x214>)
 800669a:	430a      	orrs	r2, r1
 800669c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2201      	movs	r2, #1
 80066a4:	4013      	ands	r3, r2
 80066a6:	d100      	bne.n	80066aa <HAL_RCC_ClockConfig+0xa6>
 80066a8:	e061      	b.n	800676e <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80066aa:	4b5b      	ldr	r3, [pc, #364]	@ (8006818 <HAL_RCC_ClockConfig+0x214>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	221c      	movs	r2, #28
 80066b0:	4393      	bics	r3, r2
 80066b2:	0019      	movs	r1, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	4b57      	ldr	r3, [pc, #348]	@ (8006818 <HAL_RCC_ClockConfig+0x214>)
 80066ba:	430a      	orrs	r2, r1
 80066bc:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d107      	bne.n	80066d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066c6:	4b54      	ldr	r3, [pc, #336]	@ (8006818 <HAL_RCC_ClockConfig+0x214>)
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	2380      	movs	r3, #128	@ 0x80
 80066cc:	029b      	lsls	r3, r3, #10
 80066ce:	4013      	ands	r3, r2
 80066d0:	d12b      	bne.n	800672a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e097      	b.n	8006806 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d107      	bne.n	80066ee <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066de:	4b4e      	ldr	r3, [pc, #312]	@ (8006818 <HAL_RCC_ClockConfig+0x214>)
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	2380      	movs	r3, #128	@ 0x80
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	4013      	ands	r3, r2
 80066e8:	d11f      	bne.n	800672a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e08b      	b.n	8006806 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d107      	bne.n	8006706 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80066f6:	4b48      	ldr	r3, [pc, #288]	@ (8006818 <HAL_RCC_ClockConfig+0x214>)
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	2380      	movs	r3, #128	@ 0x80
 80066fc:	041b      	lsls	r3, r3, #16
 80066fe:	4013      	ands	r3, r2
 8006700:	d113      	bne.n	800672a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e07f      	b.n	8006806 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2b03      	cmp	r3, #3
 800670c:	d106      	bne.n	800671c <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800670e:	4b42      	ldr	r3, [pc, #264]	@ (8006818 <HAL_RCC_ClockConfig+0x214>)
 8006710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006712:	2202      	movs	r2, #2
 8006714:	4013      	ands	r3, r2
 8006716:	d108      	bne.n	800672a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e074      	b.n	8006806 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800671c:	4b3e      	ldr	r3, [pc, #248]	@ (8006818 <HAL_RCC_ClockConfig+0x214>)
 800671e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006720:	2202      	movs	r2, #2
 8006722:	4013      	ands	r3, r2
 8006724:	d101      	bne.n	800672a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e06d      	b.n	8006806 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800672a:	4b3b      	ldr	r3, [pc, #236]	@ (8006818 <HAL_RCC_ClockConfig+0x214>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	2207      	movs	r2, #7
 8006730:	4393      	bics	r3, r2
 8006732:	0019      	movs	r1, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	4b37      	ldr	r3, [pc, #220]	@ (8006818 <HAL_RCC_ClockConfig+0x214>)
 800673a:	430a      	orrs	r2, r1
 800673c:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800673e:	f7fc fa85 	bl	8002c4c <HAL_GetTick>
 8006742:	0003      	movs	r3, r0
 8006744:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006746:	e009      	b.n	800675c <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006748:	f7fc fa80 	bl	8002c4c <HAL_GetTick>
 800674c:	0002      	movs	r2, r0
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	4a30      	ldr	r2, [pc, #192]	@ (8006814 <HAL_RCC_ClockConfig+0x210>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d901      	bls.n	800675c <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e054      	b.n	8006806 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800675c:	4b2e      	ldr	r3, [pc, #184]	@ (8006818 <HAL_RCC_ClockConfig+0x214>)
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	2238      	movs	r2, #56	@ 0x38
 8006762:	401a      	ands	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	00db      	lsls	r3, r3, #3
 800676a:	429a      	cmp	r2, r3
 800676c:	d1ec      	bne.n	8006748 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800676e:	4b28      	ldr	r3, [pc, #160]	@ (8006810 <HAL_RCC_ClockConfig+0x20c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2207      	movs	r2, #7
 8006774:	4013      	ands	r3, r2
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	429a      	cmp	r2, r3
 800677a:	d21e      	bcs.n	80067ba <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800677c:	4b24      	ldr	r3, [pc, #144]	@ (8006810 <HAL_RCC_ClockConfig+0x20c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2207      	movs	r2, #7
 8006782:	4393      	bics	r3, r2
 8006784:	0019      	movs	r1, r3
 8006786:	4b22      	ldr	r3, [pc, #136]	@ (8006810 <HAL_RCC_ClockConfig+0x20c>)
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800678e:	f7fc fa5d 	bl	8002c4c <HAL_GetTick>
 8006792:	0003      	movs	r3, r0
 8006794:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006796:	e009      	b.n	80067ac <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006798:	f7fc fa58 	bl	8002c4c <HAL_GetTick>
 800679c:	0002      	movs	r2, r0
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006814 <HAL_RCC_ClockConfig+0x210>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d901      	bls.n	80067ac <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e02c      	b.n	8006806 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80067ac:	4b18      	ldr	r3, [pc, #96]	@ (8006810 <HAL_RCC_ClockConfig+0x20c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2207      	movs	r2, #7
 80067b2:	4013      	ands	r3, r2
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d1ee      	bne.n	8006798 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2204      	movs	r2, #4
 80067c0:	4013      	ands	r3, r2
 80067c2:	d009      	beq.n	80067d8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80067c4:	4b14      	ldr	r3, [pc, #80]	@ (8006818 <HAL_RCC_ClockConfig+0x214>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	4a16      	ldr	r2, [pc, #88]	@ (8006824 <HAL_RCC_ClockConfig+0x220>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	0019      	movs	r1, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691a      	ldr	r2, [r3, #16]
 80067d2:	4b11      	ldr	r3, [pc, #68]	@ (8006818 <HAL_RCC_ClockConfig+0x214>)
 80067d4:	430a      	orrs	r2, r1
 80067d6:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80067d8:	f000 f82c 	bl	8006834 <HAL_RCC_GetSysClockFreq>
 80067dc:	0001      	movs	r1, r0
 80067de:	4b0e      	ldr	r3, [pc, #56]	@ (8006818 <HAL_RCC_ClockConfig+0x214>)
 80067e0:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80067e2:	0a1b      	lsrs	r3, r3, #8
 80067e4:	220f      	movs	r2, #15
 80067e6:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80067e8:	4b0f      	ldr	r3, [pc, #60]	@ (8006828 <HAL_RCC_ClockConfig+0x224>)
 80067ea:	0092      	lsls	r2, r2, #2
 80067ec:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80067ee:	221f      	movs	r2, #31
 80067f0:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80067f2:	000a      	movs	r2, r1
 80067f4:	40da      	lsrs	r2, r3
 80067f6:	4b0d      	ldr	r3, [pc, #52]	@ (800682c <HAL_RCC_ClockConfig+0x228>)
 80067f8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80067fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006830 <HAL_RCC_ClockConfig+0x22c>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	0018      	movs	r0, r3
 8006800:	f7fc f9c8 	bl	8002b94 <HAL_InitTick>
 8006804:	0003      	movs	r3, r0
}
 8006806:	0018      	movs	r0, r3
 8006808:	46bd      	mov	sp, r7
 800680a:	b004      	add	sp, #16
 800680c:	bd80      	pop	{r7, pc}
 800680e:	46c0      	nop			@ (mov r8, r8)
 8006810:	40022000 	.word	0x40022000
 8006814:	00001388 	.word	0x00001388
 8006818:	40021000 	.word	0x40021000
 800681c:	ffff84ff 	.word	0xffff84ff
 8006820:	fffff0ff 	.word	0xfffff0ff
 8006824:	ffff8fff 	.word	0xffff8fff
 8006828:	08007648 	.word	0x08007648
 800682c:	20000000 	.word	0x20000000
 8006830:	20000008 	.word	0x20000008

08006834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 800683a:	4b27      	ldr	r3, [pc, #156]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	089b      	lsrs	r3, r3, #2
 8006840:	2207      	movs	r2, #7
 8006842:	4013      	ands	r3, r2
 8006844:	3301      	adds	r3, #1
 8006846:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006848:	4b23      	ldr	r3, [pc, #140]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	2238      	movs	r2, #56	@ 0x38
 800684e:	4013      	ands	r3, r2
 8006850:	d10f      	bne.n	8006872 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006852:	4b21      	ldr	r3, [pc, #132]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	0adb      	lsrs	r3, r3, #11
 8006858:	2207      	movs	r2, #7
 800685a:	4013      	ands	r3, r2
 800685c:	2201      	movs	r2, #1
 800685e:	409a      	lsls	r2, r3
 8006860:	0013      	movs	r3, r2
 8006862:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006864:	6879      	ldr	r1, [r7, #4]
 8006866:	481d      	ldr	r0, [pc, #116]	@ (80068dc <HAL_RCC_GetSysClockFreq+0xa8>)
 8006868:	f7f9 fc4e 	bl	8000108 <__udivsi3>
 800686c:	0003      	movs	r3, r0
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	e027      	b.n	80068c2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006872:	4b19      	ldr	r3, [pc, #100]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	2238      	movs	r2, #56	@ 0x38
 8006878:	4013      	ands	r3, r2
 800687a:	2b08      	cmp	r3, #8
 800687c:	d102      	bne.n	8006884 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800687e:	4b18      	ldr	r3, [pc, #96]	@ (80068e0 <HAL_RCC_GetSysClockFreq+0xac>)
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	e01e      	b.n	80068c2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8006884:	4b14      	ldr	r3, [pc, #80]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	2238      	movs	r2, #56	@ 0x38
 800688a:	4013      	ands	r3, r2
 800688c:	2b20      	cmp	r3, #32
 800688e:	d103      	bne.n	8006898 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006890:	2380      	movs	r3, #128	@ 0x80
 8006892:	021b      	lsls	r3, r3, #8
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	e014      	b.n	80068c2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8006898:	4b0f      	ldr	r3, [pc, #60]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	2238      	movs	r2, #56	@ 0x38
 800689e:	4013      	ands	r3, r2
 80068a0:	2b18      	cmp	r3, #24
 80068a2:	d103      	bne.n	80068ac <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80068a4:	23fa      	movs	r3, #250	@ 0xfa
 80068a6:	01db      	lsls	r3, r3, #7
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	e00a      	b.n	80068c2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 80068ac:	4b0a      	ldr	r3, [pc, #40]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	2238      	movs	r2, #56	@ 0x38
 80068b2:	4013      	ands	r3, r2
 80068b4:	2b10      	cmp	r3, #16
 80068b6:	d102      	bne.n	80068be <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 80068b8:	4b08      	ldr	r3, [pc, #32]	@ (80068dc <HAL_RCC_GetSysClockFreq+0xa8>)
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	e001      	b.n	80068c2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 80068c2:	68b9      	ldr	r1, [r7, #8]
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f7f9 fc1f 	bl	8000108 <__udivsi3>
 80068ca:	0003      	movs	r3, r0
 80068cc:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80068ce:	68fb      	ldr	r3, [r7, #12]
}
 80068d0:	0018      	movs	r0, r3
 80068d2:	46bd      	mov	sp, r7
 80068d4:	b004      	add	sp, #16
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	40021000 	.word	0x40021000
 80068dc:	02dc6c00 	.word	0x02dc6c00
 80068e0:	007a1200 	.word	0x007a1200

080068e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80068e8:	f7ff ffa4 	bl	8006834 <HAL_RCC_GetSysClockFreq>
 80068ec:	0001      	movs	r1, r0
 80068ee:	4b09      	ldr	r3, [pc, #36]	@ (8006914 <HAL_RCC_GetHCLKFreq+0x30>)
 80068f0:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80068f2:	0a1b      	lsrs	r3, r3, #8
 80068f4:	220f      	movs	r2, #15
 80068f6:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80068f8:	4b07      	ldr	r3, [pc, #28]	@ (8006918 <HAL_RCC_GetHCLKFreq+0x34>)
 80068fa:	0092      	lsls	r2, r2, #2
 80068fc:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80068fe:	221f      	movs	r2, #31
 8006900:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8006902:	000a      	movs	r2, r1
 8006904:	40da      	lsrs	r2, r3
 8006906:	4b05      	ldr	r3, [pc, #20]	@ (800691c <HAL_RCC_GetHCLKFreq+0x38>)
 8006908:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800690a:	4b04      	ldr	r3, [pc, #16]	@ (800691c <HAL_RCC_GetHCLKFreq+0x38>)
 800690c:	681b      	ldr	r3, [r3, #0]
}
 800690e:	0018      	movs	r0, r3
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	40021000 	.word	0x40021000
 8006918:	08007648 	.word	0x08007648
 800691c:	20000000 	.word	0x20000000

08006920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8006924:	f7ff ffde 	bl	80068e4 <HAL_RCC_GetHCLKFreq>
 8006928:	0001      	movs	r1, r0
 800692a:	4b07      	ldr	r3, [pc, #28]	@ (8006948 <HAL_RCC_GetPCLK1Freq+0x28>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	0b1b      	lsrs	r3, r3, #12
 8006930:	2207      	movs	r2, #7
 8006932:	401a      	ands	r2, r3
 8006934:	4b05      	ldr	r3, [pc, #20]	@ (800694c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8006936:	0092      	lsls	r2, r2, #2
 8006938:	58d3      	ldr	r3, [r2, r3]
 800693a:	221f      	movs	r2, #31
 800693c:	4013      	ands	r3, r2
 800693e:	40d9      	lsrs	r1, r3
 8006940:	000b      	movs	r3, r1
}
 8006942:	0018      	movs	r0, r3
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	40021000 	.word	0x40021000
 800694c:	08007688 	.word	0x08007688

08006950 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006958:	2313      	movs	r3, #19
 800695a:	18fb      	adds	r3, r7, r3
 800695c:	2200      	movs	r2, #0
 800695e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006960:	2312      	movs	r3, #18
 8006962:	18fb      	adds	r3, r7, r3
 8006964:	2200      	movs	r2, #0
 8006966:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2240      	movs	r2, #64	@ 0x40
 800696e:	4013      	ands	r3, r2
 8006970:	d100      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8006972:	e079      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006974:	2011      	movs	r0, #17
 8006976:	183b      	adds	r3, r7, r0
 8006978:	2200      	movs	r2, #0
 800697a:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800697c:	4b6a      	ldr	r3, [pc, #424]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800697e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006980:	2380      	movs	r3, #128	@ 0x80
 8006982:	055b      	lsls	r3, r3, #21
 8006984:	4013      	ands	r3, r2
 8006986:	d110      	bne.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006988:	4b67      	ldr	r3, [pc, #412]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800698a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800698c:	4b66      	ldr	r3, [pc, #408]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800698e:	2180      	movs	r1, #128	@ 0x80
 8006990:	0549      	lsls	r1, r1, #21
 8006992:	430a      	orrs	r2, r1
 8006994:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006996:	4b64      	ldr	r3, [pc, #400]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006998:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800699a:	2380      	movs	r3, #128	@ 0x80
 800699c:	055b      	lsls	r3, r3, #21
 800699e:	4013      	ands	r3, r2
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069a4:	183b      	adds	r3, r7, r0
 80069a6:	2201      	movs	r2, #1
 80069a8:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80069aa:	4b5f      	ldr	r3, [pc, #380]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80069ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80069ae:	23c0      	movs	r3, #192	@ 0xc0
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4013      	ands	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d019      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d014      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80069c6:	4b58      	ldr	r3, [pc, #352]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80069c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ca:	4a58      	ldr	r2, [pc, #352]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069d0:	4b55      	ldr	r3, [pc, #340]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80069d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80069d4:	4b54      	ldr	r3, [pc, #336]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80069d6:	2180      	movs	r1, #128	@ 0x80
 80069d8:	0249      	lsls	r1, r1, #9
 80069da:	430a      	orrs	r2, r1
 80069dc:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069de:	4b52      	ldr	r3, [pc, #328]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80069e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80069e2:	4b51      	ldr	r3, [pc, #324]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80069e4:	4952      	ldr	r1, [pc, #328]	@ (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069e6:	400a      	ands	r2, r1
 80069e8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80069ea:	4b4f      	ldr	r3, [pc, #316]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2201      	movs	r2, #1
 80069f4:	4013      	ands	r3, r2
 80069f6:	d016      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f8:	f7fc f928 	bl	8002c4c <HAL_GetTick>
 80069fc:	0003      	movs	r3, r0
 80069fe:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8006a00:	e00c      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a02:	f7fc f923 	bl	8002c4c <HAL_GetTick>
 8006a06:	0002      	movs	r2, r0
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	4a49      	ldr	r2, [pc, #292]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d904      	bls.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8006a12:	2313      	movs	r3, #19
 8006a14:	18fb      	adds	r3, r7, r3
 8006a16:	2203      	movs	r2, #3
 8006a18:	701a      	strb	r2, [r3, #0]
          break;
 8006a1a:	e004      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8006a1c:	4b42      	ldr	r3, [pc, #264]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a20:	2202      	movs	r2, #2
 8006a22:	4013      	ands	r3, r2
 8006a24:	d0ed      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8006a26:	2313      	movs	r3, #19
 8006a28:	18fb      	adds	r3, r7, r3
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a30:	4b3d      	ldr	r3, [pc, #244]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a34:	4a3d      	ldr	r2, [pc, #244]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006a36:	4013      	ands	r3, r2
 8006a38:	0019      	movs	r1, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69da      	ldr	r2, [r3, #28]
 8006a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006a40:	430a      	orrs	r2, r1
 8006a42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006a44:	e005      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a46:	2312      	movs	r3, #18
 8006a48:	18fb      	adds	r3, r7, r3
 8006a4a:	2213      	movs	r2, #19
 8006a4c:	18ba      	adds	r2, r7, r2
 8006a4e:	7812      	ldrb	r2, [r2, #0]
 8006a50:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a52:	2311      	movs	r3, #17
 8006a54:	18fb      	adds	r3, r7, r3
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d105      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a5c:	4b32      	ldr	r3, [pc, #200]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006a5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a60:	4b31      	ldr	r3, [pc, #196]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006a62:	4935      	ldr	r1, [pc, #212]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006a64:	400a      	ands	r2, r1
 8006a66:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	4013      	ands	r3, r2
 8006a70:	d009      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a72:	4b2d      	ldr	r3, [pc, #180]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a76:	2203      	movs	r2, #3
 8006a78:	4393      	bics	r3, r2
 8006a7a:	0019      	movs	r1, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	4b29      	ldr	r3, [pc, #164]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006a82:	430a      	orrs	r2, r1
 8006a84:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	d009      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a90:	4b25      	ldr	r3, [pc, #148]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a94:	4a29      	ldr	r2, [pc, #164]	@ (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006a96:	4013      	ands	r3, r2
 8006a98:	0019      	movs	r1, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	4b22      	ldr	r3, [pc, #136]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	4013      	ands	r3, r2
 8006aac:	d008      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006aae:	4b1e      	ldr	r3, [pc, #120]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	0899      	lsrs	r1, r3, #2
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	4b1b      	ldr	r3, [pc, #108]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006abc:	430a      	orrs	r2, r1
 8006abe:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2208      	movs	r2, #8
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	d009      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006aca:	4b17      	ldr	r3, [pc, #92]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ace:	4a1c      	ldr	r2, [pc, #112]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	0019      	movs	r1, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	695a      	ldr	r2, [r3, #20]
 8006ad8:	4b13      	ldr	r3, [pc, #76]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006ada:	430a      	orrs	r2, r1
 8006adc:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2204      	movs	r2, #4
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	d009      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aec:	4a15      	ldr	r2, [pc, #84]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006aee:	4013      	ands	r3, r2
 8006af0:	0019      	movs	r1, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691a      	ldr	r2, [r3, #16]
 8006af6:	4b0c      	ldr	r3, [pc, #48]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006af8:	430a      	orrs	r2, r1
 8006afa:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2280      	movs	r2, #128	@ 0x80
 8006b02:	4013      	ands	r3, r2
 8006b04:	d009      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8006b06:	4b08      	ldr	r3, [pc, #32]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	22e0      	movs	r2, #224	@ 0xe0
 8006b0c:	4393      	bics	r3, r2
 8006b0e:	0019      	movs	r1, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	4b04      	ldr	r3, [pc, #16]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006b16:	430a      	orrs	r2, r1
 8006b18:	601a      	str	r2, [r3, #0]
  }
  return status;
 8006b1a:	2312      	movs	r3, #18
 8006b1c:	18fb      	adds	r3, r7, r3
 8006b1e:	781b      	ldrb	r3, [r3, #0]
}
 8006b20:	0018      	movs	r0, r3
 8006b22:	46bd      	mov	sp, r7
 8006b24:	b006      	add	sp, #24
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40021000 	.word	0x40021000
 8006b2c:	fffffcff 	.word	0xfffffcff
 8006b30:	fffeffff 	.word	0xfffeffff
 8006b34:	00001388 	.word	0x00001388
 8006b38:	efffffff 	.word	0xefffffff
 8006b3c:	ffffcfff 	.word	0xffffcfff
 8006b40:	ffffefff 	.word	0xffffefff
 8006b44:	ffff3fff 	.word	0xffff3fff

08006b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b50:	231e      	movs	r3, #30
 8006b52:	18fb      	adds	r3, r7, r3
 8006b54:	2200      	movs	r2, #0
 8006b56:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	431a      	orrs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	431a      	orrs	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4aab      	ldr	r2, [pc, #684]	@ (8006e24 <UART_SetConfig+0x2dc>)
 8006b78:	4013      	ands	r3, r2
 8006b7a:	0019      	movs	r1, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	4aa6      	ldr	r2, [pc, #664]	@ (8006e28 <UART_SetConfig+0x2e0>)
 8006b8e:	4013      	ands	r3, r2
 8006b90:	0019      	movs	r1, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68da      	ldr	r2, [r3, #12]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	4a9d      	ldr	r2, [pc, #628]	@ (8006e2c <UART_SetConfig+0x2e4>)
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	0019      	movs	r1, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bca:	220f      	movs	r2, #15
 8006bcc:	4393      	bics	r3, r2
 8006bce:	0019      	movs	r1, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a93      	ldr	r2, [pc, #588]	@ (8006e30 <UART_SetConfig+0x2e8>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d127      	bne.n	8006c36 <UART_SetConfig+0xee>
 8006be6:	4b93      	ldr	r3, [pc, #588]	@ (8006e34 <UART_SetConfig+0x2ec>)
 8006be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bea:	2203      	movs	r2, #3
 8006bec:	4013      	ands	r3, r2
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d017      	beq.n	8006c22 <UART_SetConfig+0xda>
 8006bf2:	d81b      	bhi.n	8006c2c <UART_SetConfig+0xe4>
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d00a      	beq.n	8006c0e <UART_SetConfig+0xc6>
 8006bf8:	d818      	bhi.n	8006c2c <UART_SetConfig+0xe4>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <UART_SetConfig+0xbc>
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d00a      	beq.n	8006c18 <UART_SetConfig+0xd0>
 8006c02:	e013      	b.n	8006c2c <UART_SetConfig+0xe4>
 8006c04:	231f      	movs	r3, #31
 8006c06:	18fb      	adds	r3, r7, r3
 8006c08:	2200      	movs	r2, #0
 8006c0a:	701a      	strb	r2, [r3, #0]
 8006c0c:	e021      	b.n	8006c52 <UART_SetConfig+0x10a>
 8006c0e:	231f      	movs	r3, #31
 8006c10:	18fb      	adds	r3, r7, r3
 8006c12:	2202      	movs	r2, #2
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	e01c      	b.n	8006c52 <UART_SetConfig+0x10a>
 8006c18:	231f      	movs	r3, #31
 8006c1a:	18fb      	adds	r3, r7, r3
 8006c1c:	2204      	movs	r2, #4
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	e017      	b.n	8006c52 <UART_SetConfig+0x10a>
 8006c22:	231f      	movs	r3, #31
 8006c24:	18fb      	adds	r3, r7, r3
 8006c26:	2208      	movs	r2, #8
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	e012      	b.n	8006c52 <UART_SetConfig+0x10a>
 8006c2c:	231f      	movs	r3, #31
 8006c2e:	18fb      	adds	r3, r7, r3
 8006c30:	2210      	movs	r2, #16
 8006c32:	701a      	strb	r2, [r3, #0]
 8006c34:	e00d      	b.n	8006c52 <UART_SetConfig+0x10a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a7f      	ldr	r2, [pc, #508]	@ (8006e38 <UART_SetConfig+0x2f0>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d104      	bne.n	8006c4a <UART_SetConfig+0x102>
 8006c40:	231f      	movs	r3, #31
 8006c42:	18fb      	adds	r3, r7, r3
 8006c44:	2200      	movs	r2, #0
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	e003      	b.n	8006c52 <UART_SetConfig+0x10a>
 8006c4a:	231f      	movs	r3, #31
 8006c4c:	18fb      	adds	r3, r7, r3
 8006c4e:	2210      	movs	r2, #16
 8006c50:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	69da      	ldr	r2, [r3, #28]
 8006c56:	2380      	movs	r3, #128	@ 0x80
 8006c58:	021b      	lsls	r3, r3, #8
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d000      	beq.n	8006c60 <UART_SetConfig+0x118>
 8006c5e:	e06f      	b.n	8006d40 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8006c60:	231f      	movs	r3, #31
 8006c62:	18fb      	adds	r3, r7, r3
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b08      	cmp	r3, #8
 8006c68:	d01f      	beq.n	8006caa <UART_SetConfig+0x162>
 8006c6a:	dc22      	bgt.n	8006cb2 <UART_SetConfig+0x16a>
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d017      	beq.n	8006ca0 <UART_SetConfig+0x158>
 8006c70:	dc1f      	bgt.n	8006cb2 <UART_SetConfig+0x16a>
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d002      	beq.n	8006c7c <UART_SetConfig+0x134>
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d005      	beq.n	8006c86 <UART_SetConfig+0x13e>
 8006c7a:	e01a      	b.n	8006cb2 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c7c:	f7ff fe50 	bl	8006920 <HAL_RCC_GetPCLK1Freq>
 8006c80:	0003      	movs	r3, r0
 8006c82:	61bb      	str	r3, [r7, #24]
        break;
 8006c84:	e01c      	b.n	8006cc0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8006c86:	4b6b      	ldr	r3, [pc, #428]	@ (8006e34 <UART_SetConfig+0x2ec>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	2207      	movs	r2, #7
 8006c8e:	4013      	ands	r3, r2
 8006c90:	3301      	adds	r3, #1
 8006c92:	0019      	movs	r1, r3
 8006c94:	4869      	ldr	r0, [pc, #420]	@ (8006e3c <UART_SetConfig+0x2f4>)
 8006c96:	f7f9 fa37 	bl	8000108 <__udivsi3>
 8006c9a:	0003      	movs	r3, r0
 8006c9c:	61bb      	str	r3, [r7, #24]
        break;
 8006c9e:	e00f      	b.n	8006cc0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ca0:	f7ff fdc8 	bl	8006834 <HAL_RCC_GetSysClockFreq>
 8006ca4:	0003      	movs	r3, r0
 8006ca6:	61bb      	str	r3, [r7, #24]
        break;
 8006ca8:	e00a      	b.n	8006cc0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006caa:	2380      	movs	r3, #128	@ 0x80
 8006cac:	021b      	lsls	r3, r3, #8
 8006cae:	61bb      	str	r3, [r7, #24]
        break;
 8006cb0:	e006      	b.n	8006cc0 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cb6:	231e      	movs	r3, #30
 8006cb8:	18fb      	adds	r3, r7, r3
 8006cba:	2201      	movs	r2, #1
 8006cbc:	701a      	strb	r2, [r3, #0]
        break;
 8006cbe:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d100      	bne.n	8006cc8 <UART_SetConfig+0x180>
 8006cc6:	e097      	b.n	8006df8 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8006e40 <UART_SetConfig+0x2f8>)
 8006cce:	0052      	lsls	r2, r2, #1
 8006cd0:	5ad3      	ldrh	r3, [r2, r3]
 8006cd2:	0019      	movs	r1, r3
 8006cd4:	69b8      	ldr	r0, [r7, #24]
 8006cd6:	f7f9 fa17 	bl	8000108 <__udivsi3>
 8006cda:	0003      	movs	r3, r0
 8006cdc:	005a      	lsls	r2, r3, #1
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	085b      	lsrs	r3, r3, #1
 8006ce4:	18d2      	adds	r2, r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	0019      	movs	r1, r3
 8006cec:	0010      	movs	r0, r2
 8006cee:	f7f9 fa0b 	bl	8000108 <__udivsi3>
 8006cf2:	0003      	movs	r3, r0
 8006cf4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	2b0f      	cmp	r3, #15
 8006cfa:	d91c      	bls.n	8006d36 <UART_SetConfig+0x1ee>
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	2380      	movs	r3, #128	@ 0x80
 8006d00:	025b      	lsls	r3, r3, #9
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d217      	bcs.n	8006d36 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	200e      	movs	r0, #14
 8006d0c:	183b      	adds	r3, r7, r0
 8006d0e:	210f      	movs	r1, #15
 8006d10:	438a      	bics	r2, r1
 8006d12:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	2207      	movs	r2, #7
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	b299      	uxth	r1, r3
 8006d20:	183b      	adds	r3, r7, r0
 8006d22:	183a      	adds	r2, r7, r0
 8006d24:	8812      	ldrh	r2, [r2, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	183a      	adds	r2, r7, r0
 8006d30:	8812      	ldrh	r2, [r2, #0]
 8006d32:	60da      	str	r2, [r3, #12]
 8006d34:	e060      	b.n	8006df8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8006d36:	231e      	movs	r3, #30
 8006d38:	18fb      	adds	r3, r7, r3
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	701a      	strb	r2, [r3, #0]
 8006d3e:	e05b      	b.n	8006df8 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d40:	231f      	movs	r3, #31
 8006d42:	18fb      	adds	r3, r7, r3
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	2b08      	cmp	r3, #8
 8006d48:	d01f      	beq.n	8006d8a <UART_SetConfig+0x242>
 8006d4a:	dc22      	bgt.n	8006d92 <UART_SetConfig+0x24a>
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d017      	beq.n	8006d80 <UART_SetConfig+0x238>
 8006d50:	dc1f      	bgt.n	8006d92 <UART_SetConfig+0x24a>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <UART_SetConfig+0x214>
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d005      	beq.n	8006d66 <UART_SetConfig+0x21e>
 8006d5a:	e01a      	b.n	8006d92 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d5c:	f7ff fde0 	bl	8006920 <HAL_RCC_GetPCLK1Freq>
 8006d60:	0003      	movs	r3, r0
 8006d62:	61bb      	str	r3, [r7, #24]
        break;
 8006d64:	e01c      	b.n	8006da0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8006d66:	4b33      	ldr	r3, [pc, #204]	@ (8006e34 <UART_SetConfig+0x2ec>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	095b      	lsrs	r3, r3, #5
 8006d6c:	2207      	movs	r2, #7
 8006d6e:	4013      	ands	r3, r2
 8006d70:	3301      	adds	r3, #1
 8006d72:	0019      	movs	r1, r3
 8006d74:	4831      	ldr	r0, [pc, #196]	@ (8006e3c <UART_SetConfig+0x2f4>)
 8006d76:	f7f9 f9c7 	bl	8000108 <__udivsi3>
 8006d7a:	0003      	movs	r3, r0
 8006d7c:	61bb      	str	r3, [r7, #24]
        break;
 8006d7e:	e00f      	b.n	8006da0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d80:	f7ff fd58 	bl	8006834 <HAL_RCC_GetSysClockFreq>
 8006d84:	0003      	movs	r3, r0
 8006d86:	61bb      	str	r3, [r7, #24]
        break;
 8006d88:	e00a      	b.n	8006da0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d8a:	2380      	movs	r3, #128	@ 0x80
 8006d8c:	021b      	lsls	r3, r3, #8
 8006d8e:	61bb      	str	r3, [r7, #24]
        break;
 8006d90:	e006      	b.n	8006da0 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d96:	231e      	movs	r3, #30
 8006d98:	18fb      	adds	r3, r7, r3
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	701a      	strb	r2, [r3, #0]
        break;
 8006d9e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d028      	beq.n	8006df8 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006daa:	4b25      	ldr	r3, [pc, #148]	@ (8006e40 <UART_SetConfig+0x2f8>)
 8006dac:	0052      	lsls	r2, r2, #1
 8006dae:	5ad3      	ldrh	r3, [r2, r3]
 8006db0:	0019      	movs	r1, r3
 8006db2:	69b8      	ldr	r0, [r7, #24]
 8006db4:	f7f9 f9a8 	bl	8000108 <__udivsi3>
 8006db8:	0003      	movs	r3, r0
 8006dba:	001a      	movs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	085b      	lsrs	r3, r3, #1
 8006dc2:	18d2      	adds	r2, r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	0019      	movs	r1, r3
 8006dca:	0010      	movs	r0, r2
 8006dcc:	f7f9 f99c 	bl	8000108 <__udivsi3>
 8006dd0:	0003      	movs	r3, r0
 8006dd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	2b0f      	cmp	r3, #15
 8006dd8:	d90a      	bls.n	8006df0 <UART_SetConfig+0x2a8>
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	2380      	movs	r3, #128	@ 0x80
 8006dde:	025b      	lsls	r3, r3, #9
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d205      	bcs.n	8006df0 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	60da      	str	r2, [r3, #12]
 8006dee:	e003      	b.n	8006df8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8006df0:	231e      	movs	r3, #30
 8006df2:	18fb      	adds	r3, r7, r3
 8006df4:	2201      	movs	r2, #1
 8006df6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	226a      	movs	r2, #106	@ 0x6a
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2268      	movs	r2, #104	@ 0x68
 8006e04:	2101      	movs	r1, #1
 8006e06:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006e14:	231e      	movs	r3, #30
 8006e16:	18fb      	adds	r3, r7, r3
 8006e18:	781b      	ldrb	r3, [r3, #0]
}
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	b008      	add	sp, #32
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	46c0      	nop			@ (mov r8, r8)
 8006e24:	cfff69f3 	.word	0xcfff69f3
 8006e28:	ffffcfff 	.word	0xffffcfff
 8006e2c:	11fff4ff 	.word	0x11fff4ff
 8006e30:	40013800 	.word	0x40013800
 8006e34:	40021000 	.word	0x40021000
 8006e38:	40004400 	.word	0x40004400
 8006e3c:	02dc6c00 	.word	0x02dc6c00
 8006e40:	080076a8 	.word	0x080076a8

08006e44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e50:	2208      	movs	r2, #8
 8006e52:	4013      	ands	r3, r2
 8006e54:	d00b      	beq.n	8006e6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	4a4a      	ldr	r2, [pc, #296]	@ (8006f88 <UART_AdvFeatureConfig+0x144>)
 8006e5e:	4013      	ands	r3, r2
 8006e60:	0019      	movs	r1, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e72:	2201      	movs	r2, #1
 8006e74:	4013      	ands	r3, r2
 8006e76:	d00b      	beq.n	8006e90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	4a43      	ldr	r2, [pc, #268]	@ (8006f8c <UART_AdvFeatureConfig+0x148>)
 8006e80:	4013      	ands	r3, r2
 8006e82:	0019      	movs	r1, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e94:	2202      	movs	r2, #2
 8006e96:	4013      	ands	r3, r2
 8006e98:	d00b      	beq.n	8006eb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	4a3b      	ldr	r2, [pc, #236]	@ (8006f90 <UART_AdvFeatureConfig+0x14c>)
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	0019      	movs	r1, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb6:	2204      	movs	r2, #4
 8006eb8:	4013      	ands	r3, r2
 8006eba:	d00b      	beq.n	8006ed4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	4a34      	ldr	r2, [pc, #208]	@ (8006f94 <UART_AdvFeatureConfig+0x150>)
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	0019      	movs	r1, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed8:	2210      	movs	r2, #16
 8006eda:	4013      	ands	r3, r2
 8006edc:	d00b      	beq.n	8006ef6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	4a2c      	ldr	r2, [pc, #176]	@ (8006f98 <UART_AdvFeatureConfig+0x154>)
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	0019      	movs	r1, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efa:	2220      	movs	r2, #32
 8006efc:	4013      	ands	r3, r2
 8006efe:	d00b      	beq.n	8006f18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	4a25      	ldr	r2, [pc, #148]	@ (8006f9c <UART_AdvFeatureConfig+0x158>)
 8006f08:	4013      	ands	r3, r2
 8006f0a:	0019      	movs	r1, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1c:	2240      	movs	r2, #64	@ 0x40
 8006f1e:	4013      	ands	r3, r2
 8006f20:	d01d      	beq.n	8006f5e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	4a1d      	ldr	r2, [pc, #116]	@ (8006fa0 <UART_AdvFeatureConfig+0x15c>)
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	0019      	movs	r1, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f3e:	2380      	movs	r3, #128	@ 0x80
 8006f40:	035b      	lsls	r3, r3, #13
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d10b      	bne.n	8006f5e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	4a15      	ldr	r2, [pc, #84]	@ (8006fa4 <UART_AdvFeatureConfig+0x160>)
 8006f4e:	4013      	ands	r3, r2
 8006f50:	0019      	movs	r1, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f62:	2280      	movs	r2, #128	@ 0x80
 8006f64:	4013      	ands	r3, r2
 8006f66:	d00b      	beq.n	8006f80 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	4a0e      	ldr	r2, [pc, #56]	@ (8006fa8 <UART_AdvFeatureConfig+0x164>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	0019      	movs	r1, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	605a      	str	r2, [r3, #4]
  }
}
 8006f80:	46c0      	nop			@ (mov r8, r8)
 8006f82:	46bd      	mov	sp, r7
 8006f84:	b002      	add	sp, #8
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	ffff7fff 	.word	0xffff7fff
 8006f8c:	fffdffff 	.word	0xfffdffff
 8006f90:	fffeffff 	.word	0xfffeffff
 8006f94:	fffbffff 	.word	0xfffbffff
 8006f98:	ffffefff 	.word	0xffffefff
 8006f9c:	ffffdfff 	.word	0xffffdfff
 8006fa0:	ffefffff 	.word	0xffefffff
 8006fa4:	ff9fffff 	.word	0xff9fffff
 8006fa8:	fff7ffff 	.word	0xfff7ffff

08006fac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b092      	sub	sp, #72	@ 0x48
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2290      	movs	r2, #144	@ 0x90
 8006fb8:	2100      	movs	r1, #0
 8006fba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fbc:	f7fb fe46 	bl	8002c4c <HAL_GetTick>
 8006fc0:	0003      	movs	r3, r0
 8006fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2208      	movs	r2, #8
 8006fcc:	4013      	ands	r3, r2
 8006fce:	2b08      	cmp	r3, #8
 8006fd0:	d12d      	bne.n	800702e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fd4:	2280      	movs	r2, #128	@ 0x80
 8006fd6:	0391      	lsls	r1, r2, #14
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	4a47      	ldr	r2, [pc, #284]	@ (80070f8 <UART_CheckIdleState+0x14c>)
 8006fdc:	9200      	str	r2, [sp, #0]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f000 f88e 	bl	8007100 <UART_WaitOnFlagUntilTimeout>
 8006fe4:	1e03      	subs	r3, r0, #0
 8006fe6:	d022      	beq.n	800702e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8006fec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff8:	f383 8810 	msr	PRIMASK, r3
}
 8006ffc:	46c0      	nop			@ (mov r8, r8)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2180      	movs	r1, #128	@ 0x80
 800700a:	438a      	bics	r2, r1
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007014:	f383 8810 	msr	PRIMASK, r3
}
 8007018:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2288      	movs	r2, #136	@ 0x88
 800701e:	2120      	movs	r1, #32
 8007020:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2284      	movs	r2, #132	@ 0x84
 8007026:	2100      	movs	r1, #0
 8007028:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e060      	b.n	80070f0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2204      	movs	r2, #4
 8007036:	4013      	ands	r3, r2
 8007038:	2b04      	cmp	r3, #4
 800703a:	d146      	bne.n	80070ca <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800703c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800703e:	2280      	movs	r2, #128	@ 0x80
 8007040:	03d1      	lsls	r1, r2, #15
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	4a2c      	ldr	r2, [pc, #176]	@ (80070f8 <UART_CheckIdleState+0x14c>)
 8007046:	9200      	str	r2, [sp, #0]
 8007048:	2200      	movs	r2, #0
 800704a:	f000 f859 	bl	8007100 <UART_WaitOnFlagUntilTimeout>
 800704e:	1e03      	subs	r3, r0, #0
 8007050:	d03b      	beq.n	80070ca <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007052:	f3ef 8310 	mrs	r3, PRIMASK
 8007056:	60fb      	str	r3, [r7, #12]
  return(result);
 8007058:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800705a:	637b      	str	r3, [r7, #52]	@ 0x34
 800705c:	2301      	movs	r3, #1
 800705e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f383 8810 	msr	PRIMASK, r3
}
 8007066:	46c0      	nop			@ (mov r8, r8)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4922      	ldr	r1, [pc, #136]	@ (80070fc <UART_CheckIdleState+0x150>)
 8007074:	400a      	ands	r2, r1
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800707a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f383 8810 	msr	PRIMASK, r3
}
 8007082:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007084:	f3ef 8310 	mrs	r3, PRIMASK
 8007088:	61bb      	str	r3, [r7, #24]
  return(result);
 800708a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708c:	633b      	str	r3, [r7, #48]	@ 0x30
 800708e:	2301      	movs	r3, #1
 8007090:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	f383 8810 	msr	PRIMASK, r3
}
 8007098:	46c0      	nop			@ (mov r8, r8)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2101      	movs	r1, #1
 80070a6:	438a      	bics	r2, r1
 80070a8:	609a      	str	r2, [r3, #8]
 80070aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	f383 8810 	msr	PRIMASK, r3
}
 80070b4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	228c      	movs	r2, #140	@ 0x8c
 80070ba:	2120      	movs	r1, #32
 80070bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2284      	movs	r2, #132	@ 0x84
 80070c2:	2100      	movs	r1, #0
 80070c4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e012      	b.n	80070f0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2288      	movs	r2, #136	@ 0x88
 80070ce:	2120      	movs	r1, #32
 80070d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	228c      	movs	r2, #140	@ 0x8c
 80070d6:	2120      	movs	r1, #32
 80070d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2284      	movs	r2, #132	@ 0x84
 80070ea:	2100      	movs	r1, #0
 80070ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	0018      	movs	r0, r3
 80070f2:	46bd      	mov	sp, r7
 80070f4:	b010      	add	sp, #64	@ 0x40
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	01ffffff 	.word	0x01ffffff
 80070fc:	fffffedf 	.word	0xfffffedf

08007100 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	603b      	str	r3, [r7, #0]
 800710c:	1dfb      	adds	r3, r7, #7
 800710e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007110:	e051      	b.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	3301      	adds	r3, #1
 8007116:	d04e      	beq.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007118:	f7fb fd98 	bl	8002c4c <HAL_GetTick>
 800711c:	0002      	movs	r2, r0
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	429a      	cmp	r2, r3
 8007126:	d302      	bcc.n	800712e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e051      	b.n	80071d6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2204      	movs	r2, #4
 800713a:	4013      	ands	r3, r2
 800713c:	d03b      	beq.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2b80      	cmp	r3, #128	@ 0x80
 8007142:	d038      	beq.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2b40      	cmp	r3, #64	@ 0x40
 8007148:	d035      	beq.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	2208      	movs	r2, #8
 8007152:	4013      	ands	r3, r2
 8007154:	2b08      	cmp	r3, #8
 8007156:	d111      	bne.n	800717c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2208      	movs	r2, #8
 800715e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	0018      	movs	r0, r3
 8007164:	f000 f83c 	bl	80071e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2290      	movs	r2, #144	@ 0x90
 800716c:	2108      	movs	r1, #8
 800716e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2284      	movs	r2, #132	@ 0x84
 8007174:	2100      	movs	r1, #0
 8007176:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e02c      	b.n	80071d6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	69da      	ldr	r2, [r3, #28]
 8007182:	2380      	movs	r3, #128	@ 0x80
 8007184:	011b      	lsls	r3, r3, #4
 8007186:	401a      	ands	r2, r3
 8007188:	2380      	movs	r3, #128	@ 0x80
 800718a:	011b      	lsls	r3, r3, #4
 800718c:	429a      	cmp	r2, r3
 800718e:	d112      	bne.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2280      	movs	r2, #128	@ 0x80
 8007196:	0112      	lsls	r2, r2, #4
 8007198:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	0018      	movs	r0, r3
 800719e:	f000 f81f 	bl	80071e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2290      	movs	r2, #144	@ 0x90
 80071a6:	2120      	movs	r1, #32
 80071a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2284      	movs	r2, #132	@ 0x84
 80071ae:	2100      	movs	r1, #0
 80071b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e00f      	b.n	80071d6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	4013      	ands	r3, r2
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	425a      	negs	r2, r3
 80071c6:	4153      	adcs	r3, r2
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	001a      	movs	r2, r3
 80071cc:	1dfb      	adds	r3, r7, #7
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d09e      	beq.n	8007112 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	0018      	movs	r0, r3
 80071d8:	46bd      	mov	sp, r7
 80071da:	b004      	add	sp, #16
 80071dc:	bd80      	pop	{r7, pc}
	...

080071e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08e      	sub	sp, #56	@ 0x38
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80071e8:	f3ef 8310 	mrs	r3, PRIMASK
 80071ec:	617b      	str	r3, [r7, #20]
  return(result);
 80071ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80071f2:	2301      	movs	r3, #1
 80071f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	f383 8810 	msr	PRIMASK, r3
}
 80071fc:	46c0      	nop			@ (mov r8, r8)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4926      	ldr	r1, [pc, #152]	@ (80072a4 <UART_EndRxTransfer+0xc4>)
 800720a:	400a      	ands	r2, r1
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007210:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	f383 8810 	msr	PRIMASK, r3
}
 8007218:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800721a:	f3ef 8310 	mrs	r3, PRIMASK
 800721e:	623b      	str	r3, [r7, #32]
  return(result);
 8007220:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007222:	633b      	str	r3, [r7, #48]	@ 0x30
 8007224:	2301      	movs	r3, #1
 8007226:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722a:	f383 8810 	msr	PRIMASK, r3
}
 800722e:	46c0      	nop			@ (mov r8, r8)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689a      	ldr	r2, [r3, #8]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	491b      	ldr	r1, [pc, #108]	@ (80072a8 <UART_EndRxTransfer+0xc8>)
 800723c:	400a      	ands	r2, r1
 800723e:	609a      	str	r2, [r3, #8]
 8007240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007242:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007246:	f383 8810 	msr	PRIMASK, r3
}
 800724a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007250:	2b01      	cmp	r3, #1
 8007252:	d118      	bne.n	8007286 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007254:	f3ef 8310 	mrs	r3, PRIMASK
 8007258:	60bb      	str	r3, [r7, #8]
  return(result);
 800725a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800725c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800725e:	2301      	movs	r3, #1
 8007260:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f383 8810 	msr	PRIMASK, r3
}
 8007268:	46c0      	nop			@ (mov r8, r8)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2110      	movs	r1, #16
 8007276:	438a      	bics	r2, r1
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	f383 8810 	msr	PRIMASK, r3
}
 8007284:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	228c      	movs	r2, #140	@ 0x8c
 800728a:	2120      	movs	r1, #32
 800728c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800729a:	46c0      	nop			@ (mov r8, r8)
 800729c:	46bd      	mov	sp, r7
 800729e:	b00e      	add	sp, #56	@ 0x38
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	46c0      	nop			@ (mov r8, r8)
 80072a4:	fffffedf 	.word	0xfffffedf
 80072a8:	effffffe 	.word	0xeffffffe

080072ac <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e05d      	b.n	8007380 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2288      	movs	r2, #136	@ 0x88
 80072c8:	589b      	ldr	r3, [r3, r2]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d107      	bne.n	80072de <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2284      	movs	r2, #132	@ 0x84
 80072d2:	2100      	movs	r1, #0
 80072d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	0018      	movs	r0, r3
 80072da:	f7fa f989 	bl	80015f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2288      	movs	r2, #136	@ 0x88
 80072e2:	2124      	movs	r1, #36	@ 0x24
 80072e4:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2101      	movs	r1, #1
 80072f2:	438a      	bics	r2, r1
 80072f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	0018      	movs	r0, r3
 8007302:	f7ff fd9f 	bl	8006e44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	0018      	movs	r0, r3
 800730a:	f7ff fc1d 	bl	8006b48 <UART_SetConfig>
 800730e:	0003      	movs	r3, r0
 8007310:	2b01      	cmp	r3, #1
 8007312:	d101      	bne.n	8007318 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e033      	b.n	8007380 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689a      	ldr	r2, [r3, #8]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2180      	movs	r1, #128	@ 0x80
 8007324:	01c9      	lsls	r1, r1, #7
 8007326:	430a      	orrs	r2, r1
 8007328:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	4a15      	ldr	r2, [pc, #84]	@ (8007388 <HAL_RS485Ex_Init+0xdc>)
 8007332:	4013      	ands	r3, r2
 8007334:	0019      	movs	r1, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	430a      	orrs	r2, r1
 800733e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	055b      	lsls	r3, r3, #21
 8007344:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	041b      	lsls	r3, r3, #16
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	4313      	orrs	r3, r2
 800734e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a0d      	ldr	r2, [pc, #52]	@ (800738c <HAL_RS485Ex_Init+0xe0>)
 8007358:	4013      	ands	r3, r2
 800735a:	0019      	movs	r1, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	430a      	orrs	r2, r1
 8007364:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2101      	movs	r1, #1
 8007372:	430a      	orrs	r2, r1
 8007374:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	0018      	movs	r0, r3
 800737a:	f7ff fe17 	bl	8006fac <UART_CheckIdleState>
 800737e:	0003      	movs	r3, r0
}
 8007380:	0018      	movs	r0, r3
 8007382:	46bd      	mov	sp, r7
 8007384:	b006      	add	sp, #24
 8007386:	bd80      	pop	{r7, pc}
 8007388:	ffff7fff 	.word	0xffff7fff
 800738c:	fc00ffff 	.word	0xfc00ffff

08007390 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2284      	movs	r2, #132	@ 0x84
 800739c:	5c9b      	ldrb	r3, [r3, r2]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d101      	bne.n	80073a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80073a2:	2302      	movs	r3, #2
 80073a4:	e027      	b.n	80073f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2284      	movs	r2, #132	@ 0x84
 80073aa:	2101      	movs	r1, #1
 80073ac:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2288      	movs	r2, #136	@ 0x88
 80073b2:	2124      	movs	r1, #36	@ 0x24
 80073b4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2101      	movs	r1, #1
 80073ca:	438a      	bics	r2, r1
 80073cc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	4a0b      	ldr	r2, [pc, #44]	@ (8007400 <HAL_UARTEx_DisableFifoMode+0x70>)
 80073d2:	4013      	ands	r3, r2
 80073d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2288      	movs	r2, #136	@ 0x88
 80073e8:	2120      	movs	r1, #32
 80073ea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2284      	movs	r2, #132	@ 0x84
 80073f0:	2100      	movs	r1, #0
 80073f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	0018      	movs	r0, r3
 80073f8:	46bd      	mov	sp, r7
 80073fa:	b004      	add	sp, #16
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	46c0      	nop			@ (mov r8, r8)
 8007400:	dfffffff 	.word	0xdfffffff

08007404 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2284      	movs	r2, #132	@ 0x84
 8007412:	5c9b      	ldrb	r3, [r3, r2]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d101      	bne.n	800741c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007418:	2302      	movs	r3, #2
 800741a:	e02e      	b.n	800747a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2284      	movs	r2, #132	@ 0x84
 8007420:	2101      	movs	r1, #1
 8007422:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2288      	movs	r2, #136	@ 0x88
 8007428:	2124      	movs	r1, #36	@ 0x24
 800742a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2101      	movs	r1, #1
 8007440:	438a      	bics	r2, r1
 8007442:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	08d9      	lsrs	r1, r3, #3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	0018      	movs	r0, r3
 800745c:	f000 f854 	bl	8007508 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2288      	movs	r2, #136	@ 0x88
 800746c:	2120      	movs	r1, #32
 800746e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2284      	movs	r2, #132	@ 0x84
 8007474:	2100      	movs	r1, #0
 8007476:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	0018      	movs	r0, r3
 800747c:	46bd      	mov	sp, r7
 800747e:	b004      	add	sp, #16
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2284      	movs	r2, #132	@ 0x84
 8007492:	5c9b      	ldrb	r3, [r3, r2]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d101      	bne.n	800749c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007498:	2302      	movs	r3, #2
 800749a:	e02f      	b.n	80074fc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2284      	movs	r2, #132	@ 0x84
 80074a0:	2101      	movs	r1, #1
 80074a2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2288      	movs	r2, #136	@ 0x88
 80074a8:	2124      	movs	r1, #36	@ 0x24
 80074aa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2101      	movs	r1, #1
 80074c0:	438a      	bics	r2, r1
 80074c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007504 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80074cc:	4013      	ands	r3, r2
 80074ce:	0019      	movs	r1, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	0018      	movs	r0, r3
 80074de:	f000 f813 	bl	8007508 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2288      	movs	r2, #136	@ 0x88
 80074ee:	2120      	movs	r1, #32
 80074f0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2284      	movs	r2, #132	@ 0x84
 80074f6:	2100      	movs	r1, #0
 80074f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	0018      	movs	r0, r3
 80074fe:	46bd      	mov	sp, r7
 8007500:	b004      	add	sp, #16
 8007502:	bd80      	pop	{r7, pc}
 8007504:	f1ffffff 	.word	0xf1ffffff

08007508 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007514:	2b00      	cmp	r3, #0
 8007516:	d108      	bne.n	800752a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	226a      	movs	r2, #106	@ 0x6a
 800751c:	2101      	movs	r1, #1
 800751e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2268      	movs	r2, #104	@ 0x68
 8007524:	2101      	movs	r1, #1
 8007526:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007528:	e043      	b.n	80075b2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800752a:	260f      	movs	r6, #15
 800752c:	19bb      	adds	r3, r7, r6
 800752e:	2208      	movs	r2, #8
 8007530:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007532:	200e      	movs	r0, #14
 8007534:	183b      	adds	r3, r7, r0
 8007536:	2208      	movs	r2, #8
 8007538:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	0e5b      	lsrs	r3, r3, #25
 8007542:	b2da      	uxtb	r2, r3
 8007544:	240d      	movs	r4, #13
 8007546:	193b      	adds	r3, r7, r4
 8007548:	2107      	movs	r1, #7
 800754a:	400a      	ands	r2, r1
 800754c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	0f5b      	lsrs	r3, r3, #29
 8007556:	b2da      	uxtb	r2, r3
 8007558:	250c      	movs	r5, #12
 800755a:	197b      	adds	r3, r7, r5
 800755c:	2107      	movs	r1, #7
 800755e:	400a      	ands	r2, r1
 8007560:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007562:	183b      	adds	r3, r7, r0
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	197a      	adds	r2, r7, r5
 8007568:	7812      	ldrb	r2, [r2, #0]
 800756a:	4914      	ldr	r1, [pc, #80]	@ (80075bc <UARTEx_SetNbDataToProcess+0xb4>)
 800756c:	5c8a      	ldrb	r2, [r1, r2]
 800756e:	435a      	muls	r2, r3
 8007570:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007572:	197b      	adds	r3, r7, r5
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	4a12      	ldr	r2, [pc, #72]	@ (80075c0 <UARTEx_SetNbDataToProcess+0xb8>)
 8007578:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800757a:	0019      	movs	r1, r3
 800757c:	f7f8 fe4e 	bl	800021c <__divsi3>
 8007580:	0003      	movs	r3, r0
 8007582:	b299      	uxth	r1, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	226a      	movs	r2, #106	@ 0x6a
 8007588:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800758a:	19bb      	adds	r3, r7, r6
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	193a      	adds	r2, r7, r4
 8007590:	7812      	ldrb	r2, [r2, #0]
 8007592:	490a      	ldr	r1, [pc, #40]	@ (80075bc <UARTEx_SetNbDataToProcess+0xb4>)
 8007594:	5c8a      	ldrb	r2, [r1, r2]
 8007596:	435a      	muls	r2, r3
 8007598:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800759a:	193b      	adds	r3, r7, r4
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	4a08      	ldr	r2, [pc, #32]	@ (80075c0 <UARTEx_SetNbDataToProcess+0xb8>)
 80075a0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075a2:	0019      	movs	r1, r3
 80075a4:	f7f8 fe3a 	bl	800021c <__divsi3>
 80075a8:	0003      	movs	r3, r0
 80075aa:	b299      	uxth	r1, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2268      	movs	r2, #104	@ 0x68
 80075b0:	5299      	strh	r1, [r3, r2]
}
 80075b2:	46c0      	nop			@ (mov r8, r8)
 80075b4:	46bd      	mov	sp, r7
 80075b6:	b005      	add	sp, #20
 80075b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ba:	46c0      	nop			@ (mov r8, r8)
 80075bc:	080076c0 	.word	0x080076c0
 80075c0:	080076c8 	.word	0x080076c8

080075c4 <memset>:
 80075c4:	0003      	movs	r3, r0
 80075c6:	1882      	adds	r2, r0, r2
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d100      	bne.n	80075ce <memset+0xa>
 80075cc:	4770      	bx	lr
 80075ce:	7019      	strb	r1, [r3, #0]
 80075d0:	3301      	adds	r3, #1
 80075d2:	e7f9      	b.n	80075c8 <memset+0x4>

080075d4 <__libc_init_array>:
 80075d4:	b570      	push	{r4, r5, r6, lr}
 80075d6:	2600      	movs	r6, #0
 80075d8:	4c0c      	ldr	r4, [pc, #48]	@ (800760c <__libc_init_array+0x38>)
 80075da:	4d0d      	ldr	r5, [pc, #52]	@ (8007610 <__libc_init_array+0x3c>)
 80075dc:	1b64      	subs	r4, r4, r5
 80075de:	10a4      	asrs	r4, r4, #2
 80075e0:	42a6      	cmp	r6, r4
 80075e2:	d109      	bne.n	80075f8 <__libc_init_array+0x24>
 80075e4:	2600      	movs	r6, #0
 80075e6:	f000 f823 	bl	8007630 <_init>
 80075ea:	4c0a      	ldr	r4, [pc, #40]	@ (8007614 <__libc_init_array+0x40>)
 80075ec:	4d0a      	ldr	r5, [pc, #40]	@ (8007618 <__libc_init_array+0x44>)
 80075ee:	1b64      	subs	r4, r4, r5
 80075f0:	10a4      	asrs	r4, r4, #2
 80075f2:	42a6      	cmp	r6, r4
 80075f4:	d105      	bne.n	8007602 <__libc_init_array+0x2e>
 80075f6:	bd70      	pop	{r4, r5, r6, pc}
 80075f8:	00b3      	lsls	r3, r6, #2
 80075fa:	58eb      	ldr	r3, [r5, r3]
 80075fc:	4798      	blx	r3
 80075fe:	3601      	adds	r6, #1
 8007600:	e7ee      	b.n	80075e0 <__libc_init_array+0xc>
 8007602:	00b3      	lsls	r3, r6, #2
 8007604:	58eb      	ldr	r3, [r5, r3]
 8007606:	4798      	blx	r3
 8007608:	3601      	adds	r6, #1
 800760a:	e7f2      	b.n	80075f2 <__libc_init_array+0x1e>
 800760c:	080076d0 	.word	0x080076d0
 8007610:	080076d0 	.word	0x080076d0
 8007614:	080076d4 	.word	0x080076d4
 8007618:	080076d0 	.word	0x080076d0

0800761c <memcpy>:
 800761c:	2300      	movs	r3, #0
 800761e:	b510      	push	{r4, lr}
 8007620:	429a      	cmp	r2, r3
 8007622:	d100      	bne.n	8007626 <memcpy+0xa>
 8007624:	bd10      	pop	{r4, pc}
 8007626:	5ccc      	ldrb	r4, [r1, r3]
 8007628:	54c4      	strb	r4, [r0, r3]
 800762a:	3301      	adds	r3, #1
 800762c:	e7f8      	b.n	8007620 <memcpy+0x4>
	...

08007630 <_init>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	46c0      	nop			@ (mov r8, r8)
 8007634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007636:	bc08      	pop	{r3}
 8007638:	469e      	mov	lr, r3
 800763a:	4770      	bx	lr

0800763c <_fini>:
 800763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763e:	46c0      	nop			@ (mov r8, r8)
 8007640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007642:	bc08      	pop	{r3}
 8007644:	469e      	mov	lr, r3
 8007646:	4770      	bx	lr
